/* This file was generated by PyBindGen 0.17.0.886 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#ifndef PyVarObject_HEAD_INIT
#define PyVarObject_HEAD_INIT(type, size) \
        PyObject_HEAD_INIT(type) size,
#endif


#if PY_VERSION_HEX >= 0x03000000
typedef void* cmpfunc;
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif


#include "ns3/dce-module.h"
#include "ns3/dce-manager-helper.h"
#include "ns3/dce-application.h"
#include "ns3/ipv4-dce-routing-helper.h"
#include <typeinfo>
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::AttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeValue;


extern PyTypeObject *_PyNs3AttributeValue_Type;
#define PyNs3AttributeValue_Type (*_PyNs3AttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Object *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Object;


extern PyTypeObject *_PyNs3Object_Type;
#define PyNs3Object_Type (*_PyNs3Object_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeValue;


extern PyTypeObject *_PyNs3EmptyAttributeValue_Type;
#define PyNs3EmptyAttributeValue_Type (*_PyNs3EmptyAttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Application *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Application;


extern PyTypeObject *_PyNs3Application_Type;
#define PyNs3Application_Type (*_PyNs3Application_Type)


typedef struct {
    PyObject_HEAD
    ns3::ApplicationContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ApplicationContainer;


extern PyTypeObject *_PyNs3ApplicationContainer_Type;
#define PyNs3ApplicationContainer_Type (*_PyNs3ApplicationContainer_Type)


typedef struct {
    PyObject_HEAD
    ns3::Node *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Node;


extern PyTypeObject *_PyNs3Node_Type;
#define PyNs3Node_Type (*_PyNs3Node_Type)


typedef struct {
    PyObject_HEAD
    ns3::NodeContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NodeContainer;


extern PyTypeObject *_PyNs3NodeContainer_Type;
#define PyNs3NodeContainer_Type (*_PyNs3NodeContainer_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4RoutingProtocol *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4RoutingProtocol;


extern PyTypeObject *_PyNs3Ipv4RoutingProtocol_Type;
#define PyNs3Ipv4RoutingProtocol_Type (*_PyNs3Ipv4RoutingProtocol_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4StaticRoutingHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4StaticRoutingHelper;


extern PyTypeObject *_PyNs3Ipv4StaticRoutingHelper_Type;
#define PyNs3Ipv4StaticRoutingHelper_Type (*_PyNs3Ipv4StaticRoutingHelper_Type)


typedef struct {
    PyObject_HEAD
    ns3::Time *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Time;


extern PyTypeObject *_PyNs3Time_Type;
#define PyNs3Time_Type (*_PyNs3Time_Type)


typedef struct {
    PyObject_HEAD
    ns3::DceApplication *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DceApplication;


extern PyTypeObject PyNs3DceApplication_Type;


typedef struct {
    PyObject_HEAD
    ns3::DceApplicationHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DceApplicationHelper;


extern PyTypeObject PyNs3DceApplicationHelper_Type;

class PyNs3DceApplicationHelper__PythonHelper : public ns3::DceApplicationHelper
{
public:
    PyObject *m_pyself;
    PyNs3DceApplicationHelper__PythonHelper(ns3::DceApplicationHelper const & arg0)
        : ns3::DceApplicationHelper(arg0), m_pyself(NULL)
        {}

    PyNs3DceApplicationHelper__PythonHelper()
        : ns3::DceApplicationHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DceApplicationHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::ApplicationContainer Install(ns3::NodeContainer c);

    virtual uint16_t GetPid(ns3::Application *app);
};


typedef struct {
    PyObject_HEAD
    ns3::ProcStatus *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ProcStatus;


extern PyTypeObject PyNs3ProcStatus_Type;


typedef struct {
    PyObject_HEAD
    ns3::DceManagerHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DceManagerHelper;


extern PyTypeObject PyNs3DceManagerHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4DceRoutingHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4DceRoutingHelper;


extern PyTypeObject PyNs3Ipv4DceRoutingHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::LinuxStackHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LinuxStackHelper;


extern PyTypeObject PyNs3LinuxStackHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::CcnClientHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CcnClientHelper;


extern PyTypeObject PyNs3CcnClientHelper_Type;

class PyNs3CcnClientHelper__PythonHelper : public ns3::CcnClientHelper
{
public:
    PyObject *m_pyself;
    PyNs3CcnClientHelper__PythonHelper(ns3::CcnClientHelper const & arg0)
        : ns3::CcnClientHelper(arg0), m_pyself(NULL)
        {}

    PyNs3CcnClientHelper__PythonHelper()
        : ns3::CcnClientHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3CcnClientHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::ApplicationContainer Install(ns3::NodeContainer c);

    virtual uint16_t GetPid(ns3::Application *app);
};


typedef struct {
    PyObject_HEAD
    std::vector< std::string > *obj;
} Pystd__vector__lt___std__string___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___std__string___gt__ *container;
    std::vector< std::string >::iterator *iterator;
} Pystd__vector__lt___std__string___gt__Iter;


extern PyTypeObject Pystd__vector__lt___std__string___gt___Type;
extern PyTypeObject Pystd__vector__lt___std__string___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___std__string___gt__(PyObject *arg, std::vector< std::string > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::ProcStatus > *obj;
} Pystd__vector__lt___ns3__ProcStatus___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__ProcStatus___gt__ *container;
    std::vector< ns3::ProcStatus >::iterator *iterator;
} Pystd__vector__lt___ns3__ProcStatus___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__ProcStatus___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__ProcStatus___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__ProcStatus___gt__(PyObject *arg, std::vector< ns3::ProcStatus > *container);

int _wrap_convert_py2c__std__string(PyObject *value, std::string *address);


int _wrap_convert_py2c__ns3__ProcStatus(PyObject *value, ns3::ProcStatus *address);

static PyMethodDef dce_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyNs3AttributeValue_Type;


PyTypeObject *_PyNs3Object_Type;


PyTypeObject *_PyNs3EmptyAttributeValue_Type;


PyTypeObject *_PyNs3Application_Type;


PyTypeObject *_PyNs3ApplicationContainer_Type;


PyTypeObject *_PyNs3Node_Type;


PyTypeObject *_PyNs3NodeContainer_Type;


PyTypeObject *_PyNs3Ipv4RoutingProtocol_Type;


PyTypeObject *_PyNs3Ipv4StaticRoutingHelper_Type;


PyTypeObject *_PyNs3Time_Type;




static int
_wrap_PyNs3DceApplication__tp_init__0(PyNs3DceApplication *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DceApplication *arg0;
    const char *keywords[] = {"arg0", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DceApplication_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DceApplication(*((PyNs3DceApplication *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DceApplication__tp_init__1(PyNs3DceApplication *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DceApplication();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DceApplication__tp_init(PyNs3DceApplication *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DceApplication__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DceApplication__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DceApplication_SetUid(PyNs3DceApplication *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int i;
    const char *keywords[] = {"i", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &i)) {
        return NULL;
    }
    self->obj->SetUid(i);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplication_SetEgid(PyNs3DceApplication *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int i;
    const char *keywords[] = {"i", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &i)) {
        return NULL;
    }
    self->obj->SetEgid(i);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplication_SetEuid(PyNs3DceApplication *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int i;
    const char *keywords[] = {"i", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &i)) {
        return NULL;
    }
    self->obj->SetEuid(i);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplication_SetStdinFile(PyNs3DceApplication *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *filename;
    Py_ssize_t filename_len;
    const char *keywords[] = {"filename", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &filename, &filename_len)) {
        return NULL;
    }
    self->obj->SetStdinFile(std::string(filename, filename_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplication_SetBinary(PyNs3DceApplication *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *filename;
    Py_ssize_t filename_len;
    const char *keywords[] = {"filename", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &filename, &filename_len)) {
        return NULL;
    }
    self->obj->SetBinary(std::string(filename, filename_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplication_SetArguments(PyNs3DceApplication *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector< std::string > args_value;
    const char *keywords[] = {"args", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___std__string___gt__, &args_value)) {
        return NULL;
    }
    self->obj->SetArguments(args_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplication_GetPid(PyNs3DceApplication *self)
{
    PyObject *py_retval;
    uint16_t retval;

    retval = self->obj->GetPid();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplication_SetGid(PyNs3DceApplication *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int i;
    const char *keywords[] = {"i", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &i)) {
        return NULL;
    }
    self->obj->SetGid(i);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplication_SetStackSize(PyNs3DceApplication *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int stackSize;
    const char *keywords[] = {"stackSize", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &stackSize)) {
        return NULL;
    }
    self->obj->SetStackSize(stackSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DceApplication__copy__(PyNs3DceApplication *self)
{

    PyNs3DceApplication *py_copy;
    py_copy = PyObject_New(PyNs3DceApplication, &PyNs3DceApplication_Type);
    py_copy->obj = new ns3::DceApplication(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DceApplication_methods[] = {
    {(char *) "SetUid", (PyCFunction) _wrap_PyNs3DceApplication_SetUid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetEgid", (PyCFunction) _wrap_PyNs3DceApplication_SetEgid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetEuid", (PyCFunction) _wrap_PyNs3DceApplication_SetEuid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetStdinFile", (PyCFunction) _wrap_PyNs3DceApplication_SetStdinFile, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetBinary", (PyCFunction) _wrap_PyNs3DceApplication_SetBinary, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetArguments", (PyCFunction) _wrap_PyNs3DceApplication_SetArguments, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetPid", (PyCFunction) _wrap_PyNs3DceApplication_GetPid, METH_NOARGS, NULL },
    {(char *) "SetGid", (PyCFunction) _wrap_PyNs3DceApplication_SetGid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetStackSize", (PyCFunction) _wrap_PyNs3DceApplication_SetStackSize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DceApplication__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DceApplication__tp_dealloc(PyNs3DceApplication *self)
{
        ns3::DceApplication *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DceApplication__tp_richcompare (PyNs3DceApplication *PYBINDGEN_UNUSED(self), PyNs3DceApplication *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DceApplication_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DceApplication_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dce.DceApplication",            /* tp_name */
    sizeof(PyNs3DceApplication),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DceApplication__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DceApplication__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DceApplication_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DceApplication__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




ns3::ApplicationContainer
PyNs3DceApplicationHelper__PythonHelper::Install(ns3::NodeContainer c)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DceApplicationHelper *self_obj_before;
    PyObject *py_retval;
    PyNs3NodeContainer *py_NodeContainer;
    PyNs3ApplicationContainer *tmp_ApplicationContainer;

    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Install"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DceApplicationHelper::Install(c);
    }
    self_obj_before = reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj = (ns3::DceApplicationHelper*) this;
    py_NodeContainer = PyObject_New(PyNs3NodeContainer, &PyNs3NodeContainer_Type);
    py_NodeContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_NodeContainer->obj = new ns3::NodeContainer(c);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Install", (char *) "N", py_NodeContainer);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DceApplicationHelper::Install(c);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3ApplicationContainer_Type, &tmp_ApplicationContainer)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DceApplicationHelper::Install(c);
    }
    ns3::ApplicationContainer retval = *tmp_ApplicationContainer->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint16_t
PyNs3DceApplicationHelper__PythonHelper::GetPid(ns3::Application *app)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DceApplicationHelper *self_obj_before;
    PyObject *py_retval;
    uint16_t retval;
    PyNs3Application *py_Application;
    int tmp;

    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DceApplicationHelper::GetPid(app);
    }
    self_obj_before = reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj = (ns3::DceApplicationHelper*) this;
    py_Application = PyObject_New(PyNs3Application, &PyNs3Application_Type);
    py_Application->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Application->obj = new ns3::Application(*app);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPid", (char *) "N", py_Application);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DceApplicationHelper::GetPid(app);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DceApplicationHelper::GetPid(app);
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DceApplicationHelper::GetPid(app);
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


static int
_wrap_PyNs3DceApplicationHelper__tp_init__0(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DceApplicationHelper *arg0;
    const char *keywords[] = {"arg0", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DceApplicationHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DceApplicationHelper_Type)
    {
        self->obj = new PyNs3DceApplicationHelper__PythonHelper(*((PyNs3DceApplicationHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DceApplicationHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::DceApplicationHelper(*((PyNs3DceApplicationHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

static int
_wrap_PyNs3DceApplicationHelper__tp_init__1(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DceApplicationHelper_Type)
    {
        self->obj = new PyNs3DceApplicationHelper__PythonHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DceApplicationHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::DceApplicationHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

int _wrap_PyNs3DceApplicationHelper__tp_init(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DceApplicationHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DceApplicationHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DceApplicationHelper_SetUid(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int i;
    const char *keywords[] = {"i", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &i)) {
        return NULL;
    }
    self->obj->SetUid(i);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplicationHelper_ParseArguments(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *args2;
    Py_ssize_t args_len;
    const char *keywords[] = {"args", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &args2, &args_len)) {
        return NULL;
    }
    self->obj->ParseArguments(std::string(args2, args_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplicationHelper_SetEuid(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int i;
    const char *keywords[] = {"i", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &i)) {
        return NULL;
    }
    self->obj->SetEuid(i);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplicationHelper_SetGid(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int i;
    const char *keywords[] = {"i", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &i)) {
        return NULL;
    }
    self->obj->SetGid(i);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplicationHelper_ResetEnvironment(PyNs3DceApplicationHelper *self)
{
    PyObject *py_retval;

    self->obj->ResetEnvironment();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplicationHelper_InstallInNode(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *keywords[] = {"node", NULL};
    PyNs3ApplicationContainer *py_ApplicationContainer;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    ns3::ApplicationContainer retval = self->obj->InstallInNode(node_ptr);
    py_ApplicationContainer = PyObject_New(PyNs3ApplicationContainer, &PyNs3ApplicationContainer_Type);
    py_ApplicationContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ApplicationContainer->obj = new ns3::ApplicationContainer(retval);
    py_retval = Py_BuildValue((char *) "N", py_ApplicationContainer);
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplicationHelper_SetBinary(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *filename;
    Py_ssize_t filename_len;
    const char *keywords[] = {"filename", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &filename, &filename_len)) {
        return NULL;
    }
    self->obj->SetBinary(std::string(filename, filename_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3DceApplicationHelper_AddArguments__0(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *a0;
    Py_ssize_t a0_len;
    const char *a1;
    Py_ssize_t a1_len;
    const char *keywords[] = {"a0", "a1", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#", (char **) keywords, &a0, &a0_len, &a1, &a1_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->AddArguments(std::string(a0, a0_len), std::string(a1, a1_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3DceApplicationHelper_AddArguments__1(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *a0;
    Py_ssize_t a0_len;
    const char *a1;
    Py_ssize_t a1_len;
    const char *a2;
    Py_ssize_t a2_len;
    const char *keywords[] = {"a0", "a1", "a2", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#s#", (char **) keywords, &a0, &a0_len, &a1, &a1_len, &a2, &a2_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->AddArguments(std::string(a0, a0_len), std::string(a1, a1_len), std::string(a2, a2_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3DceApplicationHelper_AddArguments__2(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *a0;
    Py_ssize_t a0_len;
    const char *a1;
    Py_ssize_t a1_len;
    const char *a2;
    Py_ssize_t a2_len;
    const char *a3;
    Py_ssize_t a3_len;
    const char *keywords[] = {"a0", "a1", "a2", "a3", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#s#s#", (char **) keywords, &a0, &a0_len, &a1, &a1_len, &a2, &a2_len, &a3, &a3_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->AddArguments(std::string(a0, a0_len), std::string(a1, a1_len), std::string(a2, a2_len), std::string(a3, a3_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3DceApplicationHelper_AddArguments__3(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *a0;
    Py_ssize_t a0_len;
    const char *a1;
    Py_ssize_t a1_len;
    const char *a2;
    Py_ssize_t a2_len;
    const char *a3;
    Py_ssize_t a3_len;
    const char *a4;
    Py_ssize_t a4_len;
    const char *keywords[] = {"a0", "a1", "a2", "a3", "a4", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#s#s#s#", (char **) keywords, &a0, &a0_len, &a1, &a1_len, &a2, &a2_len, &a3, &a3_len, &a4, &a4_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->AddArguments(std::string(a0, a0_len), std::string(a1, a1_len), std::string(a2, a2_len), std::string(a3, a3_len), std::string(a4, a4_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3DceApplicationHelper_AddArguments__4(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *a0;
    Py_ssize_t a0_len;
    const char *a1;
    Py_ssize_t a1_len;
    const char *a2;
    Py_ssize_t a2_len;
    const char *a3;
    Py_ssize_t a3_len;
    const char *a4;
    Py_ssize_t a4_len;
    const char *a5;
    Py_ssize_t a5_len;
    const char *keywords[] = {"a0", "a1", "a2", "a3", "a4", "a5", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#s#s#s#s#", (char **) keywords, &a0, &a0_len, &a1, &a1_len, &a2, &a2_len, &a3, &a3_len, &a4, &a4_len, &a5, &a5_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->AddArguments(std::string(a0, a0_len), std::string(a1, a1_len), std::string(a2, a2_len), std::string(a3, a3_len), std::string(a4, a4_len), std::string(a5, a5_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3DceApplicationHelper_AddArguments__5(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *a0;
    Py_ssize_t a0_len;
    const char *a1;
    Py_ssize_t a1_len;
    const char *a2;
    Py_ssize_t a2_len;
    const char *a3;
    Py_ssize_t a3_len;
    const char *a4;
    Py_ssize_t a4_len;
    const char *a5;
    Py_ssize_t a5_len;
    const char *a6;
    Py_ssize_t a6_len;
    const char *keywords[] = {"a0", "a1", "a2", "a3", "a4", "a5", "a6", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#s#s#s#s#s#", (char **) keywords, &a0, &a0_len, &a1, &a1_len, &a2, &a2_len, &a3, &a3_len, &a4, &a4_len, &a5, &a5_len, &a6, &a6_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->AddArguments(std::string(a0, a0_len), std::string(a1, a1_len), std::string(a2, a2_len), std::string(a3, a3_len), std::string(a4, a4_len), std::string(a5, a5_len), std::string(a6, a6_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3DceApplicationHelper_AddArguments__6(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *a0;
    Py_ssize_t a0_len;
    const char *a1;
    Py_ssize_t a1_len;
    const char *a2;
    Py_ssize_t a2_len;
    const char *a3;
    Py_ssize_t a3_len;
    const char *a4;
    Py_ssize_t a4_len;
    const char *a5;
    Py_ssize_t a5_len;
    const char *a6;
    Py_ssize_t a6_len;
    const char *a7;
    Py_ssize_t a7_len;
    const char *keywords[] = {"a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#s#s#s#s#s#s#", (char **) keywords, &a0, &a0_len, &a1, &a1_len, &a2, &a2_len, &a3, &a3_len, &a4, &a4_len, &a5, &a5_len, &a6, &a6_len, &a7, &a7_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->AddArguments(std::string(a0, a0_len), std::string(a1, a1_len), std::string(a2, a2_len), std::string(a3, a3_len), std::string(a4, a4_len), std::string(a5, a5_len), std::string(a6, a6_len), std::string(a7, a7_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3DceApplicationHelper_AddArguments(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[7] = {0,};
    retval = _wrap_PyNs3DceApplicationHelper_AddArguments__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DceApplicationHelper_AddArguments__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3DceApplicationHelper_AddArguments__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3DceApplicationHelper_AddArguments__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyNs3DceApplicationHelper_AddArguments__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    retval = _wrap_PyNs3DceApplicationHelper_AddArguments__5(self, args, kwargs, &exceptions[5]);
    if (!exceptions[5]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        return retval;
    }
    retval = _wrap_PyNs3DceApplicationHelper_AddArguments__6(self, args, kwargs, &exceptions[6]);
    if (!exceptions[6]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        return retval;
    }
    error_list = PyList_New(7);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyList_SET_ITEM(error_list, 5, PyObject_Str(exceptions[5]));
    Py_DECREF(exceptions[5]);
    PyList_SET_ITEM(error_list, 6, PyObject_Str(exceptions[6]));
    Py_DECREF(exceptions[6]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3DceApplicationHelper_SetEgid(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int i;
    const char *keywords[] = {"i", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &i)) {
        return NULL;
    }
    self->obj->SetEgid(i);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplicationHelper_ResetArguments(PyNs3DceApplicationHelper *self)
{
    PyObject *py_retval;

    self->obj->ResetArguments();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplicationHelper_GetPid(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint16_t retval;
    PyNs3Application *app;
    ns3::Application *app_ptr;
    PyNs3DceApplicationHelper__PythonHelper *helper_class = dynamic_cast<PyNs3DceApplicationHelper__PythonHelper*> (self->obj);
    const char *keywords[] = {"app", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Application_Type, &app)) {
        return NULL;
    }
    app_ptr = (app ? app->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->GetPid(app_ptr)) : (self->obj->ns3::DceApplicationHelper::GetPid(app_ptr));
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplicationHelper_Install(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NodeContainer *c;
    PyNs3DceApplicationHelper__PythonHelper *helper_class = dynamic_cast<PyNs3DceApplicationHelper__PythonHelper*> (self->obj);
    const char *keywords[] = {"c", NULL};
    PyNs3ApplicationContainer *py_ApplicationContainer;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NodeContainer_Type, &c)) {
        return NULL;
    }
    ns3::ApplicationContainer retval = (helper_class == NULL)? (self->obj->Install(*((PyNs3NodeContainer *) c)->obj)) : (self->obj->ns3::DceApplicationHelper::Install(*((PyNs3NodeContainer *) c)->obj));
    py_ApplicationContainer = PyObject_New(PyNs3ApplicationContainer, &PyNs3ApplicationContainer_Type);
    py_ApplicationContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ApplicationContainer->obj = new ns3::ApplicationContainer(retval);
    py_retval = Py_BuildValue((char *) "N", py_ApplicationContainer);
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplicationHelper_SetStdinFile(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *filename;
    Py_ssize_t filename_len;
    const char *keywords[] = {"filename", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &filename, &filename_len)) {
        return NULL;
    }
    self->obj->SetStdinFile(std::string(filename, filename_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplicationHelper_AddEnvironment(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    const char *value;
    Py_ssize_t value_len;
    const char *keywords[] = {"name", "value", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#", (char **) keywords, &name, &name_len, &value, &value_len)) {
        return NULL;
    }
    self->obj->AddEnvironment(std::string(name, name_len), std::string(value, value_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplicationHelper_AddArgument(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *arg;
    Py_ssize_t arg_len;
    const char *keywords[] = {"arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &arg, &arg_len)) {
        return NULL;
    }
    self->obj->AddArgument(std::string(arg, arg_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceApplicationHelper_SetStackSize(PyNs3DceApplicationHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int stackSize;
    const char *keywords[] = {"stackSize", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &stackSize)) {
        return NULL;
    }
    self->obj->SetStackSize(stackSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DceApplicationHelper__copy__(PyNs3DceApplicationHelper *self)
{

    PyNs3DceApplicationHelper *py_copy;
    py_copy = PyObject_GC_New(PyNs3DceApplicationHelper, &PyNs3DceApplicationHelper_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::DceApplicationHelper(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DceApplicationHelper_methods[] = {
    {(char *) "SetUid", (PyCFunction) _wrap_PyNs3DceApplicationHelper_SetUid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ParseArguments", (PyCFunction) _wrap_PyNs3DceApplicationHelper_ParseArguments, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetEuid", (PyCFunction) _wrap_PyNs3DceApplicationHelper_SetEuid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetGid", (PyCFunction) _wrap_PyNs3DceApplicationHelper_SetGid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ResetEnvironment", (PyCFunction) _wrap_PyNs3DceApplicationHelper_ResetEnvironment, METH_NOARGS, NULL },
    {(char *) "InstallInNode", (PyCFunction) _wrap_PyNs3DceApplicationHelper_InstallInNode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetBinary", (PyCFunction) _wrap_PyNs3DceApplicationHelper_SetBinary, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AddArguments", (PyCFunction) _wrap_PyNs3DceApplicationHelper_AddArguments, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetEgid", (PyCFunction) _wrap_PyNs3DceApplicationHelper_SetEgid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ResetArguments", (PyCFunction) _wrap_PyNs3DceApplicationHelper_ResetArguments, METH_NOARGS, NULL },
    {(char *) "GetPid", (PyCFunction) _wrap_PyNs3DceApplicationHelper_GetPid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3DceApplicationHelper_Install, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetStdinFile", (PyCFunction) _wrap_PyNs3DceApplicationHelper_SetStdinFile, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AddEnvironment", (PyCFunction) _wrap_PyNs3DceApplicationHelper_AddEnvironment, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AddArgument", (PyCFunction) _wrap_PyNs3DceApplicationHelper_AddArgument, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetStackSize", (PyCFunction) _wrap_PyNs3DceApplicationHelper_SetStackSize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DceApplicationHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DceApplicationHelper__tp_clear(PyNs3DceApplicationHelper *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::DceApplicationHelper *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DceApplicationHelper__tp_traverse(PyNs3DceApplicationHelper *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);

    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3DceApplicationHelper__PythonHelper).name() )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3DceApplicationHelper__tp_dealloc(PyNs3DceApplicationHelper *self)
{
    PyNs3DceApplicationHelper__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DceApplicationHelper__tp_richcompare (PyNs3DceApplicationHelper *PYBINDGEN_UNUSED(self), PyNs3DceApplicationHelper *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DceApplicationHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DceApplicationHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dce.DceApplicationHelper",            /* tp_name */
    sizeof(PyNs3DceApplicationHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DceApplicationHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3DceApplicationHelper__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DceApplicationHelper__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DceApplicationHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DceApplicationHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DceApplicationHelper, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DceApplicationHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3ProcStatus__tp_init__0(PyNs3ProcStatus *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ProcStatus *arg0;
    const char *keywords[] = {"arg0", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ProcStatus_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ProcStatus(*((PyNs3ProcStatus *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ProcStatus__tp_init__1(PyNs3ProcStatus *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ProcStatus();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ProcStatus__tp_init__2(PyNs3ProcStatus *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int n;
    int e;
    int p;
    int64_t ns;
    int64_t ne;
    long int rs;
    long int re;
    double nd;
    long int rd;
    const char *cmd;
    Py_ssize_t cmd_len;
    const char *keywords[] = {"n", "e", "p", "ns", "ne", "rs", "re", "nd", "rd", "cmd", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iiiLLlldls#", (char **) keywords, &n, &e, &p, &ns, &ne, &rs, &re, &nd, &rd, &cmd, &cmd_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ProcStatus(n, e, p, ns, ne, rs, re, nd, rd, std::string(cmd, cmd_len));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3ProcStatus__tp_init(PyNs3ProcStatus *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3ProcStatus__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ProcStatus__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3ProcStatus__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ProcStatus_GetSimulatedEndTime(PyNs3ProcStatus *self)
{
    PyObject *py_retval;
    int64_t retval;

    retval = self->obj->GetSimulatedEndTime();
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ProcStatus_GetSimulatedStartTime(PyNs3ProcStatus *self)
{
    PyObject *py_retval;
    int64_t retval;

    retval = self->obj->GetSimulatedStartTime();
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ProcStatus_GetRealStartTime(PyNs3ProcStatus *self)
{
    PyObject *py_retval;
    long int retval;

    retval = self->obj->GetRealStartTime();
    py_retval = Py_BuildValue((char *) "l", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ProcStatus_GetCmdLine(PyNs3ProcStatus *self)
{
    PyObject *py_retval;
    std::string retval;

    retval = self->obj->GetCmdLine();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3ProcStatus_GetSimulatedDuration(PyNs3ProcStatus *self)
{
    PyObject *py_retval;
    double retval;

    retval = self->obj->GetSimulatedDuration();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ProcStatus_GetPid(PyNs3ProcStatus *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->GetPid();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ProcStatus_GetRealDuration(PyNs3ProcStatus *self)
{
    PyObject *py_retval;
    long int retval;

    retval = self->obj->GetRealDuration();
    py_retval = Py_BuildValue((char *) "l", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ProcStatus_GetExitCode(PyNs3ProcStatus *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->GetExitCode();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ProcStatus_GetRealEndTime(PyNs3ProcStatus *self)
{
    PyObject *py_retval;
    long int retval;

    retval = self->obj->GetRealEndTime();
    py_retval = Py_BuildValue((char *) "l", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ProcStatus_GetNode(PyNs3ProcStatus *self)
{
    PyObject *py_retval;
    int retval;

    retval = self->obj->GetNode();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3ProcStatus__copy__(PyNs3ProcStatus *self)
{

    PyNs3ProcStatus *py_copy;
    py_copy = PyObject_New(PyNs3ProcStatus, &PyNs3ProcStatus_Type);
    py_copy->obj = new ns3::ProcStatus(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ProcStatus_methods[] = {
    {(char *) "GetSimulatedEndTime", (PyCFunction) _wrap_PyNs3ProcStatus_GetSimulatedEndTime, METH_NOARGS, NULL },
    {(char *) "GetSimulatedStartTime", (PyCFunction) _wrap_PyNs3ProcStatus_GetSimulatedStartTime, METH_NOARGS, NULL },
    {(char *) "GetRealStartTime", (PyCFunction) _wrap_PyNs3ProcStatus_GetRealStartTime, METH_NOARGS, NULL },
    {(char *) "GetCmdLine", (PyCFunction) _wrap_PyNs3ProcStatus_GetCmdLine, METH_NOARGS, NULL },
    {(char *) "GetSimulatedDuration", (PyCFunction) _wrap_PyNs3ProcStatus_GetSimulatedDuration, METH_NOARGS, NULL },
    {(char *) "GetPid", (PyCFunction) _wrap_PyNs3ProcStatus_GetPid, METH_NOARGS, NULL },
    {(char *) "GetRealDuration", (PyCFunction) _wrap_PyNs3ProcStatus_GetRealDuration, METH_NOARGS, NULL },
    {(char *) "GetExitCode", (PyCFunction) _wrap_PyNs3ProcStatus_GetExitCode, METH_NOARGS, NULL },
    {(char *) "GetRealEndTime", (PyCFunction) _wrap_PyNs3ProcStatus_GetRealEndTime, METH_NOARGS, NULL },
    {(char *) "GetNode", (PyCFunction) _wrap_PyNs3ProcStatus_GetNode, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ProcStatus__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3ProcStatus__tp_dealloc(PyNs3ProcStatus *self)
{
        ns3::ProcStatus *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ProcStatus__tp_richcompare (PyNs3ProcStatus *PYBINDGEN_UNUSED(self), PyNs3ProcStatus *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ProcStatus_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ProcStatus_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dce.ProcStatus",            /* tp_name */
    sizeof(PyNs3ProcStatus),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ProcStatus__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ProcStatus__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ProcStatus_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ProcStatus__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DceManagerHelper__tp_init__0(PyNs3DceManagerHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DceManagerHelper *arg0;
    const char *keywords[] = {"arg0", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DceManagerHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DceManagerHelper(*((PyNs3DceManagerHelper *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DceManagerHelper__tp_init__1(PyNs3DceManagerHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DceManagerHelper();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DceManagerHelper__tp_init(PyNs3DceManagerHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DceManagerHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DceManagerHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DceManagerHelper_SetLoader(PyNs3DceManagerHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *type;
    Py_ssize_t type_len;
    const char *keywords[] = {"type", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &type, &type_len)) {
        return NULL;
    }
    self->obj->SetLoader(std::string(type, type_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceManagerHelper_GetVirtualPath(PyNs3DceManagerHelper *self)
{
    PyObject *py_retval;
    std::string retval;

    retval = self->obj->GetVirtualPath();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3DceManagerHelper_SetAttribute(PyNs3DceManagerHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *n1;
    Py_ssize_t n1_len;
    PyNs3AttributeValue *v1;
    const char *keywords[] = {"n1", "v1", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &n1, &n1_len, &PyNs3AttributeValue_Type, &v1)) {
        return NULL;
    }
    self->obj->SetAttribute(std::string(n1, n1_len), *((PyNs3AttributeValue *) v1)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceManagerHelper_Install(PyNs3DceManagerHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NodeContainer *nodes;
    const char *keywords[] = {"nodes", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NodeContainer_Type, &nodes)) {
        return NULL;
    }
    self->obj->Install(*((PyNs3NodeContainer *) nodes)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceManagerHelper_SetVirtualPath(PyNs3DceManagerHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *p;
    Py_ssize_t p_len;
    const char *keywords[] = {"p", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &p, &p_len)) {
        return NULL;
    }
    self->obj->SetVirtualPath(std::string(p, p_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DceManagerHelper_GetProcStatus(void)
{
    PyObject *py_retval;
    std::vector< ns3::ProcStatus > retval;
    Pystd__vector__lt___ns3__ProcStatus___gt__ *py_std__vector__lt___ns3__ProcStatus___gt__;

    retval = ns3::DceManagerHelper::GetProcStatus();
    py_std__vector__lt___ns3__ProcStatus___gt__ = PyObject_New(Pystd__vector__lt___ns3__ProcStatus___gt__, &Pystd__vector__lt___ns3__ProcStatus___gt___Type);
    py_std__vector__lt___ns3__ProcStatus___gt__->obj = new std::vector< ns3::ProcStatus >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__ProcStatus___gt__);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DceManagerHelper__copy__(PyNs3DceManagerHelper *self)
{

    PyNs3DceManagerHelper *py_copy;
    py_copy = PyObject_New(PyNs3DceManagerHelper, &PyNs3DceManagerHelper_Type);
    py_copy->obj = new ns3::DceManagerHelper(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DceManagerHelper_methods[] = {
    {(char *) "SetLoader", (PyCFunction) _wrap_PyNs3DceManagerHelper_SetLoader, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetVirtualPath", (PyCFunction) _wrap_PyNs3DceManagerHelper_GetVirtualPath, METH_NOARGS, NULL },
    {(char *) "SetAttribute", (PyCFunction) _wrap_PyNs3DceManagerHelper_SetAttribute, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3DceManagerHelper_Install, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetVirtualPath", (PyCFunction) _wrap_PyNs3DceManagerHelper_SetVirtualPath, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetProcStatus", (PyCFunction) _wrap_PyNs3DceManagerHelper_GetProcStatus, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DceManagerHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DceManagerHelper__tp_dealloc(PyNs3DceManagerHelper *self)
{
        ns3::DceManagerHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DceManagerHelper__tp_richcompare (PyNs3DceManagerHelper *PYBINDGEN_UNUSED(self), PyNs3DceManagerHelper *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DceManagerHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DceManagerHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dce.DceManagerHelper",            /* tp_name */
    sizeof(PyNs3DceManagerHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DceManagerHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DceManagerHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DceManagerHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DceManagerHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Ipv4DceRoutingHelper__tp_init__0(PyNs3Ipv4DceRoutingHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Ipv4DceRoutingHelper();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Ipv4DceRoutingHelper__tp_init__1(PyNs3Ipv4DceRoutingHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Ipv4DceRoutingHelper *arg0;
    const char *keywords[] = {"arg0", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4DceRoutingHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Ipv4DceRoutingHelper(*((PyNs3Ipv4DceRoutingHelper *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Ipv4DceRoutingHelper__tp_init(PyNs3Ipv4DceRoutingHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Ipv4DceRoutingHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Ipv4DceRoutingHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Ipv4DceRoutingHelper_Copy(PyNs3Ipv4DceRoutingHelper *self)
{
    PyObject *py_retval;
    ns3::Ipv4DceRoutingHelper *retval;
    PyNs3Ipv4DceRoutingHelper *py_Ipv4DceRoutingHelper;

    retval = self->obj->Copy();
    if (!(retval)) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    py_Ipv4DceRoutingHelper = PyObject_New(PyNs3Ipv4DceRoutingHelper, &PyNs3Ipv4DceRoutingHelper_Type);
    py_Ipv4DceRoutingHelper->obj = new ns3::Ipv4DceRoutingHelper((*retval));
    py_Ipv4DceRoutingHelper->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4DceRoutingHelper);
    return py_retval;
}


static PyObject*
_wrap_PyNs3Ipv4DceRoutingHelper__copy__(PyNs3Ipv4DceRoutingHelper *self)
{

    PyNs3Ipv4DceRoutingHelper *py_copy;
    py_copy = PyObject_New(PyNs3Ipv4DceRoutingHelper, &PyNs3Ipv4DceRoutingHelper_Type);
    py_copy->obj = new ns3::Ipv4DceRoutingHelper(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Ipv4DceRoutingHelper_methods[] = {
    {(char *) "Copy", (PyCFunction) _wrap_PyNs3Ipv4DceRoutingHelper_Copy, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Ipv4DceRoutingHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Ipv4DceRoutingHelper__tp_dealloc(PyNs3Ipv4DceRoutingHelper *self)
{
        ns3::Ipv4DceRoutingHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Ipv4DceRoutingHelper__tp_richcompare (PyNs3Ipv4DceRoutingHelper *PYBINDGEN_UNUSED(self), PyNs3Ipv4DceRoutingHelper *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Ipv4DceRoutingHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Ipv4DceRoutingHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dce.Ipv4DceRoutingHelper",            /* tp_name */
    sizeof(PyNs3Ipv4DceRoutingHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Ipv4DceRoutingHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Ipv4DceRoutingHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Ipv4DceRoutingHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Ipv4DceRoutingHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3LinuxStackHelper__tp_init__0(PyNs3LinuxStackHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3LinuxStackHelper *arg0;
    const char *keywords[] = {"arg0", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3LinuxStackHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::LinuxStackHelper(*((PyNs3LinuxStackHelper *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3LinuxStackHelper__tp_init__1(PyNs3LinuxStackHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::LinuxStackHelper();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3LinuxStackHelper__tp_init(PyNs3LinuxStackHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3LinuxStackHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3LinuxStackHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3LinuxStackHelper_InstallAll(PyNs3LinuxStackHelper *self)
{
    PyObject *py_retval;

    self->obj->InstallAll();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3LinuxStackHelper_RunIp(PyNs3LinuxStackHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    PyNs3Time *at;
    const char *str;
    Py_ssize_t str_len;
    const char *keywords[] = {"node", "at", "str", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!s#", (char **) keywords, &PyNs3Node_Type, &node, &PyNs3Time_Type, &at, &str, &str_len)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    ns3::LinuxStackHelper::RunIp(node_ptr, *((PyNs3Time *) at)->obj, std::string(str, str_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3LinuxStackHelper_SysctlSet(PyNs3LinuxStackHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NodeContainer *c;
    const char *path;
    Py_ssize_t path_len;
    const char *value;
    Py_ssize_t value_len;
    const char *keywords[] = {"c", "path", "value", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#s#", (char **) keywords, &PyNs3NodeContainer_Type, &c, &path, &path_len, &value, &value_len)) {
        return NULL;
    }
    self->obj->SysctlSet(*((PyNs3NodeContainer *) c)->obj, std::string(path, path_len), std::string(value, value_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3LinuxStackHelper_PopulateRoutingTables(void)
{
    PyObject *py_retval;

    ns3::LinuxStackHelper::PopulateRoutingTables();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3LinuxStackHelper_Install__0(PyNs3LinuxStackHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *keywords[] = {"node", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    self->obj->Install(node_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3LinuxStackHelper_Install__1(PyNs3LinuxStackHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NodeContainer *c;
    const char *keywords[] = {"c", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NodeContainer_Type, &c)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->Install(*((PyNs3NodeContainer *) c)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3LinuxStackHelper_Install(PyNs3LinuxStackHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3LinuxStackHelper_Install__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3LinuxStackHelper_Install__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


static PyObject*
_wrap_PyNs3LinuxStackHelper__copy__(PyNs3LinuxStackHelper *self)
{

    PyNs3LinuxStackHelper *py_copy;
    py_copy = PyObject_New(PyNs3LinuxStackHelper, &PyNs3LinuxStackHelper_Type);
    py_copy->obj = new ns3::LinuxStackHelper(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3LinuxStackHelper_methods[] = {
    {(char *) "InstallAll", (PyCFunction) _wrap_PyNs3LinuxStackHelper_InstallAll, METH_NOARGS, NULL },
    {(char *) "RunIp", (PyCFunction) _wrap_PyNs3LinuxStackHelper_RunIp, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "SysctlSet", (PyCFunction) _wrap_PyNs3LinuxStackHelper_SysctlSet, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "PopulateRoutingTables", (PyCFunction) _wrap_PyNs3LinuxStackHelper_PopulateRoutingTables, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3LinuxStackHelper_Install, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3LinuxStackHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3LinuxStackHelper__tp_dealloc(PyNs3LinuxStackHelper *self)
{
        ns3::LinuxStackHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3LinuxStackHelper__tp_richcompare (PyNs3LinuxStackHelper *PYBINDGEN_UNUSED(self), PyNs3LinuxStackHelper *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3LinuxStackHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3LinuxStackHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dce.LinuxStackHelper",            /* tp_name */
    sizeof(PyNs3LinuxStackHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3LinuxStackHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3LinuxStackHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3LinuxStackHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3LinuxStackHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




ns3::ApplicationContainer
PyNs3CcnClientHelper__PythonHelper::Install(ns3::NodeContainer c)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::CcnClientHelper *self_obj_before;
    PyObject *py_retval;
    PyNs3NodeContainer *py_NodeContainer;
    PyNs3ApplicationContainer *tmp_ApplicationContainer;

    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Install"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CcnClientHelper::Install(c);
    }
    self_obj_before = reinterpret_cast< PyNs3CcnClientHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3CcnClientHelper* >(m_pyself)->obj = (ns3::CcnClientHelper*) this;
    py_NodeContainer = PyObject_New(PyNs3NodeContainer, &PyNs3NodeContainer_Type);
    py_NodeContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_NodeContainer->obj = new ns3::NodeContainer(c);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Install", (char *) "N", py_NodeContainer);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3CcnClientHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CcnClientHelper::Install(c);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3ApplicationContainer_Type, &tmp_ApplicationContainer)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3CcnClientHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CcnClientHelper::Install(c);
    }
    ns3::ApplicationContainer retval = *tmp_ApplicationContainer->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3CcnClientHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


uint16_t
PyNs3CcnClientHelper__PythonHelper::GetPid(ns3::Application *app)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DceApplicationHelper *self_obj_before;
    PyObject *py_retval;
    uint16_t retval;
    PyNs3Application *py_Application;
    int tmp;

    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DceApplicationHelper::GetPid(app);
    }
    self_obj_before = reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj = (ns3::DceApplicationHelper*) this;
    py_Application = PyObject_New(PyNs3Application, &PyNs3Application_Type);
    py_Application->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Application->obj = new ns3::Application(*app);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPid", (char *) "N", py_Application);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DceApplicationHelper::GetPid(app);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DceApplicationHelper::GetPid(app);
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DceApplicationHelper::GetPid(app);
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DceApplicationHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


static int
_wrap_PyNs3CcnClientHelper__tp_init__0(PyNs3CcnClientHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3CcnClientHelper *arg0;
    const char *keywords[] = {"arg0", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CcnClientHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3CcnClientHelper_Type)
    {
        self->obj = new PyNs3CcnClientHelper__PythonHelper(*((PyNs3CcnClientHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3CcnClientHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::CcnClientHelper(*((PyNs3CcnClientHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

static int
_wrap_PyNs3CcnClientHelper__tp_init__1(PyNs3CcnClientHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3CcnClientHelper_Type)
    {
        self->obj = new PyNs3CcnClientHelper__PythonHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3CcnClientHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::CcnClientHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

int _wrap_PyNs3CcnClientHelper__tp_init(PyNs3CcnClientHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3CcnClientHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3CcnClientHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3CcnClientHelper_AddFile(PyNs3CcnClientHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *from;
    Py_ssize_t from_len;
    const char *to;
    Py_ssize_t to_len;
    const char *keywords[] = {"from", "to", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#", (char **) keywords, &from, &from_len, &to, &to_len)) {
        return NULL;
    }
    self->obj->AddFile(std::string(from, from_len), std::string(to, to_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CcnClientHelper_InstallInNode(PyNs3CcnClientHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    PyNs3CcnClientHelper__PythonHelper *helper_class = dynamic_cast<PyNs3CcnClientHelper__PythonHelper*> (self->obj);
    const char *keywords[] = {"node", NULL};
    PyNs3ApplicationContainer *py_ApplicationContainer;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    ns3::ApplicationContainer retval = (helper_class == NULL)? (self->obj->InstallInNode(node_ptr)) : (self->obj->ns3::CcnClientHelper::InstallInNode(node_ptr));
    py_ApplicationContainer = PyObject_New(PyNs3ApplicationContainer, &PyNs3ApplicationContainer_Type);
    py_ApplicationContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ApplicationContainer->obj = new ns3::ApplicationContainer(retval);
    py_retval = Py_BuildValue((char *) "N", py_ApplicationContainer);
    return py_retval;
}


PyObject *
_wrap_PyNs3CcnClientHelper_Install(PyNs3CcnClientHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NodeContainer *c;
    PyNs3CcnClientHelper__PythonHelper *helper_class = dynamic_cast<PyNs3CcnClientHelper__PythonHelper*> (self->obj);
    const char *keywords[] = {"c", NULL};
    PyNs3ApplicationContainer *py_ApplicationContainer;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NodeContainer_Type, &c)) {
        return NULL;
    }
    ns3::ApplicationContainer retval = (helper_class == NULL)? (self->obj->Install(*((PyNs3NodeContainer *) c)->obj)) : (self->obj->ns3::CcnClientHelper::Install(*((PyNs3NodeContainer *) c)->obj));
    py_ApplicationContainer = PyObject_New(PyNs3ApplicationContainer, &PyNs3ApplicationContainer_Type);
    py_ApplicationContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ApplicationContainer->obj = new ns3::ApplicationContainer(retval);
    py_retval = Py_BuildValue((char *) "N", py_ApplicationContainer);
    return py_retval;
}


PyObject *
_wrap_PyNs3CcnClientHelper_ResetEnvironment(PyNs3CcnClientHelper *self)
{
    PyObject *py_retval;

    self->obj->ResetEnvironment();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3CcnClientHelper__copy__(PyNs3CcnClientHelper *self)
{

    PyNs3CcnClientHelper *py_copy;
    py_copy = PyObject_GC_New(PyNs3CcnClientHelper, &PyNs3CcnClientHelper_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::CcnClientHelper(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3CcnClientHelper_methods[] = {
    {(char *) "AddFile", (PyCFunction) _wrap_PyNs3CcnClientHelper_AddFile, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "InstallInNode", (PyCFunction) _wrap_PyNs3CcnClientHelper_InstallInNode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3CcnClientHelper_Install, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ResetEnvironment", (PyCFunction) _wrap_PyNs3CcnClientHelper_ResetEnvironment, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3CcnClientHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3CcnClientHelper__tp_clear(PyNs3CcnClientHelper *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::CcnClientHelper *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3CcnClientHelper__tp_traverse(PyNs3CcnClientHelper *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);

    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3CcnClientHelper__PythonHelper).name() )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3CcnClientHelper__tp_dealloc(PyNs3CcnClientHelper *self)
{
    PyNs3CcnClientHelper__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CcnClientHelper__tp_richcompare (PyNs3CcnClientHelper *PYBINDGEN_UNUSED(self), PyNs3CcnClientHelper *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CcnClientHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CcnClientHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dce.CcnClientHelper",            /* tp_name */
    sizeof(PyNs3CcnClientHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CcnClientHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3CcnClientHelper__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3CcnClientHelper__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CcnClientHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CcnClientHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3CcnClientHelper, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CcnClientHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- containers --- */



static void
Pystd__vector__lt___std__string___gt__Iter__tp_clear(Pystd__vector__lt___std__string___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___std__string___gt__Iter__tp_traverse(Pystd__vector__lt___std__string___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___std__string___gt____tp_dealloc(Pystd__vector__lt___std__string___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___std__string___gt__Iter__tp_dealloc(Pystd__vector__lt___std__string___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___std__string___gt____tp_iter(Pystd__vector__lt___std__string___gt__ *self)
{
    Pystd__vector__lt___std__string___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___std__string___gt__Iter, &Pystd__vector__lt___std__string___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< std::string >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___std__string___gt__Iter__tp_iter(Pystd__vector__lt___std__string___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___std__string___gt__Iter__tp_iternext(Pystd__vector__lt___std__string___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< std::string >::iterator iter;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "s#", ((*iter)).c_str(), ((*iter)).size());
    return py_retval;
}

int _wrap_convert_py2c__std__string(PyObject *value, std::string *address)
{
    PyObject *py_retval;
    const char *retval_ptr;
    Py_ssize_t retval_len;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &retval_ptr, &retval_len)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = std::string(retval_ptr, retval_len);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___std__string___gt__(PyObject *arg, std::vector< std::string > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___std__string___gt___Type)) {
        *container = *((Pystd__vector__lt___std__string___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            std::string item;
            if (!_wrap_convert_py2c__std__string(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___std__string___gt__ instance, or a list of std::string");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___std__string___gt____tp_init(Pystd__vector__lt___std__string___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< std::string >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___std__string___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___std__string___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dce.Std__vector__lt___std__string___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___std__string___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___std__string___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___std__string___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___std__string___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___std__string___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dce.Std__vector__lt___std__string___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___std__string___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___std__string___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___std__string___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___std__string___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___std__string___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___std__string___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__ProcStatus___gt__Iter__tp_clear(Pystd__vector__lt___ns3__ProcStatus___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__ProcStatus___gt__Iter__tp_traverse(Pystd__vector__lt___ns3__ProcStatus___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__ProcStatus___gt____tp_dealloc(Pystd__vector__lt___ns3__ProcStatus___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__ProcStatus___gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__ProcStatus___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__ProcStatus___gt____tp_iter(Pystd__vector__lt___ns3__ProcStatus___gt__ *self)
{
    Pystd__vector__lt___ns3__ProcStatus___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__ProcStatus___gt__Iter, &Pystd__vector__lt___ns3__ProcStatus___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::ProcStatus >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__ProcStatus___gt__Iter__tp_iter(Pystd__vector__lt___ns3__ProcStatus___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__ProcStatus___gt__Iter__tp_iternext(Pystd__vector__lt___ns3__ProcStatus___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::ProcStatus >::iterator iter;
    PyNs3ProcStatus *py_ProcStatus;

    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_ProcStatus = PyObject_New(PyNs3ProcStatus, &PyNs3ProcStatus_Type);
    py_ProcStatus->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ProcStatus->obj = new ns3::ProcStatus((*iter));
    py_retval = Py_BuildValue((char *) "N", py_ProcStatus);
    return py_retval;
}

int _wrap_convert_py2c__ns3__ProcStatus(PyObject *value, ns3::ProcStatus *address)
{
    PyObject *py_retval;
    PyNs3ProcStatus *tmp_ProcStatus;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3ProcStatus_Type, &tmp_ProcStatus)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_ProcStatus->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__ProcStatus___gt__(PyObject *arg, std::vector< ns3::ProcStatus > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__ProcStatus___gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__ProcStatus___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::ProcStatus item;
            if (!_wrap_convert_py2c__ns3__ProcStatus(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__ProcStatus___gt__ instance, or a list of ns3::ProcStatus");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__ProcStatus___gt____tp_init(Pystd__vector__lt___ns3__ProcStatus___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::ProcStatus >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__ProcStatus___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__ProcStatus___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dce.Std__vector__lt___ns3__ProcStatus___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__ProcStatus___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__ProcStatus___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__ProcStatus___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__ProcStatus___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__ProcStatus___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dce.Std__vector__lt___ns3__ProcStatus___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__ProcStatus___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__ProcStatus___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__ProcStatus___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__ProcStatus___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__ProcStatus___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__ProcStatus___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef dce_moduledef = {
    PyModuleDef_HEAD_INIT,
    "dce",
    NULL,
    -1,
    dce_functions,
};
#endif


#if PY_VERSION_HEX >= 0x03000000
    #define MOD_ERROR NULL
    #define MOD_INIT(name) PyObject* PyInit_##name(void)
    #define MOD_RETURN(val) val
#else
    #define MOD_ERROR
    #define MOD_INIT(name) void init##name(void)
    #define MOD_RETURN(val)
#endif
#if defined(__cplusplus)
extern "C"
#endif
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif


MOD_INIT(dce)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&dce_moduledef);
    #else
    m = Py_InitModule3((char *) "dce", dce_functions, NULL);
    #endif
    if (m == NULL) {
        return MOD_ERROR;
    }
    /* Import the 'ns3::AttributeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeValue");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Object' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Object_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Object");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmptyAttributeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmptyAttributeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmptyAttributeValue");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Application' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Application_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Application");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ApplicationContainer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ApplicationContainer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ApplicationContainer");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Node' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Node_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Node");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NodeContainer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NodeContainer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NodeContainer");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4RoutingProtocol' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4RoutingProtocol_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4RoutingProtocol");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4StaticRoutingHelper' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4StaticRoutingHelper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4StaticRoutingHelper");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Time' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Time_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Time");

        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Register the 'ns3::DceApplication' class */
    PyNs3DceApplication_Type.tp_base = &PyNs3Application_Type;
    if (PyType_Ready(&PyNs3DceApplication_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DceApplication", (PyObject *) &PyNs3DceApplication_Type);
    /* Register the 'ns3::DceApplicationHelper' class */
    if (PyType_Ready(&PyNs3DceApplicationHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DceApplicationHelper", (PyObject *) &PyNs3DceApplicationHelper_Type);
    /* Register the 'ns3::ProcStatus' class */
    if (PyType_Ready(&PyNs3ProcStatus_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ProcStatus", (PyObject *) &PyNs3ProcStatus_Type);
    /* Register the 'ns3::DceManagerHelper' class */
    PyNs3DceManagerHelper_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3DceManagerHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DceManagerHelper", (PyObject *) &PyNs3DceManagerHelper_Type);
    /* Register the 'ns3::Ipv4DceRoutingHelper' class */
    PyNs3Ipv4DceRoutingHelper_Type.tp_base = &PyNs3Ipv4StaticRoutingHelper_Type;
    if (PyType_Ready(&PyNs3Ipv4DceRoutingHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Ipv4DceRoutingHelper", (PyObject *) &PyNs3Ipv4DceRoutingHelper_Type);
    /* Register the 'ns3::LinuxStackHelper' class */
    if (PyType_Ready(&PyNs3LinuxStackHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "LinuxStackHelper", (PyObject *) &PyNs3LinuxStackHelper_Type);
    /* Register the 'ns3::CcnClientHelper' class */
    PyNs3CcnClientHelper_Type.tp_base = &PyNs3DceApplicationHelper_Type;
    if (PyType_Ready(&PyNs3CcnClientHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "CcnClientHelper", (PyObject *) &PyNs3CcnClientHelper_Type);
    /* Register the 'std::vector< std::string >' class */
    if (PyType_Ready(&Pystd__vector__lt___std__string___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt___std__string___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___std__string___gt__", (PyObject *) &Pystd__vector__lt___std__string___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___std__string___gt__Iter", (PyObject *) &Pystd__vector__lt___std__string___gt__Iter_Type);
    /* Register the 'std::vector< ns3::ProcStatus >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__ProcStatus___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__ProcStatus___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__ProcStatus___gt__", (PyObject *) &Pystd__vector__lt___ns3__ProcStatus___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__ProcStatus___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__ProcStatus___gt__Iter_Type);
    return MOD_RETURN(m);
}
