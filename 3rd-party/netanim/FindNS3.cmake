# - Try to find NS3
# Once done this will define
#  NS3_FOUND - System has NS3
#  NS3_INCLUDE_DIRS - The NS3 include directories
#  NS3_LIBRARIES - The libraries needed to use NS3

set(EXPECTED_NS3_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../../build)

find_path(NS3_INCLUDE_DIR ns3/core-module.h
        HINTS ${EXPECTED_NS3_PATH}/
        )

#Find a library that contains "core" but not "test" (that's what we get for having weird library names)
file(GLOB_RECURSE ns3_libraries ${EXPECTED_NS3_PATH}/lib/*${CMAKE_SHARED_LIBRARY_SUFFIX})
set(core_lib_name)
foreach(library_path ${ns3_libraries})
    get_filename_component(library_name "${library_path}" NAME)
    if(${library_name} MATCHES ".*core.*")
        if(${library_name} MATCHES ".*test.*")
        else()
            set(core_lib_name ${library_name})
        endif()
    endif()
endforeach()

find_library(NS3_LIBRARY NAMES ${core_lib_name}
        HINTS ${EXPECTED_NS3_PATH}/lib
        )

include(FindPackageHandleStandardArgs)
# handle the QUIETLY and REQUIRED arguments and set LIBNS3_FOUND to TRUE
# if all listed variables are TRUE
find_package_handle_standard_args(NS3  DEFAULT_MSG
        NS3_LIBRARY NS3_INCLUDE_DIR)

mark_as_advanced(NS3 NS3_LIBRARY )

#Read definitions file generated by the CMake script of NS3 project (https://github.com/Gabrielcarvfer/NS3)
file(READ ${NS3_INCLUDE_DIR}/ns3/ns3-definitions NS3_DEFINITIONS)
set(NS3_CORE_LIBRARY ${NS3_LIBRARY} )
set(NS3_INCLUDE_DIRS ${NS3_INCLUDE_DIR} )
