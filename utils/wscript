## -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-
import os.path

def build(bld):
    env = bld.env

    test_runner = bld.create_ns3_program('test-runner', ['core'])
    test_runner.install_path = None # do not install
    test_runner.source = 'test-runner.cc'

    # Set the libraries the testrunner depends on equal to the list of
    # enabled modules plus the list of enabled module test libraries.
    test_runner.use = [mod for mod in (env['NS3_ENABLED_MODULES'] + env['NS3_ENABLED_MODULE_TEST_LIBRARIES'])]
    
    obj = bld.create_ns3_program('bench-simulator', ['core'])
    obj.source = 'bench-simulator.cc'

    # Because the list of enabled modules must be set before
    # test-runner can be built, this diretory is parsed by the top
    # level wscript file after all of the other program module
    # dependencies have been handled.
    #
    # So, make sure that the network module is enabled before building
    # these programs.
    if 'ns3-network' in env['NS3_ENABLED_MODULES']:
        obj = bld.create_ns3_program('bench-packets', ['network'])
        obj.source = 'bench-packets.cc'

        # Make sure that the csma module is enabled before building
        # this program.
        # if 'ns3-csma' in env['NS3_ENABLED_MODULES']:
        obj = bld.create_ns3_program('print-introspected-doxygen', ['network'])
        obj.source = 'print-introspected-doxygen.cc'
        obj.use = [mod for mod in env['NS3_ENABLED_MODULES']]
