#include "ns3module.h"
static PyMethodDef mesh_FatalImpl_functions[] = {
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef mesh_FatalImpl_moduledef = {
    PyModuleDef_HEAD_INIT,
    "mesh.FatalImpl",
    NULL,
    -1,
    mesh_FatalImpl_functions,
};
#endif

static PyObject *
initmesh_FatalImpl(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&mesh_FatalImpl_moduledef);
    #else
    m = Py_InitModule3((char *) "mesh.FatalImpl", mesh_FatalImpl_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    return m;
}
static PyMethodDef mesh_Hash_Function_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyNs3HashFunctionFnv1a_Type;


PyTypeObject *_PyNs3HashFunctionHash32_Type;


PyTypeObject *_PyNs3HashFunctionHash64_Type;


PyTypeObject *_PyNs3HashFunctionMurmur3_Type;

#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef mesh_Hash_Function_moduledef = {
    PyModuleDef_HEAD_INIT,
    "mesh.Hash.Function",
    NULL,
    -1,
    mesh_Hash_Function_functions,
};
#endif

static PyObject *
initmesh_Hash_Function(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&mesh_Hash_Function_moduledef);
    #else
    m = Py_InitModule3((char *) "mesh.Hash.Function", mesh_Hash_Function_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    /* Import the 'ns3::Hash::Function::Fnv1a' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionFnv1a_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Fnv1a");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Hash::Function::Hash32' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionHash32_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Hash32");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Hash::Function::Hash64' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionHash64_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Hash64");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Hash::Function::Murmur3' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionMurmur3_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Murmur3");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    return m;
}
static PyMethodDef mesh_Hash_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyNs3HashImplementation_Type;

#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef mesh_Hash_moduledef = {
    PyModuleDef_HEAD_INIT,
    "mesh.Hash",
    NULL,
    -1,
    mesh_Hash_functions,
};
#endif

static PyObject *
initmesh_Hash(void)
{
    PyObject *m;
    PyObject *submodule;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&mesh_Hash_moduledef);
    #else
    m = Py_InitModule3((char *) "mesh.Hash", mesh_Hash_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    /* Import the 'ns3::Hash::Implementation' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashImplementation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Implementation");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    submodule = initmesh_Hash_Function();
    if (submodule == NULL) {
        return NULL;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "Function", submodule);
    return m;
}
static PyMethodDef mesh_TracedValueCallback_functions[] = {
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef mesh_TracedValueCallback_moduledef = {
    PyModuleDef_HEAD_INIT,
    "mesh.TracedValueCallback",
    NULL,
    -1,
    mesh_TracedValueCallback_functions,
};
#endif

static PyObject *
initmesh_TracedValueCallback(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&mesh_TracedValueCallback_moduledef);
    #else
    m = Py_InitModule3((char *) "mesh.TracedValueCallback", mesh_TracedValueCallback_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    return m;
}
/* --- module functions --- */


PyObject *
_wrap_mesh_dot11s_MakeIeMeshIdChecker()
{
    PyObject *py_retval;
    ns3::Ptr< ns3::AttributeChecker const > retval;
    PyNs3AttributeChecker *py_AttributeChecker;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = ns3::dot11s::MakeIeMeshIdChecker();
    if (!(const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_AttributeChecker = NULL;
    } else {
        py_AttributeChecker = (PyNs3AttributeChecker *) wrapper_lookup_iter->second;
        Py_INCREF(py_AttributeChecker);
    }
    
    if (py_AttributeChecker == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)))), &PyNs3AttributeChecker_Type);
        py_AttributeChecker = PyObject_New(PyNs3AttributeChecker, wrapper_type);
    
        py_AttributeChecker->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval))->Ref();
        py_AttributeChecker->obj = const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_AttributeChecker->obj] = (PyObject *) py_AttributeChecker;
    }
    py_retval = Py_BuildValue((char *) "N", py_AttributeChecker);
    return py_retval;
}
PyObject * _wrap_mesh_dot11s_MakeIeMeshIdChecker();

static PyMethodDef mesh_dot11s_functions[] = {
    {(char *) "MakeIeMeshIdChecker", (PyCFunction) _wrap_mesh_dot11s_MakeIeMeshIdChecker, METH_NOARGS, "MakeIeMeshIdChecker()\n\n" },
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */




static int
_wrap_PyNs3Dot11sDestinationAddressUnit__tp_init__0(PyNs3Dot11sDestinationAddressUnit *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sDestinationAddressUnit *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sDestinationAddressUnit_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::DestinationAddressUnit(*((PyNs3Dot11sDestinationAddressUnit *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sDestinationAddressUnit__tp_init__1(PyNs3Dot11sDestinationAddressUnit *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::DestinationAddressUnit();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sDestinationAddressUnit__tp_init(PyNs3Dot11sDestinationAddressUnit *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sDestinationAddressUnit__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sDestinationAddressUnit__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sDestinationAddressUnit_GetDestinationAddress(PyNs3Dot11sDestinationAddressUnit *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetDestinationAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sDestinationAddressUnit_GetDestSeqNumber(PyNs3Dot11sDestinationAddressUnit *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetDestSeqNumber();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sDestinationAddressUnit_SetDestinationAddress(PyNs3Dot11sDestinationAddressUnit *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *dest_address;
    const char *keywords[] = {"dest_address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &dest_address)) {
        return NULL;
    }
    self->obj->SetDestinationAddress(*((PyNs3Mac48Address *) dest_address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sDestinationAddressUnit_SetDestSeqNumber(PyNs3Dot11sDestinationAddressUnit *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int dest_seq_number;
    const char *keywords[] = {"dest_seq_number", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &dest_seq_number)) {
        return NULL;
    }
    self->obj->SetDestSeqNumber(dest_seq_number);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sDestinationAddressUnit_IsUsn(PyNs3Dot11sDestinationAddressUnit *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsUsn();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sDestinationAddressUnit_SetFlags(PyNs3Dot11sDestinationAddressUnit *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool doFlag;
    PyObject *py_doFlag;
    bool rfFlag;
    PyObject *py_rfFlag;
    bool usnFlag;
    PyObject *py_usnFlag;
    const char *keywords[] = {"doFlag", "rfFlag", "usnFlag", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "OOO", (char **) keywords, &py_doFlag, &py_rfFlag, &py_usnFlag)) {
        return NULL;
    }
    doFlag = (bool) PyObject_IsTrue(py_doFlag);
    rfFlag = (bool) PyObject_IsTrue(py_rfFlag);
    usnFlag = (bool) PyObject_IsTrue(py_usnFlag);
    self->obj->SetFlags(doFlag, rfFlag, usnFlag);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sDestinationAddressUnit_IsRf(PyNs3Dot11sDestinationAddressUnit *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsRf();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sDestinationAddressUnit_IsDo(PyNs3Dot11sDestinationAddressUnit *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsDo();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sDestinationAddressUnit__copy__(PyNs3Dot11sDestinationAddressUnit *self)
{

    PyNs3Dot11sDestinationAddressUnit *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sDestinationAddressUnit, &PyNs3Dot11sDestinationAddressUnit_Type);
    
    py_copy->obj = new ns3::dot11s::DestinationAddressUnit(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sDestinationAddressUnit_methods[] = {
    {(char *) "GetDestinationAddress", (PyCFunction) _wrap_PyNs3Dot11sDestinationAddressUnit_GetDestinationAddress, METH_NOARGS, "GetDestinationAddress()\n\n" },
    {(char *) "GetDestSeqNumber", (PyCFunction) _wrap_PyNs3Dot11sDestinationAddressUnit_GetDestSeqNumber, METH_NOARGS, "GetDestSeqNumber()\n\n" },
    {(char *) "SetDestinationAddress", (PyCFunction) _wrap_PyNs3Dot11sDestinationAddressUnit_SetDestinationAddress, METH_KEYWORDS|METH_VARARGS, "SetDestinationAddress(dest_address)\n\ntype: dest_address: ns3::Mac48Address" },
    {(char *) "SetDestSeqNumber", (PyCFunction) _wrap_PyNs3Dot11sDestinationAddressUnit_SetDestSeqNumber, METH_KEYWORDS|METH_VARARGS, "SetDestSeqNumber(dest_seq_number)\n\ntype: dest_seq_number: uint32_t" },
    {(char *) "IsUsn", (PyCFunction) _wrap_PyNs3Dot11sDestinationAddressUnit_IsUsn, METH_NOARGS, "IsUsn()\n\n" },
    {(char *) "SetFlags", (PyCFunction) _wrap_PyNs3Dot11sDestinationAddressUnit_SetFlags, METH_KEYWORDS|METH_VARARGS, "SetFlags(doFlag, rfFlag, usnFlag)\n\ntype: doFlag: bool\ntype: rfFlag: bool\ntype: usnFlag: bool" },
    {(char *) "IsRf", (PyCFunction) _wrap_PyNs3Dot11sDestinationAddressUnit_IsRf, METH_NOARGS, "IsRf()\n\n" },
    {(char *) "IsDo", (PyCFunction) _wrap_PyNs3Dot11sDestinationAddressUnit_IsDo, METH_NOARGS, "IsDo()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sDestinationAddressUnit__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sDestinationAddressUnit__tp_dealloc(PyNs3Dot11sDestinationAddressUnit *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::dot11s::DestinationAddressUnit *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sDestinationAddressUnit__tp_richcompare (PyNs3Dot11sDestinationAddressUnit *PYBINDGEN_UNUSED(self), PyNs3Dot11sDestinationAddressUnit *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sDestinationAddressUnit_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sDestinationAddressUnit_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.DestinationAddressUnit",            /* tp_name */
    sizeof(PyNs3Dot11sDestinationAddressUnit),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sDestinationAddressUnit__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DestinationAddressUnit(arg0)\nDestinationAddressUnit()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sDestinationAddressUnit__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sDestinationAddressUnit_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sDestinationAddressUnit__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3Dot11sDot11sMeshCapability_wrapper_registry;
static PyObject* _wrap_PyNs3Dot11sDot11sMeshCapability__get_MCCAEnabled(PyNs3Dot11sDot11sMeshCapability *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->MCCAEnabled));
    return py_retval;
}
static int _wrap_PyNs3Dot11sDot11sMeshCapability__set_MCCAEnabled(PyNs3Dot11sDot11sMeshCapability *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->MCCAEnabled = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sDot11sMeshCapability__get_MCCASupported(PyNs3Dot11sDot11sMeshCapability *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->MCCASupported));
    return py_retval;
}
static int _wrap_PyNs3Dot11sDot11sMeshCapability__set_MCCASupported(PyNs3Dot11sDot11sMeshCapability *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->MCCASupported = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sDot11sMeshCapability__get_TBTTAdjustment(PyNs3Dot11sDot11sMeshCapability *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->TBTTAdjustment));
    return py_retval;
}
static int _wrap_PyNs3Dot11sDot11sMeshCapability__set_TBTTAdjustment(PyNs3Dot11sDot11sMeshCapability *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->TBTTAdjustment = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sDot11sMeshCapability__get_acceptPeerLinks(PyNs3Dot11sDot11sMeshCapability *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->acceptPeerLinks));
    return py_retval;
}
static int _wrap_PyNs3Dot11sDot11sMeshCapability__set_acceptPeerLinks(PyNs3Dot11sDot11sMeshCapability *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->acceptPeerLinks = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sDot11sMeshCapability__get_beaconTimingReport(PyNs3Dot11sDot11sMeshCapability *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->beaconTimingReport));
    return py_retval;
}
static int _wrap_PyNs3Dot11sDot11sMeshCapability__set_beaconTimingReport(PyNs3Dot11sDot11sMeshCapability *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->beaconTimingReport = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sDot11sMeshCapability__get_forwarding(PyNs3Dot11sDot11sMeshCapability *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->forwarding));
    return py_retval;
}
static int _wrap_PyNs3Dot11sDot11sMeshCapability__set_forwarding(PyNs3Dot11sDot11sMeshCapability *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->forwarding = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sDot11sMeshCapability__get_powerSaveLevel(PyNs3Dot11sDot11sMeshCapability *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->powerSaveLevel));
    return py_retval;
}
static int _wrap_PyNs3Dot11sDot11sMeshCapability__set_powerSaveLevel(PyNs3Dot11sDot11sMeshCapability *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->powerSaveLevel = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3Dot11sDot11sMeshCapability__getsets[] = {
    {
        (char*) "acceptPeerLinks", /* attribute name */
        (getter) _wrap_PyNs3Dot11sDot11sMeshCapability__get_acceptPeerLinks, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sDot11sMeshCapability__set_acceptPeerLinks, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "MCCASupported", /* attribute name */
        (getter) _wrap_PyNs3Dot11sDot11sMeshCapability__get_MCCASupported, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sDot11sMeshCapability__set_MCCASupported, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "TBTTAdjustment", /* attribute name */
        (getter) _wrap_PyNs3Dot11sDot11sMeshCapability__get_TBTTAdjustment, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sDot11sMeshCapability__set_TBTTAdjustment, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "powerSaveLevel", /* attribute name */
        (getter) _wrap_PyNs3Dot11sDot11sMeshCapability__get_powerSaveLevel, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sDot11sMeshCapability__set_powerSaveLevel, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "forwarding", /* attribute name */
        (getter) _wrap_PyNs3Dot11sDot11sMeshCapability__get_forwarding, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sDot11sMeshCapability__set_forwarding, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "MCCAEnabled", /* attribute name */
        (getter) _wrap_PyNs3Dot11sDot11sMeshCapability__get_MCCAEnabled, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sDot11sMeshCapability__set_MCCAEnabled, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "beaconTimingReport", /* attribute name */
        (getter) _wrap_PyNs3Dot11sDot11sMeshCapability__get_beaconTimingReport, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sDot11sMeshCapability__set_beaconTimingReport, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3Dot11sDot11sMeshCapability__tp_init__0(PyNs3Dot11sDot11sMeshCapability *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sDot11sMeshCapability *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sDot11sMeshCapability_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::Dot11sMeshCapability(*((PyNs3Dot11sDot11sMeshCapability *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sDot11sMeshCapability__tp_init__1(PyNs3Dot11sDot11sMeshCapability *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::Dot11sMeshCapability();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sDot11sMeshCapability__tp_init(PyNs3Dot11sDot11sMeshCapability *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sDot11sMeshCapability__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sDot11sMeshCapability__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sDot11sMeshCapability_GetSerializedSize(PyNs3Dot11sDot11sMeshCapability *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sDot11sMeshCapability_Is(PyNs3Dot11sDot11sMeshCapability *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int cap;
    int n;
    const char *keywords[] = {"cap", "n", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &cap, &n)) {
        return NULL;
    }
    if (cap > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (n > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->Is(cap, n);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sDot11sMeshCapability_Serialize(PyNs3Dot11sDot11sMeshCapability *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) i)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sDot11sMeshCapability_GetUint8(PyNs3Dot11sDot11sMeshCapability *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetUint8();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sDot11sMeshCapability_Deserialize(PyNs3Dot11sDot11sMeshCapability *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Deserialize(*((PyNs3BufferIterator *) i)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sDot11sMeshCapability__copy__(PyNs3Dot11sDot11sMeshCapability *self)
{

    PyNs3Dot11sDot11sMeshCapability *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sDot11sMeshCapability, &PyNs3Dot11sDot11sMeshCapability_Type);
    py_copy->obj = new ns3::dot11s::Dot11sMeshCapability(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Dot11sDot11sMeshCapability_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sDot11sMeshCapability_methods[] = {
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3Dot11sDot11sMeshCapability_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "Is", (PyCFunction) _wrap_PyNs3Dot11sDot11sMeshCapability_Is, METH_KEYWORDS|METH_VARARGS, "Is(cap, n)\n\ntype: cap: uint8_t\ntype: n: uint8_t" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3Dot11sDot11sMeshCapability_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(i)\n\ntype: i: ns3::Buffer::Iterator" },
    {(char *) "GetUint8", (PyCFunction) _wrap_PyNs3Dot11sDot11sMeshCapability_GetUint8, METH_NOARGS, "GetUint8()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3Dot11sDot11sMeshCapability_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(i)\n\ntype: i: ns3::Buffer::Iterator" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sDot11sMeshCapability__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sDot11sMeshCapability__tp_dealloc(PyNs3Dot11sDot11sMeshCapability *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Dot11sDot11sMeshCapability_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Dot11sDot11sMeshCapability_wrapper_registry.end()) {
        PyNs3Dot11sDot11sMeshCapability_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dot11s::Dot11sMeshCapability *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sDot11sMeshCapability__tp_richcompare (PyNs3Dot11sDot11sMeshCapability *PYBINDGEN_UNUSED(self), PyNs3Dot11sDot11sMeshCapability *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sDot11sMeshCapability_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sDot11sMeshCapability_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.Dot11sMeshCapability",            /* tp_name */
    sizeof(PyNs3Dot11sDot11sMeshCapability),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sDot11sMeshCapability__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "Dot11sMeshCapability(arg0)\nDot11sMeshCapability()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sDot11sMeshCapability__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sDot11sMeshCapability_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3Dot11sDot11sMeshCapability__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sDot11sMeshCapability__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3Dot11sHwmpProtocol__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3Dot11sHwmpProtocol *self)
{
    PyObject *py_retval;
    PyNs3Dot11sHwmpProtocol__PythonHelper *helper = dynamic_cast< PyNs3Dot11sHwmpProtocol__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Dot11sHwmpProtocol__PythonHelper::_wrap_NotifyNewAggregate(PyNs3Dot11sHwmpProtocol *self)
{
    PyObject *py_retval;
    PyNs3Dot11sHwmpProtocol__PythonHelper *helper = dynamic_cast< PyNs3Dot11sHwmpProtocol__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3Dot11sHwmpProtocol__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dot11s::HwmpProtocol *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::dot11s::HwmpProtocol::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Dot11sHwmpProtocol* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Dot11sHwmpProtocol* >(m_pyself)->obj = (ns3::dot11s::HwmpProtocol*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Dot11sHwmpProtocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Dot11sHwmpProtocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Dot11sHwmpProtocol* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3Dot11sHwmpProtocol__PythonHelper::RemoveRoutingStuff(uint32_t fromIface, ns3::Mac48Address const source, ns3::Mac48Address const destination, ns3::Ptr< ns3::Packet > packet, uint16_t & protocolType)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dot11s::HwmpProtocol *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "RemoveRoutingStuff"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dot11s::HwmpProtocol::RemoveRoutingStuff(fromIface, source, destination, packet, protocolType);
    }
    self_obj_before = reinterpret_cast< PyNs3Dot11sHwmpProtocol* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Dot11sHwmpProtocol* >(m_pyself)->obj = (ns3::dot11s::HwmpProtocol*) this;
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(source);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(destination);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "RemoveRoutingStuff", (char *) "NNNNH", PyLong_FromUnsignedLong(fromIface), py_Mac48Address, py_Mac48Address2, py_Packet, protocolType);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Dot11sHwmpProtocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dot11s::HwmpProtocol::RemoveRoutingStuff(fromIface, source, destination, packet, protocolType);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Dot11sHwmpProtocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dot11s::HwmpProtocol::RemoveRoutingStuff(fromIface, source, destination, packet, protocolType);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Dot11sHwmpProtocol* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3Dot11sHwmpProtocol__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dot11s::HwmpProtocol *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Dot11sHwmpProtocol* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Dot11sHwmpProtocol* >(m_pyself)->obj = (ns3::dot11s::HwmpProtocol*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Dot11sHwmpProtocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Dot11sHwmpProtocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Dot11sHwmpProtocol* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3Dot11sHwmpProtocol__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3Dot11sHwmpProtocol__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Dot11sHwmpProtocol__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3Dot11sHwmpProtocol__tp_init(PyNs3Dot11sHwmpProtocol *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3Dot11sHwmpProtocol_Type)
    {
        self->obj = new PyNs3Dot11sHwmpProtocol__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3Dot11sHwmpProtocol__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dot11s::HwmpProtocol();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3Dot11sHwmpProtocol_RemoveRoutingStuff(PyNs3Dot11sHwmpProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    unsigned int fromIface;
    PyNs3Mac48Address *source;
    PyNs3Mac48Address *destination;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    uint16_t  protocolType;
    PyNs3Dot11sHwmpProtocol__PythonHelper *helper_class = dynamic_cast<PyNs3Dot11sHwmpProtocol__PythonHelper*> (self->obj);
    const char *keywords[] = {"fromIface", "source", "destination", "packet", "protocolType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!O!O!H", (char **) keywords, &fromIface, &PyNs3Mac48Address_Type, &source, &PyNs3Mac48Address_Type, &destination, &PyNs3Packet_Type, &packet, &protocolType)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->RemoveRoutingStuff(fromIface, *((PyNs3Mac48Address *) source)->obj, *((PyNs3Mac48Address *) destination)->obj, ns3::Ptr< ns3::Packet  > (packet_ptr), protocolType)) : (self->obj->ns3::dot11s::HwmpProtocol::RemoveRoutingStuff(fromIface, *((PyNs3Mac48Address *) source)->obj, *((PyNs3Mac48Address *) destination)->obj, ns3::Ptr< ns3::Packet  > (packet_ptr), protocolType));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpProtocol_PeerLinkStatus(PyNs3Dot11sHwmpProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *meshPontAddress;
    PyNs3Mac48Address *peerAddress;
    unsigned int interface;
    bool status;
    PyObject *py_status;
    const char *keywords[] = {"meshPontAddress", "peerAddress", "interface", "status", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!IO", (char **) keywords, &PyNs3Mac48Address_Type, &meshPontAddress, &PyNs3Mac48Address_Type, &peerAddress, &interface, &py_status)) {
        return NULL;
    }
    status = (bool) PyObject_IsTrue(py_status);
    self->obj->PeerLinkStatus(*((PyNs3Mac48Address *) meshPontAddress)->obj, *((PyNs3Mac48Address *) peerAddress)->obj, interface, status);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpProtocol_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dot11s::HwmpProtocol::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpProtocol_AssignStreams(PyNs3Dot11sHwmpProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpProtocol_Install(PyNs3Dot11sHwmpProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3MeshPointDevice *arg0;
    ns3::MeshPointDevice *arg0_ptr;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshPointDevice_Type, &arg0)) {
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    retval = self->obj->Install(ns3::Ptr< ns3::MeshPointDevice  > (arg0_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpProtocol_DoDispose(PyNs3Dot11sHwmpProtocol *self)
{
    PyObject *py_retval;
    PyNs3Dot11sHwmpProtocol__PythonHelper *helper_class = dynamic_cast<PyNs3Dot11sHwmpProtocol__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::dot11s::HwmpProtocol::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpProtocol_RequestRoute(PyNs3Dot11sHwmpProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    unsigned int sourceIface;
    PyNs3Mac48Address *source;
    PyNs3Mac48Address *destination;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    int protocolType;
    PyObject *routeReply;
    ns3::Ptr<PythonCallbackImpl3> routeReply_cb_impl;
    PyNs3Dot11sHwmpProtocol__PythonHelper *helper_class = dynamic_cast<PyNs3Dot11sHwmpProtocol__PythonHelper*> (self->obj);
    const char *keywords[] = {"sourceIface", "source", "destination", "packet", "protocolType", "routeReply", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!O!O!iO", (char **) keywords, &sourceIface, &PyNs3Mac48Address_Type, &source, &PyNs3Mac48Address_Type, &destination, &PyNs3Packet_Type, &packet, &protocolType, &routeReply)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (protocolType > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (!PyCallable_Check(routeReply)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'routeReply' must be callbale");
        return NULL;
    }
    routeReply_cb_impl = ns3::Create<PythonCallbackImpl3> (routeReply);
    retval = (helper_class == NULL)? (self->obj->RequestRoute(sourceIface, *((PyNs3Mac48Address *) source)->obj, *((PyNs3Mac48Address *) destination)->obj, ns3::Ptr< ns3::Packet  > (packet_ptr), protocolType, ns3::Callback<void, bool, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, unsigned short, unsigned int, ns3::empty, ns3::empty, ns3::empty> (routeReply_cb_impl))) : (self->obj->ns3::dot11s::HwmpProtocol::RequestRoute(sourceIface, *((PyNs3Mac48Address *) source)->obj, *((PyNs3Mac48Address *) destination)->obj, ns3::Ptr< ns3::Packet  > (packet_ptr), protocolType, ns3::Callback<void, bool, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, unsigned short, unsigned int, ns3::empty, ns3::empty, ns3::empty> (routeReply_cb_impl)));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpProtocol_ResetStats(PyNs3Dot11sHwmpProtocol *self)
{
    PyObject *py_retval;
    
    self->obj->ResetStats();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpProtocol_UnsetRoot(PyNs3Dot11sHwmpProtocol *self)
{
    PyObject *py_retval;
    
    self->obj->UnsetRoot();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpProtocol_SetRoot(PyNs3Dot11sHwmpProtocol *self)
{
    PyObject *py_retval;
    
    self->obj->SetRoot();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3Dot11sHwmpProtocol_methods[] = {
    {(char *) "RemoveRoutingStuff", (PyCFunction) _wrap_PyNs3Dot11sHwmpProtocol_RemoveRoutingStuff, METH_KEYWORDS|METH_VARARGS, "RemoveRoutingStuff(fromIface, source, destination, packet, protocolType)\n\ntype: fromIface: uint32_t\ntype: source: ns3::Mac48Address const\ntype: destination: ns3::Mac48Address const\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: protocolType: uint16_t &" },
    {(char *) "PeerLinkStatus", (PyCFunction) _wrap_PyNs3Dot11sHwmpProtocol_PeerLinkStatus, METH_KEYWORDS|METH_VARARGS, "PeerLinkStatus(meshPontAddress, peerAddress, interface, status)\n\ntype: meshPontAddress: ns3::Mac48Address\ntype: peerAddress: ns3::Mac48Address\ntype: interface: uint32_t\ntype: status: bool" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3Dot11sHwmpProtocol_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3Dot11sHwmpProtocol_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3Dot11sHwmpProtocol_Install, METH_KEYWORDS|METH_VARARGS, "Install(arg0)\n\ntype: arg0: ns3::Ptr< ns3::MeshPointDevice >" },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3Dot11sHwmpProtocol_DoDispose, METH_NOARGS, "DoDispose()\n\n" },
    {(char *) "RequestRoute", (PyCFunction) _wrap_PyNs3Dot11sHwmpProtocol_RequestRoute, METH_KEYWORDS|METH_VARARGS, "RequestRoute(sourceIface, source, destination, packet, protocolType, routeReply)\n\ntype: sourceIface: uint32_t\ntype: source: ns3::Mac48Address const\ntype: destination: ns3::Mac48Address const\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: protocolType: uint16_t\ntype: routeReply: ns3::Callback< void, bool, ns3::Ptr< ns3::Packet >, ns3::Mac48Address, ns3::Mac48Address, unsigned short, unsigned int, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "ResetStats", (PyCFunction) _wrap_PyNs3Dot11sHwmpProtocol_ResetStats, METH_NOARGS, "ResetStats()\n\n" },
    {(char *) "UnsetRoot", (PyCFunction) _wrap_PyNs3Dot11sHwmpProtocol_UnsetRoot, METH_NOARGS, "UnsetRoot()\n\n" },
    {(char *) "SetRoot", (PyCFunction) _wrap_PyNs3Dot11sHwmpProtocol_SetRoot, METH_NOARGS, "SetRoot()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3Dot11sHwmpProtocol__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3Dot11sHwmpProtocol__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3Dot11sHwmpProtocol__tp_clear(PyNs3Dot11sHwmpProtocol *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dot11s::HwmpProtocol *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3Dot11sHwmpProtocol__tp_traverse(PyNs3Dot11sHwmpProtocol *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3Dot11sHwmpProtocol__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3Dot11sHwmpProtocol__tp_dealloc(PyNs3Dot11sHwmpProtocol *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3Dot11sHwmpProtocol__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sHwmpProtocol__tp_richcompare (PyNs3Dot11sHwmpProtocol *PYBINDGEN_UNUSED(self), PyNs3Dot11sHwmpProtocol *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sHwmpProtocol_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sHwmpProtocol_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.HwmpProtocol",            /* tp_name */
    sizeof(PyNs3Dot11sHwmpProtocol),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sHwmpProtocol__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "HwmpProtocol()",                        /* Documentation string */
    (traverseproc)PyNs3Dot11sHwmpProtocol__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3Dot11sHwmpProtocol__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sHwmpProtocol__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sHwmpProtocol_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3Dot11sHwmpProtocol, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sHwmpProtocol__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3Dot11sHwmpProtocolFailedDestination_wrapper_registry;
static PyObject* _wrap_PyNs3Dot11sHwmpProtocolFailedDestination__get_destination(PyNs3Dot11sHwmpProtocolFailedDestination *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(self->obj->destination);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}
static int _wrap_PyNs3Dot11sHwmpProtocolFailedDestination__set_destination(PyNs3Dot11sHwmpProtocolFailedDestination *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->destination = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sHwmpProtocolFailedDestination__get_seqnum(PyNs3Dot11sHwmpProtocolFailedDestination *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->seqnum));
    return py_retval;
}
static int _wrap_PyNs3Dot11sHwmpProtocolFailedDestination__set_seqnum(PyNs3Dot11sHwmpProtocolFailedDestination *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->seqnum)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3Dot11sHwmpProtocolFailedDestination__getsets[] = {
    {
        (char*) "seqnum", /* attribute name */
        (getter) _wrap_PyNs3Dot11sHwmpProtocolFailedDestination__get_seqnum, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sHwmpProtocolFailedDestination__set_seqnum, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "destination", /* attribute name */
        (getter) _wrap_PyNs3Dot11sHwmpProtocolFailedDestination__get_destination, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sHwmpProtocolFailedDestination__set_destination, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3Dot11sHwmpProtocolFailedDestination__tp_init__0(PyNs3Dot11sHwmpProtocolFailedDestination *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::HwmpProtocol::FailedDestination();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sHwmpProtocolFailedDestination__tp_init__1(PyNs3Dot11sHwmpProtocolFailedDestination *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sHwmpProtocolFailedDestination *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sHwmpProtocolFailedDestination_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::HwmpProtocol::FailedDestination(*((PyNs3Dot11sHwmpProtocolFailedDestination *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sHwmpProtocolFailedDestination__tp_init(PyNs3Dot11sHwmpProtocolFailedDestination *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sHwmpProtocolFailedDestination__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sHwmpProtocolFailedDestination__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3Dot11sHwmpProtocolFailedDestination__copy__(PyNs3Dot11sHwmpProtocolFailedDestination *self)
{

    PyNs3Dot11sHwmpProtocolFailedDestination *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sHwmpProtocolFailedDestination, &PyNs3Dot11sHwmpProtocolFailedDestination_Type);
    py_copy->obj = new ns3::dot11s::HwmpProtocol::FailedDestination(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Dot11sHwmpProtocolFailedDestination_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sHwmpProtocolFailedDestination_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sHwmpProtocolFailedDestination__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sHwmpProtocolFailedDestination__tp_dealloc(PyNs3Dot11sHwmpProtocolFailedDestination *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Dot11sHwmpProtocolFailedDestination_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Dot11sHwmpProtocolFailedDestination_wrapper_registry.end()) {
        PyNs3Dot11sHwmpProtocolFailedDestination_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dot11s::HwmpProtocol::FailedDestination *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sHwmpProtocolFailedDestination__tp_richcompare (PyNs3Dot11sHwmpProtocolFailedDestination *PYBINDGEN_UNUSED(self), PyNs3Dot11sHwmpProtocolFailedDestination *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sHwmpProtocolFailedDestination_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sHwmpProtocolFailedDestination_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.HwmpProtocol.FailedDestination",            /* tp_name */
    sizeof(PyNs3Dot11sHwmpProtocolFailedDestination),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sHwmpProtocolFailedDestination__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "FailedDestination(arg0)\nFailedDestination()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sHwmpProtocolFailedDestination__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sHwmpProtocolFailedDestination_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3Dot11sHwmpProtocolFailedDestination__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sHwmpProtocolFailedDestination__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3Dot11sHwmpRtable__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3Dot11sHwmpRtable *self)
{
    PyObject *py_retval;
    PyNs3Dot11sHwmpRtable__PythonHelper *helper = dynamic_cast< PyNs3Dot11sHwmpRtable__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Dot11sHwmpRtable__PythonHelper::_wrap_DoInitialize(PyNs3Dot11sHwmpRtable *self)
{
    PyObject *py_retval;
    PyNs3Dot11sHwmpRtable__PythonHelper *helper = dynamic_cast< PyNs3Dot11sHwmpRtable__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Dot11sHwmpRtable__PythonHelper::_wrap_NotifyNewAggregate(PyNs3Dot11sHwmpRtable *self)
{
    PyObject *py_retval;
    PyNs3Dot11sHwmpRtable__PythonHelper *helper = dynamic_cast< PyNs3Dot11sHwmpRtable__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3Dot11sHwmpRtable__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dot11s::HwmpRtable *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::dot11s::HwmpRtable::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Dot11sHwmpRtable* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Dot11sHwmpRtable* >(m_pyself)->obj = (ns3::dot11s::HwmpRtable*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Dot11sHwmpRtable* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Dot11sHwmpRtable* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Dot11sHwmpRtable* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3Dot11sHwmpRtable__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3Dot11sHwmpRtable__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Dot11sHwmpRtable__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Dot11sHwmpRtable__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}
static PyObject* _wrap_PyNs3Dot11sHwmpRtable__get_INTERFACE_ANY(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(ns3::dot11s::HwmpRtable::INTERFACE_ANY));
    return py_retval;
}
static PyObject* _wrap_PyNs3Dot11sHwmpRtable__get_MAX_METRIC(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(ns3::dot11s::HwmpRtable::MAX_METRIC));
    return py_retval;
}
static PyGetSetDef Ns3Dot11sHwmpRtableMeta__getsets[] = {
    {
        (char*) "MAX_METRIC", /* attribute name */
        (getter) _wrap_PyNs3Dot11sHwmpRtable__get_MAX_METRIC, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "INTERFACE_ANY", /* attribute name */
        (getter) _wrap_PyNs3Dot11sHwmpRtable__get_INTERFACE_ANY, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyNs3Dot11sHwmpRtableMeta_Type = {
        PyVarObject_HEAD_INIT(NULL, 0)
	(char *) "Ns3Dot11sHwmpRtableMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	Ns3Dot11sHwmpRtableMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};



static int
_wrap_PyNs3Dot11sHwmpRtable__tp_init__0(PyNs3Dot11sHwmpRtable *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sHwmpRtable *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sHwmpRtable_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3Dot11sHwmpRtable_Type)
    {
        self->obj = new PyNs3Dot11sHwmpRtable__PythonHelper(*((PyNs3Dot11sHwmpRtable *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3Dot11sHwmpRtable__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dot11s::HwmpRtable(*((PyNs3Dot11sHwmpRtable *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3Dot11sHwmpRtable__tp_init__1(PyNs3Dot11sHwmpRtable *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3Dot11sHwmpRtable_Type)
    {
        self->obj = new PyNs3Dot11sHwmpRtable__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3Dot11sHwmpRtable__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dot11s::HwmpRtable();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3Dot11sHwmpRtable__tp_init(PyNs3Dot11sHwmpRtable *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sHwmpRtable__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sHwmpRtable__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sHwmpRtable_LookupProactiveExpired(PyNs3Dot11sHwmpRtable *self)
{
    PyObject *py_retval;
    PyNs3Dot11sHwmpRtableLookupResult *py_LookupResult;
    
    ns3::dot11s::HwmpRtable::LookupResult retval = self->obj->LookupProactiveExpired();
    py_LookupResult = PyObject_New(PyNs3Dot11sHwmpRtableLookupResult, &PyNs3Dot11sHwmpRtableLookupResult_Type);
    py_LookupResult->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_LookupResult->obj = new ns3::dot11s::HwmpRtable::LookupResult(retval);
    PyNs3Dot11sHwmpRtableLookupResult_wrapper_registry[(void *) py_LookupResult->obj] = (PyObject *) py_LookupResult;
    py_retval = Py_BuildValue((char *) "N", py_LookupResult);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpRtable_AddPrecursor(PyNs3Dot11sHwmpRtable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *destination;
    unsigned int precursorInterface;
    PyNs3Mac48Address *precursorAddress;
    PyNs3Time *lifetime;
    const char *keywords[] = {"destination", "precursorInterface", "precursorAddress", "lifetime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!IO!O!", (char **) keywords, &PyNs3Mac48Address_Type, &destination, &precursorInterface, &PyNs3Mac48Address_Type, &precursorAddress, &PyNs3Time_Type, &lifetime)) {
        return NULL;
    }
    self->obj->AddPrecursor(*((PyNs3Mac48Address *) destination)->obj, precursorInterface, *((PyNs3Mac48Address *) precursorAddress)->obj, *((PyNs3Time *) lifetime)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpRtable_AddProactivePath(PyNs3Dot11sHwmpRtable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int metric;
    PyNs3Mac48Address *root;
    PyNs3Mac48Address *retransmitter;
    unsigned int interface;
    PyNs3Time *lifetime;
    unsigned int seqnum;
    const char *keywords[] = {"metric", "root", "retransmitter", "interface", "lifetime", "seqnum", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!O!IO!I", (char **) keywords, &metric, &PyNs3Mac48Address_Type, &root, &PyNs3Mac48Address_Type, &retransmitter, &interface, &PyNs3Time_Type, &lifetime, &seqnum)) {
        return NULL;
    }
    self->obj->AddProactivePath(metric, *((PyNs3Mac48Address *) root)->obj, *((PyNs3Mac48Address *) retransmitter)->obj, interface, *((PyNs3Time *) lifetime)->obj, seqnum);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpRtable_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dot11s::HwmpRtable::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpRtable_LookupProactive(PyNs3Dot11sHwmpRtable *self)
{
    PyObject *py_retval;
    PyNs3Dot11sHwmpRtableLookupResult *py_LookupResult;
    
    ns3::dot11s::HwmpRtable::LookupResult retval = self->obj->LookupProactive();
    py_LookupResult = PyObject_New(PyNs3Dot11sHwmpRtableLookupResult, &PyNs3Dot11sHwmpRtableLookupResult_Type);
    py_LookupResult->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_LookupResult->obj = new ns3::dot11s::HwmpRtable::LookupResult(retval);
    PyNs3Dot11sHwmpRtableLookupResult_wrapper_registry[(void *) py_LookupResult->obj] = (PyObject *) py_LookupResult;
    py_retval = Py_BuildValue((char *) "N", py_LookupResult);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpRtable_AddReactivePath(PyNs3Dot11sHwmpRtable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *destination;
    PyNs3Mac48Address *retransmitter;
    unsigned int interface;
    unsigned int metric;
    PyNs3Time *lifetime;
    unsigned int seqnum;
    const char *keywords[] = {"destination", "retransmitter", "interface", "metric", "lifetime", "seqnum", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!IIO!I", (char **) keywords, &PyNs3Mac48Address_Type, &destination, &PyNs3Mac48Address_Type, &retransmitter, &interface, &metric, &PyNs3Time_Type, &lifetime, &seqnum)) {
        return NULL;
    }
    self->obj->AddReactivePath(*((PyNs3Mac48Address *) destination)->obj, *((PyNs3Mac48Address *) retransmitter)->obj, interface, metric, *((PyNs3Time *) lifetime)->obj, seqnum);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3Dot11sHwmpRtable_DeleteProactivePath__0(PyNs3Dot11sHwmpRtable *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->DeleteProactivePath();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3Dot11sHwmpRtable_DeleteProactivePath__1(PyNs3Dot11sHwmpRtable *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Mac48Address *root;
    const char *keywords[] = {"root", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &root)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->DeleteProactivePath(*((PyNs3Mac48Address *) root)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3Dot11sHwmpRtable_DeleteProactivePath(PyNs3Dot11sHwmpRtable *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sHwmpRtable_DeleteProactivePath__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sHwmpRtable_DeleteProactivePath__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3Dot11sHwmpRtable_LookupReactiveExpired(PyNs3Dot11sHwmpRtable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *destination;
    const char *keywords[] = {"destination", NULL};
    PyNs3Dot11sHwmpRtableLookupResult *py_LookupResult;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &destination)) {
        return NULL;
    }
    ns3::dot11s::HwmpRtable::LookupResult retval = self->obj->LookupReactiveExpired(*((PyNs3Mac48Address *) destination)->obj);
    py_LookupResult = PyObject_New(PyNs3Dot11sHwmpRtableLookupResult, &PyNs3Dot11sHwmpRtableLookupResult_Type);
    py_LookupResult->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_LookupResult->obj = new ns3::dot11s::HwmpRtable::LookupResult(retval);
    PyNs3Dot11sHwmpRtableLookupResult_wrapper_registry[(void *) py_LookupResult->obj] = (PyObject *) py_LookupResult;
    py_retval = Py_BuildValue((char *) "N", py_LookupResult);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpRtable_DoDispose(PyNs3Dot11sHwmpRtable *self)
{
    PyObject *py_retval;
    PyNs3Dot11sHwmpRtable__PythonHelper *helper_class = dynamic_cast<PyNs3Dot11sHwmpRtable__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::dot11s::HwmpRtable::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpRtable_LookupReactive(PyNs3Dot11sHwmpRtable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *destination;
    const char *keywords[] = {"destination", NULL};
    PyNs3Dot11sHwmpRtableLookupResult *py_LookupResult;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &destination)) {
        return NULL;
    }
    ns3::dot11s::HwmpRtable::LookupResult retval = self->obj->LookupReactive(*((PyNs3Mac48Address *) destination)->obj);
    py_LookupResult = PyObject_New(PyNs3Dot11sHwmpRtableLookupResult, &PyNs3Dot11sHwmpRtableLookupResult_Type);
    py_LookupResult->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_LookupResult->obj = new ns3::dot11s::HwmpRtable::LookupResult(retval);
    PyNs3Dot11sHwmpRtableLookupResult_wrapper_registry[(void *) py_LookupResult->obj] = (PyObject *) py_LookupResult;
    py_retval = Py_BuildValue((char *) "N", py_LookupResult);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpRtable_DeleteReactivePath(PyNs3Dot11sHwmpRtable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *destination;
    const char *keywords[] = {"destination", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &destination)) {
        return NULL;
    }
    self->obj->DeleteReactivePath(*((PyNs3Mac48Address *) destination)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sHwmpRtable_GetUnreachableDestinations(PyNs3Dot11sHwmpRtable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *peerAddress;
    const char *keywords[] = {"peerAddress", NULL};
    std::vector< ns3::dot11s::HwmpProtocol::FailedDestination > retval;
    Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__ *py_std__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &peerAddress)) {
        return NULL;
    }
    retval = self->obj->GetUnreachableDestinations(*((PyNs3Mac48Address *) peerAddress)->obj);
    py_std__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__ = PyObject_New(Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__, &Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt___Type);
    py_std__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__->obj = new std::vector< ns3::dot11s::HwmpProtocol::FailedDestination >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__);
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sHwmpRtable__copy__(PyNs3Dot11sHwmpRtable *self)
{

    PyNs3Dot11sHwmpRtable *py_copy;
    py_copy = PyObject_GC_New(PyNs3Dot11sHwmpRtable, &PyNs3Dot11sHwmpRtable_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::dot11s::HwmpRtable(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sHwmpRtable_methods[] = {
    {(char *) "LookupProactiveExpired", (PyCFunction) _wrap_PyNs3Dot11sHwmpRtable_LookupProactiveExpired, METH_NOARGS, "LookupProactiveExpired()\n\n" },
    {(char *) "AddPrecursor", (PyCFunction) _wrap_PyNs3Dot11sHwmpRtable_AddPrecursor, METH_KEYWORDS|METH_VARARGS, "AddPrecursor(destination, precursorInterface, precursorAddress, lifetime)\n\ntype: destination: ns3::Mac48Address\ntype: precursorInterface: uint32_t\ntype: precursorAddress: ns3::Mac48Address\ntype: lifetime: ns3::Time" },
    {(char *) "AddProactivePath", (PyCFunction) _wrap_PyNs3Dot11sHwmpRtable_AddProactivePath, METH_KEYWORDS|METH_VARARGS, "AddProactivePath(metric, root, retransmitter, interface, lifetime, seqnum)\n\ntype: metric: uint32_t\ntype: root: ns3::Mac48Address\ntype: retransmitter: ns3::Mac48Address\ntype: interface: uint32_t\ntype: lifetime: ns3::Time\ntype: seqnum: uint32_t" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3Dot11sHwmpRtable_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "LookupProactive", (PyCFunction) _wrap_PyNs3Dot11sHwmpRtable_LookupProactive, METH_NOARGS, "LookupProactive()\n\n" },
    {(char *) "AddReactivePath", (PyCFunction) _wrap_PyNs3Dot11sHwmpRtable_AddReactivePath, METH_KEYWORDS|METH_VARARGS, "AddReactivePath(destination, retransmitter, interface, metric, lifetime, seqnum)\n\ntype: destination: ns3::Mac48Address\ntype: retransmitter: ns3::Mac48Address\ntype: interface: uint32_t\ntype: metric: uint32_t\ntype: lifetime: ns3::Time\ntype: seqnum: uint32_t" },
    {(char *) "DeleteProactivePath", (PyCFunction) _wrap_PyNs3Dot11sHwmpRtable_DeleteProactivePath, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "LookupReactiveExpired", (PyCFunction) _wrap_PyNs3Dot11sHwmpRtable_LookupReactiveExpired, METH_KEYWORDS|METH_VARARGS, "LookupReactiveExpired(destination)\n\ntype: destination: ns3::Mac48Address" },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3Dot11sHwmpRtable_DoDispose, METH_NOARGS, "DoDispose()\n\n" },
    {(char *) "LookupReactive", (PyCFunction) _wrap_PyNs3Dot11sHwmpRtable_LookupReactive, METH_KEYWORDS|METH_VARARGS, "LookupReactive(destination)\n\ntype: destination: ns3::Mac48Address" },
    {(char *) "DeleteReactivePath", (PyCFunction) _wrap_PyNs3Dot11sHwmpRtable_DeleteReactivePath, METH_KEYWORDS|METH_VARARGS, "DeleteReactivePath(destination)\n\ntype: destination: ns3::Mac48Address" },
    {(char *) "GetUnreachableDestinations", (PyCFunction) _wrap_PyNs3Dot11sHwmpRtable_GetUnreachableDestinations, METH_KEYWORDS|METH_VARARGS, "GetUnreachableDestinations(peerAddress)\n\ntype: peerAddress: ns3::Mac48Address" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3Dot11sHwmpRtable__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3Dot11sHwmpRtable__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3Dot11sHwmpRtable__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sHwmpRtable__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3Dot11sHwmpRtable__tp_clear(PyNs3Dot11sHwmpRtable *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dot11s::HwmpRtable *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3Dot11sHwmpRtable__tp_traverse(PyNs3Dot11sHwmpRtable *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3Dot11sHwmpRtable__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3Dot11sHwmpRtable__tp_dealloc(PyNs3Dot11sHwmpRtable *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3Dot11sHwmpRtable__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sHwmpRtable__tp_richcompare (PyNs3Dot11sHwmpRtable *PYBINDGEN_UNUSED(self), PyNs3Dot11sHwmpRtable *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sHwmpRtable_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sHwmpRtable_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.HwmpRtable",            /* tp_name */
    sizeof(PyNs3Dot11sHwmpRtable),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sHwmpRtable__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "HwmpRtable(arg0)\nHwmpRtable()",                        /* Documentation string */
    (traverseproc)PyNs3Dot11sHwmpRtable__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3Dot11sHwmpRtable__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sHwmpRtable__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sHwmpRtable_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3Dot11sHwmpRtable, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sHwmpRtable__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3Dot11sHwmpRtableLookupResult_wrapper_registry;
static PyObject* _wrap_PyNs3Dot11sHwmpRtableLookupResult__get_ifIndex(PyNs3Dot11sHwmpRtableLookupResult *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->ifIndex));
    return py_retval;
}
static int _wrap_PyNs3Dot11sHwmpRtableLookupResult__set_ifIndex(PyNs3Dot11sHwmpRtableLookupResult *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->ifIndex)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sHwmpRtableLookupResult__get_lifetime(PyNs3Dot11sHwmpRtableLookupResult *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(self->obj->lifetime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}
static int _wrap_PyNs3Dot11sHwmpRtableLookupResult__set_lifetime(PyNs3Dot11sHwmpRtableLookupResult *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->lifetime = *tmp_Time->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sHwmpRtableLookupResult__get_metric(PyNs3Dot11sHwmpRtableLookupResult *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->metric));
    return py_retval;
}
static int _wrap_PyNs3Dot11sHwmpRtableLookupResult__set_metric(PyNs3Dot11sHwmpRtableLookupResult *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->metric)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sHwmpRtableLookupResult__get_retransmitter(PyNs3Dot11sHwmpRtableLookupResult *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(self->obj->retransmitter);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}
static int _wrap_PyNs3Dot11sHwmpRtableLookupResult__set_retransmitter(PyNs3Dot11sHwmpRtableLookupResult *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->retransmitter = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sHwmpRtableLookupResult__get_seqnum(PyNs3Dot11sHwmpRtableLookupResult *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->seqnum));
    return py_retval;
}
static int _wrap_PyNs3Dot11sHwmpRtableLookupResult__set_seqnum(PyNs3Dot11sHwmpRtableLookupResult *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->seqnum)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3Dot11sHwmpRtableLookupResult__getsets[] = {
    {
        (char*) "ifIndex", /* attribute name */
        (getter) _wrap_PyNs3Dot11sHwmpRtableLookupResult__get_ifIndex, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sHwmpRtableLookupResult__set_ifIndex, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "lifetime", /* attribute name */
        (getter) _wrap_PyNs3Dot11sHwmpRtableLookupResult__get_lifetime, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sHwmpRtableLookupResult__set_lifetime, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "metric", /* attribute name */
        (getter) _wrap_PyNs3Dot11sHwmpRtableLookupResult__get_metric, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sHwmpRtableLookupResult__set_metric, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "retransmitter", /* attribute name */
        (getter) _wrap_PyNs3Dot11sHwmpRtableLookupResult__get_retransmitter, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sHwmpRtableLookupResult__set_retransmitter, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "seqnum", /* attribute name */
        (getter) _wrap_PyNs3Dot11sHwmpRtableLookupResult__get_seqnum, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sHwmpRtableLookupResult__set_seqnum, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3Dot11sHwmpRtableLookupResult__tp_init__0(PyNs3Dot11sHwmpRtableLookupResult *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sHwmpRtableLookupResult *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sHwmpRtableLookupResult_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::HwmpRtable::LookupResult(*((PyNs3Dot11sHwmpRtableLookupResult *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sHwmpRtableLookupResult__tp_init__1(PyNs3Dot11sHwmpRtableLookupResult *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Mac48Address *r = NULL;
    unsigned int i = ns3::dot11s::HwmpRtable::INTERFACE_ANY;
    unsigned int m = ns3::dot11s::HwmpRtable::MAX_METRIC;
    unsigned int s = 0;
    PyNs3Time *l = NULL;
    const char *keywords[] = {"r", "i", "m", "s", "l", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O!IIIO!", (char **) keywords, &PyNs3Mac48Address_Type, &r, &i, &m, &s, &PyNs3Time_Type, &l)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::HwmpRtable::LookupResult((r ? (*((PyNs3Mac48Address *) r)->obj) : ns3::Mac48Address::GetBroadcast()), i, m, s, (l ? (*((PyNs3Time *) l)->obj) : ns3::Seconds(0)));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sHwmpRtableLookupResult__tp_init(PyNs3Dot11sHwmpRtableLookupResult *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sHwmpRtableLookupResult__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sHwmpRtableLookupResult__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sHwmpRtableLookupResult_IsValid(PyNs3Dot11sHwmpRtableLookupResult *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsValid();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sHwmpRtableLookupResult__copy__(PyNs3Dot11sHwmpRtableLookupResult *self)
{

    PyNs3Dot11sHwmpRtableLookupResult *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sHwmpRtableLookupResult, &PyNs3Dot11sHwmpRtableLookupResult_Type);
    py_copy->obj = new ns3::dot11s::HwmpRtable::LookupResult(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Dot11sHwmpRtableLookupResult_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sHwmpRtableLookupResult_methods[] = {
    {(char *) "IsValid", (PyCFunction) _wrap_PyNs3Dot11sHwmpRtableLookupResult_IsValid, METH_NOARGS, "IsValid()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sHwmpRtableLookupResult__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sHwmpRtableLookupResult__tp_dealloc(PyNs3Dot11sHwmpRtableLookupResult *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Dot11sHwmpRtableLookupResult_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Dot11sHwmpRtableLookupResult_wrapper_registry.end()) {
        PyNs3Dot11sHwmpRtableLookupResult_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dot11s::HwmpRtable::LookupResult *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sHwmpRtableLookupResult__tp_richcompare (PyNs3Dot11sHwmpRtableLookupResult *PYBINDGEN_UNUSED(self), PyNs3Dot11sHwmpRtableLookupResult *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sHwmpRtableLookupResult_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sHwmpRtableLookupResult_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.HwmpRtable.LookupResult",            /* tp_name */
    sizeof(PyNs3Dot11sHwmpRtableLookupResult),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sHwmpRtableLookupResult__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "LookupResult(r, i, m, s, l)\nLookupResult(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sHwmpRtableLookupResult__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sHwmpRtableLookupResult_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3Dot11sHwmpRtableLookupResult__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sHwmpRtableLookupResult__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Dot11sIeBeaconTiming__tp_init__0(PyNs3Dot11sIeBeaconTiming *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sIeBeaconTiming *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sIeBeaconTiming_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeBeaconTiming(*((PyNs3Dot11sIeBeaconTiming *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sIeBeaconTiming__tp_init__1(PyNs3Dot11sIeBeaconTiming *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeBeaconTiming();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sIeBeaconTiming__tp_init(PyNs3Dot11sIeBeaconTiming *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sIeBeaconTiming__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sIeBeaconTiming__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sIeBeaconTiming_DelNeighboursTimingElementUnit(PyNs3Dot11sIeBeaconTiming *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int aid;
    PyNs3Time *last_beacon;
    PyNs3Time *beacon_interval;
    const char *keywords[] = {"aid", "last_beacon", "beacon_interval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!O!", (char **) keywords, &aid, &PyNs3Time_Type, &last_beacon, &PyNs3Time_Type, &beacon_interval)) {
        return NULL;
    }
    if (aid > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->DelNeighboursTimingElementUnit(aid, *((PyNs3Time *) last_beacon)->obj, *((PyNs3Time *) beacon_interval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeBeaconTiming_ClearTimingElement(PyNs3Dot11sIeBeaconTiming *self)
{
    PyObject *py_retval;
    
    self->obj->ClearTimingElement();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeBeaconTiming_GetNeighboursTimingElementsList(PyNs3Dot11sIeBeaconTiming *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ptr< ns3::dot11s::IeBeaconTimingUnit > > retval;
    Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__ *py_std__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__;
    
    retval = self->obj->GetNeighboursTimingElementsList();
    py_std__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__ = PyObject_New(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__, &Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt___Type);
    py_std__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__->obj = new std::vector< ns3::Ptr< ns3::dot11s::IeBeaconTimingUnit > >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeBeaconTiming_DeserializeInformationField(PyNs3Dot11sIeBeaconTiming *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *i;
    int length;
    const char *keywords[] = {"i", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &i, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) i)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeBeaconTiming_GetInformationFieldSize(PyNs3Dot11sIeBeaconTiming *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeBeaconTiming_SerializeInformationField(PyNs3Dot11sIeBeaconTiming *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeBeaconTiming_AddNeighboursTimingElementUnit(PyNs3Dot11sIeBeaconTiming *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int aid;
    PyNs3Time *last_beacon;
    PyNs3Time *beacon_interval;
    const char *keywords[] = {"aid", "last_beacon", "beacon_interval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!O!", (char **) keywords, &aid, &PyNs3Time_Type, &last_beacon, &PyNs3Time_Type, &beacon_interval)) {
        return NULL;
    }
    if (aid > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->AddNeighboursTimingElementUnit(aid, *((PyNs3Time *) last_beacon)->obj, *((PyNs3Time *) beacon_interval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeBeaconTiming_ElementId(PyNs3Dot11sIeBeaconTiming *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sIeBeaconTiming__copy__(PyNs3Dot11sIeBeaconTiming *self)
{

    PyNs3Dot11sIeBeaconTiming *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sIeBeaconTiming, &PyNs3Dot11sIeBeaconTiming_Type);
    
    py_copy->obj = new ns3::dot11s::IeBeaconTiming(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sIeBeaconTiming_methods[] = {
    {(char *) "DelNeighboursTimingElementUnit", (PyCFunction) _wrap_PyNs3Dot11sIeBeaconTiming_DelNeighboursTimingElementUnit, METH_KEYWORDS|METH_VARARGS, "DelNeighboursTimingElementUnit(aid, last_beacon, beacon_interval)\n\ntype: aid: uint16_t\ntype: last_beacon: ns3::Time\ntype: beacon_interval: ns3::Time" },
    {(char *) "ClearTimingElement", (PyCFunction) _wrap_PyNs3Dot11sIeBeaconTiming_ClearTimingElement, METH_NOARGS, "ClearTimingElement()\n\n" },
    {(char *) "GetNeighboursTimingElementsList", (PyCFunction) _wrap_PyNs3Dot11sIeBeaconTiming_GetNeighboursTimingElementsList, METH_NOARGS, "GetNeighboursTimingElementsList()\n\n" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIeBeaconTiming_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(i, length)\n\ntype: i: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3Dot11sIeBeaconTiming_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIeBeaconTiming_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(i)\n\ntype: i: ns3::Buffer::Iterator" },
    {(char *) "AddNeighboursTimingElementUnit", (PyCFunction) _wrap_PyNs3Dot11sIeBeaconTiming_AddNeighboursTimingElementUnit, METH_KEYWORDS|METH_VARARGS, "AddNeighboursTimingElementUnit(aid, last_beacon, beacon_interval)\n\ntype: aid: uint16_t\ntype: last_beacon: ns3::Time\ntype: beacon_interval: ns3::Time" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3Dot11sIeBeaconTiming_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sIeBeaconTiming__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sIeBeaconTiming__tp_dealloc(PyNs3Dot11sIeBeaconTiming *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::dot11s::IeBeaconTiming *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3Dot11sIeBeaconTiming__tp_str(PyNs3Dot11sIeBeaconTiming *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3Dot11sIeBeaconTiming__tp_richcompare (PyNs3Dot11sIeBeaconTiming *PYBINDGEN_UNUSED(self), PyNs3Dot11sIeBeaconTiming *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sIeBeaconTiming_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sIeBeaconTiming_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.IeBeaconTiming",            /* tp_name */
    sizeof(PyNs3Dot11sIeBeaconTiming),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sIeBeaconTiming__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3Dot11sIeBeaconTiming__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "IeBeaconTiming(arg0)\nIeBeaconTiming()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sIeBeaconTiming__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sIeBeaconTiming_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sIeBeaconTiming__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Dot11sIeBeaconTimingUnit__tp_init__0(PyNs3Dot11sIeBeaconTimingUnit *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sIeBeaconTimingUnit *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sIeBeaconTimingUnit_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeBeaconTimingUnit(*((PyNs3Dot11sIeBeaconTimingUnit *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sIeBeaconTimingUnit__tp_init__1(PyNs3Dot11sIeBeaconTimingUnit *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeBeaconTimingUnit();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sIeBeaconTimingUnit__tp_init(PyNs3Dot11sIeBeaconTimingUnit *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sIeBeaconTimingUnit__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sIeBeaconTimingUnit__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sIeBeaconTimingUnit_GetAid(PyNs3Dot11sIeBeaconTimingUnit *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetAid();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeBeaconTimingUnit_GetLastBeacon(PyNs3Dot11sIeBeaconTimingUnit *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetLastBeacon();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeBeaconTimingUnit_SetBeaconInterval(PyNs3Dot11sIeBeaconTimingUnit *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int beaconInterval;
    const char *keywords[] = {"beaconInterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &beaconInterval)) {
        return NULL;
    }
    if (beaconInterval > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBeaconInterval(beaconInterval);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeBeaconTimingUnit_GetBeaconInterval(PyNs3Dot11sIeBeaconTimingUnit *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetBeaconInterval();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeBeaconTimingUnit_SetLastBeacon(PyNs3Dot11sIeBeaconTimingUnit *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int lastBeacon;
    const char *keywords[] = {"lastBeacon", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &lastBeacon)) {
        return NULL;
    }
    if (lastBeacon > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetLastBeacon(lastBeacon);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeBeaconTimingUnit_SetAid(PyNs3Dot11sIeBeaconTimingUnit *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int aid;
    const char *keywords[] = {"aid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &aid)) {
        return NULL;
    }
    if (aid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetAid(aid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sIeBeaconTimingUnit__copy__(PyNs3Dot11sIeBeaconTimingUnit *self)
{

    PyNs3Dot11sIeBeaconTimingUnit *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sIeBeaconTimingUnit, &PyNs3Dot11sIeBeaconTimingUnit_Type);
    
    py_copy->obj = new ns3::dot11s::IeBeaconTimingUnit(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sIeBeaconTimingUnit_methods[] = {
    {(char *) "GetAid", (PyCFunction) _wrap_PyNs3Dot11sIeBeaconTimingUnit_GetAid, METH_NOARGS, "GetAid()\n\n" },
    {(char *) "GetLastBeacon", (PyCFunction) _wrap_PyNs3Dot11sIeBeaconTimingUnit_GetLastBeacon, METH_NOARGS, "GetLastBeacon()\n\n" },
    {(char *) "SetBeaconInterval", (PyCFunction) _wrap_PyNs3Dot11sIeBeaconTimingUnit_SetBeaconInterval, METH_KEYWORDS|METH_VARARGS, "SetBeaconInterval(beaconInterval)\n\ntype: beaconInterval: uint16_t" },
    {(char *) "GetBeaconInterval", (PyCFunction) _wrap_PyNs3Dot11sIeBeaconTimingUnit_GetBeaconInterval, METH_NOARGS, "GetBeaconInterval()\n\n" },
    {(char *) "SetLastBeacon", (PyCFunction) _wrap_PyNs3Dot11sIeBeaconTimingUnit_SetLastBeacon, METH_KEYWORDS|METH_VARARGS, "SetLastBeacon(lastBeacon)\n\ntype: lastBeacon: uint16_t" },
    {(char *) "SetAid", (PyCFunction) _wrap_PyNs3Dot11sIeBeaconTimingUnit_SetAid, METH_KEYWORDS|METH_VARARGS, "SetAid(aid)\n\ntype: aid: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sIeBeaconTimingUnit__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sIeBeaconTimingUnit__tp_dealloc(PyNs3Dot11sIeBeaconTimingUnit *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::dot11s::IeBeaconTimingUnit *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sIeBeaconTimingUnit__tp_richcompare (PyNs3Dot11sIeBeaconTimingUnit *PYBINDGEN_UNUSED(self), PyNs3Dot11sIeBeaconTimingUnit *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sIeBeaconTimingUnit_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sIeBeaconTimingUnit_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.IeBeaconTimingUnit",            /* tp_name */
    sizeof(PyNs3Dot11sIeBeaconTimingUnit),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sIeBeaconTimingUnit__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "IeBeaconTimingUnit(arg0)\nIeBeaconTimingUnit()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sIeBeaconTimingUnit__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sIeBeaconTimingUnit_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sIeBeaconTimingUnit__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Dot11sIeConfiguration__tp_init__0(PyNs3Dot11sIeConfiguration *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sIeConfiguration *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sIeConfiguration_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeConfiguration(*((PyNs3Dot11sIeConfiguration *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sIeConfiguration__tp_init__1(PyNs3Dot11sIeConfiguration *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeConfiguration();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sIeConfiguration__tp_init(PyNs3Dot11sIeConfiguration *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sIeConfiguration__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sIeConfiguration__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sIeConfiguration_SetMetric(PyNs3Dot11sIeConfiguration *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::dot11s::dot11sPathSelectionMetric metricId;
    const char *keywords[] = {"metricId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &metricId)) {
        return NULL;
    }
    self->obj->SetMetric(metricId);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeConfiguration_SetNeighborCount(PyNs3Dot11sIeConfiguration *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int neighbors;
    const char *keywords[] = {"neighbors", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &neighbors)) {
        return NULL;
    }
    if (neighbors > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNeighborCount(neighbors);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeConfiguration_DeserializeInformationField(PyNs3Dot11sIeConfiguration *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *i;
    int length;
    const char *keywords[] = {"i", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &i, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) i)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeConfiguration_GetInformationFieldSize(PyNs3Dot11sIeConfiguration *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeConfiguration_MeshCapability(PyNs3Dot11sIeConfiguration *self)
{
    PyObject *py_retval;
    PyNs3Dot11sDot11sMeshCapability *py_Dot11sMeshCapability;
    
    ns3::dot11s::Dot11sMeshCapability const & retval = self->obj->MeshCapability();
    py_Dot11sMeshCapability = PyObject_New(PyNs3Dot11sDot11sMeshCapability, &PyNs3Dot11sDot11sMeshCapability_Type);
    py_Dot11sMeshCapability->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Dot11sMeshCapability->obj = new ns3::dot11s::Dot11sMeshCapability(retval);
    PyNs3Dot11sDot11sMeshCapability_wrapper_registry[(void *) py_Dot11sMeshCapability->obj] = (PyObject *) py_Dot11sMeshCapability;
    py_retval = Py_BuildValue((char *) "N", py_Dot11sMeshCapability);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeConfiguration_ElementId(PyNs3Dot11sIeConfiguration *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeConfiguration_IsAirtime(PyNs3Dot11sIeConfiguration *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAirtime();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeConfiguration_GetNeighborCount(PyNs3Dot11sIeConfiguration *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNeighborCount();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeConfiguration_SetRouting(PyNs3Dot11sIeConfiguration *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::dot11s::dot11sPathSelectionProtocol routingId;
    const char *keywords[] = {"routingId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &routingId)) {
        return NULL;
    }
    self->obj->SetRouting(routingId);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeConfiguration_IsHWMP(PyNs3Dot11sIeConfiguration *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsHWMP();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeConfiguration_SerializeInformationField(PyNs3Dot11sIeConfiguration *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sIeConfiguration__copy__(PyNs3Dot11sIeConfiguration *self)
{

    PyNs3Dot11sIeConfiguration *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sIeConfiguration, &PyNs3Dot11sIeConfiguration_Type);
    
    py_copy->obj = new ns3::dot11s::IeConfiguration(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sIeConfiguration_methods[] = {
    {(char *) "SetMetric", (PyCFunction) _wrap_PyNs3Dot11sIeConfiguration_SetMetric, METH_KEYWORDS|METH_VARARGS, "SetMetric(metricId)\n\ntype: metricId: ns3::dot11s::dot11sPathSelectionMetric" },
    {(char *) "SetNeighborCount", (PyCFunction) _wrap_PyNs3Dot11sIeConfiguration_SetNeighborCount, METH_KEYWORDS|METH_VARARGS, "SetNeighborCount(neighbors)\n\ntype: neighbors: uint8_t" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIeConfiguration_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(i, length)\n\ntype: i: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3Dot11sIeConfiguration_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "MeshCapability", (PyCFunction) _wrap_PyNs3Dot11sIeConfiguration_MeshCapability, METH_NOARGS, "MeshCapability()\n\n" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3Dot11sIeConfiguration_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "IsAirtime", (PyCFunction) _wrap_PyNs3Dot11sIeConfiguration_IsAirtime, METH_NOARGS, "IsAirtime()\n\n" },
    {(char *) "GetNeighborCount", (PyCFunction) _wrap_PyNs3Dot11sIeConfiguration_GetNeighborCount, METH_NOARGS, "GetNeighborCount()\n\n" },
    {(char *) "SetRouting", (PyCFunction) _wrap_PyNs3Dot11sIeConfiguration_SetRouting, METH_KEYWORDS|METH_VARARGS, "SetRouting(routingId)\n\ntype: routingId: ns3::dot11s::dot11sPathSelectionProtocol" },
    {(char *) "IsHWMP", (PyCFunction) _wrap_PyNs3Dot11sIeConfiguration_IsHWMP, METH_NOARGS, "IsHWMP()\n\n" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIeConfiguration_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(i)\n\ntype: i: ns3::Buffer::Iterator" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sIeConfiguration__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sIeConfiguration__tp_dealloc(PyNs3Dot11sIeConfiguration *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::dot11s::IeConfiguration *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3Dot11sIeConfiguration__tp_str(PyNs3Dot11sIeConfiguration *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3Dot11sIeConfiguration__tp_richcompare (PyNs3Dot11sIeConfiguration *PYBINDGEN_UNUSED(self), PyNs3Dot11sIeConfiguration *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sIeConfiguration_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sIeConfiguration_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.IeConfiguration",            /* tp_name */
    sizeof(PyNs3Dot11sIeConfiguration),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sIeConfiguration__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3Dot11sIeConfiguration__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "IeConfiguration(arg0)\nIeConfiguration()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sIeConfiguration__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sIeConfiguration_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sIeConfiguration__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Dot11sIeLinkMetricReport__tp_init__0(PyNs3Dot11sIeLinkMetricReport *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sIeLinkMetricReport *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sIeLinkMetricReport_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeLinkMetricReport(*((PyNs3Dot11sIeLinkMetricReport *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sIeLinkMetricReport__tp_init__1(PyNs3Dot11sIeLinkMetricReport *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeLinkMetricReport();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sIeLinkMetricReport__tp_init__2(PyNs3Dot11sIeLinkMetricReport *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    unsigned int metric;
    const char *keywords[] = {"metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &metric)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeLinkMetricReport(metric);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sIeLinkMetricReport__tp_init(PyNs3Dot11sIeLinkMetricReport *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3Dot11sIeLinkMetricReport__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sIeLinkMetricReport__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3Dot11sIeLinkMetricReport__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sIeLinkMetricReport_SetMetric(PyNs3Dot11sIeLinkMetricReport *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int metric;
    const char *keywords[] = {"metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &metric)) {
        return NULL;
    }
    self->obj->SetMetric(metric);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeLinkMetricReport_DeserializeInformationField(PyNs3Dot11sIeLinkMetricReport *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeLinkMetricReport_GetMetric(PyNs3Dot11sIeLinkMetricReport *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMetric();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeLinkMetricReport_GetInformationFieldSize(PyNs3Dot11sIeLinkMetricReport *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeLinkMetricReport_SerializeInformationField(PyNs3Dot11sIeLinkMetricReport *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeLinkMetricReport_ElementId(PyNs3Dot11sIeLinkMetricReport *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sIeLinkMetricReport__copy__(PyNs3Dot11sIeLinkMetricReport *self)
{

    PyNs3Dot11sIeLinkMetricReport *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sIeLinkMetricReport, &PyNs3Dot11sIeLinkMetricReport_Type);
    
    py_copy->obj = new ns3::dot11s::IeLinkMetricReport(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sIeLinkMetricReport_methods[] = {
    {(char *) "SetMetric", (PyCFunction) _wrap_PyNs3Dot11sIeLinkMetricReport_SetMetric, METH_KEYWORDS|METH_VARARGS, "SetMetric(metric)\n\ntype: metric: uint32_t" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIeLinkMetricReport_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetMetric", (PyCFunction) _wrap_PyNs3Dot11sIeLinkMetricReport_GetMetric, METH_NOARGS, "GetMetric()\n\n" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3Dot11sIeLinkMetricReport_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIeLinkMetricReport_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(i)\n\ntype: i: ns3::Buffer::Iterator" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3Dot11sIeLinkMetricReport_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sIeLinkMetricReport__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sIeLinkMetricReport__tp_dealloc(PyNs3Dot11sIeLinkMetricReport *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::dot11s::IeLinkMetricReport *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3Dot11sIeLinkMetricReport__tp_str(PyNs3Dot11sIeLinkMetricReport *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3Dot11sIeLinkMetricReport__tp_richcompare (PyNs3Dot11sIeLinkMetricReport *PYBINDGEN_UNUSED(self), PyNs3Dot11sIeLinkMetricReport *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sIeLinkMetricReport_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        if (*self->obj < *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        if (*self->obj > *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sIeLinkMetricReport_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.IeLinkMetricReport",            /* tp_name */
    sizeof(PyNs3Dot11sIeLinkMetricReport),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sIeLinkMetricReport__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3Dot11sIeLinkMetricReport__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "IeLinkMetricReport(metric)\nIeLinkMetricReport(arg0)\nIeLinkMetricReport()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sIeLinkMetricReport__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sIeLinkMetricReport_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sIeLinkMetricReport__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Dot11sIeMeshId__tp_init__0(PyNs3Dot11sIeMeshId *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sIeMeshId *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sIeMeshId_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeMeshId(*((PyNs3Dot11sIeMeshId *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sIeMeshId__tp_init__1(PyNs3Dot11sIeMeshId *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeMeshId();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sIeMeshId__tp_init__2(PyNs3Dot11sIeMeshId *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *s;
    Py_ssize_t s_len;
    const char *keywords[] = {"s", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &s, &s_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeMeshId(std::string(s, s_len));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sIeMeshId__tp_init(PyNs3Dot11sIeMeshId *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3Dot11sIeMeshId__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sIeMeshId__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3Dot11sIeMeshId__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sIeMeshId_IsBroadcast(PyNs3Dot11sIeMeshId *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBroadcast();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeMeshId_DeserializeInformationField(PyNs3Dot11sIeMeshId *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeMeshId_GetInformationFieldSize(PyNs3Dot11sIeMeshId *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeMeshId_PeekString(PyNs3Dot11sIeMeshId *self)
{
    PyObject *py_retval;
    char *retval;
    
    retval = self->obj->PeekString();
    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeMeshId_SerializeInformationField(PyNs3Dot11sIeMeshId *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeMeshId_IsEqual(PyNs3Dot11sIeMeshId *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Dot11sIeMeshId *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sIeMeshId_Type, &o)) {
        return NULL;
    }
    retval = self->obj->IsEqual(*((PyNs3Dot11sIeMeshId *) o)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeMeshId_ElementId(PyNs3Dot11sIeMeshId *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sIeMeshId__copy__(PyNs3Dot11sIeMeshId *self)
{

    PyNs3Dot11sIeMeshId *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sIeMeshId, &PyNs3Dot11sIeMeshId_Type);
    
    py_copy->obj = new ns3::dot11s::IeMeshId(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sIeMeshId_methods[] = {
    {(char *) "IsBroadcast", (PyCFunction) _wrap_PyNs3Dot11sIeMeshId_IsBroadcast, METH_NOARGS, "IsBroadcast()\n\n" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIeMeshId_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3Dot11sIeMeshId_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "PeekString", (PyCFunction) _wrap_PyNs3Dot11sIeMeshId_PeekString, METH_NOARGS, "PeekString()\n\n" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIeMeshId_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(i)\n\ntype: i: ns3::Buffer::Iterator" },
    {(char *) "IsEqual", (PyCFunction) _wrap_PyNs3Dot11sIeMeshId_IsEqual, METH_KEYWORDS|METH_VARARGS, "IsEqual(o)\n\ntype: o: ns3::dot11s::IeMeshId const &" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3Dot11sIeMeshId_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sIeMeshId__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sIeMeshId__tp_dealloc(PyNs3Dot11sIeMeshId *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::dot11s::IeMeshId *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3Dot11sIeMeshId__tp_str(PyNs3Dot11sIeMeshId *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3Dot11sIeMeshId__tp_richcompare (PyNs3Dot11sIeMeshId *PYBINDGEN_UNUSED(self), PyNs3Dot11sIeMeshId *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sIeMeshId_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sIeMeshId_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.IeMeshId",            /* tp_name */
    sizeof(PyNs3Dot11sIeMeshId),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sIeMeshId__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3Dot11sIeMeshId__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "IeMeshId(arg0)\nIeMeshId(s)\nIeMeshId()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sIeMeshId__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sIeMeshId_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sIeMeshId__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3Dot11sIeMeshIdChecker__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'IeMeshIdChecker' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}

static PyMethodDef PyNs3Dot11sIeMeshIdChecker_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sIeMeshIdChecker__tp_dealloc(PyNs3Dot11sIeMeshIdChecker *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::dot11s::IeMeshIdChecker *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sIeMeshIdChecker__tp_richcompare (PyNs3Dot11sIeMeshIdChecker *PYBINDGEN_UNUSED(self), PyNs3Dot11sIeMeshIdChecker *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sIeMeshIdChecker_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sIeMeshIdChecker_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.IeMeshIdChecker",            /* tp_name */
    sizeof(PyNs3Dot11sIeMeshIdChecker),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sIeMeshIdChecker__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "IeMeshIdChecker(arg0)\nIeMeshIdChecker()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sIeMeshIdChecker__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sIeMeshIdChecker_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sIeMeshIdChecker__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Dot11sIeMeshIdValue__tp_init__0(PyNs3Dot11sIeMeshIdValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeMeshIdValue();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sIeMeshIdValue__tp_init__1(PyNs3Dot11sIeMeshIdValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sIeMeshIdValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sIeMeshIdValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeMeshIdValue(*((PyNs3Dot11sIeMeshIdValue *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sIeMeshIdValue__tp_init__2(PyNs3Dot11sIeMeshIdValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sIeMeshId *value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sIeMeshId_Type, &value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeMeshIdValue(*((PyNs3Dot11sIeMeshId *) value)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sIeMeshIdValue__tp_init(PyNs3Dot11sIeMeshIdValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3Dot11sIeMeshIdValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sIeMeshIdValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3Dot11sIeMeshIdValue__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sIeMeshIdValue_Set(PyNs3Dot11sIeMeshIdValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Dot11sIeMeshId *value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sIeMeshId_Type, &value)) {
        return NULL;
    }
    self->obj->Set(*((PyNs3Dot11sIeMeshId *) value)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeMeshIdValue_Get(PyNs3Dot11sIeMeshIdValue *self)
{
    PyObject *py_retval;
    PyNs3Dot11sIeMeshId *py_IeMeshId;
    
    ns3::dot11s::IeMeshId retval = self->obj->Get();
    py_IeMeshId = PyObject_New(PyNs3Dot11sIeMeshId, &PyNs3Dot11sIeMeshId_Type);
    
    py_IeMeshId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_IeMeshId->obj = new ns3::dot11s::IeMeshId(retval);
    PyNs3Empty_wrapper_registry[(void *) py_IeMeshId->obj] = (PyObject *) py_IeMeshId;
    py_retval = Py_BuildValue((char *) "N", py_IeMeshId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeMeshIdValue_Copy(PyNs3Dot11sIeMeshIdValue *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::AttributeValue > retval;
    PyNs3AttributeValue *py_AttributeValue;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->Copy();
    if (!(const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_AttributeValue = NULL;
    } else {
        py_AttributeValue = (PyNs3AttributeValue *) wrapper_lookup_iter->second;
        Py_INCREF(py_AttributeValue);
    }
    
    if (py_AttributeValue == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)))), &PyNs3AttributeValue_Type);
        py_AttributeValue = PyObject_New(PyNs3AttributeValue, wrapper_type);
    
        py_AttributeValue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval))->Ref();
        py_AttributeValue->obj = const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_AttributeValue->obj] = (PyObject *) py_AttributeValue;
    }
    py_retval = Py_BuildValue((char *) "N", py_AttributeValue);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeMeshIdValue_SerializeToString(PyNs3Dot11sIeMeshIdValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::string retval;
    PyNs3AttributeChecker *checker;
    ns3::AttributeChecker *checker_ptr;
    const char *keywords[] = {"checker", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AttributeChecker_Type, &checker)) {
        return NULL;
    }
    checker_ptr = (checker ? checker->obj : NULL);
    retval = self->obj->SerializeToString(ns3::Ptr< ns3::AttributeChecker  > (checker_ptr));
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeMeshIdValue_DeserializeFromString(PyNs3Dot11sIeMeshIdValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *value;
    Py_ssize_t value_len;
    PyNs3AttributeChecker *checker;
    ns3::AttributeChecker *checker_ptr;
    const char *keywords[] = {"value", "checker", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &value, &value_len, &PyNs3AttributeChecker_Type, &checker)) {
        return NULL;
    }
    checker_ptr = (checker ? checker->obj : NULL);
    retval = self->obj->DeserializeFromString(std::string(value, value_len), ns3::Ptr< ns3::AttributeChecker  > (checker_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sIeMeshIdValue__copy__(PyNs3Dot11sIeMeshIdValue *self)
{

    PyNs3Dot11sIeMeshIdValue *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sIeMeshIdValue, &PyNs3Dot11sIeMeshIdValue_Type);
    
    py_copy->obj = new ns3::dot11s::IeMeshIdValue(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sIeMeshIdValue_methods[] = {
    {(char *) "Set", (PyCFunction) _wrap_PyNs3Dot11sIeMeshIdValue_Set, METH_KEYWORDS|METH_VARARGS, "Set(value)\n\ntype: value: ns3::dot11s::IeMeshId const &" },
    {(char *) "Get", (PyCFunction) _wrap_PyNs3Dot11sIeMeshIdValue_Get, METH_NOARGS, "Get()\n\n" },
    {(char *) "Copy", (PyCFunction) _wrap_PyNs3Dot11sIeMeshIdValue_Copy, METH_NOARGS, "Copy()\n\n" },
    {(char *) "SerializeToString", (PyCFunction) _wrap_PyNs3Dot11sIeMeshIdValue_SerializeToString, METH_KEYWORDS|METH_VARARGS, "SerializeToString(checker)\n\ntype: checker: ns3::Ptr< ns3::AttributeChecker const >" },
    {(char *) "DeserializeFromString", (PyCFunction) _wrap_PyNs3Dot11sIeMeshIdValue_DeserializeFromString, METH_KEYWORDS|METH_VARARGS, "DeserializeFromString(value, checker)\n\ntype: value: std::string\ntype: checker: ns3::Ptr< ns3::AttributeChecker const >" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sIeMeshIdValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sIeMeshIdValue__tp_dealloc(PyNs3Dot11sIeMeshIdValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::dot11s::IeMeshIdValue *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sIeMeshIdValue__tp_richcompare (PyNs3Dot11sIeMeshIdValue *PYBINDGEN_UNUSED(self), PyNs3Dot11sIeMeshIdValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sIeMeshIdValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sIeMeshIdValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.IeMeshIdValue",            /* tp_name */
    sizeof(PyNs3Dot11sIeMeshIdValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sIeMeshIdValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "IeMeshIdValue(value)\nIeMeshIdValue(arg0)\nIeMeshIdValue()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sIeMeshIdValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sIeMeshIdValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sIeMeshIdValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Dot11sIePeerManagement__tp_init__0(PyNs3Dot11sIePeerManagement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sIePeerManagement *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sIePeerManagement_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IePeerManagement(*((PyNs3Dot11sIePeerManagement *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sIePeerManagement__tp_init__1(PyNs3Dot11sIePeerManagement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IePeerManagement();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sIePeerManagement__tp_init(PyNs3Dot11sIePeerManagement *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sIePeerManagement__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sIePeerManagement__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sIePeerManagement_SetPeerClose(PyNs3Dot11sIePeerManagement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int localLinkID;
    int peerLinkId;
    ns3::dot11s::PmpReasonCode reasonCode;
    const char *keywords[] = {"localLinkID", "peerLinkId", "reasonCode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iii", (char **) keywords, &localLinkID, &peerLinkId, &reasonCode)) {
        return NULL;
    }
    if (localLinkID > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (peerLinkId > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPeerClose(localLinkID, peerLinkId, reasonCode);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePeerManagement_GetReasonCode(PyNs3Dot11sIePeerManagement *self)
{
    PyObject *py_retval;
    ns3::dot11s::PmpReasonCode retval;
    
    retval = self->obj->GetReasonCode();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePeerManagement_DeserializeInformationField(PyNs3Dot11sIePeerManagement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *i;
    int length;
    const char *keywords[] = {"i", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &i, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) i)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePeerManagement_GetPeerLinkId(PyNs3Dot11sIePeerManagement *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetPeerLinkId();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePeerManagement_GetSubtype(PyNs3Dot11sIePeerManagement *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSubtype();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePeerManagement_GetInformationFieldSize(PyNs3Dot11sIePeerManagement *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePeerManagement_SubtypeIsConfirm(PyNs3Dot11sIePeerManagement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->SubtypeIsConfirm();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePeerManagement_SerializeInformationField(PyNs3Dot11sIePeerManagement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePeerManagement_SetPeerOpen(PyNs3Dot11sIePeerManagement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int localLinkId;
    const char *keywords[] = {"localLinkId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &localLinkId)) {
        return NULL;
    }
    if (localLinkId > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPeerOpen(localLinkId);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePeerManagement_SubtypeIsClose(PyNs3Dot11sIePeerManagement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->SubtypeIsClose();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePeerManagement_SetPeerConfirm(PyNs3Dot11sIePeerManagement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int localLinkID;
    int peerLinkId;
    const char *keywords[] = {"localLinkID", "peerLinkId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &localLinkID, &peerLinkId)) {
        return NULL;
    }
    if (localLinkID > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (peerLinkId > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPeerConfirm(localLinkID, peerLinkId);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePeerManagement_GetLocalLinkId(PyNs3Dot11sIePeerManagement *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetLocalLinkId();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePeerManagement_ElementId(PyNs3Dot11sIePeerManagement *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePeerManagement_SubtypeIsOpen(PyNs3Dot11sIePeerManagement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->SubtypeIsOpen();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sIePeerManagement__copy__(PyNs3Dot11sIePeerManagement *self)
{

    PyNs3Dot11sIePeerManagement *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sIePeerManagement, &PyNs3Dot11sIePeerManagement_Type);
    
    py_copy->obj = new ns3::dot11s::IePeerManagement(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sIePeerManagement_methods[] = {
    {(char *) "SetPeerClose", (PyCFunction) _wrap_PyNs3Dot11sIePeerManagement_SetPeerClose, METH_KEYWORDS|METH_VARARGS, "SetPeerClose(localLinkID, peerLinkId, reasonCode)\n\ntype: localLinkID: uint16_t\ntype: peerLinkId: uint16_t\ntype: reasonCode: ns3::dot11s::PmpReasonCode" },
    {(char *) "GetReasonCode", (PyCFunction) _wrap_PyNs3Dot11sIePeerManagement_GetReasonCode, METH_NOARGS, "GetReasonCode()\n\n" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIePeerManagement_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(i, length)\n\ntype: i: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetPeerLinkId", (PyCFunction) _wrap_PyNs3Dot11sIePeerManagement_GetPeerLinkId, METH_NOARGS, "GetPeerLinkId()\n\n" },
    {(char *) "GetSubtype", (PyCFunction) _wrap_PyNs3Dot11sIePeerManagement_GetSubtype, METH_NOARGS, "GetSubtype()\n\n" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3Dot11sIePeerManagement_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "SubtypeIsConfirm", (PyCFunction) _wrap_PyNs3Dot11sIePeerManagement_SubtypeIsConfirm, METH_NOARGS, "SubtypeIsConfirm()\n\n" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIePeerManagement_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(i)\n\ntype: i: ns3::Buffer::Iterator" },
    {(char *) "SetPeerOpen", (PyCFunction) _wrap_PyNs3Dot11sIePeerManagement_SetPeerOpen, METH_KEYWORDS|METH_VARARGS, "SetPeerOpen(localLinkId)\n\ntype: localLinkId: uint16_t" },
    {(char *) "SubtypeIsClose", (PyCFunction) _wrap_PyNs3Dot11sIePeerManagement_SubtypeIsClose, METH_NOARGS, "SubtypeIsClose()\n\n" },
    {(char *) "SetPeerConfirm", (PyCFunction) _wrap_PyNs3Dot11sIePeerManagement_SetPeerConfirm, METH_KEYWORDS|METH_VARARGS, "SetPeerConfirm(localLinkID, peerLinkId)\n\ntype: localLinkID: uint16_t\ntype: peerLinkId: uint16_t" },
    {(char *) "GetLocalLinkId", (PyCFunction) _wrap_PyNs3Dot11sIePeerManagement_GetLocalLinkId, METH_NOARGS, "GetLocalLinkId()\n\n" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3Dot11sIePeerManagement_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "SubtypeIsOpen", (PyCFunction) _wrap_PyNs3Dot11sIePeerManagement_SubtypeIsOpen, METH_NOARGS, "SubtypeIsOpen()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sIePeerManagement__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sIePeerManagement__tp_dealloc(PyNs3Dot11sIePeerManagement *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::dot11s::IePeerManagement *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3Dot11sIePeerManagement__tp_str(PyNs3Dot11sIePeerManagement *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3Dot11sIePeerManagement__tp_richcompare (PyNs3Dot11sIePeerManagement *PYBINDGEN_UNUSED(self), PyNs3Dot11sIePeerManagement *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sIePeerManagement_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sIePeerManagement_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.IePeerManagement",            /* tp_name */
    sizeof(PyNs3Dot11sIePeerManagement),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sIePeerManagement__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3Dot11sIePeerManagement__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "IePeerManagement(arg0)\nIePeerManagement()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sIePeerManagement__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sIePeerManagement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sIePeerManagement__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Dot11sIePeeringProtocol__tp_init__0(PyNs3Dot11sIePeeringProtocol *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sIePeeringProtocol *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sIePeeringProtocol_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IePeeringProtocol(*((PyNs3Dot11sIePeeringProtocol *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sIePeeringProtocol__tp_init__1(PyNs3Dot11sIePeeringProtocol *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IePeeringProtocol();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sIePeeringProtocol__tp_init(PyNs3Dot11sIePeeringProtocol *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sIePeeringProtocol__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sIePeeringProtocol__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sIePeeringProtocol_GetInformationFieldSize(PyNs3Dot11sIePeeringProtocol *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePeeringProtocol_DeserializeInformationField(PyNs3Dot11sIePeeringProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *i;
    int length;
    const char *keywords[] = {"i", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &i, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) i)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePeeringProtocol_SerializeInformationField(PyNs3Dot11sIePeeringProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePeeringProtocol_ElementId(PyNs3Dot11sIePeeringProtocol *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sIePeeringProtocol__copy__(PyNs3Dot11sIePeeringProtocol *self)
{

    PyNs3Dot11sIePeeringProtocol *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sIePeeringProtocol, &PyNs3Dot11sIePeeringProtocol_Type);
    
    py_copy->obj = new ns3::dot11s::IePeeringProtocol(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sIePeeringProtocol_methods[] = {
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3Dot11sIePeeringProtocol_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIePeeringProtocol_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(i, length)\n\ntype: i: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIePeeringProtocol_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(i)\n\ntype: i: ns3::Buffer::Iterator" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3Dot11sIePeeringProtocol_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sIePeeringProtocol__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sIePeeringProtocol__tp_dealloc(PyNs3Dot11sIePeeringProtocol *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::dot11s::IePeeringProtocol *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sIePeeringProtocol__tp_richcompare (PyNs3Dot11sIePeeringProtocol *PYBINDGEN_UNUSED(self), PyNs3Dot11sIePeeringProtocol *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sIePeeringProtocol_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sIePeeringProtocol_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.IePeeringProtocol",            /* tp_name */
    sizeof(PyNs3Dot11sIePeeringProtocol),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sIePeeringProtocol__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "IePeeringProtocol(arg0)\nIePeeringProtocol()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sIePeeringProtocol__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sIePeeringProtocol_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sIePeeringProtocol__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Dot11sIePerr__tp_init__0(PyNs3Dot11sIePerr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sIePerr *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sIePerr_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IePerr(*((PyNs3Dot11sIePerr *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sIePerr__tp_init__1(PyNs3Dot11sIePerr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IePerr();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sIePerr__tp_init(PyNs3Dot11sIePerr *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sIePerr__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sIePerr__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sIePerr_AddAddressUnit(PyNs3Dot11sIePerr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Dot11sHwmpProtocolFailedDestination *unit;
    const char *keywords[] = {"unit", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sHwmpProtocolFailedDestination_Type, &unit)) {
        return NULL;
    }
    self->obj->AddAddressUnit(*((PyNs3Dot11sHwmpProtocolFailedDestination *) unit)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePerr_IsFull(PyNs3Dot11sIePerr *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsFull();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePerr_DeserializeInformationField(PyNs3Dot11sIePerr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePerr_DeleteAddressUnit(PyNs3Dot11sIePerr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->DeleteAddressUnit(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePerr_GetInformationFieldSize(PyNs3Dot11sIePerr *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePerr_GetNumOfDest(PyNs3Dot11sIePerr *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNumOfDest();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePerr_ResetPerr(PyNs3Dot11sIePerr *self)
{
    PyObject *py_retval;
    
    self->obj->ResetPerr();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePerr_GetAddressUnitVector(PyNs3Dot11sIePerr *self)
{
    PyObject *py_retval;
    std::vector< ns3::dot11s::HwmpProtocol::FailedDestination > retval;
    Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__ *py_std__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__;
    
    retval = self->obj->GetAddressUnitVector();
    py_std__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__ = PyObject_New(Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__, &Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt___Type);
    py_std__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__->obj = new std::vector< ns3::dot11s::HwmpProtocol::FailedDestination >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePerr_ElementId(PyNs3Dot11sIePerr *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePerr_SerializeInformationField(PyNs3Dot11sIePerr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sIePerr__copy__(PyNs3Dot11sIePerr *self)
{

    PyNs3Dot11sIePerr *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sIePerr, &PyNs3Dot11sIePerr_Type);
    
    py_copy->obj = new ns3::dot11s::IePerr(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sIePerr_methods[] = {
    {(char *) "AddAddressUnit", (PyCFunction) _wrap_PyNs3Dot11sIePerr_AddAddressUnit, METH_KEYWORDS|METH_VARARGS, "AddAddressUnit(unit)\n\ntype: unit: ns3::dot11s::HwmpProtocol::FailedDestination" },
    {(char *) "IsFull", (PyCFunction) _wrap_PyNs3Dot11sIePerr_IsFull, METH_NOARGS, "IsFull()\n\n" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIePerr_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "DeleteAddressUnit", (PyCFunction) _wrap_PyNs3Dot11sIePerr_DeleteAddressUnit, METH_KEYWORDS|METH_VARARGS, "DeleteAddressUnit(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3Dot11sIePerr_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "GetNumOfDest", (PyCFunction) _wrap_PyNs3Dot11sIePerr_GetNumOfDest, METH_NOARGS, "GetNumOfDest()\n\n" },
    {(char *) "ResetPerr", (PyCFunction) _wrap_PyNs3Dot11sIePerr_ResetPerr, METH_NOARGS, "ResetPerr()\n\n" },
    {(char *) "GetAddressUnitVector", (PyCFunction) _wrap_PyNs3Dot11sIePerr_GetAddressUnitVector, METH_NOARGS, "GetAddressUnitVector()\n\n" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3Dot11sIePerr_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIePerr_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(i)\n\ntype: i: ns3::Buffer::Iterator" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sIePerr__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sIePerr__tp_dealloc(PyNs3Dot11sIePerr *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::dot11s::IePerr *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3Dot11sIePerr__tp_str(PyNs3Dot11sIePerr *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3Dot11sIePerr__tp_richcompare (PyNs3Dot11sIePerr *PYBINDGEN_UNUSED(self), PyNs3Dot11sIePerr *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sIePerr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sIePerr_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.IePerr",            /* tp_name */
    sizeof(PyNs3Dot11sIePerr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sIePerr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3Dot11sIePerr__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "IePerr(arg0)\nIePerr()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sIePerr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sIePerr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sIePerr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Dot11sIePrep__tp_init__0(PyNs3Dot11sIePrep *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sIePrep *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sIePrep_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IePrep(*((PyNs3Dot11sIePrep *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sIePrep__tp_init__1(PyNs3Dot11sIePrep *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IePrep();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sIePrep__tp_init(PyNs3Dot11sIePrep *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sIePrep__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sIePrep__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_SetMetric(PyNs3Dot11sIePrep *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int metric;
    const char *keywords[] = {"metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &metric)) {
        return NULL;
    }
    self->obj->SetMetric(metric);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_DeserializeInformationField(PyNs3Dot11sIePrep *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_GetLifetime(PyNs3Dot11sIePrep *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetLifetime();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_GetMetric(PyNs3Dot11sIePrep *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMetric();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_SetTtl(PyNs3Dot11sIePrep *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ttl;
    const char *keywords[] = {"ttl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ttl)) {
        return NULL;
    }
    if (ttl > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTtl(ttl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_SerializeInformationField(PyNs3Dot11sIePrep *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_GetDestinationSeqNumber(PyNs3Dot11sIePrep *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetDestinationSeqNumber();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_SetLifetime(PyNs3Dot11sIePrep *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int lifetime;
    const char *keywords[] = {"lifetime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &lifetime)) {
        return NULL;
    }
    self->obj->SetLifetime(lifetime);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_GetFlags(PyNs3Dot11sIePrep *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetFlags();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_ElementId(PyNs3Dot11sIePrep *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_SetDestinationAddress(PyNs3Dot11sIePrep *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *dest_address;
    const char *keywords[] = {"dest_address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &dest_address)) {
        return NULL;
    }
    self->obj->SetDestinationAddress(*((PyNs3Mac48Address *) dest_address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_GetHopcount(PyNs3Dot11sIePrep *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetHopcount();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_GetOriginatorSeqNumber(PyNs3Dot11sIePrep *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetOriginatorSeqNumber();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_GetInformationFieldSize(PyNs3Dot11sIePrep *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_SetOriginatorAddress(PyNs3Dot11sIePrep *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *originator_address;
    const char *keywords[] = {"originator_address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &originator_address)) {
        return NULL;
    }
    self->obj->SetOriginatorAddress(*((PyNs3Mac48Address *) originator_address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_SetOriginatorSeqNumber(PyNs3Dot11sIePrep *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int originator_seq_number;
    const char *keywords[] = {"originator_seq_number", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &originator_seq_number)) {
        return NULL;
    }
    self->obj->SetOriginatorSeqNumber(originator_seq_number);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_SetFlags(PyNs3Dot11sIePrep *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int flags;
    const char *keywords[] = {"flags", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &flags)) {
        return NULL;
    }
    if (flags > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFlags(flags);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_DecrementTtl(PyNs3Dot11sIePrep *self)
{
    PyObject *py_retval;
    
    self->obj->DecrementTtl();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_GetDestinationAddress(PyNs3Dot11sIePrep *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetDestinationAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_GetOriginatorAddress(PyNs3Dot11sIePrep *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetOriginatorAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_SetHopcount(PyNs3Dot11sIePrep *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int hopcount;
    const char *keywords[] = {"hopcount", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &hopcount)) {
        return NULL;
    }
    if (hopcount > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHopcount(hopcount);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_IncrementMetric(PyNs3Dot11sIePrep *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int metric;
    const char *keywords[] = {"metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &metric)) {
        return NULL;
    }
    self->obj->IncrementMetric(metric);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_SetDestinationSeqNumber(PyNs3Dot11sIePrep *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int dest_seq_number;
    const char *keywords[] = {"dest_seq_number", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &dest_seq_number)) {
        return NULL;
    }
    self->obj->SetDestinationSeqNumber(dest_seq_number);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePrep_GetTtl(PyNs3Dot11sIePrep *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetTtl();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sIePrep__copy__(PyNs3Dot11sIePrep *self)
{

    PyNs3Dot11sIePrep *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sIePrep, &PyNs3Dot11sIePrep_Type);
    
    py_copy->obj = new ns3::dot11s::IePrep(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sIePrep_methods[] = {
    {(char *) "SetMetric", (PyCFunction) _wrap_PyNs3Dot11sIePrep_SetMetric, METH_KEYWORDS|METH_VARARGS, "SetMetric(metric)\n\ntype: metric: uint32_t" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIePrep_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetLifetime", (PyCFunction) _wrap_PyNs3Dot11sIePrep_GetLifetime, METH_NOARGS, "GetLifetime()\n\n" },
    {(char *) "GetMetric", (PyCFunction) _wrap_PyNs3Dot11sIePrep_GetMetric, METH_NOARGS, "GetMetric()\n\n" },
    {(char *) "SetTtl", (PyCFunction) _wrap_PyNs3Dot11sIePrep_SetTtl, METH_KEYWORDS|METH_VARARGS, "SetTtl(ttl)\n\ntype: ttl: uint8_t" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIePrep_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(i)\n\ntype: i: ns3::Buffer::Iterator" },
    {(char *) "GetDestinationSeqNumber", (PyCFunction) _wrap_PyNs3Dot11sIePrep_GetDestinationSeqNumber, METH_NOARGS, "GetDestinationSeqNumber()\n\n" },
    {(char *) "SetLifetime", (PyCFunction) _wrap_PyNs3Dot11sIePrep_SetLifetime, METH_KEYWORDS|METH_VARARGS, "SetLifetime(lifetime)\n\ntype: lifetime: uint32_t" },
    {(char *) "GetFlags", (PyCFunction) _wrap_PyNs3Dot11sIePrep_GetFlags, METH_NOARGS, "GetFlags()\n\n" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3Dot11sIePrep_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "SetDestinationAddress", (PyCFunction) _wrap_PyNs3Dot11sIePrep_SetDestinationAddress, METH_KEYWORDS|METH_VARARGS, "SetDestinationAddress(dest_address)\n\ntype: dest_address: ns3::Mac48Address" },
    {(char *) "GetHopcount", (PyCFunction) _wrap_PyNs3Dot11sIePrep_GetHopcount, METH_NOARGS, "GetHopcount()\n\n" },
    {(char *) "GetOriginatorSeqNumber", (PyCFunction) _wrap_PyNs3Dot11sIePrep_GetOriginatorSeqNumber, METH_NOARGS, "GetOriginatorSeqNumber()\n\n" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3Dot11sIePrep_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "SetOriginatorAddress", (PyCFunction) _wrap_PyNs3Dot11sIePrep_SetOriginatorAddress, METH_KEYWORDS|METH_VARARGS, "SetOriginatorAddress(originator_address)\n\ntype: originator_address: ns3::Mac48Address" },
    {(char *) "SetOriginatorSeqNumber", (PyCFunction) _wrap_PyNs3Dot11sIePrep_SetOriginatorSeqNumber, METH_KEYWORDS|METH_VARARGS, "SetOriginatorSeqNumber(originator_seq_number)\n\ntype: originator_seq_number: uint32_t" },
    {(char *) "SetFlags", (PyCFunction) _wrap_PyNs3Dot11sIePrep_SetFlags, METH_KEYWORDS|METH_VARARGS, "SetFlags(flags)\n\ntype: flags: uint8_t" },
    {(char *) "DecrementTtl", (PyCFunction) _wrap_PyNs3Dot11sIePrep_DecrementTtl, METH_NOARGS, "DecrementTtl()\n\n" },
    {(char *) "GetDestinationAddress", (PyCFunction) _wrap_PyNs3Dot11sIePrep_GetDestinationAddress, METH_NOARGS, "GetDestinationAddress()\n\n" },
    {(char *) "GetOriginatorAddress", (PyCFunction) _wrap_PyNs3Dot11sIePrep_GetOriginatorAddress, METH_NOARGS, "GetOriginatorAddress()\n\n" },
    {(char *) "SetHopcount", (PyCFunction) _wrap_PyNs3Dot11sIePrep_SetHopcount, METH_KEYWORDS|METH_VARARGS, "SetHopcount(hopcount)\n\ntype: hopcount: uint8_t" },
    {(char *) "IncrementMetric", (PyCFunction) _wrap_PyNs3Dot11sIePrep_IncrementMetric, METH_KEYWORDS|METH_VARARGS, "IncrementMetric(metric)\n\ntype: metric: uint32_t" },
    {(char *) "SetDestinationSeqNumber", (PyCFunction) _wrap_PyNs3Dot11sIePrep_SetDestinationSeqNumber, METH_KEYWORDS|METH_VARARGS, "SetDestinationSeqNumber(dest_seq_number)\n\ntype: dest_seq_number: uint32_t" },
    {(char *) "GetTtl", (PyCFunction) _wrap_PyNs3Dot11sIePrep_GetTtl, METH_NOARGS, "GetTtl()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sIePrep__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sIePrep__tp_dealloc(PyNs3Dot11sIePrep *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::dot11s::IePrep *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3Dot11sIePrep__tp_str(PyNs3Dot11sIePrep *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3Dot11sIePrep__tp_richcompare (PyNs3Dot11sIePrep *PYBINDGEN_UNUSED(self), PyNs3Dot11sIePrep *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sIePrep_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sIePrep_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.IePrep",            /* tp_name */
    sizeof(PyNs3Dot11sIePrep),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sIePrep__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3Dot11sIePrep__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "IePrep(arg0)\nIePrep()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sIePrep__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sIePrep_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sIePrep__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Dot11sIePreq__tp_init__0(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sIePreq *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sIePreq_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IePreq(*((PyNs3Dot11sIePreq *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sIePreq__tp_init__1(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IePreq();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sIePreq__tp_init(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sIePreq__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sIePreq__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_IsUnicastPreq(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsUnicastPreq();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_SetMetric(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int metric;
    const char *keywords[] = {"metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &metric)) {
        return NULL;
    }
    self->obj->SetMetric(metric);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_DelDestinationAddressElement(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *dest_address;
    const char *keywords[] = {"dest_address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &dest_address)) {
        return NULL;
    }
    self->obj->DelDestinationAddressElement(*((PyNs3Mac48Address *) dest_address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_DeserializeInformationField(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *i;
    int length;
    const char *keywords[] = {"i", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &i, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) i)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_GetLifetime(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetLifetime();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_GetMetric(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMetric();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_SerializeInformationField(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_SetLifetime(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int lifetime;
    const char *keywords[] = {"lifetime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &lifetime)) {
        return NULL;
    }
    self->obj->SetLifetime(lifetime);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_ClearDestinationAddressElements(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    
    self->obj->ClearDestinationAddressElements();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_ElementId(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_SetDestCount(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int dest_count;
    const char *keywords[] = {"dest_count", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &dest_count)) {
        return NULL;
    }
    if (dest_count > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetDestCount(dest_count);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_IsFull(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsFull();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_GetOriginatorSeqNumber(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetOriginatorSeqNumber();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_SetPreqID(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int id;
    const char *keywords[] = {"id", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &id)) {
        return NULL;
    }
    self->obj->SetPreqID(id);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_GetInformationFieldSize(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_SetOriginatorAddress(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *originator_address;
    const char *keywords[] = {"originator_address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &originator_address)) {
        return NULL;
    }
    self->obj->SetOriginatorAddress(*((PyNs3Mac48Address *) originator_address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_SetUnicastPreq(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    
    self->obj->SetUnicastPreq();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_GetHopCount(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetHopCount();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_SetOriginatorSeqNumber(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int originator_seq_number;
    const char *keywords[] = {"originator_seq_number", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &originator_seq_number)) {
        return NULL;
    }
    self->obj->SetOriginatorSeqNumber(originator_seq_number);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_GetPreqID(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetPreqID();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_IsNeedNotPrep(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsNeedNotPrep();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_DecrementTtl(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    
    self->obj->DecrementTtl();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_GetDestCount(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetDestCount();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_MayAddAddress(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *originator;
    const char *keywords[] = {"originator", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &originator)) {
        return NULL;
    }
    retval = self->obj->MayAddAddress(*((PyNs3Mac48Address *) originator)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_GetOriginatorAddress(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetOriginatorAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_SetTTL(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ttl;
    const char *keywords[] = {"ttl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ttl)) {
        return NULL;
    }
    if (ttl > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTTL(ttl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_GetDestinationList(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ptr< ns3::dot11s::DestinationAddressUnit > > retval;
    Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__ *py_std__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__;
    
    retval = self->obj->GetDestinationList();
    py_std__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__ = PyObject_New(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__, &Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt___Type);
    py_std__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__->obj = new std::vector< ns3::Ptr< ns3::dot11s::DestinationAddressUnit > >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_SetNeedNotPrep(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    
    self->obj->SetNeedNotPrep();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_SetHopcount(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int hopcount;
    const char *keywords[] = {"hopcount", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &hopcount)) {
        return NULL;
    }
    if (hopcount > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHopcount(hopcount);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_IncrementMetric(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int metric;
    const char *keywords[] = {"metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &metric)) {
        return NULL;
    }
    self->obj->IncrementMetric(metric);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_GetTtl(PyNs3Dot11sIePreq *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTtl();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIePreq_AddDestinationAddressElement(PyNs3Dot11sIePreq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool doFlag;
    PyObject *py_doFlag;
    bool rfFlag;
    PyObject *py_rfFlag;
    PyNs3Mac48Address *dest_address;
    unsigned int dest_seq_number;
    const char *keywords[] = {"doFlag", "rfFlag", "dest_address", "dest_seq_number", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "OOO!I", (char **) keywords, &py_doFlag, &py_rfFlag, &PyNs3Mac48Address_Type, &dest_address, &dest_seq_number)) {
        return NULL;
    }
    doFlag = (bool) PyObject_IsTrue(py_doFlag);
    rfFlag = (bool) PyObject_IsTrue(py_rfFlag);
    self->obj->AddDestinationAddressElement(doFlag, rfFlag, *((PyNs3Mac48Address *) dest_address)->obj, dest_seq_number);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sIePreq__copy__(PyNs3Dot11sIePreq *self)
{

    PyNs3Dot11sIePreq *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sIePreq, &PyNs3Dot11sIePreq_Type);
    
    py_copy->obj = new ns3::dot11s::IePreq(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sIePreq_methods[] = {
    {(char *) "IsUnicastPreq", (PyCFunction) _wrap_PyNs3Dot11sIePreq_IsUnicastPreq, METH_NOARGS, "IsUnicastPreq()\n\n" },
    {(char *) "SetMetric", (PyCFunction) _wrap_PyNs3Dot11sIePreq_SetMetric, METH_KEYWORDS|METH_VARARGS, "SetMetric(metric)\n\ntype: metric: uint32_t" },
    {(char *) "DelDestinationAddressElement", (PyCFunction) _wrap_PyNs3Dot11sIePreq_DelDestinationAddressElement, METH_KEYWORDS|METH_VARARGS, "DelDestinationAddressElement(dest_address)\n\ntype: dest_address: ns3::Mac48Address" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIePreq_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(i, length)\n\ntype: i: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "GetLifetime", (PyCFunction) _wrap_PyNs3Dot11sIePreq_GetLifetime, METH_NOARGS, "GetLifetime()\n\n" },
    {(char *) "GetMetric", (PyCFunction) _wrap_PyNs3Dot11sIePreq_GetMetric, METH_NOARGS, "GetMetric()\n\n" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIePreq_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(i)\n\ntype: i: ns3::Buffer::Iterator" },
    {(char *) "SetLifetime", (PyCFunction) _wrap_PyNs3Dot11sIePreq_SetLifetime, METH_KEYWORDS|METH_VARARGS, "SetLifetime(lifetime)\n\ntype: lifetime: uint32_t" },
    {(char *) "ClearDestinationAddressElements", (PyCFunction) _wrap_PyNs3Dot11sIePreq_ClearDestinationAddressElements, METH_NOARGS, "ClearDestinationAddressElements()\n\n" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3Dot11sIePreq_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "SetDestCount", (PyCFunction) _wrap_PyNs3Dot11sIePreq_SetDestCount, METH_KEYWORDS|METH_VARARGS, "SetDestCount(dest_count)\n\ntype: dest_count: uint8_t" },
    {(char *) "IsFull", (PyCFunction) _wrap_PyNs3Dot11sIePreq_IsFull, METH_NOARGS, "IsFull()\n\n" },
    {(char *) "GetOriginatorSeqNumber", (PyCFunction) _wrap_PyNs3Dot11sIePreq_GetOriginatorSeqNumber, METH_NOARGS, "GetOriginatorSeqNumber()\n\n" },
    {(char *) "SetPreqID", (PyCFunction) _wrap_PyNs3Dot11sIePreq_SetPreqID, METH_KEYWORDS|METH_VARARGS, "SetPreqID(id)\n\ntype: id: uint32_t" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3Dot11sIePreq_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "SetOriginatorAddress", (PyCFunction) _wrap_PyNs3Dot11sIePreq_SetOriginatorAddress, METH_KEYWORDS|METH_VARARGS, "SetOriginatorAddress(originator_address)\n\ntype: originator_address: ns3::Mac48Address" },
    {(char *) "SetUnicastPreq", (PyCFunction) _wrap_PyNs3Dot11sIePreq_SetUnicastPreq, METH_NOARGS, "SetUnicastPreq()\n\n" },
    {(char *) "GetHopCount", (PyCFunction) _wrap_PyNs3Dot11sIePreq_GetHopCount, METH_NOARGS, "GetHopCount()\n\n" },
    {(char *) "SetOriginatorSeqNumber", (PyCFunction) _wrap_PyNs3Dot11sIePreq_SetOriginatorSeqNumber, METH_KEYWORDS|METH_VARARGS, "SetOriginatorSeqNumber(originator_seq_number)\n\ntype: originator_seq_number: uint32_t" },
    {(char *) "GetPreqID", (PyCFunction) _wrap_PyNs3Dot11sIePreq_GetPreqID, METH_NOARGS, "GetPreqID()\n\n" },
    {(char *) "IsNeedNotPrep", (PyCFunction) _wrap_PyNs3Dot11sIePreq_IsNeedNotPrep, METH_NOARGS, "IsNeedNotPrep()\n\n" },
    {(char *) "DecrementTtl", (PyCFunction) _wrap_PyNs3Dot11sIePreq_DecrementTtl, METH_NOARGS, "DecrementTtl()\n\n" },
    {(char *) "GetDestCount", (PyCFunction) _wrap_PyNs3Dot11sIePreq_GetDestCount, METH_NOARGS, "GetDestCount()\n\n" },
    {(char *) "MayAddAddress", (PyCFunction) _wrap_PyNs3Dot11sIePreq_MayAddAddress, METH_KEYWORDS|METH_VARARGS, "MayAddAddress(originator)\n\ntype: originator: ns3::Mac48Address" },
    {(char *) "GetOriginatorAddress", (PyCFunction) _wrap_PyNs3Dot11sIePreq_GetOriginatorAddress, METH_NOARGS, "GetOriginatorAddress()\n\n" },
    {(char *) "SetTTL", (PyCFunction) _wrap_PyNs3Dot11sIePreq_SetTTL, METH_KEYWORDS|METH_VARARGS, "SetTTL(ttl)\n\ntype: ttl: uint8_t" },
    {(char *) "GetDestinationList", (PyCFunction) _wrap_PyNs3Dot11sIePreq_GetDestinationList, METH_NOARGS, "GetDestinationList()\n\n" },
    {(char *) "SetNeedNotPrep", (PyCFunction) _wrap_PyNs3Dot11sIePreq_SetNeedNotPrep, METH_NOARGS, "SetNeedNotPrep()\n\n" },
    {(char *) "SetHopcount", (PyCFunction) _wrap_PyNs3Dot11sIePreq_SetHopcount, METH_KEYWORDS|METH_VARARGS, "SetHopcount(hopcount)\n\ntype: hopcount: uint8_t" },
    {(char *) "IncrementMetric", (PyCFunction) _wrap_PyNs3Dot11sIePreq_IncrementMetric, METH_KEYWORDS|METH_VARARGS, "IncrementMetric(metric)\n\ntype: metric: uint32_t" },
    {(char *) "GetTtl", (PyCFunction) _wrap_PyNs3Dot11sIePreq_GetTtl, METH_NOARGS, "GetTtl()\n\n" },
    {(char *) "AddDestinationAddressElement", (PyCFunction) _wrap_PyNs3Dot11sIePreq_AddDestinationAddressElement, METH_KEYWORDS|METH_VARARGS, "AddDestinationAddressElement(doFlag, rfFlag, dest_address, dest_seq_number)\n\ntype: doFlag: bool\ntype: rfFlag: bool\ntype: dest_address: ns3::Mac48Address\ntype: dest_seq_number: uint32_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sIePreq__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sIePreq__tp_dealloc(PyNs3Dot11sIePreq *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::dot11s::IePreq *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3Dot11sIePreq__tp_str(PyNs3Dot11sIePreq *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3Dot11sIePreq__tp_richcompare (PyNs3Dot11sIePreq *PYBINDGEN_UNUSED(self), PyNs3Dot11sIePreq *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sIePreq_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sIePreq_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.IePreq",            /* tp_name */
    sizeof(PyNs3Dot11sIePreq),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sIePreq__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3Dot11sIePreq__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "IePreq(arg0)\nIePreq()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sIePreq__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sIePreq_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sIePreq__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Dot11sIeRann__tp_init__0(PyNs3Dot11sIeRann *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sIeRann *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sIeRann_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeRann(*((PyNs3Dot11sIeRann *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sIeRann__tp_init__1(PyNs3Dot11sIeRann *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::IeRann();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sIeRann__tp_init(PyNs3Dot11sIeRann *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sIeRann__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sIeRann__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_GetDestSeqNumber(PyNs3Dot11sIeRann *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetDestSeqNumber();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_SetHopcount(PyNs3Dot11sIeRann *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int hopcount;
    const char *keywords[] = {"hopcount", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &hopcount)) {
        return NULL;
    }
    if (hopcount > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHopcount(hopcount);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_SetMetric(PyNs3Dot11sIeRann *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int metric;
    const char *keywords[] = {"metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &metric)) {
        return NULL;
    }
    self->obj->SetMetric(metric);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_GetHopcount(PyNs3Dot11sIeRann *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetHopcount();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_SetDestSeqNumber(PyNs3Dot11sIeRann *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int dest_seq_number;
    const char *keywords[] = {"dest_seq_number", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &dest_seq_number)) {
        return NULL;
    }
    self->obj->SetDestSeqNumber(dest_seq_number);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_GetOriginatorAddress(PyNs3Dot11sIeRann *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetOriginatorAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_DeserializeInformationField(PyNs3Dot11sIeRann *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_SetTTL(PyNs3Dot11sIeRann *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ttl;
    const char *keywords[] = {"ttl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ttl)) {
        return NULL;
    }
    if (ttl > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTTL(ttl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_GetMetric(PyNs3Dot11sIeRann *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMetric();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_GetInformationFieldSize(PyNs3Dot11sIeRann *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_GetTtl(PyNs3Dot11sIeRann *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTtl();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_SetOriginatorAddress(PyNs3Dot11sIeRann *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *originator_address;
    const char *keywords[] = {"originator_address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &originator_address)) {
        return NULL;
    }
    self->obj->SetOriginatorAddress(*((PyNs3Mac48Address *) originator_address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_SetFlags(PyNs3Dot11sIeRann *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int flags;
    const char *keywords[] = {"flags", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &flags)) {
        return NULL;
    }
    if (flags > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFlags(flags);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_DecrementTtl(PyNs3Dot11sIeRann *self)
{
    PyObject *py_retval;
    
    self->obj->DecrementTtl();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_IncrementMetric(PyNs3Dot11sIeRann *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int metric;
    const char *keywords[] = {"metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &metric)) {
        return NULL;
    }
    self->obj->IncrementMetric(metric);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_GetFlags(PyNs3Dot11sIeRann *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetFlags();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_ElementId(PyNs3Dot11sIeRann *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sIeRann_SerializeInformationField(PyNs3Dot11sIeRann *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sIeRann__copy__(PyNs3Dot11sIeRann *self)
{

    PyNs3Dot11sIeRann *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sIeRann, &PyNs3Dot11sIeRann_Type);
    
    py_copy->obj = new ns3::dot11s::IeRann(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sIeRann_methods[] = {
    {(char *) "GetDestSeqNumber", (PyCFunction) _wrap_PyNs3Dot11sIeRann_GetDestSeqNumber, METH_NOARGS, "GetDestSeqNumber()\n\n" },
    {(char *) "SetHopcount", (PyCFunction) _wrap_PyNs3Dot11sIeRann_SetHopcount, METH_KEYWORDS|METH_VARARGS, "SetHopcount(hopcount)\n\ntype: hopcount: uint8_t" },
    {(char *) "SetMetric", (PyCFunction) _wrap_PyNs3Dot11sIeRann_SetMetric, METH_KEYWORDS|METH_VARARGS, "SetMetric(metric)\n\ntype: metric: uint32_t" },
    {(char *) "GetHopcount", (PyCFunction) _wrap_PyNs3Dot11sIeRann_GetHopcount, METH_NOARGS, "GetHopcount()\n\n" },
    {(char *) "SetDestSeqNumber", (PyCFunction) _wrap_PyNs3Dot11sIeRann_SetDestSeqNumber, METH_KEYWORDS|METH_VARARGS, "SetDestSeqNumber(dest_seq_number)\n\ntype: dest_seq_number: uint32_t" },
    {(char *) "GetOriginatorAddress", (PyCFunction) _wrap_PyNs3Dot11sIeRann_GetOriginatorAddress, METH_NOARGS, "GetOriginatorAddress()\n\n" },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIeRann_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, "DeserializeInformationField(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint8_t" },
    {(char *) "SetTTL", (PyCFunction) _wrap_PyNs3Dot11sIeRann_SetTTL, METH_KEYWORDS|METH_VARARGS, "SetTTL(ttl)\n\ntype: ttl: uint8_t" },
    {(char *) "GetMetric", (PyCFunction) _wrap_PyNs3Dot11sIeRann_GetMetric, METH_NOARGS, "GetMetric()\n\n" },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3Dot11sIeRann_GetInformationFieldSize, METH_NOARGS, "GetInformationFieldSize()\n\n" },
    {(char *) "GetTtl", (PyCFunction) _wrap_PyNs3Dot11sIeRann_GetTtl, METH_NOARGS, "GetTtl()\n\n" },
    {(char *) "SetOriginatorAddress", (PyCFunction) _wrap_PyNs3Dot11sIeRann_SetOriginatorAddress, METH_KEYWORDS|METH_VARARGS, "SetOriginatorAddress(originator_address)\n\ntype: originator_address: ns3::Mac48Address" },
    {(char *) "SetFlags", (PyCFunction) _wrap_PyNs3Dot11sIeRann_SetFlags, METH_KEYWORDS|METH_VARARGS, "SetFlags(flags)\n\ntype: flags: uint8_t" },
    {(char *) "DecrementTtl", (PyCFunction) _wrap_PyNs3Dot11sIeRann_DecrementTtl, METH_NOARGS, "DecrementTtl()\n\n" },
    {(char *) "IncrementMetric", (PyCFunction) _wrap_PyNs3Dot11sIeRann_IncrementMetric, METH_KEYWORDS|METH_VARARGS, "IncrementMetric(metric)\n\ntype: metric: uint32_t" },
    {(char *) "GetFlags", (PyCFunction) _wrap_PyNs3Dot11sIeRann_GetFlags, METH_NOARGS, "GetFlags()\n\n" },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3Dot11sIeRann_ElementId, METH_NOARGS, "ElementId()\n\n" },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3Dot11sIeRann_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, "SerializeInformationField(i)\n\ntype: i: ns3::Buffer::Iterator" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sIeRann__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sIeRann__tp_dealloc(PyNs3Dot11sIeRann *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::dot11s::IeRann *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3Dot11sIeRann__tp_str(PyNs3Dot11sIeRann *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3Dot11sIeRann__tp_richcompare (PyNs3Dot11sIeRann *PYBINDGEN_UNUSED(self), PyNs3Dot11sIeRann *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sIeRann_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sIeRann_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.IeRann",            /* tp_name */
    sizeof(PyNs3Dot11sIeRann),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sIeRann__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3Dot11sIeRann__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "IeRann(arg0)\nIeRann()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sIeRann__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sIeRann_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sIeRann__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Dot11sMeshHeader__tp_init__0(PyNs3Dot11sMeshHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sMeshHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sMeshHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::MeshHeader(*((PyNs3Dot11sMeshHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sMeshHeader__tp_init__1(PyNs3Dot11sMeshHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::MeshHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sMeshHeader__tp_init(PyNs3Dot11sMeshHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sMeshHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sMeshHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_GetAddr6(PyNs3Dot11sMeshHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddr6();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_GetAddr5(PyNs3Dot11sMeshHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddr5();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_GetAddr4(PyNs3Dot11sMeshHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddr4();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_SetMeshSeqno(PyNs3Dot11sMeshHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int seqno;
    const char *keywords[] = {"seqno", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &seqno)) {
        return NULL;
    }
    self->obj->SetMeshSeqno(seqno);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_Deserialize(PyNs3Dot11sMeshHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_GetMeshSeqno(PyNs3Dot11sMeshHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMeshSeqno();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dot11s::MeshHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_GetMeshTtl(PyNs3Dot11sMeshHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetMeshTtl();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_SetAddressExt(PyNs3Dot11sMeshHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int num_of_addresses;
    const char *keywords[] = {"num_of_addresses", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &num_of_addresses)) {
        return NULL;
    }
    if (num_of_addresses > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetAddressExt(num_of_addresses);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_GetAddressExt(PyNs3Dot11sMeshHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetAddressExt();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_SetMeshTtl(PyNs3Dot11sMeshHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int TTL;
    const char *keywords[] = {"TTL", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &TTL)) {
        return NULL;
    }
    if (TTL > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMeshTtl(TTL);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_GetInstanceTypeId(PyNs3Dot11sMeshHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_GetSerializedSize(PyNs3Dot11sMeshHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_Serialize(PyNs3Dot11sMeshHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_SetAddr6(PyNs3Dot11sMeshHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->SetAddr6(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_SetAddr5(PyNs3Dot11sMeshHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->SetAddr5(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sMeshHeader_SetAddr4(PyNs3Dot11sMeshHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->SetAddr4(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sMeshHeader__copy__(PyNs3Dot11sMeshHeader *self)
{

    PyNs3Dot11sMeshHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3Dot11sMeshHeader, &PyNs3Dot11sMeshHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::dot11s::MeshHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sMeshHeader_methods[] = {
    {(char *) "GetAddr6", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_GetAddr6, METH_NOARGS, "GetAddr6()\n\n" },
    {(char *) "GetAddr5", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_GetAddr5, METH_NOARGS, "GetAddr5()\n\n" },
    {(char *) "GetAddr4", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_GetAddr4, METH_NOARGS, "GetAddr4()\n\n" },
    {(char *) "SetMeshSeqno", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_SetMeshSeqno, METH_KEYWORDS|METH_VARARGS, "SetMeshSeqno(seqno)\n\ntype: seqno: uint32_t" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetMeshSeqno", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_GetMeshSeqno, METH_NOARGS, "GetMeshSeqno()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetMeshTtl", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_GetMeshTtl, METH_NOARGS, "GetMeshTtl()\n\n" },
    {(char *) "SetAddressExt", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_SetAddressExt, METH_KEYWORDS|METH_VARARGS, "SetAddressExt(num_of_addresses)\n\ntype: num_of_addresses: uint8_t" },
    {(char *) "GetAddressExt", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_GetAddressExt, METH_NOARGS, "GetAddressExt()\n\n" },
    {(char *) "SetMeshTtl", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_SetMeshTtl, METH_KEYWORDS|METH_VARARGS, "SetMeshTtl(TTL)\n\ntype: TTL: uint8_t" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetAddr6", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_SetAddr6, METH_KEYWORDS|METH_VARARGS, "SetAddr6(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "SetAddr5", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_SetAddr5, METH_KEYWORDS|METH_VARARGS, "SetAddr5(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "SetAddr4", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader_SetAddr4, METH_KEYWORDS|METH_VARARGS, "SetAddr4(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sMeshHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3Dot11sMeshHeader__tp_clear(PyNs3Dot11sMeshHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dot11s::MeshHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3Dot11sMeshHeader__tp_traverse(PyNs3Dot11sMeshHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3Dot11sMeshHeader__tp_dealloc(PyNs3Dot11sMeshHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3Dot11sMeshHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sMeshHeader__tp_richcompare (PyNs3Dot11sMeshHeader *PYBINDGEN_UNUSED(self), PyNs3Dot11sMeshHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sMeshHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sMeshHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.MeshHeader",            /* tp_name */
    sizeof(PyNs3Dot11sMeshHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sMeshHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MeshHeader(arg0)\nMeshHeader()",                        /* Documentation string */
    (traverseproc)PyNs3Dot11sMeshHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3Dot11sMeshHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sMeshHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sMeshHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3Dot11sMeshHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sMeshHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3Dot11sPeerLink__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3Dot11sPeerLink *self)
{
    PyObject *py_retval;
    PyNs3Dot11sPeerLink__PythonHelper *helper = dynamic_cast< PyNs3Dot11sPeerLink__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Dot11sPeerLink__PythonHelper::_wrap_DoInitialize(PyNs3Dot11sPeerLink *self)
{
    PyObject *py_retval;
    PyNs3Dot11sPeerLink__PythonHelper *helper = dynamic_cast< PyNs3Dot11sPeerLink__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Dot11sPeerLink__PythonHelper::_wrap_NotifyNewAggregate(PyNs3Dot11sPeerLink *self)
{
    PyObject *py_retval;
    PyNs3Dot11sPeerLink__PythonHelper *helper = dynamic_cast< PyNs3Dot11sPeerLink__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3Dot11sPeerLink__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dot11s::PeerLink *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::dot11s::PeerLink::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Dot11sPeerLink* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Dot11sPeerLink* >(m_pyself)->obj = (ns3::dot11s::PeerLink*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Dot11sPeerLink* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Dot11sPeerLink* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Dot11sPeerLink* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3Dot11sPeerLink__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3Dot11sPeerLink__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Dot11sPeerLink__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Dot11sPeerLink__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3Dot11sPeerLink__tp_init(PyNs3Dot11sPeerLink *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3Dot11sPeerLink_Type)
    {
        self->obj = new PyNs3Dot11sPeerLink__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3Dot11sPeerLink__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dot11s::PeerLink();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_GetPeerAid(PyNs3Dot11sPeerLink *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetPeerAid();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_GetBeaconTimingElement(PyNs3Dot11sPeerLink *self)
{
    PyObject *py_retval;
    PyNs3Dot11sIeBeaconTiming *py_IeBeaconTiming;
    
    ns3::dot11s::IeBeaconTiming retval = self->obj->GetBeaconTimingElement();
    py_IeBeaconTiming = PyObject_New(PyNs3Dot11sIeBeaconTiming, &PyNs3Dot11sIeBeaconTiming_Type);
    
    py_IeBeaconTiming->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_IeBeaconTiming->obj = new ns3::dot11s::IeBeaconTiming(retval);
    PyNs3Empty_wrapper_registry[(void *) py_IeBeaconTiming->obj] = (PyObject *) py_IeBeaconTiming;
    py_retval = Py_BuildValue((char *) "N", py_IeBeaconTiming);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_SetPeerAddress(PyNs3Dot11sPeerLink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *macaddr;
    const char *keywords[] = {"macaddr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &macaddr)) {
        return NULL;
    }
    self->obj->SetPeerAddress(*((PyNs3Mac48Address *) macaddr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_MLMEPeeringRequestReject(PyNs3Dot11sPeerLink *self)
{
    PyObject *py_retval;
    
    self->obj->MLMEPeeringRequestReject();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_SetPeerMeshPointAddress(PyNs3Dot11sPeerLink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *macaddr;
    const char *keywords[] = {"macaddr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &macaddr)) {
        return NULL;
    }
    self->obj->SetPeerMeshPointAddress(*((PyNs3Mac48Address *) macaddr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_MLMESetSignalStatusCallback(PyNs3Dot11sPeerLink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *arg0;
    ns3::Ptr<PythonCallbackImpl1> arg0_cb_impl;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (!PyCallable_Check(arg0)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'arg0' must be callbale");
        return NULL;
    }
    arg0_cb_impl = ns3::Create<PythonCallbackImpl1> (arg0);
    self->obj->MLMESetSignalStatusCallback(ns3::Callback<void, unsigned int, ns3::Mac48Address, ns3::Mac48Address, ns3::dot11s::PeerLink::PeerState, ns3::dot11s::PeerLink::PeerState, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (arg0_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dot11s::PeerLink::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_MLMEActivePeerLinkOpen(PyNs3Dot11sPeerLink *self)
{
    PyObject *py_retval;
    
    self->obj->MLMEActivePeerLinkOpen();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_SetBeaconTimingElement(PyNs3Dot11sPeerLink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Dot11sIeBeaconTiming *beaconTiming;
    const char *keywords[] = {"beaconTiming", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sIeBeaconTiming_Type, &beaconTiming)) {
        return NULL;
    }
    self->obj->SetBeaconTimingElement(*((PyNs3Dot11sIeBeaconTiming *) beaconTiming)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_GetLastBeacon(PyNs3Dot11sPeerLink *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetLastBeacon();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_GetPeerAddress(PyNs3Dot11sPeerLink *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetPeerAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_MLMECancelPeerLink(PyNs3Dot11sPeerLink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::dot11s::PmpReasonCode reason;
    const char *keywords[] = {"reason", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &reason)) {
        return NULL;
    }
    self->obj->MLMECancelPeerLink(reason);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_GetBeaconInterval(PyNs3Dot11sPeerLink *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetBeaconInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_TransmissionSuccess(PyNs3Dot11sPeerLink *self)
{
    PyObject *py_retval;
    
    self->obj->TransmissionSuccess();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_SetLocalAid(PyNs3Dot11sPeerLink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int aid;
    const char *keywords[] = {"aid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &aid)) {
        return NULL;
    }
    if (aid > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetLocalAid(aid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_DoDispose(PyNs3Dot11sPeerLink *self)
{
    PyObject *py_retval;
    PyNs3Dot11sPeerLink__PythonHelper *helper_class = dynamic_cast<PyNs3Dot11sPeerLink__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::dot11s::PeerLink::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_SetLocalLinkId(PyNs3Dot11sPeerLink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int id;
    const char *keywords[] = {"id", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &id)) {
        return NULL;
    }
    if (id > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetLocalLinkId(id);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_TransmissionFailure(PyNs3Dot11sPeerLink *self)
{
    PyObject *py_retval;
    
    self->obj->TransmissionFailure();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_SetInterface(PyNs3Dot11sPeerLink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int interface;
    const char *keywords[] = {"interface", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &interface)) {
        return NULL;
    }
    self->obj->SetInterface(interface);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_GetLocalAid(PyNs3Dot11sPeerLink *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetLocalAid();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLink_SetBeaconInformation(PyNs3Dot11sPeerLink *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *lastBeacon;
    PyNs3Time *BeaconInterval;
    const char *keywords[] = {"lastBeacon", "BeaconInterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Time_Type, &lastBeacon, &PyNs3Time_Type, &BeaconInterval)) {
        return NULL;
    }
    self->obj->SetBeaconInformation(*((PyNs3Time *) lastBeacon)->obj, *((PyNs3Time *) BeaconInterval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3Dot11sPeerLink_methods[] = {
    {(char *) "GetPeerAid", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_GetPeerAid, METH_NOARGS, "GetPeerAid()\n\n" },
    {(char *) "GetBeaconTimingElement", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_GetBeaconTimingElement, METH_NOARGS, "GetBeaconTimingElement()\n\n" },
    {(char *) "SetPeerAddress", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_SetPeerAddress, METH_KEYWORDS|METH_VARARGS, "SetPeerAddress(macaddr)\n\ntype: macaddr: ns3::Mac48Address" },
    {(char *) "MLMEPeeringRequestReject", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_MLMEPeeringRequestReject, METH_NOARGS, "MLMEPeeringRequestReject()\n\n" },
    {(char *) "SetPeerMeshPointAddress", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_SetPeerMeshPointAddress, METH_KEYWORDS|METH_VARARGS, "SetPeerMeshPointAddress(macaddr)\n\ntype: macaddr: ns3::Mac48Address" },
    {(char *) "MLMESetSignalStatusCallback", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_MLMESetSignalStatusCallback, METH_KEYWORDS|METH_VARARGS, "MLMESetSignalStatusCallback(arg0)\n\ntype: arg0: ns3::Callback< void, unsigned int, ns3::Mac48Address, ns3::Mac48Address, ns3::dot11s::PeerLink::PeerState, ns3::dot11s::PeerLink::PeerState, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "MLMEActivePeerLinkOpen", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_MLMEActivePeerLinkOpen, METH_NOARGS, "MLMEActivePeerLinkOpen()\n\n" },
    {(char *) "SetBeaconTimingElement", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_SetBeaconTimingElement, METH_KEYWORDS|METH_VARARGS, "SetBeaconTimingElement(beaconTiming)\n\ntype: beaconTiming: ns3::dot11s::IeBeaconTiming" },
    {(char *) "GetLastBeacon", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_GetLastBeacon, METH_NOARGS, "GetLastBeacon()\n\n" },
    {(char *) "GetPeerAddress", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_GetPeerAddress, METH_NOARGS, "GetPeerAddress()\n\n" },
    {(char *) "MLMECancelPeerLink", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_MLMECancelPeerLink, METH_KEYWORDS|METH_VARARGS, "MLMECancelPeerLink(reason)\n\ntype: reason: ns3::dot11s::PmpReasonCode" },
    {(char *) "GetBeaconInterval", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_GetBeaconInterval, METH_NOARGS, "GetBeaconInterval()\n\n" },
    {(char *) "TransmissionSuccess", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_TransmissionSuccess, METH_NOARGS, "TransmissionSuccess()\n\n" },
    {(char *) "SetLocalAid", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_SetLocalAid, METH_KEYWORDS|METH_VARARGS, "SetLocalAid(aid)\n\ntype: aid: uint16_t" },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_DoDispose, METH_NOARGS, "DoDispose()\n\n" },
    {(char *) "SetLocalLinkId", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_SetLocalLinkId, METH_KEYWORDS|METH_VARARGS, "SetLocalLinkId(id)\n\ntype: id: uint16_t" },
    {(char *) "TransmissionFailure", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_TransmissionFailure, METH_NOARGS, "TransmissionFailure()\n\n" },
    {(char *) "SetInterface", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_SetInterface, METH_KEYWORDS|METH_VARARGS, "SetInterface(interface)\n\ntype: interface: uint32_t" },
    {(char *) "GetLocalAid", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_GetLocalAid, METH_NOARGS, "GetLocalAid()\n\n" },
    {(char *) "SetBeaconInformation", (PyCFunction) _wrap_PyNs3Dot11sPeerLink_SetBeaconInformation, METH_KEYWORDS|METH_VARARGS, "SetBeaconInformation(lastBeacon, BeaconInterval)\n\ntype: lastBeacon: ns3::Time\ntype: BeaconInterval: ns3::Time" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3Dot11sPeerLink__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3Dot11sPeerLink__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3Dot11sPeerLink__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3Dot11sPeerLink__tp_clear(PyNs3Dot11sPeerLink *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dot11s::PeerLink *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3Dot11sPeerLink__tp_traverse(PyNs3Dot11sPeerLink *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3Dot11sPeerLink__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3Dot11sPeerLink__tp_dealloc(PyNs3Dot11sPeerLink *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3Dot11sPeerLink__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sPeerLink__tp_richcompare (PyNs3Dot11sPeerLink *PYBINDGEN_UNUSED(self), PyNs3Dot11sPeerLink *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sPeerLink_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sPeerLink_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.PeerLink",            /* tp_name */
    sizeof(PyNs3Dot11sPeerLink),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sPeerLink__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "PeerLink()",                        /* Documentation string */
    (traverseproc)PyNs3Dot11sPeerLink__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3Dot11sPeerLink__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sPeerLink__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sPeerLink_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3Dot11sPeerLink, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sPeerLink__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3Dot11sPeerLinkCloseStart__tp_init(PyNs3Dot11sPeerLinkCloseStart *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    self->obj = new ns3::dot11s::PeerLinkCloseStart();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkCloseStart_Deserialize(PyNs3Dot11sPeerLinkCloseStart *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkCloseStart_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dot11s::PeerLinkCloseStart::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkCloseStart_Serialize(PyNs3Dot11sPeerLinkCloseStart *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkCloseStart_GetInstanceTypeId(PyNs3Dot11sPeerLinkCloseStart *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkCloseStart_GetSerializedSize(PyNs3Dot11sPeerLinkCloseStart *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkCloseStart_GetFields(PyNs3Dot11sPeerLinkCloseStart *self)
{
    PyObject *py_retval;
    PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *py_PlinkCloseStartFields;
    
    ns3::dot11s::PeerLinkCloseStart::PlinkCloseStartFields retval = self->obj->GetFields();
    py_PlinkCloseStartFields = PyObject_New(PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields, &PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_Type);
    py_PlinkCloseStartFields->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PlinkCloseStartFields->obj = new ns3::dot11s::PeerLinkCloseStart::PlinkCloseStartFields(retval);
    PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_wrapper_registry[(void *) py_PlinkCloseStartFields->obj] = (PyObject *) py_PlinkCloseStartFields;
    py_retval = Py_BuildValue((char *) "N", py_PlinkCloseStartFields);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkCloseStart_SetPlinkCloseStart(PyNs3Dot11sPeerLinkCloseStart *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_Type, &arg0)) {
        return NULL;
    }
    self->obj->SetPlinkCloseStart(*((PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *) arg0)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3Dot11sPeerLinkCloseStart_methods[] = {
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkCloseStart_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkCloseStart_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkCloseStart_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkCloseStart_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkCloseStart_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetFields", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkCloseStart_GetFields, METH_NOARGS, "GetFields()\n\n" },
    {(char *) "SetPlinkCloseStart", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkCloseStart_SetPlinkCloseStart, METH_KEYWORDS|METH_VARARGS, "SetPlinkCloseStart(arg0)\n\ntype: arg0: ns3::dot11s::PeerLinkCloseStart::PlinkCloseStartFields" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3Dot11sPeerLinkCloseStart__tp_clear(PyNs3Dot11sPeerLinkCloseStart *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dot11s::PeerLinkCloseStart *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3Dot11sPeerLinkCloseStart__tp_traverse(PyNs3Dot11sPeerLinkCloseStart *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3Dot11sPeerLinkCloseStart__tp_dealloc(PyNs3Dot11sPeerLinkCloseStart *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3Dot11sPeerLinkCloseStart__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sPeerLinkCloseStart__tp_richcompare (PyNs3Dot11sPeerLinkCloseStart *PYBINDGEN_UNUSED(self), PyNs3Dot11sPeerLinkCloseStart *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sPeerLinkCloseStart_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sPeerLinkCloseStart_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.PeerLinkCloseStart",            /* tp_name */
    sizeof(PyNs3Dot11sPeerLinkCloseStart),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sPeerLinkCloseStart__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "PeerLinkCloseStart()",                        /* Documentation string */
    (traverseproc)PyNs3Dot11sPeerLinkCloseStart__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3Dot11sPeerLinkCloseStart__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sPeerLinkCloseStart__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sPeerLinkCloseStart_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3Dot11sPeerLinkCloseStart, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sPeerLinkCloseStart__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_wrapper_registry;
static PyObject* _wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__get_meshId(PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Dot11sIeMeshId *py_IeMeshId;
    
    py_IeMeshId = PyObject_New(PyNs3Dot11sIeMeshId, &PyNs3Dot11sIeMeshId_Type);
    
    py_IeMeshId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_IeMeshId->obj = new ns3::dot11s::IeMeshId(self->obj->meshId);
    PyNs3Empty_wrapper_registry[(void *) py_IeMeshId->obj] = (PyObject *) py_IeMeshId;
    py_retval = Py_BuildValue((char *) "N", py_IeMeshId);
    return py_retval;
}
static int _wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__set_meshId(PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Dot11sIeMeshId *tmp_IeMeshId;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Dot11sIeMeshId_Type, &tmp_IeMeshId)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->meshId = *tmp_IeMeshId->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__get_protocol(PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Dot11sIePeeringProtocol *py_IePeeringProtocol;
    
    py_IePeeringProtocol = PyObject_New(PyNs3Dot11sIePeeringProtocol, &PyNs3Dot11sIePeeringProtocol_Type);
    
    py_IePeeringProtocol->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_IePeeringProtocol->obj = new ns3::dot11s::IePeeringProtocol(self->obj->protocol);
    PyNs3Empty_wrapper_registry[(void *) py_IePeeringProtocol->obj] = (PyObject *) py_IePeeringProtocol;
    py_retval = Py_BuildValue((char *) "N", py_IePeeringProtocol);
    return py_retval;
}
static int _wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__set_protocol(PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Dot11sIePeeringProtocol *tmp_IePeeringProtocol;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Dot11sIePeeringProtocol_Type, &tmp_IePeeringProtocol)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->protocol = *tmp_IePeeringProtocol->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__getsets[] = {
    {
        (char*) "protocol", /* attribute name */
        (getter) _wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__get_protocol, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__set_protocol, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "meshId", /* attribute name */
        (getter) _wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__get_meshId, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__set_meshId, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__tp_init__0(PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::PeerLinkCloseStart::PlinkCloseStartFields();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__tp_init__1(PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::PeerLinkCloseStart::PlinkCloseStartFields(*((PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__tp_init(PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__copy__(PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *self)
{

    PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields, &PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_Type);
    py_copy->obj = new ns3::dot11s::PeerLinkCloseStart::PlinkCloseStartFields(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__tp_dealloc(PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_wrapper_registry.end()) {
        PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dot11s::PeerLinkCloseStart::PlinkCloseStartFields *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__tp_richcompare (PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *PYBINDGEN_UNUSED(self), PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.PeerLinkCloseStart.PlinkCloseStartFields",            /* tp_name */
    sizeof(PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "PlinkCloseStartFields(arg0)\nPlinkCloseStartFields()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3Dot11sPeerLinkConfirmStart__tp_init(PyNs3Dot11sPeerLinkConfirmStart *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    self->obj = new ns3::dot11s::PeerLinkConfirmStart();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkConfirmStart_SetPlinkConfirmStart(PyNs3Dot11sPeerLinkConfirmStart *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_Type, &arg0)) {
        return NULL;
    }
    self->obj->SetPlinkConfirmStart(*((PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *) arg0)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkConfirmStart_Deserialize(PyNs3Dot11sPeerLinkConfirmStart *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkConfirmStart_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dot11s::PeerLinkConfirmStart::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkConfirmStart_Serialize(PyNs3Dot11sPeerLinkConfirmStart *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkConfirmStart_GetInstanceTypeId(PyNs3Dot11sPeerLinkConfirmStart *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkConfirmStart_GetSerializedSize(PyNs3Dot11sPeerLinkConfirmStart *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkConfirmStart_GetFields(PyNs3Dot11sPeerLinkConfirmStart *self)
{
    PyObject *py_retval;
    PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *py_PlinkConfirmStartFields;
    
    ns3::dot11s::PeerLinkConfirmStart::PlinkConfirmStartFields retval = self->obj->GetFields();
    py_PlinkConfirmStartFields = PyObject_New(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields, &PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_Type);
    py_PlinkConfirmStartFields->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PlinkConfirmStartFields->obj = new ns3::dot11s::PeerLinkConfirmStart::PlinkConfirmStartFields(retval);
    PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_wrapper_registry[(void *) py_PlinkConfirmStartFields->obj] = (PyObject *) py_PlinkConfirmStartFields;
    py_retval = Py_BuildValue((char *) "N", py_PlinkConfirmStartFields);
    return py_retval;
}

static PyMethodDef PyNs3Dot11sPeerLinkConfirmStart_methods[] = {
    {(char *) "SetPlinkConfirmStart", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkConfirmStart_SetPlinkConfirmStart, METH_KEYWORDS|METH_VARARGS, "SetPlinkConfirmStart(arg0)\n\ntype: arg0: ns3::dot11s::PeerLinkConfirmStart::PlinkConfirmStartFields" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkConfirmStart_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkConfirmStart_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkConfirmStart_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkConfirmStart_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkConfirmStart_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetFields", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkConfirmStart_GetFields, METH_NOARGS, "GetFields()\n\n" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3Dot11sPeerLinkConfirmStart__tp_clear(PyNs3Dot11sPeerLinkConfirmStart *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dot11s::PeerLinkConfirmStart *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3Dot11sPeerLinkConfirmStart__tp_traverse(PyNs3Dot11sPeerLinkConfirmStart *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3Dot11sPeerLinkConfirmStart__tp_dealloc(PyNs3Dot11sPeerLinkConfirmStart *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3Dot11sPeerLinkConfirmStart__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sPeerLinkConfirmStart__tp_richcompare (PyNs3Dot11sPeerLinkConfirmStart *PYBINDGEN_UNUSED(self), PyNs3Dot11sPeerLinkConfirmStart *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sPeerLinkConfirmStart_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sPeerLinkConfirmStart_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.PeerLinkConfirmStart",            /* tp_name */
    sizeof(PyNs3Dot11sPeerLinkConfirmStart),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sPeerLinkConfirmStart__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "PeerLinkConfirmStart()",                        /* Documentation string */
    (traverseproc)PyNs3Dot11sPeerLinkConfirmStart__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3Dot11sPeerLinkConfirmStart__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sPeerLinkConfirmStart__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sPeerLinkConfirmStart_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3Dot11sPeerLinkConfirmStart, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sPeerLinkConfirmStart__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_wrapper_registry;
static PyObject* _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__get_aid(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->aid);
    return py_retval;
}
static int _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__set_aid(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->aid = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__get_capability(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->capability);
    return py_retval;
}
static int _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__set_capability(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->capability = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__get_config(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Dot11sIeConfiguration *py_IeConfiguration;
    
    py_IeConfiguration = PyObject_New(PyNs3Dot11sIeConfiguration, &PyNs3Dot11sIeConfiguration_Type);
    
    py_IeConfiguration->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_IeConfiguration->obj = new ns3::dot11s::IeConfiguration(self->obj->config);
    PyNs3Empty_wrapper_registry[(void *) py_IeConfiguration->obj] = (PyObject *) py_IeConfiguration;
    py_retval = Py_BuildValue((char *) "N", py_IeConfiguration);
    return py_retval;
}
static int _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__set_config(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Dot11sIeConfiguration *tmp_IeConfiguration;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Dot11sIeConfiguration_Type, &tmp_IeConfiguration)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->config = *tmp_IeConfiguration->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__get_protocol(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Dot11sIePeeringProtocol *py_IePeeringProtocol;
    
    py_IePeeringProtocol = PyObject_New(PyNs3Dot11sIePeeringProtocol, &PyNs3Dot11sIePeeringProtocol_Type);
    
    py_IePeeringProtocol->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_IePeeringProtocol->obj = new ns3::dot11s::IePeeringProtocol(self->obj->protocol);
    PyNs3Empty_wrapper_registry[(void *) py_IePeeringProtocol->obj] = (PyObject *) py_IePeeringProtocol;
    py_retval = Py_BuildValue((char *) "N", py_IePeeringProtocol);
    return py_retval;
}
static int _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__set_protocol(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Dot11sIePeeringProtocol *tmp_IePeeringProtocol;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Dot11sIePeeringProtocol_Type, &tmp_IePeeringProtocol)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->protocol = *tmp_IePeeringProtocol->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__get_rates(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3SupportedRates *py_SupportedRates;
    
    py_SupportedRates = PyObject_New(PyNs3SupportedRates, &PyNs3SupportedRates_Type);
    
    py_SupportedRates->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SupportedRates->obj = new ns3::SupportedRates(self->obj->rates);
    PyNs3Empty_wrapper_registry[(void *) py_SupportedRates->obj] = (PyObject *) py_SupportedRates;
    py_retval = Py_BuildValue((char *) "N", py_SupportedRates);
    return py_retval;
}
static int _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__set_rates(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3SupportedRates *tmp_SupportedRates;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3SupportedRates_Type, &tmp_SupportedRates)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->rates = *tmp_SupportedRates->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__getsets[] = {
    {
        (char*) "capability", /* attribute name */
        (getter) _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__get_capability, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__set_capability, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "aid", /* attribute name */
        (getter) _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__get_aid, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__set_aid, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "config", /* attribute name */
        (getter) _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__get_config, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__set_config, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "protocol", /* attribute name */
        (getter) _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__get_protocol, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__set_protocol, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "rates", /* attribute name */
        (getter) _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__get_rates, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__set_rates, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__tp_init__0(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::PeerLinkConfirmStart::PlinkConfirmStartFields();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__tp_init__1(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::PeerLinkConfirmStart::PlinkConfirmStartFields(*((PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__tp_init(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__copy__(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *self)
{

    PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields, &PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_Type);
    py_copy->obj = new ns3::dot11s::PeerLinkConfirmStart::PlinkConfirmStartFields(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__tp_dealloc(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_wrapper_registry.end()) {
        PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dot11s::PeerLinkConfirmStart::PlinkConfirmStartFields *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__tp_richcompare (PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *PYBINDGEN_UNUSED(self), PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.PeerLinkConfirmStart.PlinkConfirmStartFields",            /* tp_name */
    sizeof(PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "PlinkConfirmStartFields(arg0)\nPlinkConfirmStartFields()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3Dot11sPeerLinkOpenStart__tp_init(PyNs3Dot11sPeerLinkOpenStart *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    self->obj = new ns3::dot11s::PeerLinkOpenStart();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkOpenStart_Deserialize(PyNs3Dot11sPeerLinkOpenStart *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkOpenStart_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dot11s::PeerLinkOpenStart::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkOpenStart_Serialize(PyNs3Dot11sPeerLinkOpenStart *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkOpenStart_SetPlinkOpenStart(PyNs3Dot11sPeerLinkOpenStart *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_Type, &arg0)) {
        return NULL;
    }
    self->obj->SetPlinkOpenStart(*((PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *) arg0)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkOpenStart_GetInstanceTypeId(PyNs3Dot11sPeerLinkOpenStart *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkOpenStart_GetSerializedSize(PyNs3Dot11sPeerLinkOpenStart *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerLinkOpenStart_GetFields(PyNs3Dot11sPeerLinkOpenStart *self)
{
    PyObject *py_retval;
    PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *py_PlinkOpenStartFields;
    
    ns3::dot11s::PeerLinkOpenStart::PlinkOpenStartFields retval = self->obj->GetFields();
    py_PlinkOpenStartFields = PyObject_New(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields, &PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_Type);
    py_PlinkOpenStartFields->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_PlinkOpenStartFields->obj = new ns3::dot11s::PeerLinkOpenStart::PlinkOpenStartFields(retval);
    PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_wrapper_registry[(void *) py_PlinkOpenStartFields->obj] = (PyObject *) py_PlinkOpenStartFields;
    py_retval = Py_BuildValue((char *) "N", py_PlinkOpenStartFields);
    return py_retval;
}

static PyMethodDef PyNs3Dot11sPeerLinkOpenStart_methods[] = {
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkOpenStart_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkOpenStart_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkOpenStart_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetPlinkOpenStart", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkOpenStart_SetPlinkOpenStart, METH_KEYWORDS|METH_VARARGS, "SetPlinkOpenStart(arg0)\n\ntype: arg0: ns3::dot11s::PeerLinkOpenStart::PlinkOpenStartFields" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkOpenStart_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkOpenStart_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetFields", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkOpenStart_GetFields, METH_NOARGS, "GetFields()\n\n" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3Dot11sPeerLinkOpenStart__tp_clear(PyNs3Dot11sPeerLinkOpenStart *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dot11s::PeerLinkOpenStart *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3Dot11sPeerLinkOpenStart__tp_traverse(PyNs3Dot11sPeerLinkOpenStart *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3Dot11sPeerLinkOpenStart__tp_dealloc(PyNs3Dot11sPeerLinkOpenStart *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3Dot11sPeerLinkOpenStart__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sPeerLinkOpenStart__tp_richcompare (PyNs3Dot11sPeerLinkOpenStart *PYBINDGEN_UNUSED(self), PyNs3Dot11sPeerLinkOpenStart *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sPeerLinkOpenStart_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sPeerLinkOpenStart_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.PeerLinkOpenStart",            /* tp_name */
    sizeof(PyNs3Dot11sPeerLinkOpenStart),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sPeerLinkOpenStart__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "PeerLinkOpenStart()",                        /* Documentation string */
    (traverseproc)PyNs3Dot11sPeerLinkOpenStart__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3Dot11sPeerLinkOpenStart__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sPeerLinkOpenStart__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sPeerLinkOpenStart_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3Dot11sPeerLinkOpenStart, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sPeerLinkOpenStart__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_wrapper_registry;
static PyObject* _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__get_capability(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->capability);
    return py_retval;
}
static int _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__set_capability(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->capability = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__get_config(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Dot11sIeConfiguration *py_IeConfiguration;
    
    py_IeConfiguration = PyObject_New(PyNs3Dot11sIeConfiguration, &PyNs3Dot11sIeConfiguration_Type);
    
    py_IeConfiguration->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_IeConfiguration->obj = new ns3::dot11s::IeConfiguration(self->obj->config);
    PyNs3Empty_wrapper_registry[(void *) py_IeConfiguration->obj] = (PyObject *) py_IeConfiguration;
    py_retval = Py_BuildValue((char *) "N", py_IeConfiguration);
    return py_retval;
}
static int _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__set_config(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Dot11sIeConfiguration *tmp_IeConfiguration;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Dot11sIeConfiguration_Type, &tmp_IeConfiguration)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->config = *tmp_IeConfiguration->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__get_meshId(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Dot11sIeMeshId *py_IeMeshId;
    
    py_IeMeshId = PyObject_New(PyNs3Dot11sIeMeshId, &PyNs3Dot11sIeMeshId_Type);
    
    py_IeMeshId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_IeMeshId->obj = new ns3::dot11s::IeMeshId(self->obj->meshId);
    PyNs3Empty_wrapper_registry[(void *) py_IeMeshId->obj] = (PyObject *) py_IeMeshId;
    py_retval = Py_BuildValue((char *) "N", py_IeMeshId);
    return py_retval;
}
static int _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__set_meshId(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Dot11sIeMeshId *tmp_IeMeshId;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Dot11sIeMeshId_Type, &tmp_IeMeshId)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->meshId = *tmp_IeMeshId->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__get_protocol(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Dot11sIePeeringProtocol *py_IePeeringProtocol;
    
    py_IePeeringProtocol = PyObject_New(PyNs3Dot11sIePeeringProtocol, &PyNs3Dot11sIePeeringProtocol_Type);
    
    py_IePeeringProtocol->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_IePeeringProtocol->obj = new ns3::dot11s::IePeeringProtocol(self->obj->protocol);
    PyNs3Empty_wrapper_registry[(void *) py_IePeeringProtocol->obj] = (PyObject *) py_IePeeringProtocol;
    py_retval = Py_BuildValue((char *) "N", py_IePeeringProtocol);
    return py_retval;
}
static int _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__set_protocol(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Dot11sIePeeringProtocol *tmp_IePeeringProtocol;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Dot11sIePeeringProtocol_Type, &tmp_IePeeringProtocol)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->protocol = *tmp_IePeeringProtocol->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__get_rates(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3SupportedRates *py_SupportedRates;
    
    py_SupportedRates = PyObject_New(PyNs3SupportedRates, &PyNs3SupportedRates_Type);
    
    py_SupportedRates->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SupportedRates->obj = new ns3::SupportedRates(self->obj->rates);
    PyNs3Empty_wrapper_registry[(void *) py_SupportedRates->obj] = (PyObject *) py_SupportedRates;
    py_retval = Py_BuildValue((char *) "N", py_SupportedRates);
    return py_retval;
}
static int _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__set_rates(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3SupportedRates *tmp_SupportedRates;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3SupportedRates_Type, &tmp_SupportedRates)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->rates = *tmp_SupportedRates->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__getsets[] = {
    {
        (char*) "capability", /* attribute name */
        (getter) _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__get_capability, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__set_capability, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "protocol", /* attribute name */
        (getter) _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__get_protocol, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__set_protocol, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "config", /* attribute name */
        (getter) _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__get_config, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__set_config, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "meshId", /* attribute name */
        (getter) _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__get_meshId, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__set_meshId, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "rates", /* attribute name */
        (getter) _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__get_rates, /* C function to get the attribute */
        (setter) _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__set_rates, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__tp_init__0(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::PeerLinkOpenStart::PlinkOpenStartFields();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__tp_init__1(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dot11s::PeerLinkOpenStart::PlinkOpenStartFields(*((PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__tp_init(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__copy__(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *self)
{

    PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *py_copy;
    py_copy = PyObject_New(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields, &PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_Type);
    py_copy->obj = new ns3::dot11s::PeerLinkOpenStart::PlinkOpenStartFields(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__tp_dealloc(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_wrapper_registry.end()) {
        PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dot11s::PeerLinkOpenStart::PlinkOpenStartFields *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__tp_richcompare (PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *PYBINDGEN_UNUSED(self), PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.PeerLinkOpenStart.PlinkOpenStartFields",            /* tp_name */
    sizeof(PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "PlinkOpenStartFields(arg0)\nPlinkOpenStartFields()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3Dot11sPeerManagementProtocol__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3Dot11sPeerManagementProtocol *self)
{
    PyObject *py_retval;
    PyNs3Dot11sPeerManagementProtocol__PythonHelper *helper = dynamic_cast< PyNs3Dot11sPeerManagementProtocol__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Dot11sPeerManagementProtocol__PythonHelper::_wrap_NotifyNewAggregate(PyNs3Dot11sPeerManagementProtocol *self)
{
    PyObject *py_retval;
    PyNs3Dot11sPeerManagementProtocol__PythonHelper *helper = dynamic_cast< PyNs3Dot11sPeerManagementProtocol__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3Dot11sPeerManagementProtocol__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dot11s::PeerManagementProtocol *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::dot11s::PeerManagementProtocol::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Dot11sPeerManagementProtocol* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Dot11sPeerManagementProtocol* >(m_pyself)->obj = (ns3::dot11s::PeerManagementProtocol*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Dot11sPeerManagementProtocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Dot11sPeerManagementProtocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Dot11sPeerManagementProtocol* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Dot11sPeerManagementProtocol__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dot11s::PeerManagementProtocol *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Dot11sPeerManagementProtocol* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Dot11sPeerManagementProtocol* >(m_pyself)->obj = (ns3::dot11s::PeerManagementProtocol*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Dot11sPeerManagementProtocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Dot11sPeerManagementProtocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Dot11sPeerManagementProtocol* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3Dot11sPeerManagementProtocol__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3Dot11sPeerManagementProtocol__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Dot11sPeerManagementProtocol__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3Dot11sPeerManagementProtocol__tp_init(PyNs3Dot11sPeerManagementProtocol *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3Dot11sPeerManagementProtocol_Type)
    {
        self->obj = new PyNs3Dot11sPeerManagementProtocol__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3Dot11sPeerManagementProtocol__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dot11s::PeerManagementProtocol();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_SetPeerLinkStatusCallback(PyNs3Dot11sPeerManagementProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl0> cb_cb_impl;
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl0> (cb);
    self->obj->SetPeerLinkStatusCallback(ns3::Callback<void, ns3::Mac48Address, ns3::Mac48Address, unsigned int, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dot11s::PeerManagementProtocol::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_SetBeaconCollisionAvoidance(PyNs3Dot11sPeerManagementProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetBeaconCollisionAvoidance(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_GetPeers(PyNs3Dot11sPeerManagementProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int interface;
    const char *keywords[] = {"interface", NULL};
    std::vector< ns3::Mac48Address > retval;
    Pystd__vector__lt___ns3__Mac48Address___gt__ *py_std__vector__lt___ns3__Mac48Address___gt__;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &interface)) {
        return NULL;
    }
    retval = self->obj->GetPeers(interface);
    py_std__vector__lt___ns3__Mac48Address___gt__ = PyObject_New(Pystd__vector__lt___ns3__Mac48Address___gt__, &Pystd__vector__lt___ns3__Mac48Address___gt___Type);
    py_std__vector__lt___ns3__Mac48Address___gt__->obj = new std::vector< ns3::Mac48Address >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__Mac48Address___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_IsActiveLink(PyNs3Dot11sPeerManagementProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    unsigned int interface;
    PyNs3Mac48Address *peerAddress;
    const char *keywords[] = {"interface", "peerAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!", (char **) keywords, &interface, &PyNs3Mac48Address_Type, &peerAddress)) {
        return NULL;
    }
    retval = self->obj->IsActiveLink(interface, *((PyNs3Mac48Address *) peerAddress)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_GetNumberOfLinks(PyNs3Dot11sPeerManagementProtocol *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNumberOfLinks();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_ReceivePeerLinkFrame(PyNs3Dot11sPeerManagementProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int interface;
    PyNs3Mac48Address *peerAddress;
    PyNs3Mac48Address *peerMeshPointAddress;
    int aid;
    PyNs3Dot11sIePeerManagement *peerManagementElement;
    PyNs3Dot11sIeConfiguration *meshConfig;
    const char *keywords[] = {"interface", "peerAddress", "peerMeshPointAddress", "aid", "peerManagementElement", "meshConfig", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!O!iO!O!", (char **) keywords, &interface, &PyNs3Mac48Address_Type, &peerAddress, &PyNs3Mac48Address_Type, &peerMeshPointAddress, &aid, &PyNs3Dot11sIePeerManagement_Type, &peerManagementElement, &PyNs3Dot11sIeConfiguration_Type, &meshConfig)) {
        return NULL;
    }
    if (aid > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->ReceivePeerLinkFrame(interface, *((PyNs3Mac48Address *) peerAddress)->obj, *((PyNs3Mac48Address *) peerMeshPointAddress)->obj, aid, *((PyNs3Dot11sIePeerManagement *) peerManagementElement)->obj, *((PyNs3Dot11sIeConfiguration *) meshConfig)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_SetMeshId(PyNs3Dot11sPeerManagementProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *s;
    Py_ssize_t s_len;
    const char *keywords[] = {"s", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &s, &s_len)) {
        return NULL;
    }
    self->obj->SetMeshId(std::string(s, s_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_ConfigurationMismatch(PyNs3Dot11sPeerManagementProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int interface;
    PyNs3Mac48Address *peerAddress;
    const char *keywords[] = {"interface", "peerAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!", (char **) keywords, &interface, &PyNs3Mac48Address_Type, &peerAddress)) {
        return NULL;
    }
    self->obj->ConfigurationMismatch(interface, *((PyNs3Mac48Address *) peerAddress)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_GetBeaconTimingElement(PyNs3Dot11sPeerManagementProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::dot11s::IeBeaconTiming > retval;
    unsigned int interface;
    const char *keywords[] = {"interface", NULL};
    PyNs3Dot11sIeBeaconTiming *py_IeBeaconTiming;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &interface)) {
        return NULL;
    }
    retval = self->obj->GetBeaconTimingElement(interface);
    if (!(const_cast<ns3::dot11s::IeBeaconTiming *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::dot11s::IeBeaconTiming *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_IeBeaconTiming = NULL;
    } else {
        py_IeBeaconTiming = (PyNs3Dot11sIeBeaconTiming *) wrapper_lookup_iter->second;
        Py_INCREF(py_IeBeaconTiming);
    }
    
    if (py_IeBeaconTiming == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::dot11s::IeBeaconTiming *> (ns3::PeekPointer (retval)))), &PyNs3Dot11sIeBeaconTiming_Type);
        py_IeBeaconTiming = PyObject_New(PyNs3Dot11sIeBeaconTiming, wrapper_type);
    
        py_IeBeaconTiming->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::dot11s::IeBeaconTiming *> (ns3::PeekPointer (retval))->Ref();
        py_IeBeaconTiming->obj = const_cast<ns3::dot11s::IeBeaconTiming *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_IeBeaconTiming->obj] = (PyObject *) py_IeBeaconTiming;
    }
    py_retval = Py_BuildValue((char *) "N", py_IeBeaconTiming);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_TransmissionFailure(PyNs3Dot11sPeerManagementProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int interface;
    PyNs3Mac48Address *peerAddress;
    const char *keywords[] = {"interface", "peerAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!", (char **) keywords, &interface, &PyNs3Mac48Address_Type, &peerAddress)) {
        return NULL;
    }
    self->obj->TransmissionFailure(interface, *((PyNs3Mac48Address *) peerAddress)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_FindPeerLink(PyNs3Dot11sPeerManagementProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::dot11s::PeerLink > retval;
    unsigned int interface;
    PyNs3Mac48Address *peerAddress;
    const char *keywords[] = {"interface", "peerAddress", NULL};
    PyNs3Dot11sPeerLink *py_PeerLink;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!", (char **) keywords, &interface, &PyNs3Mac48Address_Type, &peerAddress)) {
        return NULL;
    }
    retval = self->obj->FindPeerLink(interface, *((PyNs3Mac48Address *) peerAddress)->obj);
    if (!(const_cast<ns3::dot11s::PeerLink *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::dot11s::PeerLink *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Dot11sPeerLink__PythonHelper).name())
    {
        py_PeerLink = reinterpret_cast< PyNs3Dot11sPeerLink* >(reinterpret_cast< PyNs3Dot11sPeerLink__PythonHelper* >(const_cast<ns3::dot11s::PeerLink *> (ns3::PeekPointer (retval)))->m_pyself);
        py_PeerLink->obj = const_cast<ns3::dot11s::PeerLink *> (ns3::PeekPointer (retval));
        Py_INCREF(py_PeerLink);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::dot11s::PeerLink *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_PeerLink = NULL;
        } else {
            py_PeerLink = (PyNs3Dot11sPeerLink *) wrapper_lookup_iter->second;
            Py_INCREF(py_PeerLink);
        }
    
        if (py_PeerLink == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::dot11s::PeerLink *> (ns3::PeekPointer (retval)))), &PyNs3Dot11sPeerLink_Type);
            py_PeerLink = PyObject_GC_New(PyNs3Dot11sPeerLink, wrapper_type);
            py_PeerLink->inst_dict = NULL;
    
            py_PeerLink->inst_dict = NULL;
            py_PeerLink->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::dot11s::PeerLink *> (ns3::PeekPointer (retval))->Ref();
            py_PeerLink->obj = const_cast<ns3::dot11s::PeerLink *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_PeerLink->obj] = (PyObject *) py_PeerLink;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_PeerLink);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_DoDispose(PyNs3Dot11sPeerManagementProtocol *self)
{
    PyObject *py_retval;
    PyNs3Dot11sPeerManagementProtocol__PythonHelper *helper_class = dynamic_cast<PyNs3Dot11sPeerManagementProtocol__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::dot11s::PeerManagementProtocol::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_GetAddress(PyNs3Dot11sPeerManagementProtocol *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_GetBeaconCollisionAvoidance(PyNs3Dot11sPeerManagementProtocol *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetBeaconCollisionAvoidance();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_GetMeshId(PyNs3Dot11sPeerManagementProtocol *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::dot11s::IeMeshId > retval;
    PyNs3Dot11sIeMeshId *py_IeMeshId;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetMeshId();
    if (!(const_cast<ns3::dot11s::IeMeshId *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::dot11s::IeMeshId *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_IeMeshId = NULL;
    } else {
        py_IeMeshId = (PyNs3Dot11sIeMeshId *) wrapper_lookup_iter->second;
        Py_INCREF(py_IeMeshId);
    }
    
    if (py_IeMeshId == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::dot11s::IeMeshId *> (ns3::PeekPointer (retval)))), &PyNs3Dot11sIeMeshId_Type);
        py_IeMeshId = PyObject_New(PyNs3Dot11sIeMeshId, wrapper_type);
    
        py_IeMeshId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::dot11s::IeMeshId *> (ns3::PeekPointer (retval))->Ref();
        py_IeMeshId->obj = const_cast<ns3::dot11s::IeMeshId *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_IeMeshId->obj] = (PyObject *) py_IeMeshId;
    }
    py_retval = Py_BuildValue((char *) "N", py_IeMeshId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_Install(PyNs3Dot11sPeerManagementProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3MeshPointDevice *arg0;
    ns3::MeshPointDevice *arg0_ptr;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshPointDevice_Type, &arg0)) {
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    retval = self->obj->Install(ns3::Ptr< ns3::MeshPointDevice  > (arg0_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_ResetStats(PyNs3Dot11sPeerManagementProtocol *self)
{
    PyObject *py_retval;
    
    self->obj->ResetStats();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_TransmissionSuccess(PyNs3Dot11sPeerManagementProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int interface;
    PyNs3Mac48Address *peerAddress;
    const char *keywords[] = {"interface", "peerAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!", (char **) keywords, &interface, &PyNs3Mac48Address_Type, &peerAddress)) {
        return NULL;
    }
    self->obj->TransmissionSuccess(interface, *((PyNs3Mac48Address *) peerAddress)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_GetPeerLinks(PyNs3Dot11sPeerManagementProtocol *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ptr< ns3::dot11s::PeerLink > > retval;
    Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__ *py_std__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__;
    
    retval = self->obj->GetPeerLinks();
    py_std__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__ = PyObject_New(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__, &Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt___Type);
    py_std__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__->obj = new std::vector< ns3::Ptr< ns3::dot11s::PeerLink > >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_ReceiveBeacon(PyNs3Dot11sPeerManagementProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int interface;
    PyNs3Mac48Address *peerAddress;
    PyNs3Time *beaconInterval;
    PyNs3Dot11sIeBeaconTiming *beaconTiming;
    ns3::dot11s::IeBeaconTiming *beaconTiming_ptr;
    const char *keywords[] = {"interface", "peerAddress", "beaconInterval", "beaconTiming", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!O!O!", (char **) keywords, &interface, &PyNs3Mac48Address_Type, &peerAddress, &PyNs3Time_Type, &beaconInterval, &PyNs3Dot11sIeBeaconTiming_Type, &beaconTiming)) {
        return NULL;
    }
    beaconTiming_ptr = (beaconTiming ? beaconTiming->obj : NULL);
    self->obj->ReceiveBeacon(interface, *((PyNs3Mac48Address *) peerAddress)->obj, *((PyNs3Time *) beaconInterval)->obj, ns3::Ptr< ns3::dot11s::IeBeaconTiming  > (beaconTiming_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_NotifyBeaconSent(PyNs3Dot11sPeerManagementProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int interface;
    PyNs3Time *beaconInterval;
    const char *keywords[] = {"interface", "beaconInterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!", (char **) keywords, &interface, &PyNs3Time_Type, &beaconInterval)) {
        return NULL;
    }
    self->obj->NotifyBeaconSent(interface, *((PyNs3Time *) beaconInterval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sPeerManagementProtocol_AssignStreams(PyNs3Dot11sPeerManagementProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}

static PyMethodDef PyNs3Dot11sPeerManagementProtocol_methods[] = {
    {(char *) "SetPeerLinkStatusCallback", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_SetPeerLinkStatusCallback, METH_KEYWORDS|METH_VARARGS, "SetPeerLinkStatusCallback(cb)\n\ntype: cb: ns3::Callback< void, ns3::Mac48Address, ns3::Mac48Address, unsigned int, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetBeaconCollisionAvoidance", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_SetBeaconCollisionAvoidance, METH_KEYWORDS|METH_VARARGS, "SetBeaconCollisionAvoidance(enable)\n\ntype: enable: bool" },
    {(char *) "GetPeers", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_GetPeers, METH_KEYWORDS|METH_VARARGS, "GetPeers(interface)\n\ntype: interface: uint32_t" },
    {(char *) "IsActiveLink", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_IsActiveLink, METH_KEYWORDS|METH_VARARGS, "IsActiveLink(interface, peerAddress)\n\ntype: interface: uint32_t\ntype: peerAddress: ns3::Mac48Address" },
    {(char *) "GetNumberOfLinks", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_GetNumberOfLinks, METH_NOARGS, "GetNumberOfLinks()\n\n" },
    {(char *) "ReceivePeerLinkFrame", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_ReceivePeerLinkFrame, METH_KEYWORDS|METH_VARARGS, "ReceivePeerLinkFrame(interface, peerAddress, peerMeshPointAddress, aid, peerManagementElement, meshConfig)\n\ntype: interface: uint32_t\ntype: peerAddress: ns3::Mac48Address\ntype: peerMeshPointAddress: ns3::Mac48Address\ntype: aid: uint16_t\ntype: peerManagementElement: ns3::dot11s::IePeerManagement\ntype: meshConfig: ns3::dot11s::IeConfiguration" },
    {(char *) "SetMeshId", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_SetMeshId, METH_KEYWORDS|METH_VARARGS, "SetMeshId(s)\n\ntype: s: std::string" },
    {(char *) "ConfigurationMismatch", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_ConfigurationMismatch, METH_KEYWORDS|METH_VARARGS, "ConfigurationMismatch(interface, peerAddress)\n\ntype: interface: uint32_t\ntype: peerAddress: ns3::Mac48Address" },
    {(char *) "GetBeaconTimingElement", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_GetBeaconTimingElement, METH_KEYWORDS|METH_VARARGS, "GetBeaconTimingElement(interface)\n\ntype: interface: uint32_t" },
    {(char *) "TransmissionFailure", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_TransmissionFailure, METH_KEYWORDS|METH_VARARGS, "TransmissionFailure(interface, peerAddress)\n\ntype: interface: uint32_t\ntype: peerAddress: ns3::Mac48Address const" },
    {(char *) "FindPeerLink", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_FindPeerLink, METH_KEYWORDS|METH_VARARGS, "FindPeerLink(interface, peerAddress)\n\ntype: interface: uint32_t\ntype: peerAddress: ns3::Mac48Address" },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_DoDispose, METH_NOARGS, "DoDispose()\n\n" },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_GetAddress, METH_NOARGS, "GetAddress()\n\n" },
    {(char *) "GetBeaconCollisionAvoidance", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_GetBeaconCollisionAvoidance, METH_NOARGS, "GetBeaconCollisionAvoidance()\n\n" },
    {(char *) "GetMeshId", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_GetMeshId, METH_NOARGS, "GetMeshId()\n\n" },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_Install, METH_KEYWORDS|METH_VARARGS, "Install(arg0)\n\ntype: arg0: ns3::Ptr< ns3::MeshPointDevice >" },
    {(char *) "ResetStats", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_ResetStats, METH_NOARGS, "ResetStats()\n\n" },
    {(char *) "TransmissionSuccess", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_TransmissionSuccess, METH_KEYWORDS|METH_VARARGS, "TransmissionSuccess(interface, peerAddress)\n\ntype: interface: uint32_t\ntype: peerAddress: ns3::Mac48Address const" },
    {(char *) "GetPeerLinks", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_GetPeerLinks, METH_NOARGS, "GetPeerLinks()\n\n" },
    {(char *) "ReceiveBeacon", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_ReceiveBeacon, METH_KEYWORDS|METH_VARARGS, "ReceiveBeacon(interface, peerAddress, beaconInterval, beaconTiming)\n\ntype: interface: uint32_t\ntype: peerAddress: ns3::Mac48Address\ntype: beaconInterval: ns3::Time\ntype: beaconTiming: ns3::Ptr< ns3::dot11s::IeBeaconTiming >" },
    {(char *) "NotifyBeaconSent", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_NotifyBeaconSent, METH_KEYWORDS|METH_VARARGS, "NotifyBeaconSent(interface, beaconInterval)\n\ntype: interface: uint32_t\ntype: beaconInterval: ns3::Time" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3Dot11sPeerManagementProtocol_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3Dot11sPeerManagementProtocol__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3Dot11sPeerManagementProtocol__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3Dot11sPeerManagementProtocol__tp_clear(PyNs3Dot11sPeerManagementProtocol *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dot11s::PeerManagementProtocol *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3Dot11sPeerManagementProtocol__tp_traverse(PyNs3Dot11sPeerManagementProtocol *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3Dot11sPeerManagementProtocol__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3Dot11sPeerManagementProtocol__tp_dealloc(PyNs3Dot11sPeerManagementProtocol *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3Dot11sPeerManagementProtocol__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sPeerManagementProtocol__tp_richcompare (PyNs3Dot11sPeerManagementProtocol *PYBINDGEN_UNUSED(self), PyNs3Dot11sPeerManagementProtocol *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sPeerManagementProtocol_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sPeerManagementProtocol_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.PeerManagementProtocol",            /* tp_name */
    sizeof(PyNs3Dot11sPeerManagementProtocol),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sPeerManagementProtocol__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "PeerManagementProtocol()",                        /* Documentation string */
    (traverseproc)PyNs3Dot11sPeerManagementProtocol__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3Dot11sPeerManagementProtocol__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sPeerManagementProtocol__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sPeerManagementProtocol_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3Dot11sPeerManagementProtocol, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sPeerManagementProtocol__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- containers --- */



static void
Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter__tp_clear(Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter__tp_traverse(Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt____tp_dealloc(Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt____tp_iter(Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__ *self)
{
    Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter, &Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::dot11s::HwmpProtocol::FailedDestination >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter__tp_iter(Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter__tp_iternext(Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::dot11s::HwmpProtocol::FailedDestination >::iterator iter;
    PyNs3Dot11sHwmpProtocolFailedDestination *py_FailedDestination;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_FailedDestination = PyObject_New(PyNs3Dot11sHwmpProtocolFailedDestination, &PyNs3Dot11sHwmpProtocolFailedDestination_Type);
    py_FailedDestination->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_FailedDestination->obj = new ns3::dot11s::HwmpProtocol::FailedDestination((*iter));
    PyNs3Dot11sHwmpProtocolFailedDestination_wrapper_registry[(void *) py_FailedDestination->obj] = (PyObject *) py_FailedDestination;
    py_retval = Py_BuildValue((char *) "N", py_FailedDestination);
    return py_retval;
}

int _wrap_convert_py2c__ns3__dot11s__HwmpProtocol__FailedDestination(PyObject *value, ns3::dot11s::HwmpProtocol::FailedDestination *address)
{
    PyObject *py_retval;
    PyNs3Dot11sHwmpProtocolFailedDestination *tmp_FailedDestination;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Dot11sHwmpProtocolFailedDestination_Type, &tmp_FailedDestination)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_FailedDestination->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__(PyObject *arg, std::vector< ns3::dot11s::HwmpProtocol::FailedDestination > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::dot11s::HwmpProtocol::FailedDestination item;
            if (!_wrap_convert_py2c__ns3__dot11s__HwmpProtocol__FailedDestination(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__ instance, or a list of ns3::dot11s::HwmpProtocol::FailedDestination");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt____tp_init(Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::dot11s::HwmpProtocol::FailedDestination >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.Std__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.Std__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter__tp_clear(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter__tp_traverse(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt____tp_dealloc(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt____tp_iter(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__ *self)
{
    Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter, &Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::Ptr< ns3::dot11s::IeBeaconTimingUnit > >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter__tp_iter(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter__tp_iternext(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ptr< ns3::dot11s::IeBeaconTimingUnit > >::iterator iter;
    PyNs3Dot11sIeBeaconTimingUnit *py_IeBeaconTimingUnit;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    if (!(const_cast<ns3::dot11s::IeBeaconTimingUnit *> (ns3::PeekPointer ((*iter))))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::dot11s::IeBeaconTimingUnit *> (ns3::PeekPointer ((*iter))));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_IeBeaconTimingUnit = NULL;
    } else {
        py_IeBeaconTimingUnit = (PyNs3Dot11sIeBeaconTimingUnit *) wrapper_lookup_iter->second;
        Py_INCREF(py_IeBeaconTimingUnit);
    }
    
    if (py_IeBeaconTimingUnit == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::dot11s::IeBeaconTimingUnit *> (ns3::PeekPointer ((*iter))))), &PyNs3Dot11sIeBeaconTimingUnit_Type);
        py_IeBeaconTimingUnit = PyObject_New(PyNs3Dot11sIeBeaconTimingUnit, wrapper_type);
    
        py_IeBeaconTimingUnit->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::dot11s::IeBeaconTimingUnit *> (ns3::PeekPointer ((*iter)))->Ref();
        py_IeBeaconTimingUnit->obj = const_cast<ns3::dot11s::IeBeaconTimingUnit *> (ns3::PeekPointer ((*iter)));
        PyNs3Empty_wrapper_registry[(void *) py_IeBeaconTimingUnit->obj] = (PyObject *) py_IeBeaconTimingUnit;
    }
    py_retval = Py_BuildValue((char *) "N", py_IeBeaconTimingUnit);
    return py_retval;
}

int _wrap_convert_py2c__ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt__(PyObject *value, ns3::Ptr< ns3::dot11s::IeBeaconTimingUnit > *address)
{
    PyObject *py_retval;
    PyNs3Dot11sIeBeaconTimingUnit *tmp_IeBeaconTimingUnit;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Dot11sIeBeaconTimingUnit_Type, &tmp_IeBeaconTimingUnit)) {
        Py_DECREF(py_retval);
        return 0;
    }
    // dangerous!
    *address = ns3::Ptr< ns3::dot11s::IeBeaconTimingUnit  > (tmp_IeBeaconTimingUnit->obj);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::dot11s::IeBeaconTimingUnit > > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::Ptr< ns3::dot11s::IeBeaconTimingUnit > item;
            if (!_wrap_convert_py2c__ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__ instance, or a list of ns3::Ptr< ns3::dot11s::IeBeaconTimingUnit >");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt____tp_init(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::Ptr< ns3::dot11s::IeBeaconTimingUnit > >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.Std__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.Std__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter__tp_clear(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter__tp_traverse(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt____tp_dealloc(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt____tp_iter(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__ *self)
{
    Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter, &Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::Ptr< ns3::dot11s::DestinationAddressUnit > >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter__tp_iter(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter__tp_iternext(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ptr< ns3::dot11s::DestinationAddressUnit > >::iterator iter;
    PyNs3Dot11sDestinationAddressUnit *py_DestinationAddressUnit;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    if (!(const_cast<ns3::dot11s::DestinationAddressUnit *> (ns3::PeekPointer ((*iter))))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::dot11s::DestinationAddressUnit *> (ns3::PeekPointer ((*iter))));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_DestinationAddressUnit = NULL;
    } else {
        py_DestinationAddressUnit = (PyNs3Dot11sDestinationAddressUnit *) wrapper_lookup_iter->second;
        Py_INCREF(py_DestinationAddressUnit);
    }
    
    if (py_DestinationAddressUnit == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::dot11s::DestinationAddressUnit *> (ns3::PeekPointer ((*iter))))), &PyNs3Dot11sDestinationAddressUnit_Type);
        py_DestinationAddressUnit = PyObject_New(PyNs3Dot11sDestinationAddressUnit, wrapper_type);
    
        py_DestinationAddressUnit->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::dot11s::DestinationAddressUnit *> (ns3::PeekPointer ((*iter)))->Ref();
        py_DestinationAddressUnit->obj = const_cast<ns3::dot11s::DestinationAddressUnit *> (ns3::PeekPointer ((*iter)));
        PyNs3Empty_wrapper_registry[(void *) py_DestinationAddressUnit->obj] = (PyObject *) py_DestinationAddressUnit;
    }
    py_retval = Py_BuildValue((char *) "N", py_DestinationAddressUnit);
    return py_retval;
}

int _wrap_convert_py2c__ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt__(PyObject *value, ns3::Ptr< ns3::dot11s::DestinationAddressUnit > *address)
{
    PyObject *py_retval;
    PyNs3Dot11sDestinationAddressUnit *tmp_DestinationAddressUnit;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Dot11sDestinationAddressUnit_Type, &tmp_DestinationAddressUnit)) {
        Py_DECREF(py_retval);
        return 0;
    }
    // dangerous!
    *address = ns3::Ptr< ns3::dot11s::DestinationAddressUnit  > (tmp_DestinationAddressUnit->obj);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::dot11s::DestinationAddressUnit > > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::Ptr< ns3::dot11s::DestinationAddressUnit > item;
            if (!_wrap_convert_py2c__ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__ instance, or a list of ns3::Ptr< ns3::dot11s::DestinationAddressUnit >");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt____tp_init(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::Ptr< ns3::dot11s::DestinationAddressUnit > >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.Std__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.Std__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter__tp_clear(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter__tp_traverse(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt____tp_dealloc(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt____tp_iter(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__ *self)
{
    Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter, &Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::Ptr< ns3::dot11s::PeerLink > >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter__tp_iter(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter__tp_iternext(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ptr< ns3::dot11s::PeerLink > >::iterator iter;
    PyNs3Dot11sPeerLink *py_PeerLink;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    if (!(const_cast<ns3::dot11s::PeerLink *> (ns3::PeekPointer ((*iter))))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::dot11s::PeerLink *> (ns3::PeekPointer ((*iter))))).name() == typeid(PyNs3Dot11sPeerLink__PythonHelper).name())
    {
        py_PeerLink = reinterpret_cast< PyNs3Dot11sPeerLink* >(reinterpret_cast< PyNs3Dot11sPeerLink__PythonHelper* >(const_cast<ns3::dot11s::PeerLink *> (ns3::PeekPointer ((*iter))))->m_pyself);
        py_PeerLink->obj = const_cast<ns3::dot11s::PeerLink *> (ns3::PeekPointer ((*iter)));
        Py_INCREF(py_PeerLink);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::dot11s::PeerLink *> (ns3::PeekPointer ((*iter))));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_PeerLink = NULL;
        } else {
            py_PeerLink = (PyNs3Dot11sPeerLink *) wrapper_lookup_iter->second;
            Py_INCREF(py_PeerLink);
        }
    
        if (py_PeerLink == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::dot11s::PeerLink *> (ns3::PeekPointer ((*iter))))), &PyNs3Dot11sPeerLink_Type);
            py_PeerLink = PyObject_GC_New(PyNs3Dot11sPeerLink, wrapper_type);
            py_PeerLink->inst_dict = NULL;
    
            py_PeerLink->inst_dict = NULL;
            py_PeerLink->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::dot11s::PeerLink *> (ns3::PeekPointer ((*iter)))->Ref();
            py_PeerLink->obj = const_cast<ns3::dot11s::PeerLink *> (ns3::PeekPointer ((*iter)));
            PyNs3ObjectBase_wrapper_registry[(void *) py_PeerLink->obj] = (PyObject *) py_PeerLink;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_PeerLink);
    return py_retval;
}

int _wrap_convert_py2c__ns3__Ptr__lt___ns3__dot11s__PeerLink___gt__(PyObject *value, ns3::Ptr< ns3::dot11s::PeerLink > *address)
{
    PyObject *py_retval;
    PyNs3Dot11sPeerLink *tmp_PeerLink;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Dot11sPeerLink_Type, &tmp_PeerLink)) {
        Py_DECREF(py_retval);
        return 0;
    }
    // dangerous!
    *address = ns3::Ptr< ns3::dot11s::PeerLink  > (tmp_PeerLink->obj);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::dot11s::PeerLink > > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::Ptr< ns3::dot11s::PeerLink > item;
            if (!_wrap_convert_py2c__ns3__Ptr__lt___ns3__dot11s__PeerLink___gt__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__ instance, or a list of ns3::Ptr< ns3::dot11s::PeerLink >");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt____tp_init(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::Ptr< ns3::dot11s::PeerLink > >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.Std__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.Std__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__Mac48Address___gt__Iter__tp_clear(Pystd__vector__lt___ns3__Mac48Address___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__Mac48Address___gt__Iter__tp_traverse(Pystd__vector__lt___ns3__Mac48Address___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__Mac48Address___gt____tp_dealloc(Pystd__vector__lt___ns3__Mac48Address___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__Mac48Address___gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__Mac48Address___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Mac48Address___gt____tp_iter(Pystd__vector__lt___ns3__Mac48Address___gt__ *self)
{
    Pystd__vector__lt___ns3__Mac48Address___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__Mac48Address___gt__Iter, &Pystd__vector__lt___ns3__Mac48Address___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::Mac48Address >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Mac48Address___gt__Iter__tp_iter(Pystd__vector__lt___ns3__Mac48Address___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__Mac48Address___gt__Iter__tp_iternext(Pystd__vector__lt___ns3__Mac48Address___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::Mac48Address >::iterator iter;
    PyNs3Mac48Address *py_Mac48Address;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address((*iter));
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}

int _wrap_convert_py2c__ns3__Mac48Address(PyObject *value, ns3::Mac48Address *address)
{
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__Mac48Address___gt__(PyObject *arg, std::vector< ns3::Mac48Address > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__Mac48Address___gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__Mac48Address___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::Mac48Address item;
            if (!_wrap_convert_py2c__ns3__Mac48Address(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__Mac48Address___gt__ instance, or a list of ns3::Mac48Address");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__Mac48Address___gt____tp_init(Pystd__vector__lt___ns3__Mac48Address___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::Mac48Address >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__Mac48Address___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__Mac48Address___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.Std__vector__lt___ns3__Mac48Address___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Mac48Address___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Mac48Address___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Mac48Address___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__Mac48Address___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__Mac48Address___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.dot11s.Std__vector__lt___ns3__Mac48Address___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Mac48Address___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Mac48Address___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__Mac48Address___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__Mac48Address___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Mac48Address___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__Mac48Address___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- enumerations --- */

















#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef mesh_dot11s_moduledef = {
    PyModuleDef_HEAD_INIT,
    "mesh.dot11s",
    NULL,
    -1,
    mesh_dot11s_functions,
};
#endif

static PyObject *
initmesh_dot11s(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&mesh_dot11s_moduledef);
    #else
    m = Py_InitModule3((char *) "mesh.dot11s", mesh_dot11s_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::DestinationAddressUnit), &PyNs3Dot11sDestinationAddressUnit_Type);
    /* Register the 'ns3::dot11s::DestinationAddressUnit' class */
    PyNs3Dot11sDestinationAddressUnit_Type.tp_base = &PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt___Type;
    if (PyType_Ready(&PyNs3Dot11sDestinationAddressUnit_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DestinationAddressUnit", (PyObject *) &PyNs3Dot11sDestinationAddressUnit_Type);
    PyModule_AddObject(m, (char *) "_PyNs3Dot11sDot11sMeshCapability_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3Dot11sDot11sMeshCapability_wrapper_registry, NULL));
    /* Register the 'ns3::dot11s::Dot11sMeshCapability' class */
    if (PyType_Ready(&PyNs3Dot11sDot11sMeshCapability_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Dot11sMeshCapability", (PyObject *) &PyNs3Dot11sDot11sMeshCapability_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dot11s::HwmpProtocol), &PyNs3Dot11sHwmpProtocol_Type);
    /* Register the 'ns3::dot11s::HwmpProtocol' class */
    PyNs3Dot11sHwmpProtocol_Type.tp_base = &PyNs3MeshL2RoutingProtocol_Type;
    if (PyType_Ready(&PyNs3Dot11sHwmpProtocol_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "HwmpProtocol", (PyObject *) &PyNs3Dot11sHwmpProtocol_Type);
    PyModule_AddObject(m, (char *) "_PyNs3Dot11sHwmpProtocolFailedDestination_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3Dot11sHwmpProtocolFailedDestination_wrapper_registry, NULL));
    /* Register the 'ns3::dot11s::HwmpProtocol::FailedDestination' class */
    if (PyType_Ready(&PyNs3Dot11sHwmpProtocolFailedDestination_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3Dot11sHwmpProtocol_Type.tp_dict, (char *) "FailedDestination", (PyObject *) &PyNs3Dot11sHwmpProtocolFailedDestination_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dot11s::HwmpRtable), &PyNs3Dot11sHwmpRtable_Type);
    /* Register the 'ns3::dot11s::HwmpRtable' class */
    
    PyNs3Dot11sHwmpRtableMeta_Type.tp_base = Py_TYPE(&PyNs3Object_Type);
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3Dot11sHwmpRtableMeta_Type.tp_traverse = Py_TYPE(&PyNs3Object_Type)->tp_traverse;
    PyNs3Dot11sHwmpRtableMeta_Type.tp_clear = Py_TYPE(&PyNs3Object_Type)->tp_clear;
    PyNs3Dot11sHwmpRtableMeta_Type.tp_is_gc = Py_TYPE(&PyNs3Object_Type)->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3Dot11sHwmpRtableMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3Dot11sHwmpRtableMeta_Type);
    
    PyNs3Dot11sHwmpRtable_Type.tp_base = &PyNs3Object_Type;
    Py_TYPE(&PyNs3Dot11sHwmpRtable_Type) = &PyNs3Dot11sHwmpRtableMeta_Type;
    if (PyType_Ready(&PyNs3Dot11sHwmpRtable_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "HwmpRtable", (PyObject *) &PyNs3Dot11sHwmpRtable_Type);
    PyModule_AddObject(m, (char *) "_PyNs3Dot11sHwmpRtableLookupResult_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3Dot11sHwmpRtableLookupResult_wrapper_registry, NULL));
    /* Register the 'ns3::dot11s::HwmpRtable::LookupResult' class */
    if (PyType_Ready(&PyNs3Dot11sHwmpRtableLookupResult_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3Dot11sHwmpRtable_Type.tp_dict, (char *) "LookupResult", (PyObject *) &PyNs3Dot11sHwmpRtableLookupResult_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IeBeaconTiming), &PyNs3Dot11sIeBeaconTiming_Type);
    /* Register the 'ns3::dot11s::IeBeaconTiming' class */
    PyNs3Dot11sIeBeaconTiming_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3Dot11sIeBeaconTiming_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IeBeaconTiming", (PyObject *) &PyNs3Dot11sIeBeaconTiming_Type);
    PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IeBeaconTimingUnit), &PyNs3Dot11sIeBeaconTimingUnit_Type);
    /* Register the 'ns3::dot11s::IeBeaconTimingUnit' class */
    PyNs3Dot11sIeBeaconTimingUnit_Type.tp_base = &PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Type;
    if (PyType_Ready(&PyNs3Dot11sIeBeaconTimingUnit_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IeBeaconTimingUnit", (PyObject *) &PyNs3Dot11sIeBeaconTimingUnit_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IeConfiguration), &PyNs3Dot11sIeConfiguration_Type);
    /* Register the 'ns3::dot11s::IeConfiguration' class */
    PyNs3Dot11sIeConfiguration_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3Dot11sIeConfiguration_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IeConfiguration", (PyObject *) &PyNs3Dot11sIeConfiguration_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IeLinkMetricReport), &PyNs3Dot11sIeLinkMetricReport_Type);
    /* Register the 'ns3::dot11s::IeLinkMetricReport' class */
    PyNs3Dot11sIeLinkMetricReport_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3Dot11sIeLinkMetricReport_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IeLinkMetricReport", (PyObject *) &PyNs3Dot11sIeLinkMetricReport_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IeMeshId), &PyNs3Dot11sIeMeshId_Type);
    /* Register the 'ns3::dot11s::IeMeshId' class */
    PyNs3Dot11sIeMeshId_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3Dot11sIeMeshId_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IeMeshId", (PyObject *) &PyNs3Dot11sIeMeshId_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IeMeshIdChecker), &PyNs3Dot11sIeMeshIdChecker_Type);
    /* Register the 'ns3::dot11s::IeMeshIdChecker' class */
    PyNs3Dot11sIeMeshIdChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3Dot11sIeMeshIdChecker_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IeMeshIdChecker", (PyObject *) &PyNs3Dot11sIeMeshIdChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IeMeshIdValue), &PyNs3Dot11sIeMeshIdValue_Type);
    /* Register the 'ns3::dot11s::IeMeshIdValue' class */
    PyNs3Dot11sIeMeshIdValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3Dot11sIeMeshIdValue_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IeMeshIdValue", (PyObject *) &PyNs3Dot11sIeMeshIdValue_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IePeerManagement), &PyNs3Dot11sIePeerManagement_Type);
    /* Register the 'ns3::dot11s::IePeerManagement' class */
    PyNs3Dot11sIePeerManagement_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3Dot11sIePeerManagement_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IePeerManagement", (PyObject *) &PyNs3Dot11sIePeerManagement_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IePeeringProtocol), &PyNs3Dot11sIePeeringProtocol_Type);
    /* Register the 'ns3::dot11s::IePeeringProtocol' class */
    PyNs3Dot11sIePeeringProtocol_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3Dot11sIePeeringProtocol_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IePeeringProtocol", (PyObject *) &PyNs3Dot11sIePeeringProtocol_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IePerr), &PyNs3Dot11sIePerr_Type);
    /* Register the 'ns3::dot11s::IePerr' class */
    PyNs3Dot11sIePerr_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3Dot11sIePerr_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IePerr", (PyObject *) &PyNs3Dot11sIePerr_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IePrep), &PyNs3Dot11sIePrep_Type);
    /* Register the 'ns3::dot11s::IePrep' class */
    PyNs3Dot11sIePrep_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3Dot11sIePrep_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IePrep", (PyObject *) &PyNs3Dot11sIePrep_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IePreq), &PyNs3Dot11sIePreq_Type);
    /* Register the 'ns3::dot11s::IePreq' class */
    PyNs3Dot11sIePreq_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3Dot11sIePreq_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IePreq", (PyObject *) &PyNs3Dot11sIePreq_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IeRann), &PyNs3Dot11sIeRann_Type);
    /* Register the 'ns3::dot11s::IeRann' class */
    PyNs3Dot11sIeRann_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3Dot11sIeRann_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IeRann", (PyObject *) &PyNs3Dot11sIeRann_Type);
    /* Register the 'ns3::dot11s::MeshHeader' class */
    PyNs3Dot11sMeshHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Dot11sMeshHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "MeshHeader", (PyObject *) &PyNs3Dot11sMeshHeader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dot11s::PeerLink), &PyNs3Dot11sPeerLink_Type);
    /* Register the 'ns3::dot11s::PeerLink' class */
    PyNs3Dot11sPeerLink_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Dot11sPeerLink_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "PeerLink", (PyObject *) &PyNs3Dot11sPeerLink_Type);
    /* Register the 'ns3::dot11s::PeerLinkCloseStart' class */
    PyNs3Dot11sPeerLinkCloseStart_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Dot11sPeerLinkCloseStart_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "PeerLinkCloseStart", (PyObject *) &PyNs3Dot11sPeerLinkCloseStart_Type);
    PyModule_AddObject(m, (char *) "_PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_wrapper_registry, NULL));
    /* Register the 'ns3::dot11s::PeerLinkCloseStart::PlinkCloseStartFields' class */
    if (PyType_Ready(&PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3Dot11sPeerLinkCloseStart_Type.tp_dict, (char *) "PlinkCloseStartFields", (PyObject *) &PyNs3Dot11sPeerLinkCloseStartPlinkCloseStartFields_Type);
    /* Register the 'ns3::dot11s::PeerLinkConfirmStart' class */
    PyNs3Dot11sPeerLinkConfirmStart_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Dot11sPeerLinkConfirmStart_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "PeerLinkConfirmStart", (PyObject *) &PyNs3Dot11sPeerLinkConfirmStart_Type);
    PyModule_AddObject(m, (char *) "_PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_wrapper_registry, NULL));
    /* Register the 'ns3::dot11s::PeerLinkConfirmStart::PlinkConfirmStartFields' class */
    if (PyType_Ready(&PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3Dot11sPeerLinkConfirmStart_Type.tp_dict, (char *) "PlinkConfirmStartFields", (PyObject *) &PyNs3Dot11sPeerLinkConfirmStartPlinkConfirmStartFields_Type);
    /* Register the 'ns3::dot11s::PeerLinkOpenStart' class */
    PyNs3Dot11sPeerLinkOpenStart_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Dot11sPeerLinkOpenStart_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "PeerLinkOpenStart", (PyObject *) &PyNs3Dot11sPeerLinkOpenStart_Type);
    PyModule_AddObject(m, (char *) "_PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_wrapper_registry, NULL));
    /* Register the 'ns3::dot11s::PeerLinkOpenStart::PlinkOpenStartFields' class */
    if (PyType_Ready(&PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3Dot11sPeerLinkOpenStart_Type.tp_dict, (char *) "PlinkOpenStartFields", (PyObject *) &PyNs3Dot11sPeerLinkOpenStartPlinkOpenStartFields_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dot11s::PeerManagementProtocol), &PyNs3Dot11sPeerManagementProtocol_Type);
    /* Register the 'ns3::dot11s::PeerManagementProtocol' class */
    PyNs3Dot11sPeerManagementProtocol_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Dot11sPeerManagementProtocol_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "PeerManagementProtocol", (PyObject *) &PyNs3Dot11sPeerManagementProtocol_Type);
    /* Register the 'std::vector< ns3::dot11s::HwmpProtocol::FailedDestination >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__", (PyObject *) &Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__dot11s__HwmpProtocol__FailedDestination___gt__Iter_Type);
    /* Register the 'std::vector< ns3::Ptr< ns3::dot11s::IeBeaconTimingUnit > >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__IeBeaconTimingUnit___gt_____gt__Iter_Type);
    /* Register the 'std::vector< ns3::Ptr< ns3::dot11s::DestinationAddressUnit > >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__DestinationAddressUnit___gt_____gt__Iter_Type);
    /* Register the 'std::vector< ns3::Ptr< ns3::dot11s::PeerLink > >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__dot11s__PeerLink___gt_____gt__Iter_Type);
    /* Register the 'std::vector< ns3::Mac48Address >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__Mac48Address___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__Mac48Address___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Mac48Address___gt__", (PyObject *) &Pystd__vector__lt___ns3__Mac48Address___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Mac48Address___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__Mac48Address___gt__Iter_Type);
    PyModule_AddIntConstant(m, (char *) "SYNC_NEIGHBOUR_OFFSET", ns3::dot11s::SYNC_NEIGHBOUR_OFFSET);
    PyModule_AddIntConstant(m, (char *) "SYNC_NULL", ns3::dot11s::SYNC_NULL);
    PyModule_AddIntConstant(m, (char *) "CONGESTION_SIGNALING", ns3::dot11s::CONGESTION_SIGNALING);
    PyModule_AddIntConstant(m, (char *) "CONGESTION_NULL", ns3::dot11s::CONGESTION_NULL);
    PyModule_AddIntConstant(m, (char *) "METRIC_AIRTIME", ns3::dot11s::METRIC_AIRTIME);
    PyModule_AddIntConstant(m, (char *) "REASON11S_PEERING_CANCELLED", ns3::dot11s::REASON11S_PEERING_CANCELLED);
    PyModule_AddIntConstant(m, (char *) "REASON11S_MESH_MAX_PEERS", ns3::dot11s::REASON11S_MESH_MAX_PEERS);
    PyModule_AddIntConstant(m, (char *) "REASON11S_MESH_CAPABILITY_POLICY_VIOLATION", ns3::dot11s::REASON11S_MESH_CAPABILITY_POLICY_VIOLATION);
    PyModule_AddIntConstant(m, (char *) "REASON11S_MESH_CLOSE_RCVD", ns3::dot11s::REASON11S_MESH_CLOSE_RCVD);
    PyModule_AddIntConstant(m, (char *) "REASON11S_MESH_MAX_RETRIES", ns3::dot11s::REASON11S_MESH_MAX_RETRIES);
    PyModule_AddIntConstant(m, (char *) "REASON11S_MESH_CONFIRM_TIMEOUT", ns3::dot11s::REASON11S_MESH_CONFIRM_TIMEOUT);
    PyModule_AddIntConstant(m, (char *) "REASON11S_MESH_INVALID_GTK", ns3::dot11s::REASON11S_MESH_INVALID_GTK);
    PyModule_AddIntConstant(m, (char *) "REASON11S_MESH_INCONSISTENT_PARAMETERS", ns3::dot11s::REASON11S_MESH_INCONSISTENT_PARAMETERS);
    PyModule_AddIntConstant(m, (char *) "REASON11S_MESH_INVALID_SECURITY_CAPABILITY", ns3::dot11s::REASON11S_MESH_INVALID_SECURITY_CAPABILITY);
    PyModule_AddIntConstant(m, (char *) "REASON11S_RESERVED", ns3::dot11s::REASON11S_RESERVED);
    PyModule_AddIntConstant(m, (char *) "PROTOCOL_HWMP", ns3::dot11s::PROTOCOL_HWMP);
    PyModule_AddIntConstant(m, (char *) "AUTH_NULL", ns3::dot11s::AUTH_NULL);
    PyModule_AddIntConstant(m, (char *) "AUTH_SAE", ns3::dot11s::AUTH_SAE);
    PyModule_AddIntConstant(m, (char *) "AUTH_IEEE", ns3::dot11s::AUTH_IEEE);
    {
        PyObject *tmp_value;
         // ns3::dot11s::IePeerManagement::PEER_OPEN
        tmp_value = PyLong_FromLong(ns3::dot11s::IePeerManagement::PEER_OPEN);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sIePeerManagement_Type.tp_dict, "PEER_OPEN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::dot11s::IePeerManagement::PEER_CONFIRM
        tmp_value = PyLong_FromLong(ns3::dot11s::IePeerManagement::PEER_CONFIRM);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sIePeerManagement_Type.tp_dict, "PEER_CONFIRM", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::dot11s::IePeerManagement::PEER_CLOSE
        tmp_value = PyLong_FromLong(ns3::dot11s::IePeerManagement::PEER_CLOSE);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sIePeerManagement_Type.tp_dict, "PEER_CLOSE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::dot11s::PeerLink::IDLE
        tmp_value = PyLong_FromLong(ns3::dot11s::PeerLink::IDLE);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sPeerLink_Type.tp_dict, "IDLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::dot11s::PeerLink::OPN_SNT
        tmp_value = PyLong_FromLong(ns3::dot11s::PeerLink::OPN_SNT);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sPeerLink_Type.tp_dict, "OPN_SNT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::dot11s::PeerLink::CNF_RCVD
        tmp_value = PyLong_FromLong(ns3::dot11s::PeerLink::CNF_RCVD);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sPeerLink_Type.tp_dict, "CNF_RCVD", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::dot11s::PeerLink::OPN_RCVD
        tmp_value = PyLong_FromLong(ns3::dot11s::PeerLink::OPN_RCVD);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sPeerLink_Type.tp_dict, "OPN_RCVD", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::dot11s::PeerLink::ESTAB
        tmp_value = PyLong_FromLong(ns3::dot11s::PeerLink::ESTAB);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sPeerLink_Type.tp_dict, "ESTAB", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::dot11s::PeerLink::HOLDING
        tmp_value = PyLong_FromLong(ns3::dot11s::PeerLink::HOLDING);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sPeerLink_Type.tp_dict, "HOLDING", tmp_value);
        Py_DECREF(tmp_value);
    }
    return m;
}
static PyMethodDef mesh_flame_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */




static int
_wrap_PyNs3FlameFlameHeader__tp_init__0(PyNs3FlameFlameHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3FlameFlameHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3FlameFlameHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::flame::FlameHeader(*((PyNs3FlameFlameHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3FlameFlameHeader__tp_init__1(PyNs3FlameFlameHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::flame::FlameHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3FlameFlameHeader__tp_init(PyNs3FlameFlameHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3FlameFlameHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3FlameFlameHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3FlameFlameHeader_SetSeqno(PyNs3FlameFlameHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seqno;
    const char *keywords[] = {"seqno", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seqno)) {
        return NULL;
    }
    if (seqno > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSeqno(seqno);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameHeader_Deserialize(PyNs3FlameFlameHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameHeader_GetOrigDst(PyNs3FlameFlameHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetOrigDst();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameHeader_SetProtocol(PyNs3FlameFlameHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int protocol;
    const char *keywords[] = {"protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &protocol)) {
        return NULL;
    }
    if (protocol > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetProtocol(protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameHeader_GetSeqno(PyNs3FlameFlameHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSeqno();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::flame::FlameHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameHeader_Serialize(PyNs3FlameFlameHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameHeader_GetCost(PyNs3FlameFlameHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetCost();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameHeader_GetOrigSrc(PyNs3FlameFlameHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetOrigSrc();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameHeader_GetProtocol(PyNs3FlameFlameHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetProtocol();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameHeader_SetOrigSrc(PyNs3FlameFlameHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *OrigSrc;
    const char *keywords[] = {"OrigSrc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &OrigSrc)) {
        return NULL;
    }
    self->obj->SetOrigSrc(*((PyNs3Mac48Address *) OrigSrc)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameHeader_GetInstanceTypeId(PyNs3FlameFlameHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameHeader_GetSerializedSize(PyNs3FlameFlameHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameHeader_AddCost(PyNs3FlameFlameHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int cost;
    const char *keywords[] = {"cost", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &cost)) {
        return NULL;
    }
    if (cost > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->AddCost(cost);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameHeader_SetOrigDst(PyNs3FlameFlameHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *dst;
    const char *keywords[] = {"dst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &dst)) {
        return NULL;
    }
    self->obj->SetOrigDst(*((PyNs3Mac48Address *) dst)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3FlameFlameHeader__copy__(PyNs3FlameFlameHeader *self)
{

    PyNs3FlameFlameHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3FlameFlameHeader, &PyNs3FlameFlameHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::flame::FlameHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3FlameFlameHeader_methods[] = {
    {(char *) "SetSeqno", (PyCFunction) _wrap_PyNs3FlameFlameHeader_SetSeqno, METH_KEYWORDS|METH_VARARGS, "SetSeqno(seqno)\n\ntype: seqno: uint16_t" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3FlameFlameHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetOrigDst", (PyCFunction) _wrap_PyNs3FlameFlameHeader_GetOrigDst, METH_NOARGS, "GetOrigDst()\n\n" },
    {(char *) "SetProtocol", (PyCFunction) _wrap_PyNs3FlameFlameHeader_SetProtocol, METH_KEYWORDS|METH_VARARGS, "SetProtocol(protocol)\n\ntype: protocol: uint16_t" },
    {(char *) "GetSeqno", (PyCFunction) _wrap_PyNs3FlameFlameHeader_GetSeqno, METH_NOARGS, "GetSeqno()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3FlameFlameHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3FlameFlameHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetCost", (PyCFunction) _wrap_PyNs3FlameFlameHeader_GetCost, METH_NOARGS, "GetCost()\n\n" },
    {(char *) "GetOrigSrc", (PyCFunction) _wrap_PyNs3FlameFlameHeader_GetOrigSrc, METH_NOARGS, "GetOrigSrc()\n\n" },
    {(char *) "GetProtocol", (PyCFunction) _wrap_PyNs3FlameFlameHeader_GetProtocol, METH_NOARGS, "GetProtocol()\n\n" },
    {(char *) "SetOrigSrc", (PyCFunction) _wrap_PyNs3FlameFlameHeader_SetOrigSrc, METH_KEYWORDS|METH_VARARGS, "SetOrigSrc(OrigSrc)\n\ntype: OrigSrc: ns3::Mac48Address" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3FlameFlameHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3FlameFlameHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "AddCost", (PyCFunction) _wrap_PyNs3FlameFlameHeader_AddCost, METH_KEYWORDS|METH_VARARGS, "AddCost(cost)\n\ntype: cost: uint8_t" },
    {(char *) "SetOrigDst", (PyCFunction) _wrap_PyNs3FlameFlameHeader_SetOrigDst, METH_KEYWORDS|METH_VARARGS, "SetOrigDst(dst)\n\ntype: dst: ns3::Mac48Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3FlameFlameHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3FlameFlameHeader__tp_clear(PyNs3FlameFlameHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::flame::FlameHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3FlameFlameHeader__tp_traverse(PyNs3FlameFlameHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3FlameFlameHeader__tp_dealloc(PyNs3FlameFlameHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3FlameFlameHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3FlameFlameHeader__tp_richcompare (PyNs3FlameFlameHeader *PYBINDGEN_UNUSED(self), PyNs3FlameFlameHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3FlameFlameHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3FlameFlameHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.flame.FlameHeader",            /* tp_name */
    sizeof(PyNs3FlameFlameHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3FlameFlameHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "FlameHeader(arg0)\nFlameHeader()",                        /* Documentation string */
    (traverseproc)PyNs3FlameFlameHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3FlameFlameHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3FlameFlameHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3FlameFlameHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3FlameFlameHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3FlameFlameHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3FlameFlameProtocol__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3FlameFlameProtocol *self)
{
    PyObject *py_retval;
    PyNs3FlameFlameProtocol__PythonHelper *helper = dynamic_cast< PyNs3FlameFlameProtocol__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3FlameFlameProtocol__PythonHelper::_wrap_DoInitialize(PyNs3FlameFlameProtocol *self)
{
    PyObject *py_retval;
    PyNs3FlameFlameProtocol__PythonHelper *helper = dynamic_cast< PyNs3FlameFlameProtocol__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3FlameFlameProtocol__PythonHelper::_wrap_NotifyNewAggregate(PyNs3FlameFlameProtocol *self)
{
    PyObject *py_retval;
    PyNs3FlameFlameProtocol__PythonHelper *helper = dynamic_cast< PyNs3FlameFlameProtocol__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3FlameFlameProtocol__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::flame::FlameProtocol *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::flame::FlameProtocol::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3FlameFlameProtocol* >(m_pyself)->obj;
    reinterpret_cast< PyNs3FlameFlameProtocol* >(m_pyself)->obj = (ns3::flame::FlameProtocol*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3FlameFlameProtocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3FlameFlameProtocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3FlameFlameProtocol* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3FlameFlameProtocol__PythonHelper::RemoveRoutingStuff(uint32_t fromIface, ns3::Mac48Address const source, ns3::Mac48Address const destination, ns3::Ptr< ns3::Packet > packet, uint16_t & protocolType)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::flame::FlameProtocol *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "RemoveRoutingStuff"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::flame::FlameProtocol::RemoveRoutingStuff(fromIface, source, destination, packet, protocolType);
    }
    self_obj_before = reinterpret_cast< PyNs3FlameFlameProtocol* >(m_pyself)->obj;
    reinterpret_cast< PyNs3FlameFlameProtocol* >(m_pyself)->obj = (ns3::flame::FlameProtocol*) this;
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(source);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(destination);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "RemoveRoutingStuff", (char *) "NNNNH", PyLong_FromUnsignedLong(fromIface), py_Mac48Address, py_Mac48Address2, py_Packet, protocolType);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3FlameFlameProtocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::flame::FlameProtocol::RemoveRoutingStuff(fromIface, source, destination, packet, protocolType);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3FlameFlameProtocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::flame::FlameProtocol::RemoveRoutingStuff(fromIface, source, destination, packet, protocolType);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3FlameFlameProtocol* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


ns3::TypeId
PyNs3FlameFlameProtocol__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3FlameFlameProtocol__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3FlameFlameProtocol__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3FlameFlameProtocol__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3FlameFlameProtocol__tp_init(PyNs3FlameFlameProtocol *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3FlameFlameProtocol_Type)
    {
        self->obj = new PyNs3FlameFlameProtocol__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3FlameFlameProtocol__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::flame::FlameProtocol();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3FlameFlameProtocol_RemoveRoutingStuff(PyNs3FlameFlameProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    unsigned int fromIface;
    PyNs3Mac48Address *source;
    PyNs3Mac48Address *destination;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    uint16_t  protocolType;
    PyNs3FlameFlameProtocol__PythonHelper *helper_class = dynamic_cast<PyNs3FlameFlameProtocol__PythonHelper*> (self->obj);
    const char *keywords[] = {"fromIface", "source", "destination", "packet", "protocolType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!O!O!H", (char **) keywords, &fromIface, &PyNs3Mac48Address_Type, &source, &PyNs3Mac48Address_Type, &destination, &PyNs3Packet_Type, &packet, &protocolType)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->RemoveRoutingStuff(fromIface, *((PyNs3Mac48Address *) source)->obj, *((PyNs3Mac48Address *) destination)->obj, ns3::Ptr< ns3::Packet  > (packet_ptr), protocolType)) : (self->obj->ns3::flame::FlameProtocol::RemoveRoutingStuff(fromIface, *((PyNs3Mac48Address *) source)->obj, *((PyNs3Mac48Address *) destination)->obj, ns3::Ptr< ns3::Packet  > (packet_ptr), protocolType));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameProtocol_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::flame::FlameProtocol::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameProtocol_GetAddress(PyNs3FlameFlameProtocol *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameProtocol_Install(PyNs3FlameFlameProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3MeshPointDevice *arg0;
    ns3::MeshPointDevice *arg0_ptr;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshPointDevice_Type, &arg0)) {
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    retval = self->obj->Install(ns3::Ptr< ns3::MeshPointDevice  > (arg0_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameProtocol_DoDispose(PyNs3FlameFlameProtocol *self)
{
    PyObject *py_retval;
    PyNs3FlameFlameProtocol__PythonHelper *helper_class = dynamic_cast<PyNs3FlameFlameProtocol__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::flame::FlameProtocol::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameProtocol_RequestRoute(PyNs3FlameFlameProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    unsigned int sourceIface;
    PyNs3Mac48Address *source;
    PyNs3Mac48Address *destination;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    int protocolType;
    PyObject *routeReply;
    ns3::Ptr<PythonCallbackImpl3> routeReply_cb_impl;
    PyNs3FlameFlameProtocol__PythonHelper *helper_class = dynamic_cast<PyNs3FlameFlameProtocol__PythonHelper*> (self->obj);
    const char *keywords[] = {"sourceIface", "source", "destination", "packet", "protocolType", "routeReply", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!O!O!iO", (char **) keywords, &sourceIface, &PyNs3Mac48Address_Type, &source, &PyNs3Mac48Address_Type, &destination, &PyNs3Packet_Type, &packet, &protocolType, &routeReply)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (protocolType > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (!PyCallable_Check(routeReply)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'routeReply' must be callbale");
        return NULL;
    }
    routeReply_cb_impl = ns3::Create<PythonCallbackImpl3> (routeReply);
    retval = (helper_class == NULL)? (self->obj->RequestRoute(sourceIface, *((PyNs3Mac48Address *) source)->obj, *((PyNs3Mac48Address *) destination)->obj, ns3::Ptr< ns3::Packet  > (packet_ptr), protocolType, ns3::Callback<void, bool, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, unsigned short, unsigned int, ns3::empty, ns3::empty, ns3::empty> (routeReply_cb_impl))) : (self->obj->ns3::flame::FlameProtocol::RequestRoute(sourceIface, *((PyNs3Mac48Address *) source)->obj, *((PyNs3Mac48Address *) destination)->obj, ns3::Ptr< ns3::Packet  > (packet_ptr), protocolType, ns3::Callback<void, bool, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, unsigned short, unsigned int, ns3::empty, ns3::empty, ns3::empty> (routeReply_cb_impl)));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameProtocol_ResetStats(PyNs3FlameFlameProtocol *self)
{
    PyObject *py_retval;
    
    self->obj->ResetStats();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3FlameFlameProtocol_methods[] = {
    {(char *) "RemoveRoutingStuff", (PyCFunction) _wrap_PyNs3FlameFlameProtocol_RemoveRoutingStuff, METH_KEYWORDS|METH_VARARGS, "RemoveRoutingStuff(fromIface, source, destination, packet, protocolType)\n\ntype: fromIface: uint32_t\ntype: source: ns3::Mac48Address const\ntype: destination: ns3::Mac48Address const\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: protocolType: uint16_t &" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3FlameFlameProtocol_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3FlameFlameProtocol_GetAddress, METH_NOARGS, "GetAddress()\n\n" },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3FlameFlameProtocol_Install, METH_KEYWORDS|METH_VARARGS, "Install(arg0)\n\ntype: arg0: ns3::Ptr< ns3::MeshPointDevice >" },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3FlameFlameProtocol_DoDispose, METH_NOARGS, "DoDispose()\n\n" },
    {(char *) "RequestRoute", (PyCFunction) _wrap_PyNs3FlameFlameProtocol_RequestRoute, METH_KEYWORDS|METH_VARARGS, "RequestRoute(sourceIface, source, destination, packet, protocolType, routeReply)\n\ntype: sourceIface: uint32_t\ntype: source: ns3::Mac48Address const\ntype: destination: ns3::Mac48Address const\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: protocolType: uint16_t\ntype: routeReply: ns3::Callback< void, bool, ns3::Ptr< ns3::Packet >, ns3::Mac48Address, ns3::Mac48Address, unsigned short, unsigned int, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "ResetStats", (PyCFunction) _wrap_PyNs3FlameFlameProtocol_ResetStats, METH_NOARGS, "ResetStats()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3FlameFlameProtocol__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3FlameFlameProtocol__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3FlameFlameProtocol__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3FlameFlameProtocol__tp_clear(PyNs3FlameFlameProtocol *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::flame::FlameProtocol *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3FlameFlameProtocol__tp_traverse(PyNs3FlameFlameProtocol *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3FlameFlameProtocol__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3FlameFlameProtocol__tp_dealloc(PyNs3FlameFlameProtocol *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3FlameFlameProtocol__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3FlameFlameProtocol__tp_richcompare (PyNs3FlameFlameProtocol *PYBINDGEN_UNUSED(self), PyNs3FlameFlameProtocol *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3FlameFlameProtocol_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3FlameFlameProtocol_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.flame.FlameProtocol",            /* tp_name */
    sizeof(PyNs3FlameFlameProtocol),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3FlameFlameProtocol__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "FlameProtocol()",                        /* Documentation string */
    (traverseproc)PyNs3FlameFlameProtocol__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3FlameFlameProtocol__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3FlameFlameProtocol__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3FlameFlameProtocol_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3FlameFlameProtocol, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3FlameFlameProtocol__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3FlameFlameProtocolMac__tp_init__0(PyNs3FlameFlameProtocolMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3FlameFlameProtocolMac *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3FlameFlameProtocolMac_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::flame::FlameProtocolMac(*((PyNs3FlameFlameProtocolMac *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3FlameFlameProtocolMac__tp_init__1(PyNs3FlameFlameProtocolMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3FlameFlameProtocol *arg0;
    ns3::flame::FlameProtocol *arg0_ptr;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3FlameFlameProtocol_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    self->obj = new ns3::flame::FlameProtocolMac(ns3::Ptr< ns3::flame::FlameProtocol  > (arg0_ptr));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3FlameFlameProtocolMac__tp_init(PyNs3FlameFlameProtocolMac *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3FlameFlameProtocolMac__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3FlameFlameProtocolMac__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3FlameFlameProtocolMac_UpdateBeacon(PyNs3FlameFlameProtocolMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MeshWifiBeacon *beacon;
    const char *keywords[] = {"beacon", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshWifiBeacon_Type, &beacon)) {
        return NULL;
    }
    self->obj->UpdateBeacon(*((PyNs3MeshWifiBeacon *) beacon)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameProtocolMac_Receive(PyNs3FlameFlameProtocolMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *header;
    const char *keywords[] = {"packet", "header", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &header)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->Receive(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) header)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameProtocolMac_SetParent(PyNs3FlameFlameProtocolMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MeshWifiInterfaceMac *parent;
    ns3::MeshWifiInterfaceMac *parent_ptr;
    const char *keywords[] = {"parent", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshWifiInterfaceMac_Type, &parent)) {
        return NULL;
    }
    parent_ptr = (parent ? parent->obj : NULL);
    self->obj->SetParent(ns3::Ptr< ns3::MeshWifiInterfaceMac  > (parent_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameProtocolMac_AssignStreams(PyNs3FlameFlameProtocolMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameProtocolMac_GetChannelId(PyNs3FlameFlameProtocolMac *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetChannelId();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameProtocolMac_UpdateOutcomingFrame(PyNs3FlameFlameProtocolMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *header;
    PyNs3Mac48Address *from;
    PyNs3Mac48Address *to;
    const char *keywords[] = {"packet", "header", "from", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &header, &PyNs3Mac48Address_Type, &from, &PyNs3Mac48Address_Type, &to)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->UpdateOutcomingFrame(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) header)->obj, *((PyNs3Mac48Address *) from)->obj, *((PyNs3Mac48Address *) to)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameProtocolMac_ResetStats(PyNs3FlameFlameProtocolMac *self)
{
    PyObject *py_retval;
    
    self->obj->ResetStats();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3FlameFlameProtocolMac__copy__(PyNs3FlameFlameProtocolMac *self)
{

    PyNs3FlameFlameProtocolMac *py_copy;
    py_copy = PyObject_New(PyNs3FlameFlameProtocolMac, &PyNs3FlameFlameProtocolMac_Type);
    
    py_copy->obj = new ns3::flame::FlameProtocolMac(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3FlameFlameProtocolMac_methods[] = {
    {(char *) "UpdateBeacon", (PyCFunction) _wrap_PyNs3FlameFlameProtocolMac_UpdateBeacon, METH_KEYWORDS|METH_VARARGS, "UpdateBeacon(beacon)\n\ntype: beacon: ns3::MeshWifiBeacon &" },
    {(char *) "Receive", (PyCFunction) _wrap_PyNs3FlameFlameProtocolMac_Receive, METH_KEYWORDS|METH_VARARGS, "Receive(packet, header)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: header: ns3::WifiMacHeader const &" },
    {(char *) "SetParent", (PyCFunction) _wrap_PyNs3FlameFlameProtocolMac_SetParent, METH_KEYWORDS|METH_VARARGS, "SetParent(parent)\n\ntype: parent: ns3::Ptr< ns3::MeshWifiInterfaceMac >" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3FlameFlameProtocolMac_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {(char *) "GetChannelId", (PyCFunction) _wrap_PyNs3FlameFlameProtocolMac_GetChannelId, METH_NOARGS, "GetChannelId()\n\n" },
    {(char *) "UpdateOutcomingFrame", (PyCFunction) _wrap_PyNs3FlameFlameProtocolMac_UpdateOutcomingFrame, METH_KEYWORDS|METH_VARARGS, "UpdateOutcomingFrame(packet, header, from, to)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: header: ns3::WifiMacHeader &\ntype: from: ns3::Mac48Address\ntype: to: ns3::Mac48Address" },
    {(char *) "ResetStats", (PyCFunction) _wrap_PyNs3FlameFlameProtocolMac_ResetStats, METH_NOARGS, "ResetStats()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3FlameFlameProtocolMac__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3FlameFlameProtocolMac__tp_dealloc(PyNs3FlameFlameProtocolMac *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::flame::FlameProtocolMac *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3FlameFlameProtocolMac__tp_richcompare (PyNs3FlameFlameProtocolMac *PYBINDGEN_UNUSED(self), PyNs3FlameFlameProtocolMac *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3FlameFlameProtocolMac_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3FlameFlameProtocolMac_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.flame.FlameProtocolMac",            /* tp_name */
    sizeof(PyNs3FlameFlameProtocolMac),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3FlameFlameProtocolMac__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "FlameProtocolMac(arg0)\nFlameProtocolMac(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3FlameFlameProtocolMac__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3FlameFlameProtocolMac_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3FlameFlameProtocolMac__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3FlameFlameRtable__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3FlameFlameRtable *self)
{
    PyObject *py_retval;
    PyNs3FlameFlameRtable__PythonHelper *helper = dynamic_cast< PyNs3FlameFlameRtable__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3FlameFlameRtable__PythonHelper::_wrap_DoInitialize(PyNs3FlameFlameRtable *self)
{
    PyObject *py_retval;
    PyNs3FlameFlameRtable__PythonHelper *helper = dynamic_cast< PyNs3FlameFlameRtable__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3FlameFlameRtable__PythonHelper::_wrap_NotifyNewAggregate(PyNs3FlameFlameRtable *self)
{
    PyObject *py_retval;
    PyNs3FlameFlameRtable__PythonHelper *helper = dynamic_cast< PyNs3FlameFlameRtable__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3FlameFlameRtable__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::flame::FlameRtable *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::flame::FlameRtable::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3FlameFlameRtable* >(m_pyself)->obj;
    reinterpret_cast< PyNs3FlameFlameRtable* >(m_pyself)->obj = (ns3::flame::FlameRtable*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3FlameFlameRtable* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3FlameFlameRtable* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3FlameFlameRtable* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3FlameFlameRtable__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3FlameFlameRtable__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3FlameFlameRtable__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3FlameFlameRtable__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}
static PyObject* _wrap_PyNs3FlameFlameRtable__get_INTERFACE_ANY(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(ns3::flame::FlameRtable::INTERFACE_ANY));
    return py_retval;
}
static PyObject* _wrap_PyNs3FlameFlameRtable__get_MAX_COST(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(ns3::flame::FlameRtable::MAX_COST));
    return py_retval;
}
static PyGetSetDef Ns3FlameFlameRtableMeta__getsets[] = {
    {
        (char*) "MAX_COST", /* attribute name */
        (getter) _wrap_PyNs3FlameFlameRtable__get_MAX_COST, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "INTERFACE_ANY", /* attribute name */
        (getter) _wrap_PyNs3FlameFlameRtable__get_INTERFACE_ANY, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyNs3FlameFlameRtableMeta_Type = {
        PyVarObject_HEAD_INIT(NULL, 0)
	(char *) "Ns3FlameFlameRtableMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	Ns3FlameFlameRtableMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};


static int
_wrap_PyNs3FlameFlameRtable__tp_init(PyNs3FlameFlameRtable *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3FlameFlameRtable_Type)
    {
        self->obj = new PyNs3FlameFlameRtable__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3FlameFlameRtable__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::flame::FlameRtable();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3FlameFlameRtable_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::flame::FlameRtable::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameRtable_AddPath(PyNs3FlameFlameRtable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *destination;
    PyNs3Mac48Address *retransmitter;
    unsigned int interface;
    int cost;
    int seqnum;
    const char *keywords[] = {"destination", "retransmitter", "interface", "cost", "seqnum", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!Iii", (char **) keywords, &PyNs3Mac48Address_Type, &destination, &PyNs3Mac48Address_Type, &retransmitter, &interface, &cost, &seqnum)) {
        return NULL;
    }
    if (cost > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (seqnum > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->AddPath(*((PyNs3Mac48Address *) destination)->obj, *((PyNs3Mac48Address *) retransmitter)->obj, interface, cost, seqnum);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameRtable_Lookup(PyNs3FlameFlameRtable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *destination;
    const char *keywords[] = {"destination", NULL};
    PyNs3FlameFlameRtableLookupResult *py_LookupResult;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &destination)) {
        return NULL;
    }
    ns3::flame::FlameRtable::LookupResult retval = self->obj->Lookup(*((PyNs3Mac48Address *) destination)->obj);
    py_LookupResult = PyObject_New(PyNs3FlameFlameRtableLookupResult, &PyNs3FlameFlameRtableLookupResult_Type);
    py_LookupResult->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_LookupResult->obj = new ns3::flame::FlameRtable::LookupResult(retval);
    PyNs3FlameFlameRtableLookupResult_wrapper_registry[(void *) py_LookupResult->obj] = (PyObject *) py_LookupResult;
    py_retval = Py_BuildValue((char *) "N", py_LookupResult);
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameRtable_DoDispose(PyNs3FlameFlameRtable *self)
{
    PyObject *py_retval;
    PyNs3FlameFlameRtable__PythonHelper *helper_class = dynamic_cast<PyNs3FlameFlameRtable__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::flame::FlameRtable::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3FlameFlameRtable_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3FlameFlameRtable_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "AddPath", (PyCFunction) _wrap_PyNs3FlameFlameRtable_AddPath, METH_KEYWORDS|METH_VARARGS, "AddPath(destination, retransmitter, interface, cost, seqnum)\n\ntype: destination: ns3::Mac48Address const\ntype: retransmitter: ns3::Mac48Address const\ntype: interface: uint32_t const\ntype: cost: uint8_t const\ntype: seqnum: uint16_t const" },
    {(char *) "Lookup", (PyCFunction) _wrap_PyNs3FlameFlameRtable_Lookup, METH_KEYWORDS|METH_VARARGS, "Lookup(destination)\n\ntype: destination: ns3::Mac48Address" },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3FlameFlameRtable_DoDispose, METH_NOARGS, "DoDispose()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3FlameFlameRtable__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3FlameFlameRtable__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3FlameFlameRtable__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3FlameFlameRtable__tp_clear(PyNs3FlameFlameRtable *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::flame::FlameRtable *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3FlameFlameRtable__tp_traverse(PyNs3FlameFlameRtable *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3FlameFlameRtable__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3FlameFlameRtable__tp_dealloc(PyNs3FlameFlameRtable *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3FlameFlameRtable__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3FlameFlameRtable__tp_richcompare (PyNs3FlameFlameRtable *PYBINDGEN_UNUSED(self), PyNs3FlameFlameRtable *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3FlameFlameRtable_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3FlameFlameRtable_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.flame.FlameRtable",            /* tp_name */
    sizeof(PyNs3FlameFlameRtable),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3FlameFlameRtable__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "FlameRtable()",                        /* Documentation string */
    (traverseproc)PyNs3FlameFlameRtable__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3FlameFlameRtable__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3FlameFlameRtable__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3FlameFlameRtable_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3FlameFlameRtable, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3FlameFlameRtable__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3FlameFlameRtableLookupResult_wrapper_registry;
static PyObject* _wrap_PyNs3FlameFlameRtableLookupResult__get_cost(PyNs3FlameFlameRtableLookupResult *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->cost);
    return py_retval;
}
static int _wrap_PyNs3FlameFlameRtableLookupResult__set_cost(PyNs3FlameFlameRtableLookupResult *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->cost = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3FlameFlameRtableLookupResult__get_ifIndex(PyNs3FlameFlameRtableLookupResult *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->ifIndex));
    return py_retval;
}
static int _wrap_PyNs3FlameFlameRtableLookupResult__set_ifIndex(PyNs3FlameFlameRtableLookupResult *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->ifIndex)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3FlameFlameRtableLookupResult__get_retransmitter(PyNs3FlameFlameRtableLookupResult *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(self->obj->retransmitter);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}
static int _wrap_PyNs3FlameFlameRtableLookupResult__set_retransmitter(PyNs3FlameFlameRtableLookupResult *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->retransmitter = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3FlameFlameRtableLookupResult__get_seqnum(PyNs3FlameFlameRtableLookupResult *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->seqnum);
    return py_retval;
}
static int _wrap_PyNs3FlameFlameRtableLookupResult__set_seqnum(PyNs3FlameFlameRtableLookupResult *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->seqnum = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3FlameFlameRtableLookupResult__getsets[] = {
    {
        (char*) "ifIndex", /* attribute name */
        (getter) _wrap_PyNs3FlameFlameRtableLookupResult__get_ifIndex, /* C function to get the attribute */
        (setter) _wrap_PyNs3FlameFlameRtableLookupResult__set_ifIndex, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "seqnum", /* attribute name */
        (getter) _wrap_PyNs3FlameFlameRtableLookupResult__get_seqnum, /* C function to get the attribute */
        (setter) _wrap_PyNs3FlameFlameRtableLookupResult__set_seqnum, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "cost", /* attribute name */
        (getter) _wrap_PyNs3FlameFlameRtableLookupResult__get_cost, /* C function to get the attribute */
        (setter) _wrap_PyNs3FlameFlameRtableLookupResult__set_cost, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "retransmitter", /* attribute name */
        (getter) _wrap_PyNs3FlameFlameRtableLookupResult__get_retransmitter, /* C function to get the attribute */
        (setter) _wrap_PyNs3FlameFlameRtableLookupResult__set_retransmitter, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3FlameFlameRtableLookupResult__tp_init__0(PyNs3FlameFlameRtableLookupResult *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3FlameFlameRtableLookupResult *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3FlameFlameRtableLookupResult_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::flame::FlameRtable::LookupResult(*((PyNs3FlameFlameRtableLookupResult *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3FlameFlameRtableLookupResult__tp_init__1(PyNs3FlameFlameRtableLookupResult *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Mac48Address *r = NULL;
    unsigned int i = ns3::flame::FlameRtable::INTERFACE_ANY;
    int c = ns3::flame::FlameRtable::MAX_COST;
    int s = 0;
    const char *keywords[] = {"r", "i", "c", "s", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O!Iii", (char **) keywords, &PyNs3Mac48Address_Type, &r, &i, &c, &s)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (c > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (s > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::flame::FlameRtable::LookupResult((r ? (*((PyNs3Mac48Address *) r)->obj) : ns3::Mac48Address::GetBroadcast()), i, c, s);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3FlameFlameRtableLookupResult__tp_init(PyNs3FlameFlameRtableLookupResult *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3FlameFlameRtableLookupResult__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3FlameFlameRtableLookupResult__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3FlameFlameRtableLookupResult_IsValid(PyNs3FlameFlameRtableLookupResult *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsValid();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3FlameFlameRtableLookupResult__copy__(PyNs3FlameFlameRtableLookupResult *self)
{

    PyNs3FlameFlameRtableLookupResult *py_copy;
    py_copy = PyObject_New(PyNs3FlameFlameRtableLookupResult, &PyNs3FlameFlameRtableLookupResult_Type);
    py_copy->obj = new ns3::flame::FlameRtable::LookupResult(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3FlameFlameRtableLookupResult_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3FlameFlameRtableLookupResult_methods[] = {
    {(char *) "IsValid", (PyCFunction) _wrap_PyNs3FlameFlameRtableLookupResult_IsValid, METH_NOARGS, "IsValid()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3FlameFlameRtableLookupResult__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3FlameFlameRtableLookupResult__tp_dealloc(PyNs3FlameFlameRtableLookupResult *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3FlameFlameRtableLookupResult_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3FlameFlameRtableLookupResult_wrapper_registry.end()) {
        PyNs3FlameFlameRtableLookupResult_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::flame::FlameRtable::LookupResult *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3FlameFlameRtableLookupResult__tp_richcompare (PyNs3FlameFlameRtableLookupResult *PYBINDGEN_UNUSED(self), PyNs3FlameFlameRtableLookupResult *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3FlameFlameRtableLookupResult_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3FlameFlameRtableLookupResult_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.flame.FlameRtable.LookupResult",            /* tp_name */
    sizeof(PyNs3FlameFlameRtableLookupResult),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3FlameFlameRtableLookupResult__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "LookupResult(r, i, c, s)\nLookupResult(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3FlameFlameRtableLookupResult__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3FlameFlameRtableLookupResult_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3FlameFlameRtableLookupResult__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3FlameFlameRtableLookupResult__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyNs3FlameFlameTag__get_receiver(PyNs3FlameFlameTag *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(self->obj->receiver);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}
static int _wrap_PyNs3FlameFlameTag__set_receiver(PyNs3FlameFlameTag *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->receiver = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3FlameFlameTag__get_transmitter(PyNs3FlameFlameTag *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(self->obj->transmitter);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}
static int _wrap_PyNs3FlameFlameTag__set_transmitter(PyNs3FlameFlameTag *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->transmitter = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3FlameFlameTag__getsets[] = {
    {
        (char*) "transmitter", /* attribute name */
        (getter) _wrap_PyNs3FlameFlameTag__get_transmitter, /* C function to get the attribute */
        (setter) _wrap_PyNs3FlameFlameTag__set_transmitter, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "receiver", /* attribute name */
        (getter) _wrap_PyNs3FlameFlameTag__get_receiver, /* C function to get the attribute */
        (setter) _wrap_PyNs3FlameFlameTag__set_receiver, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3FlameFlameTag__tp_init__0(PyNs3FlameFlameTag *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3FlameFlameTag *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3FlameFlameTag_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::flame::FlameTag(*((PyNs3FlameFlameTag *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3FlameFlameTag__tp_init__1(PyNs3FlameFlameTag *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Mac48Address *a = NULL;
    const char *keywords[] = {"a", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O!", (char **) keywords, &PyNs3Mac48Address_Type, &a)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::flame::FlameTag((a ? (*((PyNs3Mac48Address *) a)->obj) : ns3::Mac48Address()));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3FlameFlameTag__tp_init(PyNs3FlameFlameTag *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3FlameFlameTag__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3FlameFlameTag__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3FlameFlameTag_GetSerializedSize(PyNs3FlameFlameTag *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameTag_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::flame::FlameTag::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameTag_Serialize(PyNs3FlameFlameTag *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3TagBuffer *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3TagBuffer_Type, &i)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3TagBuffer *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameTag_Deserialize(PyNs3FlameFlameTag *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3TagBuffer *i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3TagBuffer_Type, &i)) {
        return NULL;
    }
    self->obj->Deserialize(*((PyNs3TagBuffer *) i)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameFlameTag_GetInstanceTypeId(PyNs3FlameFlameTag *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3FlameFlameTag__copy__(PyNs3FlameFlameTag *self)
{

    PyNs3FlameFlameTag *py_copy;
    py_copy = PyObject_GC_New(PyNs3FlameFlameTag, &PyNs3FlameFlameTag_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::flame::FlameTag(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3FlameFlameTag_methods[] = {
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3FlameFlameTag_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3FlameFlameTag_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3FlameFlameTag_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(i)\n\ntype: i: ns3::TagBuffer" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3FlameFlameTag_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(i)\n\ntype: i: ns3::TagBuffer" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3FlameFlameTag_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3FlameFlameTag__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3FlameFlameTag__tp_clear(PyNs3FlameFlameTag *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::flame::FlameTag *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3FlameFlameTag__tp_traverse(PyNs3FlameFlameTag *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3FlameFlameTag__tp_dealloc(PyNs3FlameFlameTag *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3FlameFlameTag__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3FlameFlameTag__tp_richcompare (PyNs3FlameFlameTag *PYBINDGEN_UNUSED(self), PyNs3FlameFlameTag *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3FlameFlameTag_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3FlameFlameTag_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.flame.FlameTag",            /* tp_name */
    sizeof(PyNs3FlameFlameTag),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3FlameFlameTag__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "FlameTag(arg0)\nFlameTag(a)",                        /* Documentation string */
    (traverseproc)PyNs3FlameFlameTag__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3FlameFlameTag__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3FlameFlameTag__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3FlameFlameTag_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3FlameFlameTag__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3FlameFlameTag, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3FlameFlameTag__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef mesh_flame_moduledef = {
    PyModuleDef_HEAD_INIT,
    "mesh.flame",
    NULL,
    -1,
    mesh_flame_functions,
};
#endif

static PyObject *
initmesh_flame(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&mesh_flame_moduledef);
    #else
    m = Py_InitModule3((char *) "mesh.flame", mesh_flame_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    /* Register the 'ns3::flame::FlameHeader' class */
    PyNs3FlameFlameHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3FlameFlameHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "FlameHeader", (PyObject *) &PyNs3FlameFlameHeader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::flame::FlameProtocol), &PyNs3FlameFlameProtocol_Type);
    /* Register the 'ns3::flame::FlameProtocol' class */
    PyNs3FlameFlameProtocol_Type.tp_base = &PyNs3MeshL2RoutingProtocol_Type;
    if (PyType_Ready(&PyNs3FlameFlameProtocol_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "FlameProtocol", (PyObject *) &PyNs3FlameFlameProtocol_Type);
    PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____typeid_map.register_wrapper(typeid(ns3::flame::FlameProtocolMac), &PyNs3FlameFlameProtocolMac_Type);
    /* Register the 'ns3::flame::FlameProtocolMac' class */
    PyNs3FlameFlameProtocolMac_Type.tp_base = &PyNs3MeshWifiInterfaceMacPlugin_Type;
    if (PyType_Ready(&PyNs3FlameFlameProtocolMac_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "FlameProtocolMac", (PyObject *) &PyNs3FlameFlameProtocolMac_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::flame::FlameRtable), &PyNs3FlameFlameRtable_Type);
    /* Register the 'ns3::flame::FlameRtable' class */
    
    PyNs3FlameFlameRtableMeta_Type.tp_base = Py_TYPE(&PyNs3Object_Type);
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3FlameFlameRtableMeta_Type.tp_traverse = Py_TYPE(&PyNs3Object_Type)->tp_traverse;
    PyNs3FlameFlameRtableMeta_Type.tp_clear = Py_TYPE(&PyNs3Object_Type)->tp_clear;
    PyNs3FlameFlameRtableMeta_Type.tp_is_gc = Py_TYPE(&PyNs3Object_Type)->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3FlameFlameRtableMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3FlameFlameRtableMeta_Type);
    
    PyNs3FlameFlameRtable_Type.tp_base = &PyNs3Object_Type;
    Py_TYPE(&PyNs3FlameFlameRtable_Type) = &PyNs3FlameFlameRtableMeta_Type;
    if (PyType_Ready(&PyNs3FlameFlameRtable_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "FlameRtable", (PyObject *) &PyNs3FlameFlameRtable_Type);
    PyModule_AddObject(m, (char *) "_PyNs3FlameFlameRtableLookupResult_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3FlameFlameRtableLookupResult_wrapper_registry, NULL));
    /* Register the 'ns3::flame::FlameRtable::LookupResult' class */
    if (PyType_Ready(&PyNs3FlameFlameRtableLookupResult_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3FlameFlameRtable_Type.tp_dict, (char *) "LookupResult", (PyObject *) &PyNs3FlameFlameRtableLookupResult_Type);
    /* Register the 'ns3::flame::FlameTag' class */
    PyNs3FlameFlameTag_Type.tp_base = &PyNs3Tag_Type;
    if (PyType_Ready(&PyNs3FlameFlameTag_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "FlameTag", (PyObject *) &PyNs3FlameFlameTag_Type);
    return m;
}
static PyMethodDef mesh_internal_functions[] = {
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef mesh_internal_moduledef = {
    PyModuleDef_HEAD_INIT,
    "mesh.internal",
    NULL,
    -1,
    mesh_internal_functions,
};
#endif

static PyObject *
initmesh_internal(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&mesh_internal_moduledef);
    #else
    m = Py_InitModule3((char *) "mesh.internal", mesh_internal_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    return m;
}
static PyMethodDef mesh_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyNs3Address_Type;
std::map<void*, PyObject*> *_PyNs3Address_wrapper_registry;


PyTypeObject *_PyNs3AsciiTraceHelper_Type;
std::map<void*, PyObject*> *_PyNs3AsciiTraceHelper_wrapper_registry;


PyTypeObject *_PyNs3AsciiTraceHelperForDevice_Type;
std::map<void*, PyObject*> *_PyNs3AsciiTraceHelperForDevice_wrapper_registry;


PyTypeObject *_PyNs3AttributeConstructionList_Type;
std::map<void*, PyObject*> *_PyNs3AttributeConstructionList_wrapper_registry;


PyTypeObject *_PyNs3AttributeConstructionListItem_Type;
std::map<void*, PyObject*> *_PyNs3AttributeConstructionListItem_wrapper_registry;


PyTypeObject *_PyNs3Bar_Type;
std::map<void*, PyObject*> *_PyNs3Bar_wrapper_registry;


PyTypeObject *_PyNs3BlockAckAgreement_Type;
std::map<void*, PyObject*> *_PyNs3BlockAckAgreement_wrapper_registry;


PyTypeObject *_PyNs3BlockAckManager_Type;
std::map<void*, PyObject*> *_PyNs3BlockAckManager_wrapper_registry;


PyTypeObject *_PyNs3Buffer_Type;
std::map<void*, PyObject*> *_PyNs3Buffer_wrapper_registry;


PyTypeObject *_PyNs3BufferIterator_Type;
std::map<void*, PyObject*> *_PyNs3BufferIterator_wrapper_registry;


PyTypeObject *_PyNs3ByteTagIterator_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagIterator_wrapper_registry;


PyTypeObject *_PyNs3ByteTagIteratorItem_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagIteratorItem_wrapper_registry;


PyTypeObject *_PyNs3ByteTagList_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagList_wrapper_registry;


PyTypeObject *_PyNs3ByteTagListIterator_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagListIterator_wrapper_registry;


PyTypeObject *_PyNs3ByteTagListIteratorItem_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagListIteratorItem_wrapper_registry;


PyTypeObject *_PyNs3CallbackBase_Type;
std::map<void*, PyObject*> *_PyNs3CallbackBase_wrapper_registry;


PyTypeObject *_PyNs3CapabilityInformation_Type;
std::map<void*, PyObject*> *_PyNs3CapabilityInformation_wrapper_registry;


PyTypeObject *_PyNs3EventId_Type;
std::map<void*, PyObject*> *_PyNs3EventId_wrapper_registry;


PyTypeObject *_PyNs3Hasher_Type;
std::map<void*, PyObject*> *_PyNs3Hasher_wrapper_registry;


PyTypeObject *_PyNs3InterferenceHelper_Type;
std::map<void*, PyObject*> *_PyNs3InterferenceHelper_wrapper_registry;


PyTypeObject *_PyNs3InterferenceHelperSnrPer_Type;
std::map<void*, PyObject*> *_PyNs3InterferenceHelperSnrPer_wrapper_registry;


PyTypeObject *_PyNs3Ipv4Address_Type;
std::map<void*, PyObject*> *_PyNs3Ipv4Address_wrapper_registry;


PyTypeObject *_PyNs3Ipv4Mask_Type;
std::map<void*, PyObject*> *_PyNs3Ipv4Mask_wrapper_registry;


PyTypeObject *_PyNs3Ipv6Address_Type;
std::map<void*, PyObject*> *_PyNs3Ipv6Address_wrapper_registry;


PyTypeObject *_PyNs3Ipv6Prefix_Type;
std::map<void*, PyObject*> *_PyNs3Ipv6Prefix_wrapper_registry;


PyTypeObject *_PyNs3Mac48Address_Type;
std::map<void*, PyObject*> *_PyNs3Mac48Address_wrapper_registry;


PyTypeObject *_PyNs3NetDeviceContainer_Type;
std::map<void*, PyObject*> *_PyNs3NetDeviceContainer_wrapper_registry;


PyTypeObject *_PyNs3NodeContainer_Type;
std::map<void*, PyObject*> *_PyNs3NodeContainer_wrapper_registry;


PyTypeObject *_PyNs3ObjectBase_Type;
std::map<void*, PyObject*> *_PyNs3ObjectBase_wrapper_registry;


PyTypeObject *_PyNs3ObjectDeleter_Type;
std::map<void*, PyObject*> *_PyNs3ObjectDeleter_wrapper_registry;


PyTypeObject *_PyNs3ObjectFactory_Type;
std::map<void*, PyObject*> *_PyNs3ObjectFactory_wrapper_registry;


PyTypeObject *_PyNs3OriginatorBlockAckAgreement_Type;


PyTypeObject *_PyNs3PacketMetadata_Type;
std::map<void*, PyObject*> *_PyNs3PacketMetadata_wrapper_registry;


PyTypeObject *_PyNs3PacketMetadataItem_Type;
std::map<void*, PyObject*> *_PyNs3PacketMetadataItem_wrapper_registry;


PyTypeObject *_PyNs3PacketMetadataItemIterator_Type;
std::map<void*, PyObject*> *_PyNs3PacketMetadataItemIterator_wrapper_registry;


PyTypeObject *_PyNs3PacketTagIterator_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagIterator_wrapper_registry;


PyTypeObject *_PyNs3PacketTagIteratorItem_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagIteratorItem_wrapper_registry;


PyTypeObject *_PyNs3PacketTagList_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagList_wrapper_registry;


PyTypeObject *_PyNs3PacketTagListTagData_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagListTagData_wrapper_registry;


PyTypeObject *_PyNs3PcapFile_Type;
std::map<void*, PyObject*> *_PyNs3PcapFile_wrapper_registry;


PyTypeObject *_PyNs3PcapHelper_Type;
std::map<void*, PyObject*> *_PyNs3PcapHelper_wrapper_registry;


PyTypeObject *_PyNs3PcapHelperForDevice_Type;
std::map<void*, PyObject*> *_PyNs3PcapHelperForDevice_wrapper_registry;


PyTypeObject *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;


PyTypeObject *_PyNs3Simulator_Type;
std::map<void*, PyObject*> *_PyNs3Simulator_wrapper_registry;


PyTypeObject *_PyNs3StatusCode_Type;
std::map<void*, PyObject*> *_PyNs3StatusCode_wrapper_registry;


PyTypeObject *_PyNs3Tag_Type;


PyTypeObject *_PyNs3TagBuffer_Type;
std::map<void*, PyObject*> *_PyNs3TagBuffer_wrapper_registry;


PyTypeObject *_PyNs3TimeWithUnit_Type;
std::map<void*, PyObject*> *_PyNs3TimeWithUnit_wrapper_registry;


PyTypeObject *_PyNs3TracedValue__Unsigned_int_Type;
std::map<void*, PyObject*> *_PyNs3TracedValue__Unsigned_int_wrapper_registry;


PyTypeObject *_PyNs3TypeId_Type;
std::map<void*, PyObject*> *_PyNs3TypeId_wrapper_registry;


PyTypeObject *_PyNs3TypeIdAttributeInformation_Type;
std::map<void*, PyObject*> *_PyNs3TypeIdAttributeInformation_wrapper_registry;


PyTypeObject *_PyNs3TypeIdTraceSourceInformation_Type;
std::map<void*, PyObject*> *_PyNs3TypeIdTraceSourceInformation_wrapper_registry;


PyTypeObject *_PyNs3Vector2D_Type;
std::map<void*, PyObject*> *_PyNs3Vector2D_wrapper_registry;


PyTypeObject *_PyNs3Vector3D_Type;
std::map<void*, PyObject*> *_PyNs3Vector3D_wrapper_registry;


PyTypeObject *_PyNs3WifiHelper_Type;
std::map<void*, PyObject*> *_PyNs3WifiHelper_wrapper_registry;


PyTypeObject *_PyNs3WifiMacHelper_Type;
std::map<void*, PyObject*> *_PyNs3WifiMacHelper_wrapper_registry;


PyTypeObject *_PyNs3WifiMode_Type;
std::map<void*, PyObject*> *_PyNs3WifiMode_wrapper_registry;


PyTypeObject *_PyNs3WifiModeFactory_Type;
std::map<void*, PyObject*> *_PyNs3WifiModeFactory_wrapper_registry;


PyTypeObject *_PyNs3WifiPhyHelper_Type;


PyTypeObject *_PyNs3WifiPhyListener_Type;
std::map<void*, PyObject*> *_PyNs3WifiPhyListener_wrapper_registry;


PyTypeObject *_PyNs3WifiRemoteStation_Type;
std::map<void*, PyObject*> *_PyNs3WifiRemoteStation_wrapper_registry;


PyTypeObject *_PyNs3WifiRemoteStationInfo_Type;
std::map<void*, PyObject*> *_PyNs3WifiRemoteStationInfo_wrapper_registry;


PyTypeObject *_PyNs3WifiRemoteStationState_Type;
std::map<void*, PyObject*> *_PyNs3WifiRemoteStationState_wrapper_registry;


PyTypeObject *_PyNs3WifiTxVector_Type;
std::map<void*, PyObject*> *_PyNs3WifiTxVector_wrapper_registry;


PyTypeObject *_PyNs3Empty_Type;
std::map<void*, PyObject*> *_PyNs3Empty_wrapper_registry;


PyTypeObject *_PyNs3Int64x64_t_Type;
std::map<void*, PyObject*> *_PyNs3Int64x64_t_wrapper_registry;


PyTypeObject *_PyNs3MpduInfo_Type;
std::map<void*, PyObject*> *_PyNs3MpduInfo_wrapper_registry;


PyTypeObject *_PyNs3SignalNoiseDbm_Type;
std::map<void*, PyObject*> *_PyNs3SignalNoiseDbm_wrapper_registry;


PyTypeObject *_PyNs3Chunk_Type;


PyTypeObject *_PyNs3Header_Type;


PyTypeObject *_PyNs3MgtAddBaRequestHeader_Type;


PyTypeObject *_PyNs3MgtAddBaResponseHeader_Type;


PyTypeObject *_PyNs3MgtAssocRequestHeader_Type;


PyTypeObject *_PyNs3MgtAssocResponseHeader_Type;


PyTypeObject *_PyNs3MgtDelBaHeader_Type;


PyTypeObject *_PyNs3MgtProbeRequestHeader_Type;


PyTypeObject *_PyNs3MgtProbeResponseHeader_Type;


PyTypeObject *_PyNs3Object_Type;


PyTypeObject *_PyNs3ObjectAggregateIterator_Type;
std::map<void*, PyObject*> *_PyNs3ObjectAggregateIterator_wrapper_registry;


PyTypeObject *_PyNs3PcapFileWrapper_Type;


PyTypeObject *_PyNs3RandomVariableStream_Type;


PyTypeObject *_PyNs3SequentialRandomVariable_Type;


PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map;


PyTypeObject *_PyNs3Time_Type;
std::map<void*, PyObject*> *_PyNs3Time_wrapper_registry;


PyTypeObject *_PyNs3TraceSourceAccessor_Type;


PyTypeObject *_PyNs3Trailer_Type;


PyTypeObject *_PyNs3TriangularRandomVariable_Type;


PyTypeObject *_PyNs3UniformRandomVariable_Type;


PyTypeObject *_PyNs3WeibullRandomVariable_Type;


PyTypeObject *_PyNs3WifiActionHeader_Type;


PyTypeObject *_PyNs3WifiActionHeaderActionValue_Type;
std::map<void*, PyObject*> *_PyNs3WifiActionHeaderActionValue_wrapper_registry;


PyTypeObject *_PyNs3WifiInformationElement_Type;


PyTypeObject *_PyNs3WifiInformationElementVector_Type;


PyTypeObject *_PyNs3WifiMac_Type;


PyTypeObject *_PyNs3WifiMacHeader_Type;


PyTypeObject *_PyNs3WifiPhy_Type;


PyTypeObject *_PyNs3WifiRemoteStationManager_Type;


PyTypeObject *_PyNs3ZetaRandomVariable_Type;


PyTypeObject *_PyNs3ZipfRandomVariable_Type;


PyTypeObject *_PyNs3AttributeAccessor_Type;


PyTypeObject *_PyNs3AttributeChecker_Type;


PyTypeObject *_PyNs3AttributeValue_Type;


PyTypeObject *_PyNs3BooleanChecker_Type;


PyTypeObject *_PyNs3BooleanValue_Type;


PyTypeObject *_PyNs3CallbackChecker_Type;


PyTypeObject *_PyNs3CallbackImplBase_Type;


PyTypeObject *_PyNs3CallbackValue_Type;


PyTypeObject *_PyNs3Channel_Type;


PyTypeObject *_PyNs3ConstantRandomVariable_Type;


PyTypeObject *_PyNs3CtrlBAckRequestHeader_Type;


PyTypeObject *_PyNs3CtrlBAckResponseHeader_Type;


PyTypeObject *_PyNs3Dcf_Type;


PyTypeObject *_PyNs3DeterministicRandomVariable_Type;


PyTypeObject *_PyNs3DoubleValue_Type;


PyTypeObject *_PyNs3DsssParameterSet_Type;


PyTypeObject *_PyNs3DsssParameterSetChecker_Type;


PyTypeObject *_PyNs3DsssParameterSetValue_Type;


PyTypeObject *_PyNs3EdcaParameterSet_Type;


PyTypeObject *_PyNs3EdcaParameterSetChecker_Type;


PyTypeObject *_PyNs3EdcaParameterSetValue_Type;


PyTypeObject *_PyNs3EdcaTxopN_Type;


PyTypeObject *_PyNs3EmpiricalRandomVariable_Type;


PyTypeObject *_PyNs3EmptyAttributeAccessor_Type;


PyTypeObject *_PyNs3EmptyAttributeChecker_Type;


PyTypeObject *_PyNs3EmptyAttributeValue_Type;


PyTypeObject *_PyNs3EnumChecker_Type;


PyTypeObject *_PyNs3EnumValue_Type;


PyTypeObject *_PyNs3ErlangRandomVariable_Type;


PyTypeObject *_PyNs3ErpInformation_Type;


PyTypeObject *_PyNs3ErpInformationChecker_Type;


PyTypeObject *_PyNs3ErpInformationValue_Type;


PyTypeObject *_PyNs3ErrorRateModel_Type;


PyTypeObject *_PyNs3EventImpl_Type;


PyTypeObject *_PyNs3ExponentialRandomVariable_Type;


PyTypeObject *_PyNs3ExtendedSupportedRatesIE_Type;


PyTypeObject *_PyNs3GammaRandomVariable_Type;


PyTypeObject *_PyNs3HtCapabilities_Type;


PyTypeObject *_PyNs3HtCapabilitiesChecker_Type;


PyTypeObject *_PyNs3HtCapabilitiesValue_Type;


PyTypeObject *_PyNs3HtOperations_Type;


PyTypeObject *_PyNs3HtOperationsChecker_Type;


PyTypeObject *_PyNs3HtOperationsValue_Type;


PyTypeObject *_PyNs3IntegerValue_Type;


PyTypeObject *_PyNs3Ipv4AddressChecker_Type;


PyTypeObject *_PyNs3Ipv4AddressValue_Type;


PyTypeObject *_PyNs3Ipv4MaskChecker_Type;


PyTypeObject *_PyNs3Ipv4MaskValue_Type;


PyTypeObject *_PyNs3Ipv6AddressChecker_Type;


PyTypeObject *_PyNs3Ipv6AddressValue_Type;


PyTypeObject *_PyNs3Ipv6PrefixChecker_Type;


PyTypeObject *_PyNs3Ipv6PrefixValue_Type;


PyTypeObject *_PyNs3LogNormalRandomVariable_Type;


PyTypeObject *_PyNs3Mac48AddressChecker_Type;


PyTypeObject *_PyNs3Mac48AddressValue_Type;


PyTypeObject *_PyNs3MgtBeaconHeader_Type;


PyTypeObject *_PyNs3MobilityModel_Type;


PyTypeObject *_PyNs3NetDevice_Type;


PyTypeObject *_PyNs3NetDeviceQueue_Type;


PyTypeObject *_PyNs3NetDeviceQueueInterface_Type;


PyTypeObject *_PyNs3NixVector_Type;


PyTypeObject *_PyNs3Node_Type;


PyTypeObject *_PyNs3NormalRandomVariable_Type;


PyTypeObject *_PyNs3ObjectFactoryChecker_Type;


PyTypeObject *_PyNs3ObjectFactoryValue_Type;


PyTypeObject *_PyNs3OutputStreamWrapper_Type;


PyTypeObject *_PyNs3Packet_Type;


PyTypeObject *_PyNs3ParetoRandomVariable_Type;


PyTypeObject *_PyNs3QueueItem_Type;


PyTypeObject *_PyNs3RegularWifiMac_Type;


PyTypeObject *_PyNs3Ssid_Type;


PyTypeObject *_PyNs3SsidChecker_Type;


PyTypeObject *_PyNs3SsidValue_Type;


PyTypeObject *_PyNs3SupportedRates_Type;


PyTypeObject *_PyNs3TimeValue_Type;


PyTypeObject *_PyNs3TypeIdChecker_Type;


PyTypeObject *_PyNs3TypeIdValue_Type;


PyTypeObject *_PyNs3UintegerValue_Type;


PyTypeObject *_PyNs3Vector2DChecker_Type;


PyTypeObject *_PyNs3Vector2DValue_Type;


PyTypeObject *_PyNs3Vector3DChecker_Type;


PyTypeObject *_PyNs3Vector3DValue_Type;


PyTypeObject *_PyNs3VhtCapabilities_Type;


PyTypeObject *_PyNs3VhtCapabilitiesChecker_Type;


PyTypeObject *_PyNs3VhtCapabilitiesValue_Type;


PyTypeObject *_PyNs3WifiChannel_Type;


PyTypeObject *_PyNs3WifiModeChecker_Type;


PyTypeObject *_PyNs3WifiModeValue_Type;


PyTypeObject *_PyNs3AddressChecker_Type;


PyTypeObject *_PyNs3AddressValue_Type;


PyTypeObject *_PyNs3BridgeChannel_Type;


PyTypeObject *_PyNs3DcaTxop_Type;


std::map<void*, PyObject*> PyNs3MeshHelper_wrapper_registry;


static int
_wrap_PyNs3MeshHelper__tp_init__0(PyNs3MeshHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MeshHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MeshHelper(*((PyNs3MeshHelper *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MeshHelper__tp_init__1(PyNs3MeshHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MeshHelper();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MeshHelper__tp_init(PyNs3MeshHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MeshHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MeshHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MeshHelper_SetSpreadInterfaceChannels(PyNs3MeshHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::MeshHelper::ChannelPolicy arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetSpreadInterfaceChannels(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshHelper_SetNumberOfInterfaces(PyNs3MeshHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int nInterfaces;
    const char *keywords[] = {"nInterfaces", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &nInterfaces)) {
        return NULL;
    }
    self->obj->SetNumberOfInterfaces(nInterfaces);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshHelper_Default(void)
{
    PyObject *py_retval;
    PyNs3MeshHelper *py_MeshHelper;
    
    ns3::MeshHelper retval = ns3::MeshHelper::Default();
    py_MeshHelper = PyObject_New(PyNs3MeshHelper, &PyNs3MeshHelper_Type);
    py_MeshHelper->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MeshHelper->obj = new ns3::MeshHelper(retval);
    PyNs3MeshHelper_wrapper_registry[(void *) py_MeshHelper->obj] = (PyObject *) py_MeshHelper;
    py_retval = Py_BuildValue((char *) "N", py_MeshHelper);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshHelper_SetStackInstaller(PyNs3MeshHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *type;
    Py_ssize_t type_len;
    const char *n0 = NULL;
    Py_ssize_t n0_len;
    PyNs3AttributeValue *v0 = NULL;
    ns3::EmptyAttributeValue v0_default = ns3::EmptyAttributeValue();
    const char *n1 = NULL;
    Py_ssize_t n1_len;
    PyNs3AttributeValue *v1 = NULL;
    ns3::EmptyAttributeValue v1_default = ns3::EmptyAttributeValue();
    const char *n2 = NULL;
    Py_ssize_t n2_len;
    PyNs3AttributeValue *v2 = NULL;
    ns3::EmptyAttributeValue v2_default = ns3::EmptyAttributeValue();
    const char *n3 = NULL;
    Py_ssize_t n3_len;
    PyNs3AttributeValue *v3 = NULL;
    ns3::EmptyAttributeValue v3_default = ns3::EmptyAttributeValue();
    const char *n4 = NULL;
    Py_ssize_t n4_len;
    PyNs3AttributeValue *v4 = NULL;
    ns3::EmptyAttributeValue v4_default = ns3::EmptyAttributeValue();
    const char *n5 = NULL;
    Py_ssize_t n5_len;
    PyNs3AttributeValue *v5 = NULL;
    ns3::EmptyAttributeValue v5_default = ns3::EmptyAttributeValue();
    const char *n6 = NULL;
    Py_ssize_t n6_len;
    PyNs3AttributeValue *v6 = NULL;
    ns3::EmptyAttributeValue v6_default = ns3::EmptyAttributeValue();
    const char *n7 = NULL;
    Py_ssize_t n7_len;
    PyNs3AttributeValue *v7 = NULL;
    ns3::EmptyAttributeValue v7_default = ns3::EmptyAttributeValue();
    const char *keywords[] = {"type", "n0", "v0", "n1", "v1", "n2", "v2", "n3", "v3", "n4", "v4", "n5", "v5", "n6", "v6", "n7", "v7", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|s#O!s#O!s#O!s#O!s#O!s#O!s#O!s#O!", (char **) keywords, &type, &type_len, &n0, &n0_len, &PyNs3AttributeValue_Type, &v0, &n1, &n1_len, &PyNs3AttributeValue_Type, &v1, &n2, &n2_len, &PyNs3AttributeValue_Type, &v2, &n3, &n3_len, &PyNs3AttributeValue_Type, &v3, &n4, &n4_len, &PyNs3AttributeValue_Type, &v4, &n5, &n5_len, &PyNs3AttributeValue_Type, &v5, &n6, &n6_len, &PyNs3AttributeValue_Type, &v6, &n7, &n7_len, &PyNs3AttributeValue_Type, &v7)) {
        return NULL;
    }
    self->obj->SetStackInstaller(std::string(type, type_len), (n0 ? std::string(n0, n0_len) : ""), (v0 ? (*((PyNs3AttributeValue *) v0)->obj) : v0_default), (n1 ? std::string(n1, n1_len) : ""), (v1 ? (*((PyNs3AttributeValue *) v1)->obj) : v1_default), (n2 ? std::string(n2, n2_len) : ""), (v2 ? (*((PyNs3AttributeValue *) v2)->obj) : v2_default), (n3 ? std::string(n3, n3_len) : ""), (v3 ? (*((PyNs3AttributeValue *) v3)->obj) : v3_default), (n4 ? std::string(n4, n4_len) : ""), (v4 ? (*((PyNs3AttributeValue *) v4)->obj) : v4_default), (n5 ? std::string(n5, n5_len) : ""), (v5 ? (*((PyNs3AttributeValue *) v5)->obj) : v5_default), (n6 ? std::string(n6, n6_len) : ""), (v6 ? (*((PyNs3AttributeValue *) v6)->obj) : v6_default), (n7 ? std::string(n7, n7_len) : ""), (v7 ? (*((PyNs3AttributeValue *) v7)->obj) : v7_default));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshHelper_SetStandard(PyNs3MeshHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPhyStandard standard;
    const char *keywords[] = {"standard", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &standard)) {
        return NULL;
    }
    self->obj->SetStandard(standard);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshHelper_SetMacType(PyNs3MeshHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *n0 = NULL;
    Py_ssize_t n0_len;
    PyNs3AttributeValue *v0 = NULL;
    ns3::EmptyAttributeValue v0_default = ns3::EmptyAttributeValue();
    const char *n1 = NULL;
    Py_ssize_t n1_len;
    PyNs3AttributeValue *v1 = NULL;
    ns3::EmptyAttributeValue v1_default = ns3::EmptyAttributeValue();
    const char *n2 = NULL;
    Py_ssize_t n2_len;
    PyNs3AttributeValue *v2 = NULL;
    ns3::EmptyAttributeValue v2_default = ns3::EmptyAttributeValue();
    const char *n3 = NULL;
    Py_ssize_t n3_len;
    PyNs3AttributeValue *v3 = NULL;
    ns3::EmptyAttributeValue v3_default = ns3::EmptyAttributeValue();
    const char *n4 = NULL;
    Py_ssize_t n4_len;
    PyNs3AttributeValue *v4 = NULL;
    ns3::EmptyAttributeValue v4_default = ns3::EmptyAttributeValue();
    const char *n5 = NULL;
    Py_ssize_t n5_len;
    PyNs3AttributeValue *v5 = NULL;
    ns3::EmptyAttributeValue v5_default = ns3::EmptyAttributeValue();
    const char *n6 = NULL;
    Py_ssize_t n6_len;
    PyNs3AttributeValue *v6 = NULL;
    ns3::EmptyAttributeValue v6_default = ns3::EmptyAttributeValue();
    const char *n7 = NULL;
    Py_ssize_t n7_len;
    PyNs3AttributeValue *v7 = NULL;
    ns3::EmptyAttributeValue v7_default = ns3::EmptyAttributeValue();
    const char *keywords[] = {"n0", "v0", "n1", "v1", "n2", "v2", "n3", "v3", "n4", "v4", "n5", "v5", "n6", "v6", "n7", "v7", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|s#O!s#O!s#O!s#O!s#O!s#O!s#O!s#O!", (char **) keywords, &n0, &n0_len, &PyNs3AttributeValue_Type, &v0, &n1, &n1_len, &PyNs3AttributeValue_Type, &v1, &n2, &n2_len, &PyNs3AttributeValue_Type, &v2, &n3, &n3_len, &PyNs3AttributeValue_Type, &v3, &n4, &n4_len, &PyNs3AttributeValue_Type, &v4, &n5, &n5_len, &PyNs3AttributeValue_Type, &v5, &n6, &n6_len, &PyNs3AttributeValue_Type, &v6, &n7, &n7_len, &PyNs3AttributeValue_Type, &v7)) {
        return NULL;
    }
    self->obj->SetMacType((n0 ? std::string(n0, n0_len) : ""), (v0 ? (*((PyNs3AttributeValue *) v0)->obj) : v0_default), (n1 ? std::string(n1, n1_len) : ""), (v1 ? (*((PyNs3AttributeValue *) v1)->obj) : v1_default), (n2 ? std::string(n2, n2_len) : ""), (v2 ? (*((PyNs3AttributeValue *) v2)->obj) : v2_default), (n3 ? std::string(n3, n3_len) : ""), (v3 ? (*((PyNs3AttributeValue *) v3)->obj) : v3_default), (n4 ? std::string(n4, n4_len) : ""), (v4 ? (*((PyNs3AttributeValue *) v4)->obj) : v4_default), (n5 ? std::string(n5, n5_len) : ""), (v5 ? (*((PyNs3AttributeValue *) v5)->obj) : v5_default), (n6 ? std::string(n6, n6_len) : ""), (v6 ? (*((PyNs3AttributeValue *) v6)->obj) : v6_default), (n7 ? std::string(n7, n7_len) : ""), (v7 ? (*((PyNs3AttributeValue *) v7)->obj) : v7_default));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshHelper_Install(PyNs3MeshHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhyHelper *phyHelper;
    PyNs3NodeContainer *c;
    const char *keywords[] = {"phyHelper", "c", NULL};
    PyNs3NetDeviceContainer *py_NetDeviceContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3WifiPhyHelper_Type, &phyHelper, &PyNs3NodeContainer_Type, &c)) {
        return NULL;
    }
    ns3::NetDeviceContainer retval = self->obj->Install(*((PyNs3WifiPhyHelper *) phyHelper)->obj, *((PyNs3NodeContainer *) c)->obj);
    py_NetDeviceContainer = PyObject_New(PyNs3NetDeviceContainer, &PyNs3NetDeviceContainer_Type);
    py_NetDeviceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_NetDeviceContainer->obj = new ns3::NetDeviceContainer(retval);
    PyNs3NetDeviceContainer_wrapper_registry[(void *) py_NetDeviceContainer->obj] = (PyObject *) py_NetDeviceContainer;
    py_retval = Py_BuildValue((char *) "N", py_NetDeviceContainer);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshHelper_AssignStreams(PyNs3MeshHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    PyNs3NetDeviceContainer *c;
    int64_t stream;
    const char *keywords[] = {"c", "stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!L", (char **) keywords, &PyNs3NetDeviceContainer_Type, &c, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(*((PyNs3NetDeviceContainer *) c)->obj, stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshHelper_SetRemoteStationManager(PyNs3MeshHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *type;
    Py_ssize_t type_len;
    const char *n0 = NULL;
    Py_ssize_t n0_len;
    PyNs3AttributeValue *v0 = NULL;
    ns3::EmptyAttributeValue v0_default = ns3::EmptyAttributeValue();
    const char *n1 = NULL;
    Py_ssize_t n1_len;
    PyNs3AttributeValue *v1 = NULL;
    ns3::EmptyAttributeValue v1_default = ns3::EmptyAttributeValue();
    const char *n2 = NULL;
    Py_ssize_t n2_len;
    PyNs3AttributeValue *v2 = NULL;
    ns3::EmptyAttributeValue v2_default = ns3::EmptyAttributeValue();
    const char *n3 = NULL;
    Py_ssize_t n3_len;
    PyNs3AttributeValue *v3 = NULL;
    ns3::EmptyAttributeValue v3_default = ns3::EmptyAttributeValue();
    const char *n4 = NULL;
    Py_ssize_t n4_len;
    PyNs3AttributeValue *v4 = NULL;
    ns3::EmptyAttributeValue v4_default = ns3::EmptyAttributeValue();
    const char *n5 = NULL;
    Py_ssize_t n5_len;
    PyNs3AttributeValue *v5 = NULL;
    ns3::EmptyAttributeValue v5_default = ns3::EmptyAttributeValue();
    const char *n6 = NULL;
    Py_ssize_t n6_len;
    PyNs3AttributeValue *v6 = NULL;
    ns3::EmptyAttributeValue v6_default = ns3::EmptyAttributeValue();
    const char *n7 = NULL;
    Py_ssize_t n7_len;
    PyNs3AttributeValue *v7 = NULL;
    ns3::EmptyAttributeValue v7_default = ns3::EmptyAttributeValue();
    const char *keywords[] = {"type", "n0", "v0", "n1", "v1", "n2", "v2", "n3", "v3", "n4", "v4", "n5", "v5", "n6", "v6", "n7", "v7", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|s#O!s#O!s#O!s#O!s#O!s#O!s#O!s#O!", (char **) keywords, &type, &type_len, &n0, &n0_len, &PyNs3AttributeValue_Type, &v0, &n1, &n1_len, &PyNs3AttributeValue_Type, &v1, &n2, &n2_len, &PyNs3AttributeValue_Type, &v2, &n3, &n3_len, &PyNs3AttributeValue_Type, &v3, &n4, &n4_len, &PyNs3AttributeValue_Type, &v4, &n5, &n5_len, &PyNs3AttributeValue_Type, &v5, &n6, &n6_len, &PyNs3AttributeValue_Type, &v6, &n7, &n7_len, &PyNs3AttributeValue_Type, &v7)) {
        return NULL;
    }
    self->obj->SetRemoteStationManager(std::string(type, type_len), (n0 ? std::string(n0, n0_len) : ""), (v0 ? (*((PyNs3AttributeValue *) v0)->obj) : v0_default), (n1 ? std::string(n1, n1_len) : ""), (v1 ? (*((PyNs3AttributeValue *) v1)->obj) : v1_default), (n2 ? std::string(n2, n2_len) : ""), (v2 ? (*((PyNs3AttributeValue *) v2)->obj) : v2_default), (n3 ? std::string(n3, n3_len) : ""), (v3 ? (*((PyNs3AttributeValue *) v3)->obj) : v3_default), (n4 ? std::string(n4, n4_len) : ""), (v4 ? (*((PyNs3AttributeValue *) v4)->obj) : v4_default), (n5 ? std::string(n5, n5_len) : ""), (v5 ? (*((PyNs3AttributeValue *) v5)->obj) : v5_default), (n6 ? std::string(n6, n6_len) : ""), (v6 ? (*((PyNs3AttributeValue *) v6)->obj) : v6_default), (n7 ? std::string(n7, n7_len) : ""), (v7 ? (*((PyNs3AttributeValue *) v7)->obj) : v7_default));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3MeshHelper__copy__(PyNs3MeshHelper *self)
{

    PyNs3MeshHelper *py_copy;
    py_copy = PyObject_New(PyNs3MeshHelper, &PyNs3MeshHelper_Type);
    py_copy->obj = new ns3::MeshHelper(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3MeshHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MeshHelper_methods[] = {
    {(char *) "SetSpreadInterfaceChannels", (PyCFunction) _wrap_PyNs3MeshHelper_SetSpreadInterfaceChannels, METH_KEYWORDS|METH_VARARGS, "SetSpreadInterfaceChannels(arg0)\n\ntype: arg0: ns3::MeshHelper::ChannelPolicy" },
    {(char *) "SetNumberOfInterfaces", (PyCFunction) _wrap_PyNs3MeshHelper_SetNumberOfInterfaces, METH_KEYWORDS|METH_VARARGS, "SetNumberOfInterfaces(nInterfaces)\n\ntype: nInterfaces: uint32_t" },
    {(char *) "Default", (PyCFunction) _wrap_PyNs3MeshHelper_Default, METH_NOARGS|METH_STATIC, "Default()\n\n" },
    {(char *) "SetStackInstaller", (PyCFunction) _wrap_PyNs3MeshHelper_SetStackInstaller, METH_KEYWORDS|METH_VARARGS, "SetStackInstaller(type, n0, v0, n1, v1, n2, v2, n3, v3, n4, v4, n5, v5, n6, v6, n7, v7)\n\ntype: type: std::string\ntype: n0: std::string\ntype: v0: ns3::AttributeValue const &\ntype: n1: std::string\ntype: v1: ns3::AttributeValue const &\ntype: n2: std::string\ntype: v2: ns3::AttributeValue const &\ntype: n3: std::string\ntype: v3: ns3::AttributeValue const &\ntype: n4: std::string\ntype: v4: ns3::AttributeValue const &\ntype: n5: std::string\ntype: v5: ns3::AttributeValue const &\ntype: n6: std::string\ntype: v6: ns3::AttributeValue const &\ntype: n7: std::string\ntype: v7: ns3::AttributeValue const &" },
    {(char *) "SetStandard", (PyCFunction) _wrap_PyNs3MeshHelper_SetStandard, METH_KEYWORDS|METH_VARARGS, "SetStandard(standard)\n\ntype: standard: ns3::WifiPhyStandard" },
    {(char *) "SetMacType", (PyCFunction) _wrap_PyNs3MeshHelper_SetMacType, METH_KEYWORDS|METH_VARARGS, "SetMacType(n0, v0, n1, v1, n2, v2, n3, v3, n4, v4, n5, v5, n6, v6, n7, v7)\n\ntype: n0: std::string\ntype: v0: ns3::AttributeValue const &\ntype: n1: std::string\ntype: v1: ns3::AttributeValue const &\ntype: n2: std::string\ntype: v2: ns3::AttributeValue const &\ntype: n3: std::string\ntype: v3: ns3::AttributeValue const &\ntype: n4: std::string\ntype: v4: ns3::AttributeValue const &\ntype: n5: std::string\ntype: v5: ns3::AttributeValue const &\ntype: n6: std::string\ntype: v6: ns3::AttributeValue const &\ntype: n7: std::string\ntype: v7: ns3::AttributeValue const &" },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3MeshHelper_Install, METH_KEYWORDS|METH_VARARGS, "Install(phyHelper, c)\n\ntype: phyHelper: ns3::WifiPhyHelper const &\ntype: c: ns3::NodeContainer" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3MeshHelper_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(c, stream)\n\ntype: c: ns3::NetDeviceContainer\ntype: stream: int64_t" },
    {(char *) "SetRemoteStationManager", (PyCFunction) _wrap_PyNs3MeshHelper_SetRemoteStationManager, METH_KEYWORDS|METH_VARARGS, "SetRemoteStationManager(type, n0, v0, n1, v1, n2, v2, n3, v3, n4, v4, n5, v5, n6, v6, n7, v7)\n\ntype: type: std::string\ntype: n0: std::string\ntype: v0: ns3::AttributeValue const &\ntype: n1: std::string\ntype: v1: ns3::AttributeValue const &\ntype: n2: std::string\ntype: v2: ns3::AttributeValue const &\ntype: n3: std::string\ntype: v3: ns3::AttributeValue const &\ntype: n4: std::string\ntype: v4: ns3::AttributeValue const &\ntype: n5: std::string\ntype: v5: ns3::AttributeValue const &\ntype: n6: std::string\ntype: v6: ns3::AttributeValue const &\ntype: n7: std::string\ntype: v7: ns3::AttributeValue const &" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MeshHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3MeshHelper__tp_dealloc(PyNs3MeshHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3MeshHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3MeshHelper_wrapper_registry.end()) {
        PyNs3MeshHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::MeshHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MeshHelper__tp_richcompare (PyNs3MeshHelper *PYBINDGEN_UNUSED(self), PyNs3MeshHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MeshHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MeshHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.MeshHelper",            /* tp_name */
    sizeof(PyNs3MeshHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MeshHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "MeshHelper(arg0)\nMeshHelper()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MeshHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MeshHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MeshHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3MeshWifiBeacon_wrapper_registry;


static int
_wrap_PyNs3MeshWifiBeacon__tp_init__0(PyNs3MeshWifiBeacon *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MeshWifiBeacon *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshWifiBeacon_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MeshWifiBeacon(*((PyNs3MeshWifiBeacon *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MeshWifiBeacon__tp_init__1(PyNs3MeshWifiBeacon *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Ssid *ssid;
    PyNs3SupportedRates *rates;
    uint64_t us;
    const char *keywords[] = {"ssid", "rates", "us", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!K", (char **) keywords, &PyNs3Ssid_Type, &ssid, &PyNs3SupportedRates_Type, &rates, &us)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MeshWifiBeacon(*((PyNs3Ssid *) ssid)->obj, *((PyNs3SupportedRates *) rates)->obj, us);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MeshWifiBeacon__tp_init(PyNs3MeshWifiBeacon *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MeshWifiBeacon__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MeshWifiBeacon__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MeshWifiBeacon_CreatePacket(PyNs3MeshWifiBeacon *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->CreatePacket();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiBeacon_GetBeaconInterval(PyNs3MeshWifiBeacon *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetBeaconInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiBeacon_CreateHeader(PyNs3MeshWifiBeacon *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3Mac48Address *mpAddress;
    const char *keywords[] = {"address", "mpAddress", NULL};
    PyNs3WifiMacHeader *py_WifiMacHeader;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3Mac48Address_Type, &mpAddress)) {
        return NULL;
    }
    ns3::WifiMacHeader retval = self->obj->CreateHeader(*((PyNs3Mac48Address *) address)->obj, *((PyNs3Mac48Address *) mpAddress)->obj);
    py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMacHeader->obj = new ns3::WifiMacHeader(retval);
    PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    py_retval = Py_BuildValue((char *) "N", py_WifiMacHeader);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiBeacon_AddInformationElement(PyNs3MeshWifiBeacon *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiInformationElement *ie;
    ns3::WifiInformationElement *ie_ptr;
    const char *keywords[] = {"ie", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiInformationElement_Type, &ie)) {
        return NULL;
    }
    ie_ptr = (ie ? ie->obj : NULL);
    self->obj->AddInformationElement(ns3::Ptr< ns3::WifiInformationElement  > (ie_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiBeacon_BeaconHeader(PyNs3MeshWifiBeacon *self)
{
    PyObject *py_retval;
    PyNs3MgtBeaconHeader *py_MgtBeaconHeader;
    
    ns3::MgtBeaconHeader retval = self->obj->BeaconHeader();
    py_MgtBeaconHeader = PyObject_GC_New(PyNs3MgtBeaconHeader, &PyNs3MgtBeaconHeader_Type);
    py_MgtBeaconHeader->inst_dict = NULL;
    py_MgtBeaconHeader->inst_dict = NULL;
    py_MgtBeaconHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MgtBeaconHeader->obj = new ns3::MgtBeaconHeader(retval);
    PyNs3ObjectBase_wrapper_registry[(void *) py_MgtBeaconHeader->obj] = (PyObject *) py_MgtBeaconHeader;
    py_retval = Py_BuildValue((char *) "N", py_MgtBeaconHeader);
    return py_retval;
}


static PyObject*
_wrap_PyNs3MeshWifiBeacon__copy__(PyNs3MeshWifiBeacon *self)
{

    PyNs3MeshWifiBeacon *py_copy;
    py_copy = PyObject_New(PyNs3MeshWifiBeacon, &PyNs3MeshWifiBeacon_Type);
    py_copy->obj = new ns3::MeshWifiBeacon(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3MeshWifiBeacon_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MeshWifiBeacon_methods[] = {
    {(char *) "CreatePacket", (PyCFunction) _wrap_PyNs3MeshWifiBeacon_CreatePacket, METH_NOARGS, "CreatePacket()\n\n" },
    {(char *) "GetBeaconInterval", (PyCFunction) _wrap_PyNs3MeshWifiBeacon_GetBeaconInterval, METH_NOARGS, "GetBeaconInterval()\n\n" },
    {(char *) "CreateHeader", (PyCFunction) _wrap_PyNs3MeshWifiBeacon_CreateHeader, METH_KEYWORDS|METH_VARARGS, "CreateHeader(address, mpAddress)\n\ntype: address: ns3::Mac48Address\ntype: mpAddress: ns3::Mac48Address" },
    {(char *) "AddInformationElement", (PyCFunction) _wrap_PyNs3MeshWifiBeacon_AddInformationElement, METH_KEYWORDS|METH_VARARGS, "AddInformationElement(ie)\n\ntype: ie: ns3::Ptr< ns3::WifiInformationElement >" },
    {(char *) "BeaconHeader", (PyCFunction) _wrap_PyNs3MeshWifiBeacon_BeaconHeader, METH_NOARGS, "BeaconHeader()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MeshWifiBeacon__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3MeshWifiBeacon__tp_dealloc(PyNs3MeshWifiBeacon *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3MeshWifiBeacon_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3MeshWifiBeacon_wrapper_registry.end()) {
        PyNs3MeshWifiBeacon_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::MeshWifiBeacon *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MeshWifiBeacon__tp_richcompare (PyNs3MeshWifiBeacon *PYBINDGEN_UNUSED(self), PyNs3MeshWifiBeacon *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MeshWifiBeacon_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MeshWifiBeacon_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.MeshWifiBeacon",            /* tp_name */
    sizeof(PyNs3MeshWifiBeacon),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MeshWifiBeacon__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "MeshWifiBeacon(ssid, rates, us)\nMeshWifiBeacon(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MeshWifiBeacon__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MeshWifiBeacon_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MeshWifiBeacon__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____tp_init__0(PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::MeshWifiInterfaceMacPlugin, ns3::empty, ns3::DefaultDeleter<ns3::MeshWifiInterfaceMacPlugin> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____tp_init__1(PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::MeshWifiInterfaceMacPlugin, ns3::empty, ns3::DefaultDeleter<ns3::MeshWifiInterfaceMacPlugin> >(*((PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____tp_init(PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Cleanup(void)
{
    PyObject *py_retval;
    
    ns3::SimpleRefCount< ns3::MeshWifiInterfaceMacPlugin, ns3::empty, ns3::DefaultDeleter<ns3::MeshWifiInterfaceMacPlugin> >::Cleanup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____copy__(PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__, &PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::MeshWifiInterfaceMacPlugin, ns3::empty, ns3::DefaultDeleter<ns3::MeshWifiInterfaceMacPlugin> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___methods[] = {
    {(char *) "Cleanup", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Cleanup, METH_NOARGS|METH_STATIC, "Cleanup()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::MeshWifiInterfaceMacPlugin, ns3::empty, ns3::DefaultDeleter<ns3::MeshWifiInterfaceMacPlugin> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__(o)\nSimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____tp_init__0(PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::dot11s::DestinationAddressUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::DestinationAddressUnit> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____tp_init__1(PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::dot11s::DestinationAddressUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::DestinationAddressUnit> >(*((PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____tp_init(PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt___Cleanup(void)
{
    PyObject *py_retval;
    
    ns3::SimpleRefCount< ns3::dot11s::DestinationAddressUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::DestinationAddressUnit> >::Cleanup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____copy__(PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt__, &PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::dot11s::DestinationAddressUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::DestinationAddressUnit> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt___methods[] = {
    {(char *) "Cleanup", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt___Cleanup, METH_NOARGS|METH_STATIC, "Cleanup()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::dot11s::DestinationAddressUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::DestinationAddressUnit> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt__(o)\nSimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt__()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____tp_init__0(PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::dot11s::IeBeaconTimingUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::IeBeaconTimingUnit> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____tp_init__1(PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::dot11s::IeBeaconTimingUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::IeBeaconTimingUnit> >(*((PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____tp_init(PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Cleanup(void)
{
    PyObject *py_retval;
    
    ns3::SimpleRefCount< ns3::dot11s::IeBeaconTimingUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::IeBeaconTimingUnit> >::Cleanup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____copy__(PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__, &PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::dot11s::IeBeaconTimingUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::IeBeaconTimingUnit> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___methods[] = {
    {(char *) "Cleanup", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Cleanup, METH_NOARGS|METH_STATIC, "Cleanup()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::dot11s::IeBeaconTimingUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::IeBeaconTimingUnit> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__(o)\nSimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MeshInformationElementVector__tp_init__0(PyNs3MeshInformationElementVector *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MeshInformationElementVector *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshInformationElementVector_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MeshInformationElementVector(*((PyNs3MeshInformationElementVector *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MeshInformationElementVector__tp_init__1(PyNs3MeshInformationElementVector *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MeshInformationElementVector();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MeshInformationElementVector__tp_init(PyNs3MeshInformationElementVector *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MeshInformationElementVector__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MeshInformationElementVector__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MeshInformationElementVector_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MeshInformationElementVector::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshInformationElementVector_DeserializeSingleIe(PyNs3MeshInformationElementVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->DeserializeSingleIe(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshInformationElementVector_GetInstanceTypeId(PyNs3MeshInformationElementVector *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3MeshInformationElementVector__copy__(PyNs3MeshInformationElementVector *self)
{

    PyNs3MeshInformationElementVector *py_copy;
    py_copy = PyObject_GC_New(PyNs3MeshInformationElementVector, &PyNs3MeshInformationElementVector_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::MeshInformationElementVector(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MeshInformationElementVector_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MeshInformationElementVector_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "DeserializeSingleIe", (PyCFunction) _wrap_PyNs3MeshInformationElementVector_DeserializeSingleIe, METH_KEYWORDS|METH_VARARGS, "DeserializeSingleIe(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MeshInformationElementVector_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MeshInformationElementVector__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MeshInformationElementVector__tp_clear(PyNs3MeshInformationElementVector *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MeshInformationElementVector *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MeshInformationElementVector__tp_traverse(PyNs3MeshInformationElementVector *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MeshInformationElementVector__tp_dealloc(PyNs3MeshInformationElementVector *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MeshInformationElementVector__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MeshInformationElementVector__tp_richcompare (PyNs3MeshInformationElementVector *PYBINDGEN_UNUSED(self), PyNs3MeshInformationElementVector *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MeshInformationElementVector_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MeshInformationElementVector_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.MeshInformationElementVector",            /* tp_name */
    sizeof(PyNs3MeshInformationElementVector),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MeshInformationElementVector__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MeshInformationElementVector(arg0)\nMeshInformationElementVector()",                        /* Documentation string */
    (traverseproc)PyNs3MeshInformationElementVector__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MeshInformationElementVector__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MeshInformationElementVector__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MeshInformationElementVector_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MeshInformationElementVector, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MeshInformationElementVector__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3MeshL2RoutingProtocol__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'MeshL2RoutingProtocol' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3MeshL2RoutingProtocol_RequestRoute(PyNs3MeshL2RoutingProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    unsigned int sourceIface;
    PyNs3Mac48Address *source;
    PyNs3Mac48Address *destination;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    int protocolType;
    PyObject *routeReply;
    ns3::Ptr<PythonCallbackImpl3> routeReply_cb_impl;
    const char *keywords[] = {"sourceIface", "source", "destination", "packet", "protocolType", "routeReply", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!O!O!iO", (char **) keywords, &sourceIface, &PyNs3Mac48Address_Type, &source, &PyNs3Mac48Address_Type, &destination, &PyNs3Packet_Type, &packet, &protocolType, &routeReply)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (protocolType > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (!PyCallable_Check(routeReply)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'routeReply' must be callbale");
        return NULL;
    }
    routeReply_cb_impl = ns3::Create<PythonCallbackImpl3> (routeReply);
    retval = self->obj->RequestRoute(sourceIface, *((PyNs3Mac48Address *) source)->obj, *((PyNs3Mac48Address *) destination)->obj, ns3::Ptr< ns3::Packet  > (packet_ptr), protocolType, ns3::Callback<void, bool, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, unsigned short, unsigned int, ns3::empty, ns3::empty, ns3::empty> (routeReply_cb_impl));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshL2RoutingProtocol_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MeshL2RoutingProtocol::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshL2RoutingProtocol_GetMeshPoint(PyNs3MeshL2RoutingProtocol *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::MeshPointDevice > retval;
    PyNs3MeshPointDevice *py_MeshPointDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetMeshPoint();
    if (!(const_cast<ns3::MeshPointDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::MeshPointDevice *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3MeshPointDevice__PythonHelper).name())
    {
        py_MeshPointDevice = reinterpret_cast< PyNs3MeshPointDevice* >(reinterpret_cast< PyNs3MeshPointDevice__PythonHelper* >(const_cast<ns3::MeshPointDevice *> (ns3::PeekPointer (retval)))->m_pyself);
        py_MeshPointDevice->obj = const_cast<ns3::MeshPointDevice *> (ns3::PeekPointer (retval));
        Py_INCREF(py_MeshPointDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MeshPointDevice *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MeshPointDevice = NULL;
        } else {
            py_MeshPointDevice = (PyNs3MeshPointDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_MeshPointDevice);
        }
    
        if (py_MeshPointDevice == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::MeshPointDevice *> (ns3::PeekPointer (retval)))), &PyNs3MeshPointDevice_Type);
            py_MeshPointDevice = PyObject_GC_New(PyNs3MeshPointDevice, wrapper_type);
            py_MeshPointDevice->inst_dict = NULL;
    
            py_MeshPointDevice->inst_dict = NULL;
            py_MeshPointDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MeshPointDevice *> (ns3::PeekPointer (retval))->Ref();
            py_MeshPointDevice->obj = const_cast<ns3::MeshPointDevice *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MeshPointDevice->obj] = (PyObject *) py_MeshPointDevice;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_MeshPointDevice);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshL2RoutingProtocol_RemoveRoutingStuff(PyNs3MeshL2RoutingProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    unsigned int fromIface;
    PyNs3Mac48Address *source;
    PyNs3Mac48Address *destination;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    uint16_t  protocolType;
    const char *keywords[] = {"fromIface", "source", "destination", "packet", "protocolType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!O!O!H", (char **) keywords, &fromIface, &PyNs3Mac48Address_Type, &source, &PyNs3Mac48Address_Type, &destination, &PyNs3Packet_Type, &packet, &protocolType)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->RemoveRoutingStuff(fromIface, *((PyNs3Mac48Address *) source)->obj, *((PyNs3Mac48Address *) destination)->obj, ns3::Ptr< ns3::Packet  > (packet_ptr), protocolType);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshL2RoutingProtocol_SetMeshPoint(PyNs3MeshL2RoutingProtocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MeshPointDevice *mp;
    ns3::MeshPointDevice *mp_ptr;
    const char *keywords[] = {"mp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshPointDevice_Type, &mp)) {
        return NULL;
    }
    mp_ptr = (mp ? mp->obj : NULL);
    self->obj->SetMeshPoint(ns3::Ptr< ns3::MeshPointDevice  > (mp_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3MeshL2RoutingProtocol_methods[] = {
    {(char *) "RequestRoute", (PyCFunction) _wrap_PyNs3MeshL2RoutingProtocol_RequestRoute, METH_KEYWORDS|METH_VARARGS, "RequestRoute(sourceIface, source, destination, packet, protocolType, routeReply)\n\ntype: sourceIface: uint32_t\ntype: source: ns3::Mac48Address const\ntype: destination: ns3::Mac48Address const\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: protocolType: uint16_t\ntype: routeReply: ns3::Callback< void, bool, ns3::Ptr< ns3::Packet >, ns3::Mac48Address, ns3::Mac48Address, unsigned short, unsigned int, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MeshL2RoutingProtocol_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetMeshPoint", (PyCFunction) _wrap_PyNs3MeshL2RoutingProtocol_GetMeshPoint, METH_NOARGS, "GetMeshPoint()\n\n" },
    {(char *) "RemoveRoutingStuff", (PyCFunction) _wrap_PyNs3MeshL2RoutingProtocol_RemoveRoutingStuff, METH_KEYWORDS|METH_VARARGS, "RemoveRoutingStuff(fromIface, source, destination, packet, protocolType)\n\ntype: fromIface: uint32_t\ntype: source: ns3::Mac48Address const\ntype: destination: ns3::Mac48Address const\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: protocolType: uint16_t &" },
    {(char *) "SetMeshPoint", (PyCFunction) _wrap_PyNs3MeshL2RoutingProtocol_SetMeshPoint, METH_KEYWORDS|METH_VARARGS, "SetMeshPoint(mp)\n\ntype: mp: ns3::Ptr< ns3::MeshPointDevice >" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MeshL2RoutingProtocol__tp_clear(PyNs3MeshL2RoutingProtocol *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::MeshL2RoutingProtocol *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3MeshL2RoutingProtocol__tp_traverse(PyNs3MeshL2RoutingProtocol *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MeshL2RoutingProtocol__tp_dealloc(PyNs3MeshL2RoutingProtocol *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MeshL2RoutingProtocol__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MeshL2RoutingProtocol__tp_richcompare (PyNs3MeshL2RoutingProtocol *PYBINDGEN_UNUSED(self), PyNs3MeshL2RoutingProtocol *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MeshL2RoutingProtocol_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MeshL2RoutingProtocol_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.MeshL2RoutingProtocol",            /* tp_name */
    sizeof(PyNs3MeshL2RoutingProtocol),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MeshL2RoutingProtocol__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MeshL2RoutingProtocol(arg0)\nMeshL2RoutingProtocol()",                        /* Documentation string */
    (traverseproc)PyNs3MeshL2RoutingProtocol__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MeshL2RoutingProtocol__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MeshL2RoutingProtocol__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MeshL2RoutingProtocol_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MeshL2RoutingProtocol, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MeshL2RoutingProtocol__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3MeshStack__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'MeshStack' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3MeshStack_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MeshStack::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshStack_InstallStack(PyNs3MeshStack *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3MeshPointDevice *mp;
    ns3::MeshPointDevice *mp_ptr;
    const char *keywords[] = {"mp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshPointDevice_Type, &mp)) {
        return NULL;
    }
    mp_ptr = (mp ? mp->obj : NULL);
    retval = self->obj->InstallStack(ns3::Ptr< ns3::MeshPointDevice  > (mp_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

static PyMethodDef PyNs3MeshStack_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MeshStack_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "InstallStack", (PyCFunction) _wrap_PyNs3MeshStack_InstallStack, METH_KEYWORDS|METH_VARARGS, "InstallStack(mp)\n\ntype: mp: ns3::Ptr< ns3::MeshPointDevice >" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MeshStack__tp_clear(PyNs3MeshStack *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::MeshStack *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3MeshStack__tp_traverse(PyNs3MeshStack *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MeshStack__tp_dealloc(PyNs3MeshStack *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MeshStack__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MeshStack__tp_richcompare (PyNs3MeshStack *PYBINDGEN_UNUSED(self), PyNs3MeshStack *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MeshStack_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MeshStack_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.MeshStack",            /* tp_name */
    sizeof(PyNs3MeshStack),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MeshStack__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MeshStack(arg0)\nMeshStack()",                        /* Documentation string */
    (traverseproc)PyNs3MeshStack__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MeshStack__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MeshStack__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MeshStack_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MeshStack, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MeshStack__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3MeshWifiInterfaceMacPlugin__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'MeshWifiInterfaceMacPlugin' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMacPlugin_Receive(PyNs3MeshWifiInterfaceMacPlugin *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *header;
    const char *keywords[] = {"packet", "header", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &header)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->Receive(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) header)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMacPlugin_SetParent(PyNs3MeshWifiInterfaceMacPlugin *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MeshWifiInterfaceMac *parent;
    ns3::MeshWifiInterfaceMac *parent_ptr;
    const char *keywords[] = {"parent", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshWifiInterfaceMac_Type, &parent)) {
        return NULL;
    }
    parent_ptr = (parent ? parent->obj : NULL);
    self->obj->SetParent(ns3::Ptr< ns3::MeshWifiInterfaceMac  > (parent_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMacPlugin_UpdateBeacon(PyNs3MeshWifiInterfaceMacPlugin *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MeshWifiBeacon *beacon;
    const char *keywords[] = {"beacon", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshWifiBeacon_Type, &beacon)) {
        return NULL;
    }
    self->obj->UpdateBeacon(*((PyNs3MeshWifiBeacon *) beacon)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMacPlugin_UpdateOutcomingFrame(PyNs3MeshWifiInterfaceMacPlugin *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *header;
    PyNs3Mac48Address *from;
    PyNs3Mac48Address *to;
    const char *keywords[] = {"packet", "header", "from", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &header, &PyNs3Mac48Address_Type, &from, &PyNs3Mac48Address_Type, &to)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->UpdateOutcomingFrame(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) header)->obj, *((PyNs3Mac48Address *) from)->obj, *((PyNs3Mac48Address *) to)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMacPlugin_AssignStreams(PyNs3MeshWifiInterfaceMacPlugin *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}

static PyMethodDef PyNs3MeshWifiInterfaceMacPlugin_methods[] = {
    {(char *) "Receive", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMacPlugin_Receive, METH_KEYWORDS|METH_VARARGS, "Receive(packet, header)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: header: ns3::WifiMacHeader const &" },
    {(char *) "SetParent", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMacPlugin_SetParent, METH_KEYWORDS|METH_VARARGS, "SetParent(parent)\n\ntype: parent: ns3::Ptr< ns3::MeshWifiInterfaceMac >" },
    {(char *) "UpdateBeacon", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMacPlugin_UpdateBeacon, METH_KEYWORDS|METH_VARARGS, "UpdateBeacon(beacon)\n\ntype: beacon: ns3::MeshWifiBeacon &" },
    {(char *) "UpdateOutcomingFrame", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMacPlugin_UpdateOutcomingFrame, METH_KEYWORDS|METH_VARARGS, "UpdateOutcomingFrame(packet, header, from, to)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: header: ns3::WifiMacHeader &\ntype: from: ns3::Mac48Address\ntype: to: ns3::Mac48Address" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMacPlugin_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3MeshWifiInterfaceMacPlugin__tp_dealloc(PyNs3MeshWifiInterfaceMacPlugin *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::MeshWifiInterfaceMacPlugin *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MeshWifiInterfaceMacPlugin__tp_richcompare (PyNs3MeshWifiInterfaceMacPlugin *PYBINDGEN_UNUSED(self), PyNs3MeshWifiInterfaceMacPlugin *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MeshWifiInterfaceMacPlugin_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MeshWifiInterfaceMacPlugin_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.MeshWifiInterfaceMacPlugin",            /* tp_name */
    sizeof(PyNs3MeshWifiInterfaceMacPlugin),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MeshWifiInterfaceMacPlugin__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "MeshWifiInterfaceMacPlugin(arg0)\nMeshWifiInterfaceMacPlugin()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MeshWifiInterfaceMacPlugin__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MeshWifiInterfaceMacPlugin_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MeshWifiInterfaceMacPlugin__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Dot11sStack__tp_init__0(PyNs3Dot11sStack *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dot11sStack *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dot11sStack_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Dot11sStack(*((PyNs3Dot11sStack *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dot11sStack__tp_init__1(PyNs3Dot11sStack *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Dot11sStack();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dot11sStack__tp_init(PyNs3Dot11sStack *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dot11sStack__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dot11sStack__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dot11sStack_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::Dot11sStack::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sStack_InstallStack(PyNs3Dot11sStack *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3MeshPointDevice *mp;
    ns3::MeshPointDevice *mp_ptr;
    const char *keywords[] = {"mp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshPointDevice_Type, &mp)) {
        return NULL;
    }
    mp_ptr = (mp ? mp->obj : NULL);
    retval = self->obj->InstallStack(ns3::Ptr< ns3::MeshPointDevice  > (mp_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dot11sStack_DoDispose(PyNs3Dot11sStack *self)
{
    PyObject *py_retval;
    
    self->obj->DoDispose();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dot11sStack__copy__(PyNs3Dot11sStack *self)
{

    PyNs3Dot11sStack *py_copy;
    py_copy = PyObject_GC_New(PyNs3Dot11sStack, &PyNs3Dot11sStack_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::Dot11sStack(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dot11sStack_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3Dot11sStack_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "InstallStack", (PyCFunction) _wrap_PyNs3Dot11sStack_InstallStack, METH_KEYWORDS|METH_VARARGS, "InstallStack(mp)\n\ntype: mp: ns3::Ptr< ns3::MeshPointDevice >" },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3Dot11sStack_DoDispose, METH_NOARGS, "DoDispose()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dot11sStack__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3Dot11sStack__tp_clear(PyNs3Dot11sStack *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::Dot11sStack *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3Dot11sStack__tp_traverse(PyNs3Dot11sStack *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3Dot11sStack__tp_dealloc(PyNs3Dot11sStack *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3Dot11sStack__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dot11sStack__tp_richcompare (PyNs3Dot11sStack *PYBINDGEN_UNUSED(self), PyNs3Dot11sStack *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dot11sStack_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dot11sStack_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.Dot11sStack",            /* tp_name */
    sizeof(PyNs3Dot11sStack),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dot11sStack__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "Dot11sStack(arg0)\nDot11sStack()",                        /* Documentation string */
    (traverseproc)PyNs3Dot11sStack__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3Dot11sStack__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dot11sStack__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dot11sStack_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3Dot11sStack, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dot11sStack__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3FlameStack__tp_init__0(PyNs3FlameStack *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3FlameStack *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3FlameStack_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::FlameStack(*((PyNs3FlameStack *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3FlameStack__tp_init__1(PyNs3FlameStack *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::FlameStack();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3FlameStack__tp_init(PyNs3FlameStack *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3FlameStack__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3FlameStack__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3FlameStack_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::FlameStack::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameStack_InstallStack(PyNs3FlameStack *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3MeshPointDevice *mp;
    ns3::MeshPointDevice *mp_ptr;
    const char *keywords[] = {"mp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshPointDevice_Type, &mp)) {
        return NULL;
    }
    mp_ptr = (mp ? mp->obj : NULL);
    retval = self->obj->InstallStack(ns3::Ptr< ns3::MeshPointDevice  > (mp_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3FlameStack_DoDispose(PyNs3FlameStack *self)
{
    PyObject *py_retval;
    
    self->obj->DoDispose();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3FlameStack__copy__(PyNs3FlameStack *self)
{

    PyNs3FlameStack *py_copy;
    py_copy = PyObject_GC_New(PyNs3FlameStack, &PyNs3FlameStack_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::FlameStack(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3FlameStack_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3FlameStack_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "InstallStack", (PyCFunction) _wrap_PyNs3FlameStack_InstallStack, METH_KEYWORDS|METH_VARARGS, "InstallStack(mp)\n\ntype: mp: ns3::Ptr< ns3::MeshPointDevice >" },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3FlameStack_DoDispose, METH_NOARGS, "DoDispose()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3FlameStack__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3FlameStack__tp_clear(PyNs3FlameStack *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::FlameStack *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3FlameStack__tp_traverse(PyNs3FlameStack *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3FlameStack__tp_dealloc(PyNs3FlameStack *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3FlameStack__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3FlameStack__tp_richcompare (PyNs3FlameStack *PYBINDGEN_UNUSED(self), PyNs3FlameStack *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3FlameStack_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3FlameStack_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.FlameStack",            /* tp_name */
    sizeof(PyNs3FlameStack),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3FlameStack__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "FlameStack(arg0)\nFlameStack()",                        /* Documentation string */
    (traverseproc)PyNs3FlameStack__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3FlameStack__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3FlameStack__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3FlameStack_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3FlameStack, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3FlameStack__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3MeshPointDevice__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    PyNs3MeshPointDevice__PythonHelper *helper = dynamic_cast< PyNs3MeshPointDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3MeshPointDevice__PythonHelper::_wrap_DoInitialize(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    PyNs3MeshPointDevice__PythonHelper *helper = dynamic_cast< PyNs3MeshPointDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3MeshPointDevice__PythonHelper::_wrap_NotifyNewAggregate(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    PyNs3MeshPointDevice__PythonHelper *helper = dynamic_cast< PyNs3MeshPointDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


void
PyNs3MeshPointDevice__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::MeshPointDevice::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = (ns3::MeshPointDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Address
PyNs3MeshPointDevice__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = const_cast< ns3::MeshPointDevice* >((const ns3::MeshPointDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetAddress();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3MeshPointDevice__PythonHelper::GetBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBroadcast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = const_cast< ns3::MeshPointDevice* >((const ns3::MeshPointDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetBroadcast();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Channel >
PyNs3MeshPointDevice__PythonHelper::GetChannel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3Channel *tmp_Channel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetChannel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetChannel();
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = const_cast< ns3::MeshPointDevice* >((const ns3::MeshPointDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetChannel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetChannel();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Channel_Type, &tmp_Channel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetChannel();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Channel  > (tmp_Channel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3MeshPointDevice__PythonHelper::GetIfIndex() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetIfIndex"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetIfIndex();
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = const_cast< ns3::MeshPointDevice* >((const ns3::MeshPointDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetIfIndex", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetIfIndex();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetIfIndex();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint16_t
PyNs3MeshPointDevice__PythonHelper::GetMtu() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    uint16_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMtu"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetMtu();
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = const_cast< ns3::MeshPointDevice* >((const ns3::MeshPointDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMtu", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetMtu();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetMtu();
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetMtu();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3MeshPointDevice__PythonHelper::GetMulticast(ns3::Ipv4Address multicastGroup) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetMulticast(multicastGroup);
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = const_cast< ns3::MeshPointDevice* >((const ns3::MeshPointDevice*) this);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(multicastGroup);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "N", py_Ipv4Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetMulticast(multicastGroup);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetMulticast(multicastGroup);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3MeshPointDevice__PythonHelper::GetMulticast(ns3::Ipv6Address addr) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv6Address *py_Ipv6Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetMulticast(addr);
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = const_cast< ns3::MeshPointDevice* >((const ns3::MeshPointDevice*) this);
    py_Ipv6Address = PyObject_New(PyNs3Ipv6Address, &PyNs3Ipv6Address_Type);
    py_Ipv6Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv6Address->obj = new ns3::Ipv6Address(addr);
    PyNs3Ipv6Address_wrapper_registry[(void *) py_Ipv6Address->obj] = (PyObject *) py_Ipv6Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "N", py_Ipv6Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetMulticast(addr);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetMulticast(addr);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Node >
PyNs3MeshPointDevice__PythonHelper::GetNode() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3Node *tmp_Node;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNode"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetNode();
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = const_cast< ns3::MeshPointDevice* >((const ns3::MeshPointDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNode", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetNode();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Node_Type, &tmp_Node)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::GetNode();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Node  > (tmp_Node->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3MeshPointDevice__PythonHelper::IsBridge() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsBridge"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::IsBridge();
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = const_cast< ns3::MeshPointDevice* >((const ns3::MeshPointDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsBridge", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::IsBridge();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::IsBridge();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3MeshPointDevice__PythonHelper::IsBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsBroadcast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::IsBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = const_cast< ns3::MeshPointDevice* >((const ns3::MeshPointDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::IsBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::IsBroadcast();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3MeshPointDevice__PythonHelper::IsLinkUp() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsLinkUp"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::IsLinkUp();
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = const_cast< ns3::MeshPointDevice* >((const ns3::MeshPointDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsLinkUp", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::IsLinkUp();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::IsLinkUp();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3MeshPointDevice__PythonHelper::IsMulticast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::IsMulticast();
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = const_cast< ns3::MeshPointDevice* >((const ns3::MeshPointDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsMulticast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::IsMulticast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::IsMulticast();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3MeshPointDevice__PythonHelper::IsPointToPoint() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsPointToPoint"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::IsPointToPoint();
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = const_cast< ns3::MeshPointDevice* >((const ns3::MeshPointDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsPointToPoint", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::IsPointToPoint();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::IsPointToPoint();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3MeshPointDevice__PythonHelper::NeedsArp() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NeedsArp"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::NeedsArp();
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = const_cast< ns3::MeshPointDevice* >((const ns3::MeshPointDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NeedsArp", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::NeedsArp();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::NeedsArp();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3MeshPointDevice__PythonHelper::Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Send"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::Send(packet, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = (ns3::MeshPointDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Send", (char *) "NNi", py_Packet, py_Address, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::Send(packet, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::Send(packet, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3MeshPointDevice__PythonHelper::SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyNs3Address *py_Address2;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SendFrom"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = (ns3::MeshPointDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(source);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address2->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SendFrom", (char *) "NNNi", py_Packet, py_Address, py_Address2, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3MeshPointDevice__PythonHelper::SetAddress(ns3::Address a)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *py_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::MeshPointDevice::SetAddress(a);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = (ns3::MeshPointDevice*) this;
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(a);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshPointDevice__PythonHelper::SetIfIndex(uint32_t const index)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetIfIndex"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::MeshPointDevice::SetIfIndex(index);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = (ns3::MeshPointDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetIfIndex", (char *) "N", PyLong_FromUnsignedLong(index));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3MeshPointDevice__PythonHelper::SetMtu(uint16_t const mtu)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMtu"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::SetMtu(mtu);
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = (ns3::MeshPointDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMtu", (char *) "i", (int) mtu);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::SetMtu(mtu);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::SetMtu(mtu);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3MeshPointDevice__PythonHelper::SetNode(ns3::Ptr< ns3::Node > node)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetNode"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::MeshPointDevice::SetNode(node);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = (ns3::MeshPointDevice*) this;
    if (typeid(*(const_cast<ns3::Node *> (ns3::PeekPointer (node)))).name() == typeid(PyNs3Node__PythonHelper).name())
    {
        py_Node = (PyNs3Node*) (((PyNs3Node__PythonHelper*) const_cast<ns3::Node *> (ns3::PeekPointer (node)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (node)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Node *> (ns3::PeekPointer (node))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
    
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (node))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetNode", (char *) "N", py_Node);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}



bool
PyNs3MeshPointDevice__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshPointDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = const_cast< ns3::MeshPointDevice* >((const ns3::MeshPointDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshPointDevice::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshPointDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3MeshPointDevice__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3MeshPointDevice__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshPointDevice__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshPointDevice__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3MeshPointDevice__tp_init__0(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MeshPointDevice *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshPointDevice_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3MeshPointDevice_Type)
    {
        self->obj = new PyNs3MeshPointDevice__PythonHelper(*((PyNs3MeshPointDevice *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3MeshPointDevice__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MeshPointDevice(*((PyNs3MeshPointDevice *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3MeshPointDevice__tp_init__1(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3MeshPointDevice_Type)
    {
        self->obj = new PyNs3MeshPointDevice__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3MeshPointDevice__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MeshPointDevice();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3MeshPointDevice__tp_init(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MeshPointDevice__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MeshPointDevice__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MeshPointDevice_GetNInterfaces(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNInterfaces();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}



PyObject *
_wrap_PyNs3MeshPointDevice_GetMulticast__0(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *multicastGroup;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"multicastGroup", NULL};
    PyNs3Address *py_Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &multicastGroup)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetMulticast(*((PyNs3Ipv4Address *) multicastGroup)->obj)) : (self->obj->ns3::MeshPointDevice::GetMulticast(*((PyNs3Ipv4Address *) multicastGroup)->obj));
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}

PyObject *
_wrap_PyNs3MeshPointDevice_GetMulticast__1(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Ipv6Address *addr;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"addr", NULL};
    PyNs3Address *py_Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv6Address_Type, &addr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetMulticast(*((PyNs3Ipv6Address *) addr)->obj)) : (self->obj->ns3::MeshPointDevice::GetMulticast(*((PyNs3Ipv6Address *) addr)->obj));
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}

PyObject * _wrap_PyNs3MeshPointDevice_GetMulticast(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MeshPointDevice_GetMulticast__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MeshPointDevice_GetMulticast__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3MeshPointDevice_IsPointToPoint(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsPointToPoint()) : (self->obj->ns3::MeshPointDevice::IsPointToPoint());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MeshPointDevice::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_Send(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyObject *dest;
    ns3::Address dest2;
    int protocolNumber;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "dest", "protocolNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!Oi", (char **) keywords, &PyNs3Packet_Type, &packet, &dest, &protocolNumber)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Address_Type)) {
        dest2 = *((PyNs3Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv4Address_Type)) {
        dest2 = *((PyNs3Ipv4Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv6Address_Type)) {
        dest2 = *((PyNs3Ipv6Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac48Address_Type)) {
        dest2 = *((PyNs3Mac48Address *) dest)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Ipv4Address, Ipv6Address, Mac48Address), not %s", Py_TYPE(dest)->tp_name);
        return NULL;
    }
    if (protocolNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Send(ns3::Ptr< ns3::Packet  > (packet_ptr), dest2, protocolNumber)) : (self->obj->ns3::MeshPointDevice::Send(ns3::Ptr< ns3::Packet  > (packet_ptr), dest2, protocolNumber));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_GetIfIndex(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetIfIndex()) : (self->obj->ns3::MeshPointDevice::GetIfIndex());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_NeedsArp(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->NeedsArp()) : (self->obj->ns3::MeshPointDevice::NeedsArp());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_AddInterface(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NetDevice *port;
    ns3::NetDevice *port_ptr;
    const char *keywords[] = {"port", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NetDevice_Type, &port)) {
        return NULL;
    }
    port_ptr = (port ? port->obj : NULL);
    self->obj->AddInterface(ns3::Ptr< ns3::NetDevice  > (port_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_SetPromiscReceiveCallback(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl11> cb_cb_impl;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl11> (cb);
    (helper_class == NULL)? (self->obj->SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl))) : (self->obj->ns3::MeshPointDevice::SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_GetNode(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetNode()) : (self->obj->ns3::MeshPointDevice::GetNode());
    if (!(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Node__PythonHelper).name())
    {
        py_Node = reinterpret_cast< PyNs3Node* >(reinterpret_cast< PyNs3Node__PythonHelper* >(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
    
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (retval))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_SendFrom(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyObject *source;
    ns3::Address source2;
    PyObject *dest;
    ns3::Address dest2;
    int protocolNumber;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "source", "dest", "protocolNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!OOi", (char **) keywords, &PyNs3Packet_Type, &packet, &source, &dest, &protocolNumber)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (PyObject_IsInstance(source, (PyObject*) &PyNs3Address_Type)) {
        source2 = *((PyNs3Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Ipv4Address_Type)) {
        source2 = *((PyNs3Ipv4Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Ipv6Address_Type)) {
        source2 = *((PyNs3Ipv6Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Mac48Address_Type)) {
        source2 = *((PyNs3Mac48Address *) source)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Ipv4Address, Ipv6Address, Mac48Address), not %s", Py_TYPE(source)->tp_name);
        return NULL;
    }
    if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Address_Type)) {
        dest2 = *((PyNs3Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv4Address_Type)) {
        dest2 = *((PyNs3Ipv4Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv6Address_Type)) {
        dest2 = *((PyNs3Ipv6Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac48Address_Type)) {
        dest2 = *((PyNs3Mac48Address *) dest)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Ipv4Address, Ipv6Address, Mac48Address), not %s", Py_TYPE(dest)->tp_name);
        return NULL;
    }
    if (protocolNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->SendFrom(ns3::Ptr< ns3::Packet  > (packet_ptr), source2, dest2, protocolNumber)) : (self->obj->ns3::MeshPointDevice::SendFrom(ns3::Ptr< ns3::Packet  > (packet_ptr), source2, dest2, protocolNumber));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_IsBroadcast(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsBroadcast()) : (self->obj->ns3::MeshPointDevice::IsBroadcast());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_GetMtu(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    uint16_t retval;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetMtu()) : (self->obj->ns3::MeshPointDevice::GetMtu());
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_IsBridge(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsBridge()) : (self->obj->ns3::MeshPointDevice::IsBridge());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_SetRoutingProtocol(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MeshL2RoutingProtocol *protocol;
    ns3::MeshL2RoutingProtocol *protocol_ptr;
    const char *keywords[] = {"protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshL2RoutingProtocol_Type, &protocol)) {
        return NULL;
    }
    protocol_ptr = (protocol ? protocol->obj : NULL);
    self->obj->SetRoutingProtocol(ns3::Ptr< ns3::MeshL2RoutingProtocol  > (protocol_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_SetNode(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    (helper_class == NULL)? (self->obj->SetNode(ns3::Ptr< ns3::Node  > (node_ptr))) : (self->obj->ns3::MeshPointDevice::SetNode(ns3::Ptr< ns3::Node  > (node_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_GetInterfaces(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ptr< ns3::NetDevice > > retval;
    Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__ *py_std__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__;
    
    retval = self->obj->GetInterfaces();
    py_std__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__ = PyObject_New(Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__, &Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt___Type);
    py_std__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__->obj = new std::vector< ns3::Ptr< ns3::NetDevice > >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_DoDispose(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::MeshPointDevice::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_GetAddress(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetAddress()) : (self->obj->ns3::MeshPointDevice::GetAddress());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_IsLinkUp(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsLinkUp()) : (self->obj->ns3::MeshPointDevice::IsLinkUp());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_SetIfIndex(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int index;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"index", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &index)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetIfIndex(index)) : (self->obj->ns3::MeshPointDevice::SetIfIndex(index));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_SetAddress(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *a;
    ns3::Address a2;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"a", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &a)) {
        return NULL;
    }
    if (PyObject_IsInstance(a, (PyObject*) &PyNs3Address_Type)) {
        a2 = *((PyNs3Address *) a)->obj;
    } else if (PyObject_IsInstance(a, (PyObject*) &PyNs3Ipv4Address_Type)) {
        a2 = *((PyNs3Ipv4Address *) a)->obj;
    } else if (PyObject_IsInstance(a, (PyObject*) &PyNs3Ipv6Address_Type)) {
        a2 = *((PyNs3Ipv6Address *) a)->obj;
    } else if (PyObject_IsInstance(a, (PyObject*) &PyNs3Mac48Address_Type)) {
        a2 = *((PyNs3Mac48Address *) a)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Ipv4Address, Ipv6Address, Mac48Address), not %s", Py_TYPE(a)->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(a2)) : (self->obj->ns3::MeshPointDevice::SetAddress(a2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_ResetStats(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    
    self->obj->ResetStats();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_GetBroadcast(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetBroadcast()) : (self->obj->ns3::MeshPointDevice::GetBroadcast());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_GetRoutingProtocol(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::MeshL2RoutingProtocol > retval;
    PyNs3MeshL2RoutingProtocol *py_MeshL2RoutingProtocol;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetRoutingProtocol();
    if (!(const_cast<ns3::MeshL2RoutingProtocol *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MeshL2RoutingProtocol *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_MeshL2RoutingProtocol = NULL;
    } else {
        py_MeshL2RoutingProtocol = (PyNs3MeshL2RoutingProtocol *) wrapper_lookup_iter->second;
        Py_INCREF(py_MeshL2RoutingProtocol);
    }
    
    if (py_MeshL2RoutingProtocol == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::MeshL2RoutingProtocol *> (ns3::PeekPointer (retval)))), &PyNs3MeshL2RoutingProtocol_Type);
        py_MeshL2RoutingProtocol = PyObject_GC_New(PyNs3MeshL2RoutingProtocol, wrapper_type);
        py_MeshL2RoutingProtocol->inst_dict = NULL;
    
        py_MeshL2RoutingProtocol->inst_dict = NULL;
        py_MeshL2RoutingProtocol->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::MeshL2RoutingProtocol *> (ns3::PeekPointer (retval))->Ref();
        py_MeshL2RoutingProtocol->obj = const_cast<ns3::MeshL2RoutingProtocol *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_MeshL2RoutingProtocol->obj] = (PyObject *) py_MeshL2RoutingProtocol;
    }
    py_retval = Py_BuildValue((char *) "N", py_MeshL2RoutingProtocol);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_AddLinkChangeCallback(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl5> callback_cb_impl;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl5> (callback);
    (helper_class == NULL)? (self->obj->AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl))) : (self->obj->ns3::MeshPointDevice::AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_SetReceiveCallback(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl12> cb_cb_impl;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl12> (cb);
    (helper_class == NULL)? (self->obj->SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl))) : (self->obj->ns3::MeshPointDevice::SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_IsMulticast(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsMulticast()) : (self->obj->ns3::MeshPointDevice::IsMulticast());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_SetMtu(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int mtu;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"mtu", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &mtu)) {
        return NULL;
    }
    if (mtu > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->SetMtu(mtu)) : (self->obj->ns3::MeshPointDevice::SetMtu(mtu));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_SupportsSendFrom(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->SupportsSendFrom()) : (self->obj->ns3::MeshPointDevice::SupportsSendFrom());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_GetChannel(PyNs3MeshPointDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3MeshPointDevice__PythonHelper *helper_class = dynamic_cast<PyNs3MeshPointDevice__PythonHelper*> (self->obj);
    PyNs3Channel *py_Channel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetChannel()) : (self->obj->ns3::MeshPointDevice::GetChannel());
    if (!(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Channel__PythonHelper).name())
    {
        py_Channel = reinterpret_cast< PyNs3Channel* >(reinterpret_cast< PyNs3Channel__PythonHelper* >(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Channel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Channel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Channel = NULL;
        } else {
            py_Channel = (PyNs3Channel *) wrapper_lookup_iter->second;
            Py_INCREF(py_Channel);
        }
    
        if (py_Channel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))), &PyNs3Channel_Type);
            py_Channel = PyObject_GC_New(PyNs3Channel, wrapper_type);
            py_Channel->inst_dict = NULL;
    
            py_Channel->inst_dict = NULL;
            py_Channel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Channel *> (ns3::PeekPointer (retval))->Ref();
            py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Channel->obj] = (PyObject *) py_Channel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Channel);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshPointDevice_GetInterface(PyNs3MeshPointDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    unsigned int id;
    const char *keywords[] = {"id", NULL};
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &id)) {
        return NULL;
    }
    retval = self->obj->GetInterface(id);
    if (!(const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = reinterpret_cast< PyNs3NetDevice* >(reinterpret_cast< PyNs3NetDevice__PythonHelper* >(const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->inst_dict = NULL;
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_NetDevice);
    return py_retval;
}


static PyObject*
_wrap_PyNs3MeshPointDevice__copy__(PyNs3MeshPointDevice *self)
{

    PyNs3MeshPointDevice *py_copy;
    py_copy = PyObject_GC_New(PyNs3MeshPointDevice, &PyNs3MeshPointDevice_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::MeshPointDevice(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MeshPointDevice_methods[] = {
    {(char *) "GetNInterfaces", (PyCFunction) _wrap_PyNs3MeshPointDevice_GetNInterfaces, METH_NOARGS, "GetNInterfaces()\n\n" },
    {(char *) "GetMulticast", (PyCFunction) _wrap_PyNs3MeshPointDevice_GetMulticast, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsPointToPoint", (PyCFunction) _wrap_PyNs3MeshPointDevice_IsPointToPoint, METH_NOARGS, "IsPointToPoint()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MeshPointDevice_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Send", (PyCFunction) _wrap_PyNs3MeshPointDevice_Send, METH_KEYWORDS|METH_VARARGS, "Send(packet, dest, protocolNumber)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: dest: ns3::Address const &\ntype: protocolNumber: uint16_t" },
    {(char *) "GetIfIndex", (PyCFunction) _wrap_PyNs3MeshPointDevice_GetIfIndex, METH_NOARGS, "GetIfIndex()\n\n" },
    {(char *) "NeedsArp", (PyCFunction) _wrap_PyNs3MeshPointDevice_NeedsArp, METH_NOARGS, "NeedsArp()\n\n" },
    {(char *) "AddInterface", (PyCFunction) _wrap_PyNs3MeshPointDevice_AddInterface, METH_KEYWORDS|METH_VARARGS, "AddInterface(port)\n\ntype: port: ns3::Ptr< ns3::NetDevice >" },
    {(char *) "SetPromiscReceiveCallback", (PyCFunction) _wrap_PyNs3MeshPointDevice_SetPromiscReceiveCallback, METH_KEYWORDS|METH_VARARGS, "SetPromiscReceiveCallback(cb)\n\ntype: cb: ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetNode", (PyCFunction) _wrap_PyNs3MeshPointDevice_GetNode, METH_NOARGS, "GetNode()\n\n" },
    {(char *) "SendFrom", (PyCFunction) _wrap_PyNs3MeshPointDevice_SendFrom, METH_KEYWORDS|METH_VARARGS, "SendFrom(packet, source, dest, protocolNumber)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: source: ns3::Address const &\ntype: dest: ns3::Address const &\ntype: protocolNumber: uint16_t" },
    {(char *) "IsBroadcast", (PyCFunction) _wrap_PyNs3MeshPointDevice_IsBroadcast, METH_NOARGS, "IsBroadcast()\n\n" },
    {(char *) "GetMtu", (PyCFunction) _wrap_PyNs3MeshPointDevice_GetMtu, METH_NOARGS, "GetMtu()\n\n" },
    {(char *) "IsBridge", (PyCFunction) _wrap_PyNs3MeshPointDevice_IsBridge, METH_NOARGS, "IsBridge()\n\n" },
    {(char *) "SetRoutingProtocol", (PyCFunction) _wrap_PyNs3MeshPointDevice_SetRoutingProtocol, METH_KEYWORDS|METH_VARARGS, "SetRoutingProtocol(protocol)\n\ntype: protocol: ns3::Ptr< ns3::MeshL2RoutingProtocol >" },
    {(char *) "SetNode", (PyCFunction) _wrap_PyNs3MeshPointDevice_SetNode, METH_KEYWORDS|METH_VARARGS, "SetNode(node)\n\ntype: node: ns3::Ptr< ns3::Node >" },
    {(char *) "GetInterfaces", (PyCFunction) _wrap_PyNs3MeshPointDevice_GetInterfaces, METH_NOARGS, "GetInterfaces()\n\n" },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3MeshPointDevice_DoDispose, METH_NOARGS, "DoDispose()\n\n" },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3MeshPointDevice_GetAddress, METH_NOARGS, "GetAddress()\n\n" },
    {(char *) "IsLinkUp", (PyCFunction) _wrap_PyNs3MeshPointDevice_IsLinkUp, METH_NOARGS, "IsLinkUp()\n\n" },
    {(char *) "SetIfIndex", (PyCFunction) _wrap_PyNs3MeshPointDevice_SetIfIndex, METH_KEYWORDS|METH_VARARGS, "SetIfIndex(index)\n\ntype: index: uint32_t const" },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3MeshPointDevice_SetAddress, METH_KEYWORDS|METH_VARARGS, "SetAddress(a)\n\ntype: a: ns3::Address" },
    {(char *) "ResetStats", (PyCFunction) _wrap_PyNs3MeshPointDevice_ResetStats, METH_NOARGS, "ResetStats()\n\n" },
    {(char *) "GetBroadcast", (PyCFunction) _wrap_PyNs3MeshPointDevice_GetBroadcast, METH_NOARGS, "GetBroadcast()\n\n" },
    {(char *) "GetRoutingProtocol", (PyCFunction) _wrap_PyNs3MeshPointDevice_GetRoutingProtocol, METH_NOARGS, "GetRoutingProtocol()\n\n" },
    {(char *) "AddLinkChangeCallback", (PyCFunction) _wrap_PyNs3MeshPointDevice_AddLinkChangeCallback, METH_KEYWORDS|METH_VARARGS, "AddLinkChangeCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "SetReceiveCallback", (PyCFunction) _wrap_PyNs3MeshPointDevice_SetReceiveCallback, METH_KEYWORDS|METH_VARARGS, "SetReceiveCallback(cb)\n\ntype: cb: ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "IsMulticast", (PyCFunction) _wrap_PyNs3MeshPointDevice_IsMulticast, METH_NOARGS, "IsMulticast()\n\n" },
    {(char *) "SetMtu", (PyCFunction) _wrap_PyNs3MeshPointDevice_SetMtu, METH_KEYWORDS|METH_VARARGS, "SetMtu(mtu)\n\ntype: mtu: uint16_t const" },
    {(char *) "SupportsSendFrom", (PyCFunction) _wrap_PyNs3MeshPointDevice_SupportsSendFrom, METH_NOARGS, "SupportsSendFrom()\n\n" },
    {(char *) "GetChannel", (PyCFunction) _wrap_PyNs3MeshPointDevice_GetChannel, METH_NOARGS, "GetChannel()\n\n" },
    {(char *) "GetInterface", (PyCFunction) _wrap_PyNs3MeshPointDevice_GetInterface, METH_KEYWORDS|METH_VARARGS, "GetInterface(id)\n\ntype: id: uint32_t" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3MeshPointDevice__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3MeshPointDevice__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3MeshPointDevice__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MeshPointDevice__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MeshPointDevice__tp_clear(PyNs3MeshPointDevice *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::MeshPointDevice *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3MeshPointDevice__tp_traverse(PyNs3MeshPointDevice *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3MeshPointDevice__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3MeshPointDevice__tp_dealloc(PyNs3MeshPointDevice *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MeshPointDevice__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MeshPointDevice__tp_richcompare (PyNs3MeshPointDevice *PYBINDGEN_UNUSED(self), PyNs3MeshPointDevice *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MeshPointDevice_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MeshPointDevice_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.MeshPointDevice",            /* tp_name */
    sizeof(PyNs3MeshPointDevice),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MeshPointDevice__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MeshPointDevice(arg0)\nMeshPointDevice()",                        /* Documentation string */
    (traverseproc)PyNs3MeshPointDevice__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MeshPointDevice__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MeshPointDevice__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MeshPointDevice_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MeshPointDevice, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MeshPointDevice__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3MeshWifiInterfaceMac__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3MeshWifiInterfaceMac *self)
{
    PyObject *py_retval;
    PyNs3MeshWifiInterfaceMac__PythonHelper *helper = dynamic_cast< PyNs3MeshWifiInterfaceMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3MeshWifiInterfaceMac__PythonHelper::_wrap_TxOk(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *hdr;
    PyNs3MeshWifiInterfaceMac__PythonHelper *helper = dynamic_cast< PyNs3MeshWifiInterfaceMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method TxOk of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->TxOk__parent_caller(*((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3MeshWifiInterfaceMac__PythonHelper::_wrap_NotifyNewAggregate(PyNs3MeshWifiInterfaceMac *self)
{
    PyObject *py_retval;
    PyNs3MeshWifiInterfaceMac__PythonHelper *helper = dynamic_cast< PyNs3MeshWifiInterfaceMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3MeshWifiInterfaceMac__PythonHelper::_wrap_SendAddBaResponse(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MgtAddBaRequestHeader *reqHdr;
    ns3::MgtAddBaRequestHeader *reqHdr_ptr;
    PyNs3Mac48Address *originator;
    PyNs3MeshWifiInterfaceMac__PythonHelper *helper = dynamic_cast< PyNs3MeshWifiInterfaceMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"reqHdr", "originator", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3MgtAddBaRequestHeader_Type, &reqHdr, &PyNs3Mac48Address_Type, &originator)) {
        return NULL;
    }
    reqHdr_ptr = (reqHdr ? reqHdr->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method SendAddBaResponse of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->SendAddBaResponse__parent_caller(reqHdr_ptr, *((PyNs3Mac48Address *) originator)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3MeshWifiInterfaceMac__PythonHelper::_wrap_TxFailed(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *hdr;
    PyNs3MeshWifiInterfaceMac__PythonHelper *helper = dynamic_cast< PyNs3MeshWifiInterfaceMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method TxFailed of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->TxFailed__parent_caller(*((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3MeshWifiInterfaceMac__PythonHelper::_wrap_DeaggregateAmsduAndForward(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *aggregatedPacket;
    ns3::Packet *aggregatedPacket_ptr;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    PyNs3MeshWifiInterfaceMac__PythonHelper *helper = dynamic_cast< PyNs3MeshWifiInterfaceMac__PythonHelper* >(self->obj);
    const char *keywords[] = {"aggregatedPacket", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &aggregatedPacket, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    aggregatedPacket_ptr = (aggregatedPacket ? aggregatedPacket->obj : NULL);
    hdr_ptr = (hdr ? hdr->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DeaggregateAmsduAndForward of class RegularWifiMac is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DeaggregateAmsduAndForward__parent_caller(ns3::Ptr< ns3::Packet  > (aggregatedPacket_ptr), hdr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshWifiInterfaceMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::MeshWifiInterfaceMac::Enqueue(packet, to, from);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = (ns3::MeshWifiInterfaceMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(from);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNN", py_Packet, py_Mac48Address, py_Mac48Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshWifiInterfaceMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::MeshWifiInterfaceMac::Enqueue(packet, to);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = (ns3::MeshWifiInterfaceMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NN", py_Packet, py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::FinishConfigureStandard(ns3::WifiPhyStandard standard)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshWifiInterfaceMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "FinishConfigureStandard"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::MeshWifiInterfaceMac::FinishConfigureStandard(standard);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = (ns3::MeshWifiInterfaceMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "FinishConfigureStandard", (char *) "i", standard);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


bool
PyNs3MeshWifiInterfaceMac__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshWifiInterfaceMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshWifiInterfaceMac::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = const_cast< ns3::MeshWifiInterfaceMac* >((const ns3::MeshWifiInterfaceMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshWifiInterfaceMac::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MeshWifiInterfaceMac::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshWifiInterfaceMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = (ns3::MeshWifiInterfaceMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshWifiInterfaceMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = (ns3::MeshWifiInterfaceMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::Receive(ns3::Ptr< ns3::Packet > packet, ns3::WifiMacHeader const *hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MeshWifiInterfaceMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Receive"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = (ns3::MeshWifiInterfaceMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) hdr);
    if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMacHeader = NULL;
    } else {
        py_WifiMacHeader = (PyNs3WifiMacHeader *) wrapper_lookup_iter2->second;
        Py_INCREF(py_WifiMacHeader);
    }
    
    if (py_WifiMacHeader == NULL)
    {
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(*hdr);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Receive", (char *) "NN", py_Packet, py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MeshWifiInterfaceMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3MeshWifiInterfaceMac__PythonHelper::GetBasicBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBasicBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBasicBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3MeshWifiInterfaceMac__PythonHelper::SetBssid(ns3::Mac48Address bssid)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetBssid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetBssid(bssid);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(bssid);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetBssid", (char *) "N", py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetWifiPhy(phy);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiPhy = NULL;
    } else {
        py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiPhy);
    }
    
    if (py_WifiPhy == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))), &PyNs3WifiPhy_Type);
        py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
        py_WifiPhy->inst_dict = NULL;
    
        py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))->Ref();
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiPhy", (char *) "N", py_WifiPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Mac48Address
PyNs3MeshWifiInterfaceMac__PythonHelper::GetBssid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBssid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBssid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetBssid();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::SetPifs(ns3::Time pifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetPifs(pifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(pifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3MeshWifiInterfaceMac__PythonHelper::GetEifsNoDifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetEifsNoDifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetEifsNoDifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3MeshWifiInterfaceMac__PythonHelper::GetShortSlotTimeSupported() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetShortSlotTimeSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetShortSlotTimeSupported", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetShortSlotTimeSupported();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::SetPromisc()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPromisc"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetPromisc();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPromisc", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::SetShortSlotTimeSupported(bool enable)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetShortSlotTimeSupported"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetShortSlotTimeSupported(enable);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetShortSlotTimeSupported", (char *) "N", PyBool_FromLong(enable));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::SetSlot(ns3::Time slotTime)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSlot"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSlot(slotTime);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(slotTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSlot", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::SetSsid(ns3::Ssid ssid)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSsid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSsid(ssid);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(ssid);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSsid", (char *) "N", py_Ssid);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3MeshWifiInterfaceMac__PythonHelper::GetPifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetPifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3MeshWifiInterfaceMac__PythonHelper::GetRifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetRifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetRifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetRifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetCompressedBlockAckTimeout(blockAckTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCompressedBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::WifiPhy >
PyNs3MeshWifiInterfaceMac__PythonHelper::GetWifiPhy() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiPhy > retval;
    PyNs3WifiPhy *tmp_WifiPhy;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetWifiPhy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiPhy_Type, &tmp_WifiPhy)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiPhy();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiPhy  > (tmp_WifiPhy->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::SetBasicBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetBasicBlockAckTimeout(blockAckTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetBasicBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::SetCtsTimeout(ns3::Time ctsTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetCtsTimeout(ctsTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ctsTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCtsTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3MeshWifiInterfaceMac__PythonHelper::GetCtsTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCtsTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCtsTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Mac48Address
PyNs3MeshWifiInterfaceMac__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAddress();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3MeshWifiInterfaceMac__PythonHelper::GetSlot() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSlot"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSlot", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSlot();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3MeshWifiInterfaceMac__PythonHelper::SetSifs(ns3::Time sifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetSifs(sifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(sifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::SetAddress(ns3::Mac48Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetAddress(address);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(address);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *py_WifiRemoteStationManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetWifiRemoteStationManager(stationManager);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiRemoteStationManager = NULL;
    } else {
        py_WifiRemoteStationManager = (PyNs3WifiRemoteStationManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiRemoteStationManager);
    }
    
    if (py_WifiRemoteStationManager == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))), &PyNs3WifiRemoteStationManager_Type);
        py_WifiRemoteStationManager = PyObject_GC_New(PyNs3WifiRemoteStationManager, wrapper_type);
        py_WifiRemoteStationManager->inst_dict = NULL;
    
        py_WifiRemoteStationManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))->Ref();
        py_WifiRemoteStationManager->obj = const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiRemoteStationManager->obj] = (PyObject *) py_WifiRemoteStationManager;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiRemoteStationManager", (char *) "N", py_WifiRemoteStationManager);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3MeshWifiInterfaceMac__PythonHelper::GetCompressedBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCompressedBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetCompressedBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::ResetWifiPhy()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ResetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::ResetWifiPhy();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ResetWifiPhy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::SetRifs(ns3::Time rifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetRifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetRifs(rifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(rifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetRifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::SetAckTimeout(ns3::Time ackTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetAckTimeout(ackTimeout);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ackTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ssid
PyNs3MeshWifiInterfaceMac__PythonHelper::GetSsid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *tmp_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSsid"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSsid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ssid_Type, &tmp_Ssid)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSsid();
    }
    ns3::Ssid retval = *tmp_Ssid->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::SetEifsNoDifs(ns3::Time eifsNoDifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SetEifsNoDifs(eifsNoDifs);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(eifsNoDifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetEifsNoDifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3MeshWifiInterfaceMac__PythonHelper::GetAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3MeshWifiInterfaceMac__PythonHelper::GetSifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSifs"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetSifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::WifiRemoteStationManager >
PyNs3MeshWifiInterfaceMac__PythonHelper::GetWifiRemoteStationManager() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiRemoteStationManager > retval;
    PyNs3WifiRemoteStationManager *tmp_WifiRemoteStationManager;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = const_cast< ns3::RegularWifiMac* >((const ns3::RegularWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetWifiRemoteStationManager", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiRemoteStationManager_Type, &tmp_WifiRemoteStationManager)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::RegularWifiMac::GetWifiRemoteStationManager();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WifiRemoteStationManager  > (tmp_WifiRemoteStationManager->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::TxOk(ns3::WifiMacHeader const & hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "TxOk"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::TxOk(hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMacHeader->obj = new ns3::WifiMacHeader(hdr);
    PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "TxOk", (char *) "N", py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::TxFailed(ns3::WifiMacHeader const & hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "TxFailed"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::TxFailed(hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->inst_dict = NULL;
    py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMacHeader->obj = new ns3::WifiMacHeader(hdr);
    PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "TxFailed", (char *) "N", py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::DeaggregateAmsduAndForward(ns3::Ptr< ns3::Packet > aggregatedPacket, ns3::WifiMacHeader const *hdr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3WifiMacHeader *py_WifiMacHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DeaggregateAmsduAndForward"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::DeaggregateAmsduAndForward(aggregatedPacket, hdr);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) hdr);
    if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMacHeader = NULL;
    } else {
        py_WifiMacHeader = (PyNs3WifiMacHeader *) wrapper_lookup_iter2->second;
        Py_INCREF(py_WifiMacHeader);
    }
    
    if (py_WifiMacHeader == NULL)
    {
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(*hdr);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DeaggregateAmsduAndForward", (char *) "NN", py_Packet, py_WifiMacHeader);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::SendAddBaResponse(ns3::MgtAddBaRequestHeader const *reqHdr, ns3::Mac48Address originator)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::RegularWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3MgtAddBaRequestHeader *py_MgtAddBaRequestHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SendAddBaResponse"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::RegularWifiMac::SendAddBaResponse(reqHdr, originator);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = (ns3::RegularWifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) reqHdr);
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_MgtAddBaRequestHeader = NULL;
    } else {
        py_MgtAddBaRequestHeader = (PyNs3MgtAddBaRequestHeader *) wrapper_lookup_iter->second;
        Py_INCREF(py_MgtAddBaRequestHeader);
    }
    
    if (py_MgtAddBaRequestHeader == NULL)
    {
        py_MgtAddBaRequestHeader = PyObject_GC_New(PyNs3MgtAddBaRequestHeader, &PyNs3MgtAddBaRequestHeader_Type);
        py_MgtAddBaRequestHeader->inst_dict = NULL;
        py_MgtAddBaRequestHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_MgtAddBaRequestHeader->obj = new ns3::MgtAddBaRequestHeader(*reqHdr);
        PyNs3ObjectBase_wrapper_registry[(void *) py_MgtAddBaRequestHeader->obj] = (PyObject *) py_MgtAddBaRequestHeader;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(originator);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SendAddBaResponse", (char *) "NN", py_MgtAddBaRequestHeader, py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3RegularWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3MeshWifiInterfaceMac__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MeshWifiInterfaceMac__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3MeshWifiInterfaceMac__tp_init(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3MeshWifiInterfaceMac_Type)
    {
        self->obj = new PyNs3MeshWifiInterfaceMac__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3MeshWifiInterfaceMac__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MeshWifiInterfaceMac();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_GetSupportedRates(PyNs3MeshWifiInterfaceMac *self)
{
    PyObject *py_retval;
    PyNs3SupportedRates *py_SupportedRates;
    
    ns3::SupportedRates retval = self->obj->GetSupportedRates();
    py_SupportedRates = PyObject_New(PyNs3SupportedRates, &PyNs3SupportedRates_Type);
    
    py_SupportedRates->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SupportedRates->obj = new ns3::SupportedRates(retval);
    PyNs3Empty_wrapper_registry[(void *) py_SupportedRates->obj] = (PyObject *) py_SupportedRates;
    py_retval = Py_BuildValue((char *) "N", py_SupportedRates);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MeshWifiInterfaceMac::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_GetTbtt(PyNs3MeshWifiInterfaceMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetTbtt();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_SetLinkMetricCallback(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl4> cb_cb_impl;
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl4> (cb);
    self->obj->SetLinkMetricCallback(ns3::Callback<unsigned int, ns3::Mac48Address, ns3::Ptr<ns3::MeshWifiInterfaceMac>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_SupportsSendFrom(PyNs3MeshWifiInterfaceMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3MeshWifiInterfaceMac__PythonHelper *helper_class = dynamic_cast<PyNs3MeshWifiInterfaceMac__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->SupportsSendFrom()) : (self->obj->ns3::MeshWifiInterfaceMac::SupportsSendFrom());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_SetMeshPointAddress(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &arg0)) {
        return NULL;
    }
    self->obj->SetMeshPointAddress(*((PyNs3Mac48Address *) arg0)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_GetMeshPointAddress(PyNs3MeshWifiInterfaceMac *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetMeshPointAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_ShiftTbtt(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *shift;
    const char *keywords[] = {"shift", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &shift)) {
        return NULL;
    }
    self->obj->ShiftTbtt(*((PyNs3Time *) shift)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_GetPhyStandard(PyNs3MeshWifiInterfaceMac *self)
{
    PyObject *py_retval;
    ns3::WifiPhyStandard retval;
    
    retval = self->obj->GetPhyStandard();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_GetLinkMetric(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Mac48Address *peerAddress;
    const char *keywords[] = {"peerAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &peerAddress)) {
        return NULL;
    }
    retval = self->obj->GetLinkMetric(*((PyNs3Mac48Address *) peerAddress)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_CheckSupportedRates(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3SupportedRates *rates;
    const char *keywords[] = {"rates", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SupportedRates_Type, &rates)) {
        return NULL;
    }
    retval = self->obj->CheckSupportedRates(*((PyNs3SupportedRates *) rates)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_SetBeaconInterval(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *interval;
    const char *keywords[] = {"interval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &interval)) {
        return NULL;
    }
    self->obj->SetBeaconInterval(*((PyNs3Time *) interval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_Enqueue__0(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3Mac48Address *from;
    PyNs3MeshWifiInterfaceMac__PythonHelper *helper_class = dynamic_cast<PyNs3MeshWifiInterfaceMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", "from", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to, &PyNs3Mac48Address_Type, &from)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj)) : (self->obj->ns3::MeshWifiInterfaceMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_Enqueue__1(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3MeshWifiInterfaceMac__PythonHelper *helper_class = dynamic_cast<PyNs3MeshWifiInterfaceMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj)) : (self->obj->ns3::MeshWifiInterfaceMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3MeshWifiInterfaceMac_Enqueue(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MeshWifiInterfaceMac_Enqueue__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MeshWifiInterfaceMac_Enqueue__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_InstallPlugin(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MeshWifiInterfaceMacPlugin *plugin;
    ns3::MeshWifiInterfaceMacPlugin *plugin_ptr;
    const char *keywords[] = {"plugin", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MeshWifiInterfaceMacPlugin_Type, &plugin)) {
        return NULL;
    }
    plugin_ptr = (plugin ? plugin->obj : NULL);
    self->obj->InstallPlugin(ns3::Ptr< ns3::MeshWifiInterfaceMacPlugin  > (plugin_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_FinishConfigureStandard(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPhyStandard standard;
    PyNs3MeshWifiInterfaceMac__PythonHelper *helper_class = dynamic_cast<PyNs3MeshWifiInterfaceMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"standard", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &standard)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->FinishConfigureStandard(standard)) : (self->obj->ns3::MeshWifiInterfaceMac::FinishConfigureStandard(standard));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_SetRandomStartDelay(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *interval;
    const char *keywords[] = {"interval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &interval)) {
        return NULL;
    }
    self->obj->SetRandomStartDelay(*((PyNs3Time *) interval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_ResetStats(PyNs3MeshWifiInterfaceMac *self)
{
    PyObject *py_retval;
    
    self->obj->ResetStats();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_GetFrequencyChannel(PyNs3MeshWifiInterfaceMac *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetFrequencyChannel();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_SetBeaconGeneration(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable;
    const char *keywords[] = {"enable", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_enable)) {
        return NULL;
    }
    enable = (bool) PyObject_IsTrue(py_enable);
    self->obj->SetBeaconGeneration(enable);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_SendManagementFrame(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *frame;
    ns3::Packet *frame_ptr;
    PyNs3WifiMacHeader *hdr;
    const char *keywords[] = {"frame", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &frame, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    frame_ptr = (frame ? frame->obj : NULL);
    self->obj->SendManagementFrame(ns3::Ptr< ns3::Packet  > (frame_ptr), *((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_GetBeaconInterval(PyNs3MeshWifiInterfaceMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetBeaconInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_AssignStreams(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_SwitchFrequencyChannel(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int new_id;
    const char *keywords[] = {"new_id", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &new_id)) {
        return NULL;
    }
    if (new_id > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SwitchFrequencyChannel(new_id);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MeshWifiInterfaceMac_SetLinkUpCallback(PyNs3MeshWifiInterfaceMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkUp;
    ns3::Ptr<PythonCallbackImpl5> linkUp_cb_impl;
    PyNs3MeshWifiInterfaceMac__PythonHelper *helper_class = dynamic_cast<PyNs3MeshWifiInterfaceMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkUp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkUp)) {
        return NULL;
    }
    if (!PyCallable_Check(linkUp)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkUp' must be callbale");
        return NULL;
    }
    linkUp_cb_impl = ns3::Create<PythonCallbackImpl5> (linkUp);
    (helper_class == NULL)? (self->obj->SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl))) : (self->obj->ns3::MeshWifiInterfaceMac::SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3MeshWifiInterfaceMac_methods[] = {
    {(char *) "GetSupportedRates", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_GetSupportedRates, METH_NOARGS, "GetSupportedRates()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetTbtt", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_GetTbtt, METH_NOARGS, "GetTbtt()\n\n" },
    {(char *) "SetLinkMetricCallback", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_SetLinkMetricCallback, METH_KEYWORDS|METH_VARARGS, "SetLinkMetricCallback(cb)\n\ntype: cb: ns3::Callback< unsigned int, ns3::Mac48Address, ns3::Ptr< ns3::MeshWifiInterfaceMac >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "SupportsSendFrom", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_SupportsSendFrom, METH_NOARGS, "SupportsSendFrom()\n\n" },
    {(char *) "SetMeshPointAddress", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_SetMeshPointAddress, METH_KEYWORDS|METH_VARARGS, "SetMeshPointAddress(arg0)\n\ntype: arg0: ns3::Mac48Address" },
    {(char *) "GetMeshPointAddress", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_GetMeshPointAddress, METH_NOARGS, "GetMeshPointAddress()\n\n" },
    {(char *) "ShiftTbtt", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_ShiftTbtt, METH_KEYWORDS|METH_VARARGS, "ShiftTbtt(shift)\n\ntype: shift: ns3::Time" },
    {(char *) "GetPhyStandard", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_GetPhyStandard, METH_NOARGS, "GetPhyStandard()\n\n" },
    {(char *) "GetLinkMetric", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_GetLinkMetric, METH_KEYWORDS|METH_VARARGS, "GetLinkMetric(peerAddress)\n\ntype: peerAddress: ns3::Mac48Address" },
    {(char *) "CheckSupportedRates", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_CheckSupportedRates, METH_KEYWORDS|METH_VARARGS, "CheckSupportedRates(rates)\n\ntype: rates: ns3::SupportedRates" },
    {(char *) "SetBeaconInterval", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_SetBeaconInterval, METH_KEYWORDS|METH_VARARGS, "SetBeaconInterval(interval)\n\ntype: interval: ns3::Time" },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_Enqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "InstallPlugin", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_InstallPlugin, METH_KEYWORDS|METH_VARARGS, "InstallPlugin(plugin)\n\ntype: plugin: ns3::Ptr< ns3::MeshWifiInterfaceMacPlugin >" },
    {(char *) "FinishConfigureStandard", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_FinishConfigureStandard, METH_KEYWORDS|METH_VARARGS, "FinishConfigureStandard(standard)\n\ntype: standard: ns3::WifiPhyStandard" },
    {(char *) "SetRandomStartDelay", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_SetRandomStartDelay, METH_KEYWORDS|METH_VARARGS, "SetRandomStartDelay(interval)\n\ntype: interval: ns3::Time" },
    {(char *) "ResetStats", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_ResetStats, METH_NOARGS, "ResetStats()\n\n" },
    {(char *) "GetFrequencyChannel", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_GetFrequencyChannel, METH_NOARGS, "GetFrequencyChannel()\n\n" },
    {(char *) "SetBeaconGeneration", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_SetBeaconGeneration, METH_KEYWORDS|METH_VARARGS, "SetBeaconGeneration(enable)\n\ntype: enable: bool" },
    {(char *) "SendManagementFrame", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_SendManagementFrame, METH_KEYWORDS|METH_VARARGS, "SendManagementFrame(frame, hdr)\n\ntype: frame: ns3::Ptr< ns3::Packet >\ntype: hdr: ns3::WifiMacHeader const &" },
    {(char *) "GetBeaconInterval", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_GetBeaconInterval, METH_NOARGS, "GetBeaconInterval()\n\n" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {(char *) "SwitchFrequencyChannel", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_SwitchFrequencyChannel, METH_KEYWORDS|METH_VARARGS, "SwitchFrequencyChannel(new_id)\n\ntype: new_id: uint16_t" },
    {(char *) "SetLinkUpCallback", (PyCFunction) _wrap_PyNs3MeshWifiInterfaceMac_SetLinkUpCallback, METH_KEYWORDS|METH_VARARGS, "SetLinkUpCallback(linkUp)\n\ntype: linkUp: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3MeshWifiInterfaceMac__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "TxOk", (PyCFunction) PyNs3MeshWifiInterfaceMac__PythonHelper::_wrap_TxOk, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3MeshWifiInterfaceMac__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "SendAddBaResponse", (PyCFunction) PyNs3MeshWifiInterfaceMac__PythonHelper::_wrap_SendAddBaResponse, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TxFailed", (PyCFunction) PyNs3MeshWifiInterfaceMac__PythonHelper::_wrap_TxFailed, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DeaggregateAmsduAndForward", (PyCFunction) PyNs3MeshWifiInterfaceMac__PythonHelper::_wrap_DeaggregateAmsduAndForward, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MeshWifiInterfaceMac__tp_clear(PyNs3MeshWifiInterfaceMac *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::MeshWifiInterfaceMac *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3MeshWifiInterfaceMac__tp_traverse(PyNs3MeshWifiInterfaceMac *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3MeshWifiInterfaceMac__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3MeshWifiInterfaceMac__tp_dealloc(PyNs3MeshWifiInterfaceMac *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MeshWifiInterfaceMac__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MeshWifiInterfaceMac__tp_richcompare (PyNs3MeshWifiInterfaceMac *PYBINDGEN_UNUSED(self), PyNs3MeshWifiInterfaceMac *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MeshWifiInterfaceMac_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MeshWifiInterfaceMac_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.MeshWifiInterfaceMac",            /* tp_name */
    sizeof(PyNs3MeshWifiInterfaceMac),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MeshWifiInterfaceMac__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MeshWifiInterfaceMac()",                        /* Documentation string */
    (traverseproc)PyNs3MeshWifiInterfaceMac__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MeshWifiInterfaceMac__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MeshWifiInterfaceMac__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MeshWifiInterfaceMac_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MeshWifiInterfaceMac, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MeshWifiInterfaceMac__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- containers --- */



static void
Pyns3__WifiModeListIter__tp_clear(Pyns3__WifiModeListIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pyns3__WifiModeListIter__tp_traverse(Pyns3__WifiModeListIter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pyns3__WifiModeList__tp_dealloc(Pyns3__WifiModeList *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pyns3__WifiModeListIter__tp_dealloc(Pyns3__WifiModeListIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pyns3__WifiModeList__tp_iter(Pyns3__WifiModeList *self)
{
    Pyns3__WifiModeListIter *iter = PyObject_GC_New(Pyns3__WifiModeListIter, &Pyns3__WifiModeListIter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new ns3::WifiModeList::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pyns3__WifiModeListIter__tp_iter(Pyns3__WifiModeListIter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pyns3__WifiModeListIter__tp_iternext(Pyns3__WifiModeListIter *self)
{
    PyObject *py_retval;
    ns3::WifiModeList::iterator iter;
    PyNs3WifiMode *py_WifiMode;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode((*iter));
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}

int _wrap_convert_py2c__ns3__WifiMode(PyObject *value, ns3::WifiMode *address)
{
    PyObject *py_retval;
    PyNs3WifiMode *tmp_WifiMode;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiMode_Type, &tmp_WifiMode)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_WifiMode->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__ns3__WifiModeList(PyObject *arg, ns3::WifiModeList *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pyns3__WifiModeList_Type)) {
        *container = *((Pyns3__WifiModeList*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::WifiMode item;
            if (!_wrap_convert_py2c__ns3__WifiMode(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Ns3__WifiModeList instance, or a list of ns3::WifiMode");
        return 0;
    }
    return 1;
}


static int
_wrap_Pyns3__WifiModeList__tp_init(Pyns3__WifiModeList *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new ns3::WifiModeList;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__ns3__WifiModeList(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pyns3__WifiModeList_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.Ns3__WifiModeList",            /* tp_name */
    sizeof(Pyns3__WifiModeList),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__WifiModeList__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__WifiModeList__tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pyns3__WifiModeList__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pyns3__WifiModeListIter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.Ns3__WifiModeListIter",            /* tp_name */
    sizeof(Pyns3__WifiModeListIter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__WifiModeListIter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pyns3__WifiModeListIter__tp_traverse,     /* tp_traverse */
    (inquiry)Pyns3__WifiModeListIter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__WifiModeListIter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pyns3__WifiModeListIter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___unsigned_int___gt__Iter__tp_clear(Pystd__vector__lt___unsigned_int___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___unsigned_int___gt__Iter__tp_traverse(Pystd__vector__lt___unsigned_int___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___unsigned_int___gt____tp_dealloc(Pystd__vector__lt___unsigned_int___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_dealloc(Pystd__vector__lt___unsigned_int___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___unsigned_int___gt____tp_iter(Pystd__vector__lt___unsigned_int___gt__ *self)
{
    Pystd__vector__lt___unsigned_int___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___unsigned_int___gt__Iter, &Pystd__vector__lt___unsigned_int___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< unsigned int >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_iter(Pystd__vector__lt___unsigned_int___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_iternext(Pystd__vector__lt___unsigned_int___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< unsigned int >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong((*iter)));
    return py_retval;
}

int _wrap_convert_py2c__unsigned_int(PyObject *value, unsigned int *address)
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &*address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___unsigned_int___gt__(PyObject *arg, std::vector< unsigned int > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___unsigned_int___gt___Type)) {
        *container = *((Pystd__vector__lt___unsigned_int___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            unsigned int item;
            if (!_wrap_convert_py2c__unsigned_int(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___unsigned_int___gt__ instance, or a list of unsigned int");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___unsigned_int___gt____tp_init(Pystd__vector__lt___unsigned_int___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< unsigned int >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___unsigned_int___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___unsigned_int___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.Std__vector__lt___unsigned_int___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___unsigned_int___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___unsigned_int___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___unsigned_int___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___unsigned_int___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___unsigned_int___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.Std__vector__lt___unsigned_int___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___unsigned_int___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___unsigned_int___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___unsigned_int___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_clear(Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_traverse(Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt____tp_dealloc(Pystd__map__lt___ns3__Mac48Address__bool___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_dealloc(Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt____tp_iter(Pystd__map__lt___ns3__Mac48Address__bool___gt__ *self)
{
    Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter *iter = PyObject_GC_New(Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter, &Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::map< ns3::Mac48Address, bool >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_iter(Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_iternext(Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter *self)
{
    PyObject *py_retval;
    std::map< ns3::Mac48Address, bool >::iterator iter;
    PyNs3Mac48Address *py_Mac48Address;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(iter->first);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "NN", py_Mac48Address, PyBool_FromLong(iter->second));
    return py_retval;
}

int _wrap_convert_py2c__bool(PyObject *value, bool *address)
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__map__lt___ns3__Mac48Address__bool___gt__(PyObject *arg, std::map< ns3::Mac48Address, bool > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__map__lt___ns3__Mac48Address__bool___gt___Type)) {
        *container = *((Pystd__map__lt___ns3__Mac48Address__bool___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            PyObject *tup = PyList_GET_ITEM(arg, i);
            if (!PyTuple_Check(tup) || PyTuple_Size(tup) != 2) {
                PyErr_SetString(PyExc_TypeError, "items must be tuples with two elements");
                return 0;
            }
            std::pair< ns3::Mac48Address, bool > item;
            if (!_wrap_convert_py2c__ns3__Mac48Address(PyTuple_GET_ITEM(tup, 0), &item.first)) {
                return 0;
            }
            if (!_wrap_convert_py2c__bool(PyTuple_GET_ITEM(tup, 1), &item.second)) {
                return 0;
            }
            container->insert(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__map__lt___ns3__Mac48Address__bool___gt__ instance, or a list of bool");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt____tp_init(Pystd__map__lt___ns3__Mac48Address__bool___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::map< ns3::Mac48Address, bool >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__map__lt___ns3__Mac48Address__bool___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__map__lt___ns3__Mac48Address__bool___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.Std__map__lt___ns3__Mac48Address__bool___gt__",            /* tp_name */
    sizeof(Pystd__map__lt___ns3__Mac48Address__bool___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.Std__map__lt___ns3__Mac48Address__bool___gt__Iter",            /* tp_name */
    sizeof(Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter__tp_clear(Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter__tp_traverse(Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt____tp_dealloc(Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt____tp_iter(Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__ *self)
{
    Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter, &Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::Ptr< ns3::NetDevice > >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter__tp_iter(Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter__tp_iternext(Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ptr< ns3::NetDevice > >::iterator iter;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    if (!(const_cast<ns3::NetDevice *> (ns3::PeekPointer ((*iter))))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer ((*iter))))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = reinterpret_cast< PyNs3NetDevice* >(reinterpret_cast< PyNs3NetDevice__PythonHelper* >(const_cast<ns3::NetDevice *> (ns3::PeekPointer ((*iter))))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer ((*iter)));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer ((*iter))));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer ((*iter))))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->inst_dict = NULL;
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer ((*iter)))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer ((*iter)));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_NetDevice);
    return py_retval;
}

int _wrap_convert_py2c__ns3__Ptr__lt___ns3__NetDevice___gt__(PyObject *value, ns3::Ptr< ns3::NetDevice > *address)
{
    PyObject *py_retval;
    PyNs3NetDevice *tmp_NetDevice;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NetDevice_Type, &tmp_NetDevice)) {
        Py_DECREF(py_retval);
        return 0;
    }
    // dangerous!
    *address = ns3::Ptr< ns3::NetDevice  > (tmp_NetDevice->obj);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::NetDevice > > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::Ptr< ns3::NetDevice > item;
            if (!_wrap_convert_py2c__ns3__Ptr__lt___ns3__NetDevice___gt__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__ instance, or a list of ns3::Ptr< ns3::NetDevice >");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt____tp_init(Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::Ptr< ns3::NetDevice > >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.Std__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "mesh.Std__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- enumerations --- */





































































#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef mesh_moduledef = {
    PyModuleDef_HEAD_INIT,
    "mesh",
    NULL,
    -1,
    mesh_functions,
};
#endif


#if PY_VERSION_HEX >= 0x03000000
    #define MOD_ERROR NULL
    #define MOD_INIT(name) PyObject* PyInit_##name(void)
    #define MOD_RETURN(val) val
#else
    #define MOD_ERROR
    #define MOD_INIT(name) void init##name(void)
    #define MOD_RETURN(val)
#endif
#if defined(__cplusplus)
extern "C"
#endif
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif


MOD_INIT(mesh)
{
    PyObject *m;
    PyObject *submodule;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&mesh_moduledef);
    #else
    m = Py_InitModule3((char *) "mesh", mesh_functions, NULL);
    #endif
    if (m == NULL) {
        return MOD_ERROR;
    }
    PyModule_AddIntConstant(m, (char *) "STD_IOS_IN", std::ios::in);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_OUT", std::ios::out);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_ATE", std::ios::ate);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_APP", std::ios::app);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_TRUNC", std::ios::trunc);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_BINARY", std::ios::binary);
    /* Import the 'ns3::Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AsciiTraceHelper' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AsciiTraceHelper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AsciiTraceHelper");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3AsciiTraceHelper_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3AsciiTraceHelper_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3AsciiTraceHelper_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AsciiTraceHelperForDevice' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AsciiTraceHelperForDevice_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AsciiTraceHelperForDevice");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3AsciiTraceHelperForDevice_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3AsciiTraceHelperForDevice_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3AsciiTraceHelperForDevice_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AttributeConstructionList' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeConstructionList_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeConstructionList");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3AttributeConstructionList_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3AttributeConstructionList_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3AttributeConstructionList_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AttributeConstructionList::Item' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeConstructionListItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3AttributeConstructionListItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3AttributeConstructionListItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3AttributeConstructionListItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Bar' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Bar_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Bar");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Bar_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Bar_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Bar_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::BlockAckAgreement' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BlockAckAgreement_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "BlockAckAgreement");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3BlockAckAgreement_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3BlockAckAgreement_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3BlockAckAgreement_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::BlockAckManager' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BlockAckManager_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "BlockAckManager");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3BlockAckManager_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3BlockAckManager_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3BlockAckManager_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Buffer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Buffer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Buffer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Buffer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Buffer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Buffer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Buffer::Iterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BufferIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Iterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3BufferIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3BufferIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3BufferIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagIterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ByteTagIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagIterator::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagIteratorItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagIteratorItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagIteratorItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagIteratorItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagList' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagList_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ByteTagList");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagList_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagList_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagList_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagList::Iterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagListIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Iterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagListIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagListIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagListIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagList::Iterator::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagListIteratorItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagListIteratorItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagListIteratorItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagListIteratorItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::CallbackBase' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3CallbackBase_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3CallbackBase_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3CallbackBase_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::CapabilityInformation' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CapabilityInformation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CapabilityInformation");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3CapabilityInformation_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3CapabilityInformation_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3CapabilityInformation_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::EventId' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EventId_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EventId");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3EventId_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3EventId_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3EventId_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Hasher' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Hasher_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Hasher");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Hasher_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Hasher_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Hasher_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::InterferenceHelper' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3InterferenceHelper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "InterferenceHelper");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3InterferenceHelper_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3InterferenceHelper_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3InterferenceHelper_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::InterferenceHelper::SnrPer' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3InterferenceHelperSnrPer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SnrPer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3InterferenceHelperSnrPer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3InterferenceHelperSnrPer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3InterferenceHelperSnrPer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv4Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv4Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv4Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv4Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv4Mask' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4Mask_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4Mask");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv4Mask_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv4Mask_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv4Mask_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv6Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv6Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv6Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv6Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv6Prefix' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6Prefix_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6Prefix");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv6Prefix_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv6Prefix_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv6Prefix_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Mac48Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Mac48Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Mac48Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Mac48Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Mac48Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Mac48Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::NetDeviceContainer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NetDeviceContainer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NetDeviceContainer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3NetDeviceContainer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3NetDeviceContainer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3NetDeviceContainer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::NodeContainer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NodeContainer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NodeContainer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3NodeContainer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3NodeContainer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3NodeContainer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ObjectBase' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectBase_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectBase_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectBase_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ObjectDeleter' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectDeleter_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectDeleter");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectDeleter_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectDeleter_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectDeleter_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ObjectFactory' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectFactory_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectFactory");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectFactory_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectFactory_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectFactory_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::OriginatorBlockAckAgreement' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3OriginatorBlockAckAgreement_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "OriginatorBlockAckAgreement");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::PacketMetadata' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketMetadata_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketMetadata");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketMetadata_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketMetadata_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketMetadata_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketMetadata::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketMetadataItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketMetadataItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketMetadataItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketMetadataItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketMetadata::ItemIterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketMetadataItemIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ItemIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketMetadataItemIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketMetadataItemIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketMetadataItemIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagIterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketTagIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagIterator::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagIteratorItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagIteratorItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagIteratorItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagIteratorItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagList' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagList_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketTagList");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagList_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagList_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagList_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagList::TagData' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagListTagData_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TagData");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagListTagData_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagListTagData_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagListTagData_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PcapFile' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PcapFile_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PcapFile");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PcapFile_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PcapFile_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PcapFile_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PcapHelper' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PcapHelper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PcapHelper");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PcapHelper_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PcapHelper_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PcapHelper_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PcapHelperForDevice' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PcapHelperForDevice_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PcapHelperForDevice");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PcapHelperForDevice_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PcapHelperForDevice_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PcapHelperForDevice_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Simulator' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Simulator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Simulator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Simulator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Simulator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Simulator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::StatusCode' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3StatusCode_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "StatusCode");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3StatusCode_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3StatusCode_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3StatusCode_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Tag' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Tag_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Tag");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TagBuffer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TagBuffer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TagBuffer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TagBuffer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TagBuffer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TagBuffer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TimeWithUnit' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TimeWithUnit_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TimeWithUnit");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TimeWithUnit_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TimeWithUnit_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TimeWithUnit_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TracedValue< unsigned int >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TracedValue__Unsigned_int_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TracedValue__Unsigned_int");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TracedValue__Unsigned_int_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TracedValue__Unsigned_int_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TracedValue__Unsigned_int_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TypeId' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeId_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TypeId");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TypeId_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TypeId_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TypeId_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TypeId::AttributeInformation' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdAttributeInformation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeInformation");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TypeIdAttributeInformation_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TypeIdAttributeInformation_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TypeIdAttributeInformation_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TypeId::TraceSourceInformation' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdTraceSourceInformation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TraceSourceInformation");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TypeIdTraceSourceInformation_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TypeIdTraceSourceInformation_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TypeIdTraceSourceInformation_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Vector2D' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector2D_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector2D");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Vector2D_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Vector2D_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Vector2D_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Vector3D' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector3D_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector3D");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Vector3D_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Vector3D_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Vector3D_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiHelper' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiHelper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiHelper");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiHelper_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiHelper_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiHelper_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiMacHelper' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiMacHelper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiMacHelper");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiMacHelper_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiMacHelper_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiMacHelper_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiMode' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiMode_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiMode");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiMode_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiMode_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiMode_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiModeFactory' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiModeFactory_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiModeFactory");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiModeFactory_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiModeFactory_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiModeFactory_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiPhyHelper' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiPhyHelper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiPhyHelper");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiPhyListener' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiPhyListener_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiPhyListener");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiPhyListener_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiPhyListener_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiPhyListener_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiRemoteStation' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiRemoteStation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiRemoteStation");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiRemoteStation_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiRemoteStation_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiRemoteStation_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiRemoteStationInfo' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiRemoteStationInfo_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiRemoteStationInfo");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiRemoteStationInfo_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiRemoteStationInfo_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiRemoteStationInfo_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiRemoteStationState' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiRemoteStationState_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiRemoteStationState");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiRemoteStationState_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiRemoteStationState_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiRemoteStationState_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiTxVector' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiTxVector_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiTxVector");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiTxVector_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiTxVector_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiTxVector_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::empty' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Empty_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Empty_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Empty_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::int64x64_t' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Int64x64_t_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "int64x64_t");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Int64x64_t_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Int64x64_t_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Int64x64_t_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::mpduInfo' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3MpduInfo_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "mpduInfo");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3MpduInfo_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3MpduInfo_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3MpduInfo_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::signalNoiseDbm' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SignalNoiseDbm_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "signalNoiseDbm");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SignalNoiseDbm_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3SignalNoiseDbm_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3SignalNoiseDbm_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Chunk' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Chunk_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Chunk");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Header' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Header_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Header");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::MgtAddBaRequestHeader' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3MgtAddBaRequestHeader_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MgtAddBaRequestHeader");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::MgtAddBaResponseHeader' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3MgtAddBaResponseHeader_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MgtAddBaResponseHeader");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::MgtAssocRequestHeader' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3MgtAssocRequestHeader_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MgtAssocRequestHeader");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::MgtAssocResponseHeader' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3MgtAssocResponseHeader_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MgtAssocResponseHeader");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::MgtDelBaHeader' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3MgtDelBaHeader_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MgtDelBaHeader");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::MgtProbeRequestHeader' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3MgtProbeRequestHeader_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MgtProbeRequestHeader");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::MgtProbeResponseHeader' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3MgtProbeResponseHeader_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MgtProbeResponseHeader");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Object' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Object_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Object");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Object::AggregateIterator' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectAggregateIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AggregateIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectAggregateIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectAggregateIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectAggregateIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PcapFileWrapper' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PcapFileWrapper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PcapFileWrapper");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::RandomVariableStream' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3RandomVariableStream_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "RandomVariableStream");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SequentialRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SequentialRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SequentialRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::InterferenceHelper::Event, ns3::empty, ns3::DefaultDeleter<ns3::InterferenceHelper::Event> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::InterferenceHelper::Event, ns3::empty, ns3::DefaultDeleter<ns3::InterferenceHelper::Event> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Time' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Time_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Time");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Time_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Time_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Time_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TraceSourceAccessor' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TraceSourceAccessor_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TraceSourceAccessor");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Trailer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Trailer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Trailer");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TriangularRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TriangularRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TriangularRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::UniformRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3UniformRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "UniformRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WeibullRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WeibullRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WeibullRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiActionHeader' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiActionHeader_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiActionHeader");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiActionHeader::ActionValue' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiActionHeaderActionValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ActionValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiActionHeaderActionValue_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiActionHeaderActionValue_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiActionHeaderActionValue_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiInformationElement' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiInformationElement_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiInformationElement");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiInformationElementVector' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiInformationElementVector_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiInformationElementVector");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiMac' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiMac_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiMac");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiMacHeader' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiMacHeader_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiMacHeader");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiPhy' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiPhy_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiPhy");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiRemoteStationManager' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiRemoteStationManager_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiRemoteStationManager");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ZetaRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ZetaRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ZetaRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ZipfRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ZipfRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ZipfRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AttributeAccessor' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeAccessor_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeAccessor");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AttributeChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AttributeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::BooleanChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BooleanChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "BooleanChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::BooleanValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BooleanValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "BooleanValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImplBase' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImplBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImplBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Channel' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Channel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Channel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ConstantRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ConstantRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ConstantRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CtrlBAckRequestHeader' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CtrlBAckRequestHeader_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CtrlBAckRequestHeader");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CtrlBAckResponseHeader' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CtrlBAckResponseHeader_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CtrlBAckResponseHeader");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Dcf' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Dcf_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Dcf");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::DeterministicRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DeterministicRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DeterministicRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::DoubleValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DoubleValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DoubleValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::DsssParameterSet' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DsssParameterSet_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DsssParameterSet");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::DsssParameterSetChecker' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DsssParameterSetChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DsssParameterSetChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::DsssParameterSetValue' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DsssParameterSetValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DsssParameterSetValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EdcaParameterSet' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EdcaParameterSet_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EdcaParameterSet");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EdcaParameterSetChecker' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EdcaParameterSetChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EdcaParameterSetChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EdcaParameterSetValue' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EdcaParameterSetValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EdcaParameterSetValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EdcaTxopN' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EdcaTxopN_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EdcaTxopN");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmpiricalRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmpiricalRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmpiricalRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmptyAttributeAccessor' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmptyAttributeAccessor_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmptyAttributeAccessor");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmptyAttributeChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmptyAttributeChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmptyAttributeChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmptyAttributeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmptyAttributeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmptyAttributeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EnumChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EnumChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EnumChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EnumValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EnumValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EnumValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ErlangRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ErlangRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ErlangRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ErpInformation' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ErpInformation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ErpInformation");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ErpInformationChecker' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ErpInformationChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ErpInformationChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ErpInformationValue' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ErpInformationValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ErpInformationValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ErrorRateModel' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ErrorRateModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ErrorRateModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EventImpl' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EventImpl_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EventImpl");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ExponentialRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ExponentialRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ExponentialRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ExtendedSupportedRatesIE' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ExtendedSupportedRatesIE_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ExtendedSupportedRatesIE");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::GammaRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3GammaRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "GammaRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::HtCapabilities' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3HtCapabilities_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "HtCapabilities");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::HtCapabilitiesChecker' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3HtCapabilitiesChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "HtCapabilitiesChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::HtCapabilitiesValue' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3HtCapabilitiesValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "HtCapabilitiesValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::HtOperations' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3HtOperations_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "HtOperations");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::HtOperationsChecker' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3HtOperationsChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "HtOperationsChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::HtOperationsValue' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3HtOperationsValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "HtOperationsValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::IntegerValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3IntegerValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "IntegerValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4MaskChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4MaskChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4MaskChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4MaskValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4MaskValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4MaskValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6PrefixChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6PrefixChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6PrefixChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6PrefixValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6PrefixValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6PrefixValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::LogNormalRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3LogNormalRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "LogNormalRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Mac48AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Mac48AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Mac48AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Mac48AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Mac48AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Mac48AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::MgtBeaconHeader' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3MgtBeaconHeader_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MgtBeaconHeader");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::MobilityModel' class from module 'ns.mobility' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.mobility");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3MobilityModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MobilityModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NetDevice' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NetDevice_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NetDevice");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NetDeviceQueue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NetDeviceQueue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NetDeviceQueue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NetDeviceQueueInterface' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NetDeviceQueueInterface_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NetDeviceQueueInterface");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NixVector' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NixVector_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NixVector");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Node' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Node_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Node");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NormalRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NormalRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NormalRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ObjectFactoryChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectFactoryChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectFactoryChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ObjectFactoryValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectFactoryValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectFactoryValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::OutputStreamWrapper' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3OutputStreamWrapper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "OutputStreamWrapper");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Packet' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Packet_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Packet");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ParetoRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ParetoRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ParetoRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::QueueItem' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3QueueItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "QueueItem");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::RegularWifiMac' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3RegularWifiMac_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "RegularWifiMac");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ssid' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ssid_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ssid");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SsidChecker' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SsidChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SsidChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SsidValue' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SsidValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SsidValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SupportedRates' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SupportedRates_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SupportedRates");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TimeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TimeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TimeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TypeIdChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TypeIdChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TypeIdValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TypeIdValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::UintegerValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3UintegerValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "UintegerValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Vector2DChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector2DChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector2DChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Vector2DValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector2DValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector2DValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Vector3DChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector3DChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector3DChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Vector3DValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector3DValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector3DValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::VhtCapabilities' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3VhtCapabilities_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "VhtCapabilities");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::VhtCapabilitiesChecker' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3VhtCapabilitiesChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "VhtCapabilitiesChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::VhtCapabilitiesValue' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3VhtCapabilitiesValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "VhtCapabilitiesValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiChannel' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiChannel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiChannel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiModeChecker' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiModeChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiModeChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiModeValue' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiModeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiModeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::BridgeChannel' class from module 'ns.bridge' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.bridge");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BridgeChannel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "BridgeChannel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::DcaTxop' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DcaTxop_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DcaTxop");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    PyModule_AddObject(m, (char *) "_PyNs3MeshHelper_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3MeshHelper_wrapper_registry, NULL));
    /* Register the 'ns3::MeshHelper' class */
    if (PyType_Ready(&PyNs3MeshHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MeshHelper", (PyObject *) &PyNs3MeshHelper_Type);
    PyModule_AddObject(m, (char *) "_PyNs3MeshWifiBeacon_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3MeshWifiBeacon_wrapper_registry, NULL));
    /* Register the 'ns3::MeshWifiBeacon' class */
    if (PyType_Ready(&PyNs3MeshWifiBeacon_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MeshWifiBeacon", (PyObject *) &PyNs3MeshWifiBeacon_Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::MeshWifiInterfaceMacPlugin, ns3::empty, ns3::DefaultDeleter<ns3::MeshWifiInterfaceMacPlugin> >), &PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::MeshWifiInterfaceMacPlugin, ns3::empty, ns3::DefaultDeleter<ns3::MeshWifiInterfaceMacPlugin> >' class */
    PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::dot11s::DestinationAddressUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::DestinationAddressUnit> >), &PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::dot11s::DestinationAddressUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::DestinationAddressUnit> >' class */
    PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3Dot11sDestinationAddressUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sDestinationAddressUnit__gt___Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::dot11s::IeBeaconTimingUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::IeBeaconTimingUnit> >), &PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::dot11s::IeBeaconTimingUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::IeBeaconTimingUnit> >' class */
    PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Type);
    /* Register the 'ns3::MeshInformationElementVector' class */
    PyNs3MeshInformationElementVector_Type.tp_base = &PyNs3WifiInformationElementVector_Type;
    if (PyType_Ready(&PyNs3MeshInformationElementVector_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MeshInformationElementVector", (PyObject *) &PyNs3MeshInformationElementVector_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MeshL2RoutingProtocol), &PyNs3MeshL2RoutingProtocol_Type);
    /* Register the 'ns3::MeshL2RoutingProtocol' class */
    PyNs3MeshL2RoutingProtocol_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3MeshL2RoutingProtocol_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MeshL2RoutingProtocol", (PyObject *) &PyNs3MeshL2RoutingProtocol_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MeshStack), &PyNs3MeshStack_Type);
    /* Register the 'ns3::MeshStack' class */
    PyNs3MeshStack_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3MeshStack_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MeshStack", (PyObject *) &PyNs3MeshStack_Type);
    PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____typeid_map.register_wrapper(typeid(ns3::MeshWifiInterfaceMacPlugin), &PyNs3MeshWifiInterfaceMacPlugin_Type);
    /* Register the 'ns3::MeshWifiInterfaceMacPlugin' class */
    PyNs3MeshWifiInterfaceMacPlugin_Type.tp_base = &PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Type;
    if (PyType_Ready(&PyNs3MeshWifiInterfaceMacPlugin_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MeshWifiInterfaceMacPlugin", (PyObject *) &PyNs3MeshWifiInterfaceMacPlugin_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Dot11sStack), &PyNs3Dot11sStack_Type);
    /* Register the 'ns3::Dot11sStack' class */
    PyNs3Dot11sStack_Type.tp_base = &PyNs3MeshStack_Type;
    if (PyType_Ready(&PyNs3Dot11sStack_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Dot11sStack", (PyObject *) &PyNs3Dot11sStack_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::FlameStack), &PyNs3FlameStack_Type);
    /* Register the 'ns3::FlameStack' class */
    PyNs3FlameStack_Type.tp_base = &PyNs3MeshStack_Type;
    if (PyType_Ready(&PyNs3FlameStack_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "FlameStack", (PyObject *) &PyNs3FlameStack_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MeshPointDevice), &PyNs3MeshPointDevice_Type);
    /* Register the 'ns3::MeshPointDevice' class */
    PyNs3MeshPointDevice_Type.tp_base = &PyNs3NetDevice_Type;
    if (PyType_Ready(&PyNs3MeshPointDevice_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MeshPointDevice", (PyObject *) &PyNs3MeshPointDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MeshWifiInterfaceMac), &PyNs3MeshWifiInterfaceMac_Type);
    /* Register the 'ns3::MeshWifiInterfaceMac' class */
    PyNs3MeshWifiInterfaceMac_Type.tp_base = &PyNs3RegularWifiMac_Type;
    if (PyType_Ready(&PyNs3MeshWifiInterfaceMac_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MeshWifiInterfaceMac", (PyObject *) &PyNs3MeshWifiInterfaceMac_Type);
    /* Register the 'ns3::WifiModeList' class */
    if (PyType_Ready(&Pyns3__WifiModeList_Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pyns3__WifiModeListIter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Ns3__WifiModeList", (PyObject *) &Pyns3__WifiModeList_Type);
    PyModule_AddObject(m, (char *) "Ns3__WifiModeListIter", (PyObject *) &Pyns3__WifiModeListIter_Type);
    /* Register the 'std::vector< unsigned int >' class */
    if (PyType_Ready(&Pystd__vector__lt___unsigned_int___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt___unsigned_int___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___unsigned_int___gt__", (PyObject *) &Pystd__vector__lt___unsigned_int___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___unsigned_int___gt__Iter", (PyObject *) &Pystd__vector__lt___unsigned_int___gt__Iter_Type);
    /* Register the 'std::map< ns3::Mac48Address, bool >' class */
    if (PyType_Ready(&Pystd__map__lt___ns3__Mac48Address__bool___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__map__lt___ns3__Mac48Address__bool___gt__", (PyObject *) &Pystd__map__lt___ns3__Mac48Address__bool___gt___Type);
    PyModule_AddObject(m, (char *) "Std__map__lt___ns3__Mac48Address__bool___gt__Iter", (PyObject *) &Pystd__map__lt___ns3__Mac48Address__bool___gt__Iter_Type);
    /* Register the 'std::vector< ns3::Ptr< ns3::NetDevice > >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__NetDevice___gt_____gt__Iter_Type);
    PyModule_AddObject(m, (char *) "Vector", (PyObject *) &PyNs3Vector3D_Type);
    PyModule_AddObject(m, (char *) "VectorValue", (PyObject *) &PyNs3Vector3DValue_Type);
    PyModule_AddObject(m, (char *) "VectorChecker", (PyObject *) &PyNs3Vector3DChecker_Type);
    {
        PyObject *tmp_value;
         // ns3::MeshHelper::SPREAD_CHANNELS
        tmp_value = PyLong_FromLong(ns3::MeshHelper::SPREAD_CHANNELS);
        PyDict_SetItemString((PyObject*) PyNs3MeshHelper_Type.tp_dict, "SPREAD_CHANNELS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::MeshHelper::ZERO_CHANNEL
        tmp_value = PyLong_FromLong(ns3::MeshHelper::ZERO_CHANNEL);
        PyDict_SetItemString((PyObject*) PyNs3MeshHelper_Type.tp_dict, "ZERO_CHANNEL", tmp_value);
        Py_DECREF(tmp_value);
    }
    submodule = initmesh_FatalImpl();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "FatalImpl", submodule);
    submodule = initmesh_Hash();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "Hash", submodule);
    submodule = initmesh_TracedValueCallback();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "TracedValueCallback", submodule);
    submodule = initmesh_dot11s();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "dot11s", submodule);
    submodule = initmesh_flame();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "flame", submodule);
    submodule = initmesh_internal();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "internal", submodule);
    return MOD_RETURN(m);
}
