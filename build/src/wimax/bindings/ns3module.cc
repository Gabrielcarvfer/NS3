#include "ns3module.h"
static PyMethodDef wimax_FatalImpl_functions[] = {
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef wimax_FatalImpl_moduledef = {
    PyModuleDef_HEAD_INIT,
    "wimax.FatalImpl",
    NULL,
    -1,
    wimax_FatalImpl_functions,
};
#endif

static PyObject *
initwimax_FatalImpl(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&wimax_FatalImpl_moduledef);
    #else
    m = Py_InitModule3((char *) "wimax.FatalImpl", wimax_FatalImpl_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    return m;
}
static PyMethodDef wimax_Hash_Function_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyNs3HashFunctionFnv1a_Type;


PyTypeObject *_PyNs3HashFunctionHash32_Type;


PyTypeObject *_PyNs3HashFunctionHash64_Type;


PyTypeObject *_PyNs3HashFunctionMurmur3_Type;

#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef wimax_Hash_Function_moduledef = {
    PyModuleDef_HEAD_INIT,
    "wimax.Hash.Function",
    NULL,
    -1,
    wimax_Hash_Function_functions,
};
#endif

static PyObject *
initwimax_Hash_Function(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&wimax_Hash_Function_moduledef);
    #else
    m = Py_InitModule3((char *) "wimax.Hash.Function", wimax_Hash_Function_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    /* Import the 'ns3::Hash::Function::Fnv1a' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionFnv1a_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Fnv1a");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Hash::Function::Hash32' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionHash32_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Hash32");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Hash::Function::Hash64' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionHash64_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Hash64");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Hash::Function::Murmur3' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionMurmur3_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Murmur3");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    return m;
}
static PyMethodDef wimax_Hash_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyNs3HashImplementation_Type;

#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef wimax_Hash_moduledef = {
    PyModuleDef_HEAD_INIT,
    "wimax.Hash",
    NULL,
    -1,
    wimax_Hash_functions,
};
#endif

static PyObject *
initwimax_Hash(void)
{
    PyObject *m;
    PyObject *submodule;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&wimax_Hash_moduledef);
    #else
    m = Py_InitModule3((char *) "wimax.Hash", wimax_Hash_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    /* Import the 'ns3::Hash::Implementation' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashImplementation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Implementation");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    submodule = initwimax_Hash_Function();
    if (submodule == NULL) {
        return NULL;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "Function", submodule);
    return m;
}
static PyMethodDef wimax_TracedValueCallback_functions[] = {
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef wimax_TracedValueCallback_moduledef = {
    PyModuleDef_HEAD_INIT,
    "wimax.TracedValueCallback",
    NULL,
    -1,
    wimax_TracedValueCallback_functions,
};
#endif

static PyObject *
initwimax_TracedValueCallback(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&wimax_TracedValueCallback_moduledef);
    #else
    m = Py_InitModule3((char *) "wimax.TracedValueCallback", wimax_TracedValueCallback_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    return m;
}
static PyMethodDef wimax_internal_functions[] = {
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef wimax_internal_moduledef = {
    PyModuleDef_HEAD_INIT,
    "wimax.internal",
    NULL,
    -1,
    wimax_internal_functions,
};
#endif

static PyObject *
initwimax_internal(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&wimax_internal_moduledef);
    #else
    m = Py_InitModule3((char *) "wimax.internal", wimax_internal_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    return m;
}
static PyMethodDef wimax_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyNs3Address_Type;
std::map<void*, PyObject*> *_PyNs3Address_wrapper_registry;


PyTypeObject *_PyNs3AsciiTraceHelper_Type;
std::map<void*, PyObject*> *_PyNs3AsciiTraceHelper_wrapper_registry;


PyTypeObject *_PyNs3AsciiTraceHelperForDevice_Type;
std::map<void*, PyObject*> *_PyNs3AsciiTraceHelperForDevice_wrapper_registry;


PyTypeObject *_PyNs3AttributeConstructionList_Type;
std::map<void*, PyObject*> *_PyNs3AttributeConstructionList_wrapper_registry;


PyTypeObject *_PyNs3AttributeConstructionListItem_Type;
std::map<void*, PyObject*> *_PyNs3AttributeConstructionListItem_wrapper_registry;


PyTypeObject *_PyNs3Buffer_Type;
std::map<void*, PyObject*> *_PyNs3Buffer_wrapper_registry;


PyTypeObject *_PyNs3BufferIterator_Type;
std::map<void*, PyObject*> *_PyNs3BufferIterator_wrapper_registry;


PyTypeObject *_PyNs3ByteTagIterator_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagIterator_wrapper_registry;


PyTypeObject *_PyNs3ByteTagIteratorItem_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagIteratorItem_wrapper_registry;


PyTypeObject *_PyNs3ByteTagList_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagList_wrapper_registry;


PyTypeObject *_PyNs3ByteTagListIterator_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagListIterator_wrapper_registry;


PyTypeObject *_PyNs3ByteTagListIteratorItem_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagListIteratorItem_wrapper_registry;


PyTypeObject *_PyNs3CallbackBase_Type;
std::map<void*, PyObject*> *_PyNs3CallbackBase_wrapper_registry;


PyTypeObject *_PyNs3EventId_Type;
std::map<void*, PyObject*> *_PyNs3EventId_wrapper_registry;


PyTypeObject *_PyNs3Hasher_Type;
std::map<void*, PyObject*> *_PyNs3Hasher_wrapper_registry;


PyTypeObject *_PyNs3Ipv4Address_Type;
std::map<void*, PyObject*> *_PyNs3Ipv4Address_wrapper_registry;


PyTypeObject *_PyNs3Ipv4Mask_Type;
std::map<void*, PyObject*> *_PyNs3Ipv4Mask_wrapper_registry;


PyTypeObject *_PyNs3Ipv6Address_Type;
std::map<void*, PyObject*> *_PyNs3Ipv6Address_wrapper_registry;


PyTypeObject *_PyNs3Ipv6Prefix_Type;
std::map<void*, PyObject*> *_PyNs3Ipv6Prefix_wrapper_registry;


PyTypeObject *_PyNs3LogComponent_Type;
std::map<void*, PyObject*> *_PyNs3LogComponent_wrapper_registry;


PyTypeObject *_PyNs3Mac48Address_Type;
std::map<void*, PyObject*> *_PyNs3Mac48Address_wrapper_registry;


PyTypeObject *_PyNs3NetDeviceContainer_Type;
std::map<void*, PyObject*> *_PyNs3NetDeviceContainer_wrapper_registry;


PyTypeObject *_PyNs3NodeContainer_Type;
std::map<void*, PyObject*> *_PyNs3NodeContainer_wrapper_registry;


PyTypeObject *_PyNs3ObjectBase_Type;
std::map<void*, PyObject*> *_PyNs3ObjectBase_wrapper_registry;


PyTypeObject *_PyNs3ObjectDeleter_Type;
std::map<void*, PyObject*> *_PyNs3ObjectDeleter_wrapper_registry;


PyTypeObject *_PyNs3ObjectFactory_Type;
std::map<void*, PyObject*> *_PyNs3ObjectFactory_wrapper_registry;


PyTypeObject *_PyNs3PacketMetadata_Type;
std::map<void*, PyObject*> *_PyNs3PacketMetadata_wrapper_registry;


PyTypeObject *_PyNs3PacketMetadataItem_Type;
std::map<void*, PyObject*> *_PyNs3PacketMetadataItem_wrapper_registry;


PyTypeObject *_PyNs3PacketMetadataItemIterator_Type;
std::map<void*, PyObject*> *_PyNs3PacketMetadataItemIterator_wrapper_registry;


PyTypeObject *_PyNs3PacketTagIterator_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagIterator_wrapper_registry;


PyTypeObject *_PyNs3PacketTagIteratorItem_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagIteratorItem_wrapper_registry;


PyTypeObject *_PyNs3PacketTagList_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagList_wrapper_registry;


PyTypeObject *_PyNs3PacketTagListTagData_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagListTagData_wrapper_registry;


PyTypeObject *_PyNs3ParameterLogger_Type;
std::map<void*, PyObject*> *_PyNs3ParameterLogger_wrapper_registry;


PyTypeObject *_PyNs3PcapFile_Type;
std::map<void*, PyObject*> *_PyNs3PcapFile_wrapper_registry;


PyTypeObject *_PyNs3PcapHelper_Type;
std::map<void*, PyObject*> *_PyNs3PcapHelper_wrapper_registry;


PyTypeObject *_PyNs3PcapHelperForDevice_Type;
std::map<void*, PyObject*> *_PyNs3PcapHelperForDevice_wrapper_registry;


PyTypeObject *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;


PyTypeObject *_PyNs3Simulator_Type;
std::map<void*, PyObject*> *_PyNs3Simulator_wrapper_registry;


PyTypeObject *_PyNs3Tag_Type;


PyTypeObject *_PyNs3TagBuffer_Type;
std::map<void*, PyObject*> *_PyNs3TagBuffer_wrapper_registry;


PyTypeObject *_PyNs3TimeWithUnit_Type;
std::map<void*, PyObject*> *_PyNs3TimeWithUnit_wrapper_registry;


PyTypeObject *_PyNs3TypeId_Type;
std::map<void*, PyObject*> *_PyNs3TypeId_wrapper_registry;


PyTypeObject *_PyNs3TypeIdAttributeInformation_Type;
std::map<void*, PyObject*> *_PyNs3TypeIdAttributeInformation_wrapper_registry;


PyTypeObject *_PyNs3TypeIdTraceSourceInformation_Type;
std::map<void*, PyObject*> *_PyNs3TypeIdTraceSourceInformation_wrapper_registry;


PyTypeObject *_PyNs3Empty_Type;
std::map<void*, PyObject*> *_PyNs3Empty_wrapper_registry;


PyTypeObject *_PyNs3Int64x64_t_Type;
std::map<void*, PyObject*> *_PyNs3Int64x64_t_wrapper_registry;


PyTypeObject *_PyNs3Chunk_Type;


PyTypeObject *_PyNs3Header_Type;


PyTypeObject *_PyNs3Object_Type;


PyTypeObject *_PyNs3ObjectAggregateIterator_Type;
std::map<void*, PyObject*> *_PyNs3ObjectAggregateIterator_wrapper_registry;


PyTypeObject *_PyNs3PacketBurst_Type;


PyTypeObject *_PyNs3PcapFileWrapper_Type;


PyTypeObject *_PyNs3PropagationLossModel_Type;


PyTypeObject *_PyNs3RandomPropagationLossModel_Type;


PyTypeObject *_PyNs3RandomVariableStream_Type;


PyTypeObject *_PyNs3RangePropagationLossModel_Type;


PyTypeObject *_PyNs3SequentialRandomVariable_Type;


PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;


PyTypeObject *_PyNs3ThreeLogDistancePropagationLossModel_Type;


PyTypeObject *_PyNs3Time_Type;
std::map<void*, PyObject*> *_PyNs3Time_wrapper_registry;


PyTypeObject *_PyNs3TraceSourceAccessor_Type;


PyTypeObject *_PyNs3Trailer_Type;


PyTypeObject *_PyNs3TriangularRandomVariable_Type;


PyTypeObject *_PyNs3TwoRayGroundPropagationLossModel_Type;


PyTypeObject *_PyNs3UniformRandomVariable_Type;


PyTypeObject *_PyNs3WeibullRandomVariable_Type;


PyTypeObject *_PyNs3ZetaRandomVariable_Type;


PyTypeObject *_PyNs3ZipfRandomVariable_Type;


PyTypeObject *_PyNs3AttributeAccessor_Type;


PyTypeObject *_PyNs3AttributeChecker_Type;


PyTypeObject *_PyNs3AttributeValue_Type;


PyTypeObject *_PyNs3CallbackChecker_Type;


PyTypeObject *_PyNs3CallbackImplBase_Type;


PyTypeObject *_PyNs3CallbackValue_Type;


PyTypeObject *_PyNs3Channel_Type;


PyTypeObject *_PyNs3ConstantRandomVariable_Type;


PyTypeObject *_PyNs3DeterministicRandomVariable_Type;


PyTypeObject *_PyNs3EmpiricalRandomVariable_Type;


PyTypeObject *_PyNs3EmptyAttributeAccessor_Type;


PyTypeObject *_PyNs3EmptyAttributeChecker_Type;


PyTypeObject *_PyNs3EmptyAttributeValue_Type;


PyTypeObject *_PyNs3ErlangRandomVariable_Type;


PyTypeObject *_PyNs3EventImpl_Type;


PyTypeObject *_PyNs3ExponentialRandomVariable_Type;


PyTypeObject *_PyNs3FixedRssLossModel_Type;


PyTypeObject *_PyNs3FriisPropagationLossModel_Type;


PyTypeObject *_PyNs3GammaRandomVariable_Type;


PyTypeObject *_PyNs3Ipv4AddressChecker_Type;


PyTypeObject *_PyNs3Ipv4AddressValue_Type;


PyTypeObject *_PyNs3Ipv4MaskChecker_Type;


PyTypeObject *_PyNs3Ipv4MaskValue_Type;


PyTypeObject *_PyNs3Ipv6AddressChecker_Type;


PyTypeObject *_PyNs3Ipv6AddressValue_Type;


PyTypeObject *_PyNs3Ipv6PrefixChecker_Type;


PyTypeObject *_PyNs3Ipv6PrefixValue_Type;


PyTypeObject *_PyNs3LogDistancePropagationLossModel_Type;


PyTypeObject *_PyNs3LogNormalRandomVariable_Type;


PyTypeObject *_PyNs3Mac48AddressChecker_Type;


PyTypeObject *_PyNs3Mac48AddressValue_Type;


PyTypeObject *_PyNs3MatrixPropagationLossModel_Type;


PyTypeObject *_PyNs3NakagamiPropagationLossModel_Type;


PyTypeObject *_PyNs3NetDevice_Type;


PyTypeObject *_PyNs3NetDeviceQueue_Type;


PyTypeObject *_PyNs3NetDeviceQueueInterface_Type;


PyTypeObject *_PyNs3NixVector_Type;


PyTypeObject *_PyNs3Node_Type;


PyTypeObject *_PyNs3NormalRandomVariable_Type;


PyTypeObject *_PyNs3ObjectFactoryChecker_Type;


PyTypeObject *_PyNs3ObjectFactoryValue_Type;


PyTypeObject *_PyNs3OutputStreamWrapper_Type;


PyTypeObject *_PyNs3Packet_Type;


PyTypeObject *_PyNs3ParetoRandomVariable_Type;


PyTypeObject *_PyNs3QueueItem_Type;


PyTypeObject *_PyNs3TimeValue_Type;


PyTypeObject *_PyNs3TypeIdChecker_Type;


PyTypeObject *_PyNs3TypeIdValue_Type;


PyTypeObject *_PyNs3UintegerValue_Type;


PyTypeObject *_PyNs3AddressChecker_Type;


PyTypeObject *_PyNs3AddressValue_Type;


std::map<void*, PyObject*> PyNs3Cid_wrapper_registry;


static int
_wrap_PyNs3Cid__tp_init__0(PyNs3Cid *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Cid *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Cid(*((PyNs3Cid *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Cid__tp_init__1(PyNs3Cid *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Cid();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Cid__tp_init__2(PyNs3Cid *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int cid;
    const char *keywords[] = {"cid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &cid)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (cid > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Cid(cid);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Cid__tp_init(PyNs3Cid *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3Cid__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Cid__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3Cid__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Cid_InitialRanging(void)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = ns3::Cid::InitialRanging();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3Cid_IsPadding(PyNs3Cid *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsPadding();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Cid_IsMulticast(PyNs3Cid *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsMulticast();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Cid_IsBroadcast(PyNs3Cid *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBroadcast();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Cid_Broadcast(void)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = ns3::Cid::Broadcast();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3Cid_IsInitialRanging(PyNs3Cid *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsInitialRanging();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Cid_GetIdentifier(PyNs3Cid *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetIdentifier();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Cid_Padding(void)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = ns3::Cid::Padding();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


static PyObject*
_wrap_PyNs3Cid__copy__(PyNs3Cid *self)
{

    PyNs3Cid *py_copy;
    py_copy = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_copy->obj = new ns3::Cid(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Cid_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Cid_methods[] = {
    {(char *) "InitialRanging", (PyCFunction) _wrap_PyNs3Cid_InitialRanging, METH_NOARGS|METH_STATIC, "InitialRanging()\n\n" },
    {(char *) "IsPadding", (PyCFunction) _wrap_PyNs3Cid_IsPadding, METH_NOARGS, "IsPadding()\n\n" },
    {(char *) "IsMulticast", (PyCFunction) _wrap_PyNs3Cid_IsMulticast, METH_NOARGS, "IsMulticast()\n\n" },
    {(char *) "IsBroadcast", (PyCFunction) _wrap_PyNs3Cid_IsBroadcast, METH_NOARGS, "IsBroadcast()\n\n" },
    {(char *) "Broadcast", (PyCFunction) _wrap_PyNs3Cid_Broadcast, METH_NOARGS|METH_STATIC, "Broadcast()\n\n" },
    {(char *) "IsInitialRanging", (PyCFunction) _wrap_PyNs3Cid_IsInitialRanging, METH_NOARGS, "IsInitialRanging()\n\n" },
    {(char *) "GetIdentifier", (PyCFunction) _wrap_PyNs3Cid_GetIdentifier, METH_NOARGS, "GetIdentifier()\n\n" },
    {(char *) "Padding", (PyCFunction) _wrap_PyNs3Cid_Padding, METH_NOARGS|METH_STATIC, "Padding()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Cid__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Cid__tp_dealloc(PyNs3Cid *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Cid_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Cid_wrapper_registry.end()) {
        PyNs3Cid_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::Cid *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3Cid__tp_str(PyNs3Cid *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3Cid__tp_richcompare (PyNs3Cid *PYBINDGEN_UNUSED(self), PyNs3Cid *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Cid_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        if (*self->obj != *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Cid_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Cid",            /* tp_name */
    sizeof(PyNs3Cid),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Cid__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3Cid__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "Cid(arg0)\nCid(cid)\nCid()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Cid__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Cid_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Cid__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3CidFactory_wrapper_registry;


static int
_wrap_PyNs3CidFactory__tp_init__0(PyNs3CidFactory *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3CidFactory *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CidFactory_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CidFactory(*((PyNs3CidFactory *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3CidFactory__tp_init__1(PyNs3CidFactory *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CidFactory();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3CidFactory__tp_init(PyNs3CidFactory *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3CidFactory__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3CidFactory__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3CidFactory_IsTransport(PyNs3CidFactory *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Cid *cid;
    const char *keywords[] = {"cid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &cid)) {
        return NULL;
    }
    retval = self->obj->IsTransport(*((PyNs3Cid *) cid)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CidFactory_AllocateTransportOrSecondary(PyNs3CidFactory *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->AllocateTransportOrSecondary();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3CidFactory_AllocateMulticast(PyNs3CidFactory *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->AllocateMulticast();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3CidFactory_AllocatePrimary(PyNs3CidFactory *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->AllocatePrimary();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3CidFactory_Allocate(PyNs3CidFactory *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Cid::Type type;
    const char *keywords[] = {"type", NULL};
    PyNs3Cid *py_Cid;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    ns3::Cid retval = self->obj->Allocate(type);
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3CidFactory_AllocateBasic(PyNs3CidFactory *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->AllocateBasic();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3CidFactory_FreeCid(PyNs3CidFactory *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Cid *cid;
    const char *keywords[] = {"cid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &cid)) {
        return NULL;
    }
    self->obj->FreeCid(*((PyNs3Cid *) cid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CidFactory_IsPrimary(PyNs3CidFactory *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Cid *cid;
    const char *keywords[] = {"cid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &cid)) {
        return NULL;
    }
    retval = self->obj->IsPrimary(*((PyNs3Cid *) cid)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CidFactory_IsBasic(PyNs3CidFactory *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Cid *cid;
    const char *keywords[] = {"cid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &cid)) {
        return NULL;
    }
    retval = self->obj->IsBasic(*((PyNs3Cid *) cid)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3CidFactory__copy__(PyNs3CidFactory *self)
{

    PyNs3CidFactory *py_copy;
    py_copy = PyObject_New(PyNs3CidFactory, &PyNs3CidFactory_Type);
    py_copy->obj = new ns3::CidFactory(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3CidFactory_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3CidFactory_methods[] = {
    {(char *) "IsTransport", (PyCFunction) _wrap_PyNs3CidFactory_IsTransport, METH_KEYWORDS|METH_VARARGS, "IsTransport(cid)\n\ntype: cid: ns3::Cid" },
    {(char *) "AllocateTransportOrSecondary", (PyCFunction) _wrap_PyNs3CidFactory_AllocateTransportOrSecondary, METH_NOARGS, "AllocateTransportOrSecondary()\n\n" },
    {(char *) "AllocateMulticast", (PyCFunction) _wrap_PyNs3CidFactory_AllocateMulticast, METH_NOARGS, "AllocateMulticast()\n\n" },
    {(char *) "AllocatePrimary", (PyCFunction) _wrap_PyNs3CidFactory_AllocatePrimary, METH_NOARGS, "AllocatePrimary()\n\n" },
    {(char *) "Allocate", (PyCFunction) _wrap_PyNs3CidFactory_Allocate, METH_KEYWORDS|METH_VARARGS, "Allocate(type)\n\ntype: type: ns3::Cid::Type" },
    {(char *) "AllocateBasic", (PyCFunction) _wrap_PyNs3CidFactory_AllocateBasic, METH_NOARGS, "AllocateBasic()\n\n" },
    {(char *) "FreeCid", (PyCFunction) _wrap_PyNs3CidFactory_FreeCid, METH_KEYWORDS|METH_VARARGS, "FreeCid(cid)\n\ntype: cid: ns3::Cid" },
    {(char *) "IsPrimary", (PyCFunction) _wrap_PyNs3CidFactory_IsPrimary, METH_KEYWORDS|METH_VARARGS, "IsPrimary(cid)\n\ntype: cid: ns3::Cid" },
    {(char *) "IsBasic", (PyCFunction) _wrap_PyNs3CidFactory_IsBasic, METH_KEYWORDS|METH_VARARGS, "IsBasic(cid)\n\ntype: cid: ns3::Cid" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3CidFactory__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3CidFactory__tp_dealloc(PyNs3CidFactory *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3CidFactory_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3CidFactory_wrapper_registry.end()) {
        PyNs3CidFactory_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::CidFactory *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CidFactory__tp_richcompare (PyNs3CidFactory *PYBINDGEN_UNUSED(self), PyNs3CidFactory *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CidFactory_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CidFactory_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.CidFactory",            /* tp_name */
    sizeof(PyNs3CidFactory),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CidFactory__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "CidFactory(arg0)\nCidFactory()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CidFactory__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CidFactory_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CidFactory__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3CsParameters_wrapper_registry;


static int
_wrap_PyNs3CsParameters__tp_init__0(PyNs3CsParameters *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3CsParameters *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CsParameters_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CsParameters(*((PyNs3CsParameters *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3CsParameters__tp_init__1(PyNs3CsParameters *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CsParameters();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3CsParameters__tp_init__2(PyNs3CsParameters *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Tlv *tlv;
    const char *keywords[] = {"tlv", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Tlv_Type, &tlv)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CsParameters(*((PyNs3Tlv *) tlv)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3CsParameters__tp_init__3(PyNs3CsParameters *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    ns3::CsParameters::Action classifierDscAction;
    PyNs3IpcsClassifierRecord *classifier;
    const char *keywords[] = {"classifierDscAction", "classifier", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &classifierDscAction, &PyNs3IpcsClassifierRecord_Type, &classifier)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CsParameters(classifierDscAction, *((PyNs3IpcsClassifierRecord *) classifier)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3CsParameters__tp_init(PyNs3CsParameters *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyNs3CsParameters__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3CsParameters__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3CsParameters__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3CsParameters__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3CsParameters_GetPacketClassifierRule(PyNs3CsParameters *self)
{
    PyObject *py_retval;
    PyNs3IpcsClassifierRecord *py_IpcsClassifierRecord;
    
    ns3::IpcsClassifierRecord retval = self->obj->GetPacketClassifierRule();
    py_IpcsClassifierRecord = PyObject_New(PyNs3IpcsClassifierRecord, &PyNs3IpcsClassifierRecord_Type);
    py_IpcsClassifierRecord->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_IpcsClassifierRecord->obj = new ns3::IpcsClassifierRecord(retval);
    PyNs3IpcsClassifierRecord_wrapper_registry[(void *) py_IpcsClassifierRecord->obj] = (PyObject *) py_IpcsClassifierRecord;
    py_retval = Py_BuildValue((char *) "N", py_IpcsClassifierRecord);
    return py_retval;
}


PyObject *
_wrap_PyNs3CsParameters_GetClassifierDscAction(PyNs3CsParameters *self)
{
    PyObject *py_retval;
    ns3::CsParameters::Action retval;
    
    retval = self->obj->GetClassifierDscAction();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CsParameters_ToTlv(PyNs3CsParameters *self)
{
    PyObject *py_retval;
    PyNs3Tlv *py_Tlv;
    
    ns3::Tlv retval = self->obj->ToTlv();
    py_Tlv = PyObject_GC_New(PyNs3Tlv, &PyNs3Tlv_Type);
    py_Tlv->inst_dict = NULL;
    py_Tlv->inst_dict = NULL;
    py_Tlv->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Tlv->obj = new ns3::Tlv(retval);
    PyNs3ObjectBase_wrapper_registry[(void *) py_Tlv->obj] = (PyObject *) py_Tlv;
    py_retval = Py_BuildValue((char *) "N", py_Tlv);
    return py_retval;
}


PyObject *
_wrap_PyNs3CsParameters_SetPacketClassifierRule(PyNs3CsParameters *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3IpcsClassifierRecord *packetClassifierRule;
    const char *keywords[] = {"packetClassifierRule", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3IpcsClassifierRecord_Type, &packetClassifierRule)) {
        return NULL;
    }
    self->obj->SetPacketClassifierRule(*((PyNs3IpcsClassifierRecord *) packetClassifierRule)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CsParameters_SetClassifierDscAction(PyNs3CsParameters *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::CsParameters::Action action;
    const char *keywords[] = {"action", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &action)) {
        return NULL;
    }
    self->obj->SetClassifierDscAction(action);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3CsParameters__copy__(PyNs3CsParameters *self)
{

    PyNs3CsParameters *py_copy;
    py_copy = PyObject_New(PyNs3CsParameters, &PyNs3CsParameters_Type);
    py_copy->obj = new ns3::CsParameters(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3CsParameters_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3CsParameters_methods[] = {
    {(char *) "GetPacketClassifierRule", (PyCFunction) _wrap_PyNs3CsParameters_GetPacketClassifierRule, METH_NOARGS, "GetPacketClassifierRule()\n\n" },
    {(char *) "GetClassifierDscAction", (PyCFunction) _wrap_PyNs3CsParameters_GetClassifierDscAction, METH_NOARGS, "GetClassifierDscAction()\n\n" },
    {(char *) "ToTlv", (PyCFunction) _wrap_PyNs3CsParameters_ToTlv, METH_NOARGS, "ToTlv()\n\n" },
    {(char *) "SetPacketClassifierRule", (PyCFunction) _wrap_PyNs3CsParameters_SetPacketClassifierRule, METH_KEYWORDS|METH_VARARGS, "SetPacketClassifierRule(packetClassifierRule)\n\ntype: packetClassifierRule: ns3::IpcsClassifierRecord" },
    {(char *) "SetClassifierDscAction", (PyCFunction) _wrap_PyNs3CsParameters_SetClassifierDscAction, METH_KEYWORDS|METH_VARARGS, "SetClassifierDscAction(action)\n\ntype: action: ns3::CsParameters::Action" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3CsParameters__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3CsParameters__tp_dealloc(PyNs3CsParameters *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3CsParameters_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3CsParameters_wrapper_registry.end()) {
        PyNs3CsParameters_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::CsParameters *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CsParameters__tp_richcompare (PyNs3CsParameters *PYBINDGEN_UNUSED(self), PyNs3CsParameters *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CsParameters_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CsParameters_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.CsParameters",            /* tp_name */
    sizeof(PyNs3CsParameters),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CsParameters__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "CsParameters(classifierDscAction, classifier)\nCsParameters(arg0)\nCsParameters(tlv)\nCsParameters()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CsParameters__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CsParameters_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CsParameters__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DcdChannelEncodings_wrapper_registry;

ns3::Buffer::Iterator
PyNs3DcdChannelEncodings__PythonHelper::DoRead(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DcdChannelEncodings *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    PyNs3BufferIterator *tmp_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoRead"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    self_obj_before = reinterpret_cast< PyNs3DcdChannelEncodings* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DcdChannelEncodings* >(m_pyself)->obj = (ns3::DcdChannelEncodings*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoRead", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3BufferIterator_Type, &tmp_Iterator)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    ns3::Buffer::Iterator retval = *tmp_Iterator->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Buffer::Iterator
PyNs3DcdChannelEncodings__PythonHelper::DoWrite(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DcdChannelEncodings *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    PyNs3BufferIterator *tmp_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoWrite"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    self_obj_before = reinterpret_cast< PyNs3DcdChannelEncodings* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DcdChannelEncodings* >(m_pyself)->obj = const_cast< ns3::DcdChannelEncodings* >((const ns3::DcdChannelEncodings*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoWrite", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3BufferIterator_Type, &tmp_Iterator)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    ns3::Buffer::Iterator retval = *tmp_Iterator->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


static int
_wrap_PyNs3DcdChannelEncodings__tp_init__0(PyNs3DcdChannelEncodings *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DcdChannelEncodings *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DcdChannelEncodings_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DcdChannelEncodings_Type)
    {
        self->obj = new PyNs3DcdChannelEncodings__PythonHelper(*((PyNs3DcdChannelEncodings *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DcdChannelEncodings__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'DcdChannelEncodings' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3DcdChannelEncodings__tp_init__1(PyNs3DcdChannelEncodings *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DcdChannelEncodings_Type)
    {
        self->obj = new PyNs3DcdChannelEncodings__PythonHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DcdChannelEncodings__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'DcdChannelEncodings' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3DcdChannelEncodings__tp_init(PyNs3DcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DcdChannelEncodings__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DcdChannelEncodings__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DcdChannelEncodings_GetSize(PyNs3DcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DcdChannelEncodings_GetFrequency(PyNs3DcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetFrequency();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DcdChannelEncodings_SetEirxPIrMax(PyNs3DcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rss_ir_max;
    const char *keywords[] = {"rss_ir_max", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rss_ir_max)) {
        return NULL;
    }
    if (rss_ir_max > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetEirxPIrMax(rss_ir_max);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcdChannelEncodings_GetBsEirp(PyNs3DcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetBsEirp();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DcdChannelEncodings_SetBsEirp(PyNs3DcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int bs_eirp;
    const char *keywords[] = {"bs_eirp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &bs_eirp)) {
        return NULL;
    }
    if (bs_eirp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBsEirp(bs_eirp);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcdChannelEncodings_GetEirxPIrMax(PyNs3DcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetEirxPIrMax();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DcdChannelEncodings_Read(PyNs3DcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Read(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3DcdChannelEncodings_Write(PyNs3DcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Write(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3DcdChannelEncodings_SetFrequency(PyNs3DcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int frequency;
    const char *keywords[] = {"frequency", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &frequency)) {
        return NULL;
    }
    self->obj->SetFrequency(frequency);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3DcdChannelEncodings_methods[] = {
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3DcdChannelEncodings_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "GetFrequency", (PyCFunction) _wrap_PyNs3DcdChannelEncodings_GetFrequency, METH_NOARGS, "GetFrequency()\n\n" },
    {(char *) "SetEirxPIrMax", (PyCFunction) _wrap_PyNs3DcdChannelEncodings_SetEirxPIrMax, METH_KEYWORDS|METH_VARARGS, "SetEirxPIrMax(rss_ir_max)\n\ntype: rss_ir_max: uint16_t" },
    {(char *) "GetBsEirp", (PyCFunction) _wrap_PyNs3DcdChannelEncodings_GetBsEirp, METH_NOARGS, "GetBsEirp()\n\n" },
    {(char *) "SetBsEirp", (PyCFunction) _wrap_PyNs3DcdChannelEncodings_SetBsEirp, METH_KEYWORDS|METH_VARARGS, "SetBsEirp(bs_eirp)\n\ntype: bs_eirp: uint16_t" },
    {(char *) "GetEirxPIrMax", (PyCFunction) _wrap_PyNs3DcdChannelEncodings_GetEirxPIrMax, METH_NOARGS, "GetEirxPIrMax()\n\n" },
    {(char *) "Read", (PyCFunction) _wrap_PyNs3DcdChannelEncodings_Read, METH_KEYWORDS|METH_VARARGS, "Read(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Write", (PyCFunction) _wrap_PyNs3DcdChannelEncodings_Write, METH_KEYWORDS|METH_VARARGS, "Write(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetFrequency", (PyCFunction) _wrap_PyNs3DcdChannelEncodings_SetFrequency, METH_KEYWORDS|METH_VARARGS, "SetFrequency(frequency)\n\ntype: frequency: uint32_t" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DcdChannelEncodings__tp_clear(PyNs3DcdChannelEncodings *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::DcdChannelEncodings *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DcdChannelEncodings__tp_traverse(PyNs3DcdChannelEncodings *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3DcdChannelEncodings__PythonHelper).name() )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3DcdChannelEncodings__tp_dealloc(PyNs3DcdChannelEncodings *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DcdChannelEncodings_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DcdChannelEncodings_wrapper_registry.end()) {
        PyNs3DcdChannelEncodings_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DcdChannelEncodings__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DcdChannelEncodings__tp_richcompare (PyNs3DcdChannelEncodings *PYBINDGEN_UNUSED(self), PyNs3DcdChannelEncodings *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DcdChannelEncodings_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DcdChannelEncodings_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.DcdChannelEncodings",            /* tp_name */
    sizeof(PyNs3DcdChannelEncodings),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DcdChannelEncodings__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DcdChannelEncodings(arg0)\nDcdChannelEncodings()",                        /* Documentation string */
    (traverseproc)PyNs3DcdChannelEncodings__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DcdChannelEncodings__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DcdChannelEncodings__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DcdChannelEncodings_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DcdChannelEncodings, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DcdChannelEncodings__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DlFramePrefixIe_wrapper_registry;


static int
_wrap_PyNs3DlFramePrefixIe__tp_init__0(PyNs3DlFramePrefixIe *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DlFramePrefixIe *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DlFramePrefixIe_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DlFramePrefixIe(*((PyNs3DlFramePrefixIe *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DlFramePrefixIe__tp_init__1(PyNs3DlFramePrefixIe *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DlFramePrefixIe();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DlFramePrefixIe__tp_init(PyNs3DlFramePrefixIe *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DlFramePrefixIe__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DlFramePrefixIe__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DlFramePrefixIe_Write(PyNs3DlFramePrefixIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Write(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3DlFramePrefixIe_SetPreamblePresent(PyNs3DlFramePrefixIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int preamblePresent;
    const char *keywords[] = {"preamblePresent", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &preamblePresent)) {
        return NULL;
    }
    if (preamblePresent > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPreamblePresent(preamblePresent);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DlFramePrefixIe_GetRateId(PyNs3DlFramePrefixIe *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRateId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DlFramePrefixIe_GetLength(PyNs3DlFramePrefixIe *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetLength();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DlFramePrefixIe_SetDiuc(PyNs3DlFramePrefixIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int diuc;
    const char *keywords[] = {"diuc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &diuc)) {
        return NULL;
    }
    if (diuc > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetDiuc(diuc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DlFramePrefixIe_SetRateId(PyNs3DlFramePrefixIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rateId;
    const char *keywords[] = {"rateId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rateId)) {
        return NULL;
    }
    if (rateId > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRateId(rateId);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DlFramePrefixIe_GetSize(PyNs3DlFramePrefixIe *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DlFramePrefixIe_Read(PyNs3DlFramePrefixIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Read(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3DlFramePrefixIe_GetPreamblePresent(PyNs3DlFramePrefixIe *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetPreamblePresent();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DlFramePrefixIe_GetDiuc(PyNs3DlFramePrefixIe *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetDiuc();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DlFramePrefixIe_SetStartTime(PyNs3DlFramePrefixIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int startTime;
    const char *keywords[] = {"startTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &startTime)) {
        return NULL;
    }
    if (startTime > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetStartTime(startTime);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DlFramePrefixIe_SetLength(PyNs3DlFramePrefixIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int length;
    const char *keywords[] = {"length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &length)) {
        return NULL;
    }
    if (length > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetLength(length);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DlFramePrefixIe_GetStartTime(PyNs3DlFramePrefixIe *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartTime();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DlFramePrefixIe__copy__(PyNs3DlFramePrefixIe *self)
{

    PyNs3DlFramePrefixIe *py_copy;
    py_copy = PyObject_New(PyNs3DlFramePrefixIe, &PyNs3DlFramePrefixIe_Type);
    py_copy->obj = new ns3::DlFramePrefixIe(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DlFramePrefixIe_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DlFramePrefixIe_methods[] = {
    {(char *) "Write", (PyCFunction) _wrap_PyNs3DlFramePrefixIe_Write, METH_KEYWORDS|METH_VARARGS, "Write(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetPreamblePresent", (PyCFunction) _wrap_PyNs3DlFramePrefixIe_SetPreamblePresent, METH_KEYWORDS|METH_VARARGS, "SetPreamblePresent(preamblePresent)\n\ntype: preamblePresent: uint8_t" },
    {(char *) "GetRateId", (PyCFunction) _wrap_PyNs3DlFramePrefixIe_GetRateId, METH_NOARGS, "GetRateId()\n\n" },
    {(char *) "GetLength", (PyCFunction) _wrap_PyNs3DlFramePrefixIe_GetLength, METH_NOARGS, "GetLength()\n\n" },
    {(char *) "SetDiuc", (PyCFunction) _wrap_PyNs3DlFramePrefixIe_SetDiuc, METH_KEYWORDS|METH_VARARGS, "SetDiuc(diuc)\n\ntype: diuc: uint8_t" },
    {(char *) "SetRateId", (PyCFunction) _wrap_PyNs3DlFramePrefixIe_SetRateId, METH_KEYWORDS|METH_VARARGS, "SetRateId(rateId)\n\ntype: rateId: uint8_t" },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3DlFramePrefixIe_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "Read", (PyCFunction) _wrap_PyNs3DlFramePrefixIe_Read, METH_KEYWORDS|METH_VARARGS, "Read(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetPreamblePresent", (PyCFunction) _wrap_PyNs3DlFramePrefixIe_GetPreamblePresent, METH_NOARGS, "GetPreamblePresent()\n\n" },
    {(char *) "GetDiuc", (PyCFunction) _wrap_PyNs3DlFramePrefixIe_GetDiuc, METH_NOARGS, "GetDiuc()\n\n" },
    {(char *) "SetStartTime", (PyCFunction) _wrap_PyNs3DlFramePrefixIe_SetStartTime, METH_KEYWORDS|METH_VARARGS, "SetStartTime(startTime)\n\ntype: startTime: uint16_t" },
    {(char *) "SetLength", (PyCFunction) _wrap_PyNs3DlFramePrefixIe_SetLength, METH_KEYWORDS|METH_VARARGS, "SetLength(length)\n\ntype: length: uint16_t" },
    {(char *) "GetStartTime", (PyCFunction) _wrap_PyNs3DlFramePrefixIe_GetStartTime, METH_NOARGS, "GetStartTime()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DlFramePrefixIe__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DlFramePrefixIe__tp_dealloc(PyNs3DlFramePrefixIe *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DlFramePrefixIe_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DlFramePrefixIe_wrapper_registry.end()) {
        PyNs3DlFramePrefixIe_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::DlFramePrefixIe *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DlFramePrefixIe__tp_richcompare (PyNs3DlFramePrefixIe *PYBINDGEN_UNUSED(self), PyNs3DlFramePrefixIe *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DlFramePrefixIe_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DlFramePrefixIe_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.DlFramePrefixIe",            /* tp_name */
    sizeof(PyNs3DlFramePrefixIe),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DlFramePrefixIe__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DlFramePrefixIe(arg0)\nDlFramePrefixIe()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DlFramePrefixIe__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DlFramePrefixIe_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DlFramePrefixIe__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3IpcsClassifierRecord_wrapper_registry;


static int
_wrap_PyNs3IpcsClassifierRecord__tp_init__0(PyNs3IpcsClassifierRecord *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3IpcsClassifierRecord *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3IpcsClassifierRecord_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::IpcsClassifierRecord(*((PyNs3IpcsClassifierRecord *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3IpcsClassifierRecord__tp_init__1(PyNs3IpcsClassifierRecord *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::IpcsClassifierRecord();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3IpcsClassifierRecord__tp_init__2(PyNs3IpcsClassifierRecord *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Ipv4Address *srcAddress;
    PyNs3Ipv4Mask *srcMask;
    PyNs3Ipv4Address *dstAddress;
    PyNs3Ipv4Mask *dstMask;
    int srcPortLow;
    int srcPortHigh;
    int dstPortLow;
    int dstPortHigh;
    int protocol;
    int priority;
    const char *keywords[] = {"srcAddress", "srcMask", "dstAddress", "dstMask", "srcPortLow", "srcPortHigh", "dstPortLow", "dstPortHigh", "protocol", "priority", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!iiiiii", (char **) keywords, &PyNs3Ipv4Address_Type, &srcAddress, &PyNs3Ipv4Mask_Type, &srcMask, &PyNs3Ipv4Address_Type, &dstAddress, &PyNs3Ipv4Mask_Type, &dstMask, &srcPortLow, &srcPortHigh, &dstPortLow, &dstPortHigh, &protocol, &priority)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (srcPortLow > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (srcPortHigh > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (dstPortLow > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (dstPortHigh > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (priority > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::IpcsClassifierRecord(*((PyNs3Ipv4Address *) srcAddress)->obj, *((PyNs3Ipv4Mask *) srcMask)->obj, *((PyNs3Ipv4Address *) dstAddress)->obj, *((PyNs3Ipv4Mask *) dstMask)->obj, srcPortLow, srcPortHigh, dstPortLow, dstPortHigh, protocol, priority);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3IpcsClassifierRecord__tp_init__3(PyNs3IpcsClassifierRecord *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Tlv *tlv;
    const char *keywords[] = {"tlv", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Tlv_Type, &tlv)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::IpcsClassifierRecord(*((PyNs3Tlv *) tlv)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3IpcsClassifierRecord__tp_init(PyNs3IpcsClassifierRecord *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyNs3IpcsClassifierRecord__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3IpcsClassifierRecord__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3IpcsClassifierRecord__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3IpcsClassifierRecord__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3IpcsClassifierRecord_GetIndex(PyNs3IpcsClassifierRecord *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetIndex();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3IpcsClassifierRecord_AddDstPortRange(PyNs3IpcsClassifierRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int dstPortLow;
    int dstPortHigh;
    const char *keywords[] = {"dstPortLow", "dstPortHigh", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &dstPortLow, &dstPortHigh)) {
        return NULL;
    }
    if (dstPortLow > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (dstPortHigh > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->AddDstPortRange(dstPortLow, dstPortHigh);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3IpcsClassifierRecord_AddSrcAddr(PyNs3IpcsClassifierRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *srcAddress;
    PyNs3Ipv4Mask *srcMask;
    const char *keywords[] = {"srcAddress", "srcMask", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &srcAddress, &PyNs3Ipv4Mask_Type, &srcMask)) {
        return NULL;
    }
    self->obj->AddSrcAddr(*((PyNs3Ipv4Address *) srcAddress)->obj, *((PyNs3Ipv4Mask *) srcMask)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3IpcsClassifierRecord_AddProtocol(PyNs3IpcsClassifierRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int proto;
    const char *keywords[] = {"proto", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &proto)) {
        return NULL;
    }
    if (proto > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->AddProtocol(proto);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3IpcsClassifierRecord_GetPriority(PyNs3IpcsClassifierRecord *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetPriority();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3IpcsClassifierRecord_CheckMatch(PyNs3IpcsClassifierRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *srcAddress;
    PyNs3Ipv4Address *dstAddress;
    int srcPort;
    int dstPort;
    int proto;
    const char *keywords[] = {"srcAddress", "dstAddress", "srcPort", "dstPort", "proto", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!iii", (char **) keywords, &PyNs3Ipv4Address_Type, &srcAddress, &PyNs3Ipv4Address_Type, &dstAddress, &srcPort, &dstPort, &proto)) {
        return NULL;
    }
    if (srcPort > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (dstPort > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (proto > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->CheckMatch(*((PyNs3Ipv4Address *) srcAddress)->obj, *((PyNs3Ipv4Address *) dstAddress)->obj, srcPort, dstPort, proto);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3IpcsClassifierRecord_SetIndex(PyNs3IpcsClassifierRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int index;
    const char *keywords[] = {"index", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &index)) {
        return NULL;
    }
    if (index > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetIndex(index);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3IpcsClassifierRecord_SetCid(PyNs3IpcsClassifierRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int cid;
    const char *keywords[] = {"cid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &cid)) {
        return NULL;
    }
    if (cid > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetCid(cid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3IpcsClassifierRecord_GetCid(PyNs3IpcsClassifierRecord *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetCid();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3IpcsClassifierRecord_AddSrcPortRange(PyNs3IpcsClassifierRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int srcPortLow;
    int srcPortHigh;
    const char *keywords[] = {"srcPortLow", "srcPortHigh", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &srcPortLow, &srcPortHigh)) {
        return NULL;
    }
    if (srcPortLow > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (srcPortHigh > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->AddSrcPortRange(srcPortLow, srcPortHigh);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3IpcsClassifierRecord_AddDstAddr(PyNs3IpcsClassifierRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *dstAddress;
    PyNs3Ipv4Mask *dstMask;
    const char *keywords[] = {"dstAddress", "dstMask", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &dstAddress, &PyNs3Ipv4Mask_Type, &dstMask)) {
        return NULL;
    }
    self->obj->AddDstAddr(*((PyNs3Ipv4Address *) dstAddress)->obj, *((PyNs3Ipv4Mask *) dstMask)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3IpcsClassifierRecord_ToTlv(PyNs3IpcsClassifierRecord *self)
{
    PyObject *py_retval;
    PyNs3Tlv *py_Tlv;
    
    ns3::Tlv retval = self->obj->ToTlv();
    py_Tlv = PyObject_GC_New(PyNs3Tlv, &PyNs3Tlv_Type);
    py_Tlv->inst_dict = NULL;
    py_Tlv->inst_dict = NULL;
    py_Tlv->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Tlv->obj = new ns3::Tlv(retval);
    PyNs3ObjectBase_wrapper_registry[(void *) py_Tlv->obj] = (PyObject *) py_Tlv;
    py_retval = Py_BuildValue((char *) "N", py_Tlv);
    return py_retval;
}


PyObject *
_wrap_PyNs3IpcsClassifierRecord_SetPriority(PyNs3IpcsClassifierRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int prio;
    const char *keywords[] = {"prio", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &prio)) {
        return NULL;
    }
    if (prio > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPriority(prio);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3IpcsClassifierRecord__copy__(PyNs3IpcsClassifierRecord *self)
{

    PyNs3IpcsClassifierRecord *py_copy;
    py_copy = PyObject_New(PyNs3IpcsClassifierRecord, &PyNs3IpcsClassifierRecord_Type);
    py_copy->obj = new ns3::IpcsClassifierRecord(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3IpcsClassifierRecord_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3IpcsClassifierRecord_methods[] = {
    {(char *) "GetIndex", (PyCFunction) _wrap_PyNs3IpcsClassifierRecord_GetIndex, METH_NOARGS, "GetIndex()\n\n" },
    {(char *) "AddDstPortRange", (PyCFunction) _wrap_PyNs3IpcsClassifierRecord_AddDstPortRange, METH_KEYWORDS|METH_VARARGS, "AddDstPortRange(dstPortLow, dstPortHigh)\n\ntype: dstPortLow: uint16_t\ntype: dstPortHigh: uint16_t" },
    {(char *) "AddSrcAddr", (PyCFunction) _wrap_PyNs3IpcsClassifierRecord_AddSrcAddr, METH_KEYWORDS|METH_VARARGS, "AddSrcAddr(srcAddress, srcMask)\n\ntype: srcAddress: ns3::Ipv4Address\ntype: srcMask: ns3::Ipv4Mask" },
    {(char *) "AddProtocol", (PyCFunction) _wrap_PyNs3IpcsClassifierRecord_AddProtocol, METH_KEYWORDS|METH_VARARGS, "AddProtocol(proto)\n\ntype: proto: uint8_t" },
    {(char *) "GetPriority", (PyCFunction) _wrap_PyNs3IpcsClassifierRecord_GetPriority, METH_NOARGS, "GetPriority()\n\n" },
    {(char *) "CheckMatch", (PyCFunction) _wrap_PyNs3IpcsClassifierRecord_CheckMatch, METH_KEYWORDS|METH_VARARGS, "CheckMatch(srcAddress, dstAddress, srcPort, dstPort, proto)\n\ntype: srcAddress: ns3::Ipv4Address\ntype: dstAddress: ns3::Ipv4Address\ntype: srcPort: uint16_t\ntype: dstPort: uint16_t\ntype: proto: uint8_t" },
    {(char *) "SetIndex", (PyCFunction) _wrap_PyNs3IpcsClassifierRecord_SetIndex, METH_KEYWORDS|METH_VARARGS, "SetIndex(index)\n\ntype: index: uint16_t" },
    {(char *) "SetCid", (PyCFunction) _wrap_PyNs3IpcsClassifierRecord_SetCid, METH_KEYWORDS|METH_VARARGS, "SetCid(cid)\n\ntype: cid: uint16_t" },
    {(char *) "GetCid", (PyCFunction) _wrap_PyNs3IpcsClassifierRecord_GetCid, METH_NOARGS, "GetCid()\n\n" },
    {(char *) "AddSrcPortRange", (PyCFunction) _wrap_PyNs3IpcsClassifierRecord_AddSrcPortRange, METH_KEYWORDS|METH_VARARGS, "AddSrcPortRange(srcPortLow, srcPortHigh)\n\ntype: srcPortLow: uint16_t\ntype: srcPortHigh: uint16_t" },
    {(char *) "AddDstAddr", (PyCFunction) _wrap_PyNs3IpcsClassifierRecord_AddDstAddr, METH_KEYWORDS|METH_VARARGS, "AddDstAddr(dstAddress, dstMask)\n\ntype: dstAddress: ns3::Ipv4Address\ntype: dstMask: ns3::Ipv4Mask" },
    {(char *) "ToTlv", (PyCFunction) _wrap_PyNs3IpcsClassifierRecord_ToTlv, METH_NOARGS, "ToTlv()\n\n" },
    {(char *) "SetPriority", (PyCFunction) _wrap_PyNs3IpcsClassifierRecord_SetPriority, METH_KEYWORDS|METH_VARARGS, "SetPriority(prio)\n\ntype: prio: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3IpcsClassifierRecord__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3IpcsClassifierRecord__tp_dealloc(PyNs3IpcsClassifierRecord *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3IpcsClassifierRecord_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3IpcsClassifierRecord_wrapper_registry.end()) {
        PyNs3IpcsClassifierRecord_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::IpcsClassifierRecord *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3IpcsClassifierRecord__tp_richcompare (PyNs3IpcsClassifierRecord *PYBINDGEN_UNUSED(self), PyNs3IpcsClassifierRecord *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3IpcsClassifierRecord_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3IpcsClassifierRecord_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.IpcsClassifierRecord",            /* tp_name */
    sizeof(PyNs3IpcsClassifierRecord),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3IpcsClassifierRecord__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "IpcsClassifierRecord(srcAddress, srcMask, dstAddress, dstMask, srcPortLow, srcPortHigh, dstPortLow, dstPortHigh, protocol, priority)\nIpcsClassifierRecord(arg0)\nIpcsClassifierRecord(tlv)\nIpcsClassifierRecord()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3IpcsClassifierRecord__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3IpcsClassifierRecord_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3IpcsClassifierRecord__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




ns3::Buffer::Iterator
PyNs3OfdmDcdChannelEncodings__PythonHelper::DoRead(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::OfdmDcdChannelEncodings *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    PyNs3BufferIterator *tmp_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoRead"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    self_obj_before = reinterpret_cast< PyNs3OfdmDcdChannelEncodings* >(m_pyself)->obj;
    reinterpret_cast< PyNs3OfdmDcdChannelEncodings* >(m_pyself)->obj = (ns3::OfdmDcdChannelEncodings*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoRead", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3OfdmDcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3BufferIterator_Type, &tmp_Iterator)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3OfdmDcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    ns3::Buffer::Iterator retval = *tmp_Iterator->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3OfdmDcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Buffer::Iterator
PyNs3OfdmDcdChannelEncodings__PythonHelper::DoWrite(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::OfdmDcdChannelEncodings *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    PyNs3BufferIterator *tmp_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoWrite"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    self_obj_before = reinterpret_cast< PyNs3OfdmDcdChannelEncodings* >(m_pyself)->obj;
    reinterpret_cast< PyNs3OfdmDcdChannelEncodings* >(m_pyself)->obj = const_cast< ns3::OfdmDcdChannelEncodings* >((const ns3::OfdmDcdChannelEncodings*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoWrite", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3OfdmDcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3BufferIterator_Type, &tmp_Iterator)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3OfdmDcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    ns3::Buffer::Iterator retval = *tmp_Iterator->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3OfdmDcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


static int
_wrap_PyNs3OfdmDcdChannelEncodings__tp_init__0(PyNs3OfdmDcdChannelEncodings *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3OfdmDcdChannelEncodings *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OfdmDcdChannelEncodings_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3OfdmDcdChannelEncodings_Type)
    {
        self->obj = new PyNs3OfdmDcdChannelEncodings__PythonHelper(*((PyNs3OfdmDcdChannelEncodings *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3OfdmDcdChannelEncodings__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::OfdmDcdChannelEncodings(*((PyNs3OfdmDcdChannelEncodings *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

static int
_wrap_PyNs3OfdmDcdChannelEncodings__tp_init__1(PyNs3OfdmDcdChannelEncodings *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3OfdmDcdChannelEncodings_Type)
    {
        self->obj = new PyNs3OfdmDcdChannelEncodings__PythonHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3OfdmDcdChannelEncodings__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::OfdmDcdChannelEncodings();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

int _wrap_PyNs3OfdmDcdChannelEncodings__tp_init(PyNs3OfdmDcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3OfdmDcdChannelEncodings__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3OfdmDcdChannelEncodings__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3OfdmDcdChannelEncodings_GetFrameNumber(PyNs3OfdmDcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetFrameNumber();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDcdChannelEncodings_GetFrameDurationCode(PyNs3OfdmDcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetFrameDurationCode();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDcdChannelEncodings_SetFrameNumber(PyNs3OfdmDcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int frameNumber;
    const char *keywords[] = {"frameNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &frameNumber)) {
        return NULL;
    }
    self->obj->SetFrameNumber(frameNumber);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDcdChannelEncodings_GetBaseStationId(PyNs3OfdmDcdChannelEncodings *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetBaseStationId();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDcdChannelEncodings_SetRtg(PyNs3OfdmDcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rtg;
    const char *keywords[] = {"rtg", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rtg)) {
        return NULL;
    }
    if (rtg > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRtg(rtg);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDcdChannelEncodings_GetRtg(PyNs3OfdmDcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRtg();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDcdChannelEncodings_GetSize(PyNs3OfdmDcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDcdChannelEncodings_SetChannelNr(PyNs3OfdmDcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int channelNr;
    const char *keywords[] = {"channelNr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &channelNr)) {
        return NULL;
    }
    if (channelNr > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetChannelNr(channelNr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDcdChannelEncodings_GetTtg(PyNs3OfdmDcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTtg();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDcdChannelEncodings_SetFrameDurationCode(PyNs3OfdmDcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int frameDurationCode;
    const char *keywords[] = {"frameDurationCode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &frameDurationCode)) {
        return NULL;
    }
    if (frameDurationCode > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFrameDurationCode(frameDurationCode);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDcdChannelEncodings_SetTtg(PyNs3OfdmDcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ttg;
    const char *keywords[] = {"ttg", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ttg)) {
        return NULL;
    }
    if (ttg > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTtg(ttg);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDcdChannelEncodings_SetBaseStationId(PyNs3OfdmDcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *baseStationId;
    const char *keywords[] = {"baseStationId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &baseStationId)) {
        return NULL;
    }
    self->obj->SetBaseStationId(*((PyNs3Mac48Address *) baseStationId)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDcdChannelEncodings_GetChannelNr(PyNs3OfdmDcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetChannelNr();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3OfdmDcdChannelEncodings__copy__(PyNs3OfdmDcdChannelEncodings *self)
{

    PyNs3OfdmDcdChannelEncodings *py_copy;
    py_copy = PyObject_GC_New(PyNs3OfdmDcdChannelEncodings, &PyNs3OfdmDcdChannelEncodings_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::OfdmDcdChannelEncodings(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DcdChannelEncodings_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3OfdmDcdChannelEncodings_methods[] = {
    {(char *) "GetFrameNumber", (PyCFunction) _wrap_PyNs3OfdmDcdChannelEncodings_GetFrameNumber, METH_NOARGS, "GetFrameNumber()\n\n" },
    {(char *) "GetFrameDurationCode", (PyCFunction) _wrap_PyNs3OfdmDcdChannelEncodings_GetFrameDurationCode, METH_NOARGS, "GetFrameDurationCode()\n\n" },
    {(char *) "SetFrameNumber", (PyCFunction) _wrap_PyNs3OfdmDcdChannelEncodings_SetFrameNumber, METH_KEYWORDS|METH_VARARGS, "SetFrameNumber(frameNumber)\n\ntype: frameNumber: uint32_t" },
    {(char *) "GetBaseStationId", (PyCFunction) _wrap_PyNs3OfdmDcdChannelEncodings_GetBaseStationId, METH_NOARGS, "GetBaseStationId()\n\n" },
    {(char *) "SetRtg", (PyCFunction) _wrap_PyNs3OfdmDcdChannelEncodings_SetRtg, METH_KEYWORDS|METH_VARARGS, "SetRtg(rtg)\n\ntype: rtg: uint8_t" },
    {(char *) "GetRtg", (PyCFunction) _wrap_PyNs3OfdmDcdChannelEncodings_GetRtg, METH_NOARGS, "GetRtg()\n\n" },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3OfdmDcdChannelEncodings_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "SetChannelNr", (PyCFunction) _wrap_PyNs3OfdmDcdChannelEncodings_SetChannelNr, METH_KEYWORDS|METH_VARARGS, "SetChannelNr(channelNr)\n\ntype: channelNr: uint8_t" },
    {(char *) "GetTtg", (PyCFunction) _wrap_PyNs3OfdmDcdChannelEncodings_GetTtg, METH_NOARGS, "GetTtg()\n\n" },
    {(char *) "SetFrameDurationCode", (PyCFunction) _wrap_PyNs3OfdmDcdChannelEncodings_SetFrameDurationCode, METH_KEYWORDS|METH_VARARGS, "SetFrameDurationCode(frameDurationCode)\n\ntype: frameDurationCode: uint8_t" },
    {(char *) "SetTtg", (PyCFunction) _wrap_PyNs3OfdmDcdChannelEncodings_SetTtg, METH_KEYWORDS|METH_VARARGS, "SetTtg(ttg)\n\ntype: ttg: uint8_t" },
    {(char *) "SetBaseStationId", (PyCFunction) _wrap_PyNs3OfdmDcdChannelEncodings_SetBaseStationId, METH_KEYWORDS|METH_VARARGS, "SetBaseStationId(baseStationId)\n\ntype: baseStationId: ns3::Mac48Address" },
    {(char *) "GetChannelNr", (PyCFunction) _wrap_PyNs3OfdmDcdChannelEncodings_GetChannelNr, METH_NOARGS, "GetChannelNr()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3OfdmDcdChannelEncodings__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3OfdmDcdChannelEncodings__tp_clear(PyNs3OfdmDcdChannelEncodings *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::OfdmDcdChannelEncodings *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3OfdmDcdChannelEncodings__tp_traverse(PyNs3OfdmDcdChannelEncodings *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3OfdmDcdChannelEncodings__PythonHelper).name() )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3OfdmDcdChannelEncodings__tp_dealloc(PyNs3OfdmDcdChannelEncodings *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DcdChannelEncodings_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DcdChannelEncodings_wrapper_registry.end()) {
        PyNs3DcdChannelEncodings_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3OfdmDcdChannelEncodings__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3OfdmDcdChannelEncodings__tp_richcompare (PyNs3OfdmDcdChannelEncodings *PYBINDGEN_UNUSED(self), PyNs3OfdmDcdChannelEncodings *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3OfdmDcdChannelEncodings_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3OfdmDcdChannelEncodings_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.OfdmDcdChannelEncodings",            /* tp_name */
    sizeof(PyNs3OfdmDcdChannelEncodings),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3OfdmDcdChannelEncodings__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "OfdmDcdChannelEncodings(arg0)\nOfdmDcdChannelEncodings()",                        /* Documentation string */
    (traverseproc)PyNs3OfdmDcdChannelEncodings__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3OfdmDcdChannelEncodings__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3OfdmDcdChannelEncodings__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3OfdmDcdChannelEncodings_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3OfdmDcdChannelEncodings, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3OfdmDcdChannelEncodings__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3OfdmDlBurstProfile_wrapper_registry;


static int
_wrap_PyNs3OfdmDlBurstProfile__tp_init__0(PyNs3OfdmDlBurstProfile *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3OfdmDlBurstProfile *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OfdmDlBurstProfile_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OfdmDlBurstProfile(*((PyNs3OfdmDlBurstProfile *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3OfdmDlBurstProfile__tp_init__1(PyNs3OfdmDlBurstProfile *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OfdmDlBurstProfile();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3OfdmDlBurstProfile__tp_init(PyNs3OfdmDlBurstProfile *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3OfdmDlBurstProfile__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3OfdmDlBurstProfile__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3OfdmDlBurstProfile_Write(PyNs3OfdmDlBurstProfile *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Write(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlBurstProfile_SetFecCodeType(PyNs3OfdmDlBurstProfile *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int fecCodeType;
    const char *keywords[] = {"fecCodeType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &fecCodeType)) {
        return NULL;
    }
    if (fecCodeType > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFecCodeType(fecCodeType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlBurstProfile_Read(PyNs3OfdmDlBurstProfile *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Read(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlBurstProfile_GetLength(PyNs3OfdmDlBurstProfile *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetLength();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlBurstProfile_SetDiuc(PyNs3OfdmDlBurstProfile *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int diuc;
    const char *keywords[] = {"diuc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &diuc)) {
        return NULL;
    }
    if (diuc > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetDiuc(diuc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlBurstProfile_GetType(PyNs3OfdmDlBurstProfile *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlBurstProfile_GetSize(PyNs3OfdmDlBurstProfile *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlBurstProfile_GetDiuc(PyNs3OfdmDlBurstProfile *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetDiuc();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlBurstProfile_SetType(PyNs3OfdmDlBurstProfile *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    if (type > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetType(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlBurstProfile_SetLength(PyNs3OfdmDlBurstProfile *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int length;
    const char *keywords[] = {"length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetLength(length);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlBurstProfile_GetFecCodeType(PyNs3OfdmDlBurstProfile *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetFecCodeType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3OfdmDlBurstProfile__copy__(PyNs3OfdmDlBurstProfile *self)
{

    PyNs3OfdmDlBurstProfile *py_copy;
    py_copy = PyObject_New(PyNs3OfdmDlBurstProfile, &PyNs3OfdmDlBurstProfile_Type);
    py_copy->obj = new ns3::OfdmDlBurstProfile(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3OfdmDlBurstProfile_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3OfdmDlBurstProfile_methods[] = {
    {(char *) "Write", (PyCFunction) _wrap_PyNs3OfdmDlBurstProfile_Write, METH_KEYWORDS|METH_VARARGS, "Write(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetFecCodeType", (PyCFunction) _wrap_PyNs3OfdmDlBurstProfile_SetFecCodeType, METH_KEYWORDS|METH_VARARGS, "SetFecCodeType(fecCodeType)\n\ntype: fecCodeType: uint8_t" },
    {(char *) "Read", (PyCFunction) _wrap_PyNs3OfdmDlBurstProfile_Read, METH_KEYWORDS|METH_VARARGS, "Read(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetLength", (PyCFunction) _wrap_PyNs3OfdmDlBurstProfile_GetLength, METH_NOARGS, "GetLength()\n\n" },
    {(char *) "SetDiuc", (PyCFunction) _wrap_PyNs3OfdmDlBurstProfile_SetDiuc, METH_KEYWORDS|METH_VARARGS, "SetDiuc(diuc)\n\ntype: diuc: uint8_t" },
    {(char *) "GetType", (PyCFunction) _wrap_PyNs3OfdmDlBurstProfile_GetType, METH_NOARGS, "GetType()\n\n" },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3OfdmDlBurstProfile_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "GetDiuc", (PyCFunction) _wrap_PyNs3OfdmDlBurstProfile_GetDiuc, METH_NOARGS, "GetDiuc()\n\n" },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3OfdmDlBurstProfile_SetType, METH_KEYWORDS|METH_VARARGS, "SetType(type)\n\ntype: type: uint8_t" },
    {(char *) "SetLength", (PyCFunction) _wrap_PyNs3OfdmDlBurstProfile_SetLength, METH_KEYWORDS|METH_VARARGS, "SetLength(length)\n\ntype: length: uint8_t" },
    {(char *) "GetFecCodeType", (PyCFunction) _wrap_PyNs3OfdmDlBurstProfile_GetFecCodeType, METH_NOARGS, "GetFecCodeType()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3OfdmDlBurstProfile__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3OfdmDlBurstProfile__tp_dealloc(PyNs3OfdmDlBurstProfile *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3OfdmDlBurstProfile_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3OfdmDlBurstProfile_wrapper_registry.end()) {
        PyNs3OfdmDlBurstProfile_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::OfdmDlBurstProfile *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3OfdmDlBurstProfile__tp_richcompare (PyNs3OfdmDlBurstProfile *PYBINDGEN_UNUSED(self), PyNs3OfdmDlBurstProfile *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3OfdmDlBurstProfile_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3OfdmDlBurstProfile_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.OfdmDlBurstProfile",            /* tp_name */
    sizeof(PyNs3OfdmDlBurstProfile),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3OfdmDlBurstProfile__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "OfdmDlBurstProfile(arg0)\nOfdmDlBurstProfile()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3OfdmDlBurstProfile__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3OfdmDlBurstProfile_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3OfdmDlBurstProfile__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3OfdmDlMapIe_wrapper_registry;


static int
_wrap_PyNs3OfdmDlMapIe__tp_init__0(PyNs3OfdmDlMapIe *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3OfdmDlMapIe *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OfdmDlMapIe_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OfdmDlMapIe(*((PyNs3OfdmDlMapIe *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3OfdmDlMapIe__tp_init__1(PyNs3OfdmDlMapIe *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OfdmDlMapIe();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3OfdmDlMapIe__tp_init(PyNs3OfdmDlMapIe *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3OfdmDlMapIe__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3OfdmDlMapIe__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3OfdmDlMapIe_Write(PyNs3OfdmDlMapIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Write(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlMapIe_SetCid(PyNs3OfdmDlMapIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Cid *cid;
    const char *keywords[] = {"cid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &cid)) {
        return NULL;
    }
    self->obj->SetCid(*((PyNs3Cid *) cid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlMapIe_SetPreamblePresent(PyNs3OfdmDlMapIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int preamblePresent;
    const char *keywords[] = {"preamblePresent", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &preamblePresent)) {
        return NULL;
    }
    if (preamblePresent > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPreamblePresent(preamblePresent);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlMapIe_Read(PyNs3OfdmDlMapIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Read(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlMapIe_SetDiuc(PyNs3OfdmDlMapIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int diuc;
    const char *keywords[] = {"diuc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &diuc)) {
        return NULL;
    }
    if (diuc > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetDiuc(diuc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlMapIe_GetCid(PyNs3OfdmDlMapIe *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->GetCid();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlMapIe_GetSize(PyNs3OfdmDlMapIe *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlMapIe_GetPreamblePresent(PyNs3OfdmDlMapIe *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetPreamblePresent();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlMapIe_GetDiuc(PyNs3OfdmDlMapIe *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetDiuc();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlMapIe_SetStartTime(PyNs3OfdmDlMapIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int startTime;
    const char *keywords[] = {"startTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &startTime)) {
        return NULL;
    }
    if (startTime > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetStartTime(startTime);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDlMapIe_GetStartTime(PyNs3OfdmDlMapIe *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartTime();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3OfdmDlMapIe__copy__(PyNs3OfdmDlMapIe *self)
{

    PyNs3OfdmDlMapIe *py_copy;
    py_copy = PyObject_New(PyNs3OfdmDlMapIe, &PyNs3OfdmDlMapIe_Type);
    py_copy->obj = new ns3::OfdmDlMapIe(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3OfdmDlMapIe_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3OfdmDlMapIe_methods[] = {
    {(char *) "Write", (PyCFunction) _wrap_PyNs3OfdmDlMapIe_Write, METH_KEYWORDS|METH_VARARGS, "Write(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetCid", (PyCFunction) _wrap_PyNs3OfdmDlMapIe_SetCid, METH_KEYWORDS|METH_VARARGS, "SetCid(cid)\n\ntype: cid: ns3::Cid" },
    {(char *) "SetPreamblePresent", (PyCFunction) _wrap_PyNs3OfdmDlMapIe_SetPreamblePresent, METH_KEYWORDS|METH_VARARGS, "SetPreamblePresent(preamblePresent)\n\ntype: preamblePresent: uint8_t" },
    {(char *) "Read", (PyCFunction) _wrap_PyNs3OfdmDlMapIe_Read, METH_KEYWORDS|METH_VARARGS, "Read(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetDiuc", (PyCFunction) _wrap_PyNs3OfdmDlMapIe_SetDiuc, METH_KEYWORDS|METH_VARARGS, "SetDiuc(diuc)\n\ntype: diuc: uint8_t" },
    {(char *) "GetCid", (PyCFunction) _wrap_PyNs3OfdmDlMapIe_GetCid, METH_NOARGS, "GetCid()\n\n" },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3OfdmDlMapIe_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "GetPreamblePresent", (PyCFunction) _wrap_PyNs3OfdmDlMapIe_GetPreamblePresent, METH_NOARGS, "GetPreamblePresent()\n\n" },
    {(char *) "GetDiuc", (PyCFunction) _wrap_PyNs3OfdmDlMapIe_GetDiuc, METH_NOARGS, "GetDiuc()\n\n" },
    {(char *) "SetStartTime", (PyCFunction) _wrap_PyNs3OfdmDlMapIe_SetStartTime, METH_KEYWORDS|METH_VARARGS, "SetStartTime(startTime)\n\ntype: startTime: uint16_t" },
    {(char *) "GetStartTime", (PyCFunction) _wrap_PyNs3OfdmDlMapIe_GetStartTime, METH_NOARGS, "GetStartTime()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3OfdmDlMapIe__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3OfdmDlMapIe__tp_dealloc(PyNs3OfdmDlMapIe *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3OfdmDlMapIe_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3OfdmDlMapIe_wrapper_registry.end()) {
        PyNs3OfdmDlMapIe_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::OfdmDlMapIe *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3OfdmDlMapIe__tp_richcompare (PyNs3OfdmDlMapIe *PYBINDGEN_UNUSED(self), PyNs3OfdmDlMapIe *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3OfdmDlMapIe_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3OfdmDlMapIe_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.OfdmDlMapIe",            /* tp_name */
    sizeof(PyNs3OfdmDlMapIe),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3OfdmDlMapIe__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "OfdmDlMapIe(arg0)\nOfdmDlMapIe()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3OfdmDlMapIe__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3OfdmDlMapIe_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3OfdmDlMapIe__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3OfdmUlBurstProfile_wrapper_registry;


static int
_wrap_PyNs3OfdmUlBurstProfile__tp_init__0(PyNs3OfdmUlBurstProfile *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3OfdmUlBurstProfile *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OfdmUlBurstProfile_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OfdmUlBurstProfile(*((PyNs3OfdmUlBurstProfile *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3OfdmUlBurstProfile__tp_init__1(PyNs3OfdmUlBurstProfile *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OfdmUlBurstProfile();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3OfdmUlBurstProfile__tp_init(PyNs3OfdmUlBurstProfile *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3OfdmUlBurstProfile__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3OfdmUlBurstProfile__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3OfdmUlBurstProfile_SetUiuc(PyNs3OfdmUlBurstProfile *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int uiuc;
    const char *keywords[] = {"uiuc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &uiuc)) {
        return NULL;
    }
    if (uiuc > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetUiuc(uiuc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlBurstProfile_SetFecCodeType(PyNs3OfdmUlBurstProfile *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int fecCodeType;
    const char *keywords[] = {"fecCodeType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &fecCodeType)) {
        return NULL;
    }
    if (fecCodeType > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFecCodeType(fecCodeType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlBurstProfile_Read(PyNs3OfdmUlBurstProfile *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Read(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlBurstProfile_GetLength(PyNs3OfdmUlBurstProfile *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetLength();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlBurstProfile_GetType(PyNs3OfdmUlBurstProfile *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlBurstProfile_SetLength(PyNs3OfdmUlBurstProfile *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int length;
    const char *keywords[] = {"length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetLength(length);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlBurstProfile_GetSize(PyNs3OfdmUlBurstProfile *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlBurstProfile_Write(PyNs3OfdmUlBurstProfile *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Write(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlBurstProfile_SetType(PyNs3OfdmUlBurstProfile *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    if (type > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetType(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlBurstProfile_GetUiuc(PyNs3OfdmUlBurstProfile *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetUiuc();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlBurstProfile_GetFecCodeType(PyNs3OfdmUlBurstProfile *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetFecCodeType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3OfdmUlBurstProfile__copy__(PyNs3OfdmUlBurstProfile *self)
{

    PyNs3OfdmUlBurstProfile *py_copy;
    py_copy = PyObject_New(PyNs3OfdmUlBurstProfile, &PyNs3OfdmUlBurstProfile_Type);
    py_copy->obj = new ns3::OfdmUlBurstProfile(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3OfdmUlBurstProfile_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3OfdmUlBurstProfile_methods[] = {
    {(char *) "SetUiuc", (PyCFunction) _wrap_PyNs3OfdmUlBurstProfile_SetUiuc, METH_KEYWORDS|METH_VARARGS, "SetUiuc(uiuc)\n\ntype: uiuc: uint8_t" },
    {(char *) "SetFecCodeType", (PyCFunction) _wrap_PyNs3OfdmUlBurstProfile_SetFecCodeType, METH_KEYWORDS|METH_VARARGS, "SetFecCodeType(fecCodeType)\n\ntype: fecCodeType: uint8_t" },
    {(char *) "Read", (PyCFunction) _wrap_PyNs3OfdmUlBurstProfile_Read, METH_KEYWORDS|METH_VARARGS, "Read(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetLength", (PyCFunction) _wrap_PyNs3OfdmUlBurstProfile_GetLength, METH_NOARGS, "GetLength()\n\n" },
    {(char *) "GetType", (PyCFunction) _wrap_PyNs3OfdmUlBurstProfile_GetType, METH_NOARGS, "GetType()\n\n" },
    {(char *) "SetLength", (PyCFunction) _wrap_PyNs3OfdmUlBurstProfile_SetLength, METH_KEYWORDS|METH_VARARGS, "SetLength(length)\n\ntype: length: uint8_t" },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3OfdmUlBurstProfile_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "Write", (PyCFunction) _wrap_PyNs3OfdmUlBurstProfile_Write, METH_KEYWORDS|METH_VARARGS, "Write(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3OfdmUlBurstProfile_SetType, METH_KEYWORDS|METH_VARARGS, "SetType(type)\n\ntype: type: uint8_t" },
    {(char *) "GetUiuc", (PyCFunction) _wrap_PyNs3OfdmUlBurstProfile_GetUiuc, METH_NOARGS, "GetUiuc()\n\n" },
    {(char *) "GetFecCodeType", (PyCFunction) _wrap_PyNs3OfdmUlBurstProfile_GetFecCodeType, METH_NOARGS, "GetFecCodeType()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3OfdmUlBurstProfile__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3OfdmUlBurstProfile__tp_dealloc(PyNs3OfdmUlBurstProfile *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3OfdmUlBurstProfile_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3OfdmUlBurstProfile_wrapper_registry.end()) {
        PyNs3OfdmUlBurstProfile_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::OfdmUlBurstProfile *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3OfdmUlBurstProfile__tp_richcompare (PyNs3OfdmUlBurstProfile *PYBINDGEN_UNUSED(self), PyNs3OfdmUlBurstProfile *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3OfdmUlBurstProfile_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3OfdmUlBurstProfile_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.OfdmUlBurstProfile",            /* tp_name */
    sizeof(PyNs3OfdmUlBurstProfile),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3OfdmUlBurstProfile__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "OfdmUlBurstProfile(arg0)\nOfdmUlBurstProfile()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3OfdmUlBurstProfile__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3OfdmUlBurstProfile_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3OfdmUlBurstProfile__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3OfdmUlMapIe_wrapper_registry;


static int
_wrap_PyNs3OfdmUlMapIe__tp_init__0(PyNs3OfdmUlMapIe *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3OfdmUlMapIe *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OfdmUlMapIe_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OfdmUlMapIe(*((PyNs3OfdmUlMapIe *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3OfdmUlMapIe__tp_init__1(PyNs3OfdmUlMapIe *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OfdmUlMapIe();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3OfdmUlMapIe__tp_init(PyNs3OfdmUlMapIe *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3OfdmUlMapIe__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3OfdmUlMapIe__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3OfdmUlMapIe_SetUiuc(PyNs3OfdmUlMapIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int uiuc;
    const char *keywords[] = {"uiuc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &uiuc)) {
        return NULL;
    }
    if (uiuc > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetUiuc(uiuc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlMapIe_SetCid(PyNs3OfdmUlMapIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Cid *cid;
    const char *keywords[] = {"cid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &cid)) {
        return NULL;
    }
    self->obj->SetCid(*((PyNs3Cid *) cid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlMapIe_SetSubchannelIndex(PyNs3OfdmUlMapIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int subchannelIndex;
    const char *keywords[] = {"subchannelIndex", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &subchannelIndex)) {
        return NULL;
    }
    if (subchannelIndex > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSubchannelIndex(subchannelIndex);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlMapIe_Read(PyNs3OfdmUlMapIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Read(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlMapIe_GetDuration(PyNs3OfdmUlMapIe *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetDuration();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlMapIe_GetCid(PyNs3OfdmUlMapIe *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->GetCid();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlMapIe_GetSize(PyNs3OfdmUlMapIe *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlMapIe_SetMidambleRepetitionInterval(PyNs3OfdmUlMapIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int midambleRepetitionInterval;
    const char *keywords[] = {"midambleRepetitionInterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &midambleRepetitionInterval)) {
        return NULL;
    }
    if (midambleRepetitionInterval > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMidambleRepetitionInterval(midambleRepetitionInterval);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlMapIe_Write(PyNs3OfdmUlMapIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Write(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlMapIe_SetStartTime(PyNs3OfdmUlMapIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int startTime;
    const char *keywords[] = {"startTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &startTime)) {
        return NULL;
    }
    if (startTime > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetStartTime(startTime);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlMapIe_GetMidambleRepetitionInterval(PyNs3OfdmUlMapIe *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetMidambleRepetitionInterval();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlMapIe_GetSubchannelIndex(PyNs3OfdmUlMapIe *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSubchannelIndex();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlMapIe_SetDuration(PyNs3OfdmUlMapIe *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &duration)) {
        return NULL;
    }
    if (duration > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetDuration(duration);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlMapIe_GetUiuc(PyNs3OfdmUlMapIe *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetUiuc();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUlMapIe_GetStartTime(PyNs3OfdmUlMapIe *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartTime();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3OfdmUlMapIe__copy__(PyNs3OfdmUlMapIe *self)
{

    PyNs3OfdmUlMapIe *py_copy;
    py_copy = PyObject_New(PyNs3OfdmUlMapIe, &PyNs3OfdmUlMapIe_Type);
    py_copy->obj = new ns3::OfdmUlMapIe(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3OfdmUlMapIe_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3OfdmUlMapIe_methods[] = {
    {(char *) "SetUiuc", (PyCFunction) _wrap_PyNs3OfdmUlMapIe_SetUiuc, METH_KEYWORDS|METH_VARARGS, "SetUiuc(uiuc)\n\ntype: uiuc: uint8_t" },
    {(char *) "SetCid", (PyCFunction) _wrap_PyNs3OfdmUlMapIe_SetCid, METH_KEYWORDS|METH_VARARGS, "SetCid(cid)\n\ntype: cid: ns3::Cid" },
    {(char *) "SetSubchannelIndex", (PyCFunction) _wrap_PyNs3OfdmUlMapIe_SetSubchannelIndex, METH_KEYWORDS|METH_VARARGS, "SetSubchannelIndex(subchannelIndex)\n\ntype: subchannelIndex: uint8_t" },
    {(char *) "Read", (PyCFunction) _wrap_PyNs3OfdmUlMapIe_Read, METH_KEYWORDS|METH_VARARGS, "Read(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetDuration", (PyCFunction) _wrap_PyNs3OfdmUlMapIe_GetDuration, METH_NOARGS, "GetDuration()\n\n" },
    {(char *) "GetCid", (PyCFunction) _wrap_PyNs3OfdmUlMapIe_GetCid, METH_NOARGS, "GetCid()\n\n" },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3OfdmUlMapIe_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "SetMidambleRepetitionInterval", (PyCFunction) _wrap_PyNs3OfdmUlMapIe_SetMidambleRepetitionInterval, METH_KEYWORDS|METH_VARARGS, "SetMidambleRepetitionInterval(midambleRepetitionInterval)\n\ntype: midambleRepetitionInterval: uint8_t" },
    {(char *) "Write", (PyCFunction) _wrap_PyNs3OfdmUlMapIe_Write, METH_KEYWORDS|METH_VARARGS, "Write(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetStartTime", (PyCFunction) _wrap_PyNs3OfdmUlMapIe_SetStartTime, METH_KEYWORDS|METH_VARARGS, "SetStartTime(startTime)\n\ntype: startTime: uint16_t" },
    {(char *) "GetMidambleRepetitionInterval", (PyCFunction) _wrap_PyNs3OfdmUlMapIe_GetMidambleRepetitionInterval, METH_NOARGS, "GetMidambleRepetitionInterval()\n\n" },
    {(char *) "GetSubchannelIndex", (PyCFunction) _wrap_PyNs3OfdmUlMapIe_GetSubchannelIndex, METH_NOARGS, "GetSubchannelIndex()\n\n" },
    {(char *) "SetDuration", (PyCFunction) _wrap_PyNs3OfdmUlMapIe_SetDuration, METH_KEYWORDS|METH_VARARGS, "SetDuration(duration)\n\ntype: duration: uint16_t" },
    {(char *) "GetUiuc", (PyCFunction) _wrap_PyNs3OfdmUlMapIe_GetUiuc, METH_NOARGS, "GetUiuc()\n\n" },
    {(char *) "GetStartTime", (PyCFunction) _wrap_PyNs3OfdmUlMapIe_GetStartTime, METH_NOARGS, "GetStartTime()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3OfdmUlMapIe__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3OfdmUlMapIe__tp_dealloc(PyNs3OfdmUlMapIe *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3OfdmUlMapIe_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3OfdmUlMapIe_wrapper_registry.end()) {
        PyNs3OfdmUlMapIe_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::OfdmUlMapIe *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3OfdmUlMapIe__tp_richcompare (PyNs3OfdmUlMapIe *PYBINDGEN_UNUSED(self), PyNs3OfdmUlMapIe *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3OfdmUlMapIe_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3OfdmUlMapIe_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.OfdmUlMapIe",            /* tp_name */
    sizeof(PyNs3OfdmUlMapIe),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3OfdmUlMapIe__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "OfdmUlMapIe(arg0)\nOfdmUlMapIe()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3OfdmUlMapIe__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3OfdmUlMapIe_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3OfdmUlMapIe__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3SNRToBlockErrorRateManager_wrapper_registry;


static int
_wrap_PyNs3SNRToBlockErrorRateManager__tp_init__0(PyNs3SNRToBlockErrorRateManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SNRToBlockErrorRateManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SNRToBlockErrorRateManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SNRToBlockErrorRateManager(*((PyNs3SNRToBlockErrorRateManager *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SNRToBlockErrorRateManager__tp_init__1(PyNs3SNRToBlockErrorRateManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SNRToBlockErrorRateManager();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SNRToBlockErrorRateManager__tp_init(PyNs3SNRToBlockErrorRateManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SNRToBlockErrorRateManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SNRToBlockErrorRateManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateManager_LoadDefaultTraces(PyNs3SNRToBlockErrorRateManager *self)
{
    PyObject *py_retval;
    
    self->obj->LoadDefaultTraces();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateManager_ReLoadTraces(PyNs3SNRToBlockErrorRateManager *self)
{
    PyObject *py_retval;
    
    self->obj->ReLoadTraces();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateManager_GetBlockErrorRate(PyNs3SNRToBlockErrorRateManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double SNR;
    int modulation;
    const char *keywords[] = {"SNR", "modulation", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "di", (char **) keywords, &SNR, &modulation)) {
        return NULL;
    }
    if (modulation > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->GetBlockErrorRate(SNR, modulation);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateManager_GetTraceFilePath(PyNs3SNRToBlockErrorRateManager *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetTraceFilePath();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateManager_SetTraceFilePath(PyNs3SNRToBlockErrorRateManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char *traceFilePath;
    const char *keywords[] = {"traceFilePath", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s", (char **) keywords, &traceFilePath)) {
        return NULL;
    }
    self->obj->SetTraceFilePath(traceFilePath);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateManager_LoadTraces(PyNs3SNRToBlockErrorRateManager *self)
{
    PyObject *py_retval;
    
    self->obj->LoadTraces();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateManager_ActivateLoss(PyNs3SNRToBlockErrorRateManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool loss;
    PyObject *py_loss;
    const char *keywords[] = {"loss", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_loss)) {
        return NULL;
    }
    loss = (bool) PyObject_IsTrue(py_loss);
    self->obj->ActivateLoss(loss);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SNRToBlockErrorRateManager__copy__(PyNs3SNRToBlockErrorRateManager *self)
{

    PyNs3SNRToBlockErrorRateManager *py_copy;
    py_copy = PyObject_New(PyNs3SNRToBlockErrorRateManager, &PyNs3SNRToBlockErrorRateManager_Type);
    py_copy->obj = new ns3::SNRToBlockErrorRateManager(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3SNRToBlockErrorRateManager_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SNRToBlockErrorRateManager_methods[] = {
    {(char *) "LoadDefaultTraces", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateManager_LoadDefaultTraces, METH_NOARGS, "LoadDefaultTraces()\n\n" },
    {(char *) "ReLoadTraces", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateManager_ReLoadTraces, METH_NOARGS, "ReLoadTraces()\n\n" },
    {(char *) "GetBlockErrorRate", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateManager_GetBlockErrorRate, METH_KEYWORDS|METH_VARARGS, "GetBlockErrorRate(SNR, modulation)\n\ntype: SNR: double\ntype: modulation: uint8_t" },
    {(char *) "GetTraceFilePath", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateManager_GetTraceFilePath, METH_NOARGS, "GetTraceFilePath()\n\n" },
    {(char *) "SetTraceFilePath", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateManager_SetTraceFilePath, METH_KEYWORDS|METH_VARARGS, "SetTraceFilePath(traceFilePath)\n\ntype: traceFilePath: char *" },
    {(char *) "LoadTraces", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateManager_LoadTraces, METH_NOARGS, "LoadTraces()\n\n" },
    {(char *) "ActivateLoss", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateManager_ActivateLoss, METH_KEYWORDS|METH_VARARGS, "ActivateLoss(loss)\n\ntype: loss: bool" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SNRToBlockErrorRateManager__tp_dealloc(PyNs3SNRToBlockErrorRateManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3SNRToBlockErrorRateManager_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3SNRToBlockErrorRateManager_wrapper_registry.end()) {
        PyNs3SNRToBlockErrorRateManager_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::SNRToBlockErrorRateManager *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SNRToBlockErrorRateManager__tp_richcompare (PyNs3SNRToBlockErrorRateManager *PYBINDGEN_UNUSED(self), PyNs3SNRToBlockErrorRateManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SNRToBlockErrorRateManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SNRToBlockErrorRateManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.SNRToBlockErrorRateManager",            /* tp_name */
    sizeof(PyNs3SNRToBlockErrorRateManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SNRToBlockErrorRateManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SNRToBlockErrorRateManager(arg0)\nSNRToBlockErrorRateManager()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SNRToBlockErrorRateManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SNRToBlockErrorRateManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SNRToBlockErrorRateManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3SNRToBlockErrorRateRecord_wrapper_registry;


static int
_wrap_PyNs3SNRToBlockErrorRateRecord__tp_init__0(PyNs3SNRToBlockErrorRateRecord *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SNRToBlockErrorRateRecord *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SNRToBlockErrorRateRecord_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SNRToBlockErrorRateRecord(*((PyNs3SNRToBlockErrorRateRecord *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SNRToBlockErrorRateRecord__tp_init__1(PyNs3SNRToBlockErrorRateRecord *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    double snrValue;
    double bitErrorRate;
    double BlockErrorRate;
    double sigma2;
    double I1;
    double I2;
    const char *keywords[] = {"snrValue", "bitErrorRate", "BlockErrorRate", "sigma2", "I1", "I2", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dddddd", (char **) keywords, &snrValue, &bitErrorRate, &BlockErrorRate, &sigma2, &I1, &I2)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SNRToBlockErrorRateRecord(snrValue, bitErrorRate, BlockErrorRate, sigma2, I1, I2);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SNRToBlockErrorRateRecord__tp_init(PyNs3SNRToBlockErrorRateRecord *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SNRToBlockErrorRateRecord__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SNRToBlockErrorRateRecord__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateRecord_GetBitErrorRate(PyNs3SNRToBlockErrorRateRecord *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetBitErrorRate();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateRecord_GetSigma2(PyNs3SNRToBlockErrorRateRecord *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetSigma2();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateRecord_SetSNRValue(PyNs3SNRToBlockErrorRateRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetSNRValue(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateRecord_SetI2(PyNs3SNRToBlockErrorRateRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetI2(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateRecord_SetBlockErrorRate(PyNs3SNRToBlockErrorRateRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetBlockErrorRate(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateRecord_SetI1(PyNs3SNRToBlockErrorRateRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetI1(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateRecord_GetBlockErrorRate(PyNs3SNRToBlockErrorRateRecord *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetBlockErrorRate();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateRecord_GetSNRValue(PyNs3SNRToBlockErrorRateRecord *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetSNRValue();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateRecord_GetI2(PyNs3SNRToBlockErrorRateRecord *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetI2();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateRecord_GetI1(PyNs3SNRToBlockErrorRateRecord *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetI1();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SNRToBlockErrorRateRecord_SetBitErrorRate(PyNs3SNRToBlockErrorRateRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetBitErrorRate(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SNRToBlockErrorRateRecord__copy__(PyNs3SNRToBlockErrorRateRecord *self)
{

    PyNs3SNRToBlockErrorRateRecord *py_copy;
    py_copy = PyObject_New(PyNs3SNRToBlockErrorRateRecord, &PyNs3SNRToBlockErrorRateRecord_Type);
    py_copy->obj = new ns3::SNRToBlockErrorRateRecord(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3SNRToBlockErrorRateRecord_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SNRToBlockErrorRateRecord_methods[] = {
    {(char *) "GetBitErrorRate", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateRecord_GetBitErrorRate, METH_NOARGS, "GetBitErrorRate()\n\n" },
    {(char *) "GetSigma2", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateRecord_GetSigma2, METH_NOARGS, "GetSigma2()\n\n" },
    {(char *) "SetSNRValue", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateRecord_SetSNRValue, METH_KEYWORDS|METH_VARARGS, "SetSNRValue(arg0)\n\ntype: arg0: double" },
    {(char *) "SetI2", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateRecord_SetI2, METH_KEYWORDS|METH_VARARGS, "SetI2(arg0)\n\ntype: arg0: double" },
    {(char *) "SetBlockErrorRate", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateRecord_SetBlockErrorRate, METH_KEYWORDS|METH_VARARGS, "SetBlockErrorRate(arg0)\n\ntype: arg0: double" },
    {(char *) "SetI1", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateRecord_SetI1, METH_KEYWORDS|METH_VARARGS, "SetI1(arg0)\n\ntype: arg0: double" },
    {(char *) "GetBlockErrorRate", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateRecord_GetBlockErrorRate, METH_NOARGS, "GetBlockErrorRate()\n\n" },
    {(char *) "GetSNRValue", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateRecord_GetSNRValue, METH_NOARGS, "GetSNRValue()\n\n" },
    {(char *) "GetI2", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateRecord_GetI2, METH_NOARGS, "GetI2()\n\n" },
    {(char *) "GetI1", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateRecord_GetI1, METH_NOARGS, "GetI1()\n\n" },
    {(char *) "SetBitErrorRate", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateRecord_SetBitErrorRate, METH_KEYWORDS|METH_VARARGS, "SetBitErrorRate(arg0)\n\ntype: arg0: double" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SNRToBlockErrorRateRecord__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SNRToBlockErrorRateRecord__tp_dealloc(PyNs3SNRToBlockErrorRateRecord *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3SNRToBlockErrorRateRecord_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3SNRToBlockErrorRateRecord_wrapper_registry.end()) {
        PyNs3SNRToBlockErrorRateRecord_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::SNRToBlockErrorRateRecord *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SNRToBlockErrorRateRecord__tp_richcompare (PyNs3SNRToBlockErrorRateRecord *PYBINDGEN_UNUSED(self), PyNs3SNRToBlockErrorRateRecord *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SNRToBlockErrorRateRecord_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SNRToBlockErrorRateRecord_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.SNRToBlockErrorRateRecord",            /* tp_name */
    sizeof(PyNs3SNRToBlockErrorRateRecord),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SNRToBlockErrorRateRecord__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SNRToBlockErrorRateRecord(snrValue, bitErrorRate, BlockErrorRate, sigma2, I1, I2)\nSNRToBlockErrorRateRecord(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SNRToBlockErrorRateRecord__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SNRToBlockErrorRateRecord_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SNRToBlockErrorRateRecord__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3SSRecord_wrapper_registry;


static int
_wrap_PyNs3SSRecord__tp_init__0(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SSRecord *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SSRecord_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SSRecord(*((PyNs3SSRecord *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SSRecord__tp_init__1(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SSRecord();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SSRecord__tp_init__2(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Mac48Address *macAddress;
    const char *keywords[] = {"macAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &macAddress)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SSRecord(*((PyNs3Mac48Address *) macAddress)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SSRecord__tp_init__3(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Mac48Address *macAddress;
    PyNs3Ipv4Address *IPaddress;
    const char *keywords[] = {"macAddress", "IPaddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &macAddress, &PyNs3Ipv4Address_Type, &IPaddress)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SSRecord(*((PyNs3Mac48Address *) macAddress)->obj, *((PyNs3Ipv4Address *) IPaddress)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SSRecord__tp_init(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyNs3SSRecord__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SSRecord__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3SSRecord__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3SSRecord__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SSRecord_GetHasServiceFlowRtps(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetHasServiceFlowRtps();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetMacAddress(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetMacAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetAreServiceFlowsAllocated(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetAreServiceFlowsAllocated();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetModulationType(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    ns3::WimaxPhy::ModulationType retval;
    
    retval = self->obj->GetModulationType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_ResetRangingCorrectionRetries(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    
    self->obj->ResetRangingCorrectionRetries();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_EnablePollForRanging(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    
    self->obj->EnablePollForRanging();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_IncrementRangingCorrectionRetries(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    
    self->obj->IncrementRangingCorrectionRetries();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_SetBasicCid(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Cid *basicCid;
    const char *keywords[] = {"basicCid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &basicCid)) {
        return NULL;
    }
    self->obj->SetBasicCid(*((PyNs3Cid *) basicCid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_SetRangingStatus(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WimaxNetDevice::RangingStatus rangingStatus;
    const char *keywords[] = {"rangingStatus", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rangingStatus)) {
        return NULL;
    }
    self->obj->SetRangingStatus(rangingStatus);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetSfTransactionId(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSfTransactionId();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_SetAreServiceFlowsAllocated(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool val;
    PyObject *py_val;
    const char *keywords[] = {"val", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_val)) {
        return NULL;
    }
    val = (bool) PyObject_IsTrue(py_val);
    self->obj->SetAreServiceFlowsAllocated(val);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_SetPrimaryCid(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Cid *primaryCid;
    const char *keywords[] = {"primaryCid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &primaryCid)) {
        return NULL;
    }
    self->obj->SetPrimaryCid(*((PyNs3Cid *) primaryCid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_SetPollMeBit(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool pollMeBit;
    PyObject *py_pollMeBit;
    const char *keywords[] = {"pollMeBit", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_pollMeBit)) {
        return NULL;
    }
    pollMeBit = (bool) PyObject_IsTrue(py_pollMeBit);
    self->obj->SetPollMeBit(pollMeBit);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_SetModulationType(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WimaxPhy::ModulationType modulationType;
    const char *keywords[] = {"modulationType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &modulationType)) {
        return NULL;
    }
    self->obj->SetModulationType(modulationType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetRangingStatus(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    ns3::WimaxNetDevice::RangingStatus retval;
    
    retval = self->obj->GetRangingStatus();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_SetMacAddress(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *macAddress;
    const char *keywords[] = {"macAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &macAddress)) {
        return NULL;
    }
    self->obj->SetMacAddress(*((PyNs3Mac48Address *) macAddress)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetInvitedRangRetries(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInvitedRangRetries();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetPrimaryCid(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->GetPrimaryCid();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetDsaRsp(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    PyNs3DsaRsp *py_DsaRsp;
    
    ns3::DsaRsp retval = self->obj->GetDsaRsp();
    py_DsaRsp = PyObject_GC_New(PyNs3DsaRsp, &PyNs3DsaRsp_Type);
    py_DsaRsp->inst_dict = NULL;
    py_DsaRsp->inst_dict = NULL;
    py_DsaRsp->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_DsaRsp->obj = new ns3::DsaRsp(retval);
    PyNs3ObjectBase_wrapper_registry[(void *) py_DsaRsp->obj] = (PyObject *) py_DsaRsp;
    py_retval = Py_BuildValue((char *) "N", py_DsaRsp);
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_ResetInvitedRangingRetries(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    
    self->obj->ResetInvitedRangingRetries();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetBasicCid(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->GetBasicCid();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetHasServiceFlowNrtps(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetHasServiceFlowNrtps();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetDsaRspRetries(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetDsaRspRetries();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetHasServiceFlowUgs(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetHasServiceFlowUgs();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_SetDsaRspRetries(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int dsaRspRetries;
    const char *keywords[] = {"dsaRspRetries", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &dsaRspRetries)) {
        return NULL;
    }
    if (dsaRspRetries > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetDsaRspRetries(dsaRspRetries);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_SetIPAddress(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *IPaddress;
    const char *keywords[] = {"IPaddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &IPaddress)) {
        return NULL;
    }
    self->obj->SetIPAddress(*((PyNs3Ipv4Address *) IPaddress)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_IncrementInvitedRangingRetries(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    
    self->obj->IncrementInvitedRangingRetries();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_SetSfTransactionId(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int sfTransactionId;
    const char *keywords[] = {"sfTransactionId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &sfTransactionId)) {
        return NULL;
    }
    if (sfTransactionId > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSfTransactionId(sfTransactionId);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetRangingCorrectionRetries(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRangingCorrectionRetries();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetIPAddress(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetIPAddress();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetHasServiceFlowBe(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetHasServiceFlowBe();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetPollForRanging(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetPollForRanging();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_SetIsBroadcastSS(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool arg0;
    PyObject *py_arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_arg0)) {
        return NULL;
    }
    arg0 = (bool) PyObject_IsTrue(py_arg0);
    self->obj->SetIsBroadcastSS(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetPollMeBit(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetPollMeBit();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_GetIsBroadcastSS(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetIsBroadcastSS();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_IncrementDsaRspRetries(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    
    self->obj->IncrementDsaRspRetries();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_SetDsaRsp(PyNs3SSRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsaRsp *dsaRsp;
    const char *keywords[] = {"dsaRsp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsaRsp_Type, &dsaRsp)) {
        return NULL;
    }
    self->obj->SetDsaRsp(*((PyNs3DsaRsp *) dsaRsp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SSRecord_DisablePollForRanging(PyNs3SSRecord *self)
{
    PyObject *py_retval;
    
    self->obj->DisablePollForRanging();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SSRecord__copy__(PyNs3SSRecord *self)
{

    PyNs3SSRecord *py_copy;
    py_copy = PyObject_New(PyNs3SSRecord, &PyNs3SSRecord_Type);
    py_copy->obj = new ns3::SSRecord(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3SSRecord_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SSRecord_methods[] = {
    {(char *) "GetHasServiceFlowRtps", (PyCFunction) _wrap_PyNs3SSRecord_GetHasServiceFlowRtps, METH_NOARGS, "GetHasServiceFlowRtps()\n\n" },
    {(char *) "GetMacAddress", (PyCFunction) _wrap_PyNs3SSRecord_GetMacAddress, METH_NOARGS, "GetMacAddress()\n\n" },
    {(char *) "GetAreServiceFlowsAllocated", (PyCFunction) _wrap_PyNs3SSRecord_GetAreServiceFlowsAllocated, METH_NOARGS, "GetAreServiceFlowsAllocated()\n\n" },
    {(char *) "GetModulationType", (PyCFunction) _wrap_PyNs3SSRecord_GetModulationType, METH_NOARGS, "GetModulationType()\n\n" },
    {(char *) "ResetRangingCorrectionRetries", (PyCFunction) _wrap_PyNs3SSRecord_ResetRangingCorrectionRetries, METH_NOARGS, "ResetRangingCorrectionRetries()\n\n" },
    {(char *) "EnablePollForRanging", (PyCFunction) _wrap_PyNs3SSRecord_EnablePollForRanging, METH_NOARGS, "EnablePollForRanging()\n\n" },
    {(char *) "IncrementRangingCorrectionRetries", (PyCFunction) _wrap_PyNs3SSRecord_IncrementRangingCorrectionRetries, METH_NOARGS, "IncrementRangingCorrectionRetries()\n\n" },
    {(char *) "SetBasicCid", (PyCFunction) _wrap_PyNs3SSRecord_SetBasicCid, METH_KEYWORDS|METH_VARARGS, "SetBasicCid(basicCid)\n\ntype: basicCid: ns3::Cid" },
    {(char *) "SetRangingStatus", (PyCFunction) _wrap_PyNs3SSRecord_SetRangingStatus, METH_KEYWORDS|METH_VARARGS, "SetRangingStatus(rangingStatus)\n\ntype: rangingStatus: ns3::WimaxNetDevice::RangingStatus" },
    {(char *) "GetSfTransactionId", (PyCFunction) _wrap_PyNs3SSRecord_GetSfTransactionId, METH_NOARGS, "GetSfTransactionId()\n\n" },
    {(char *) "SetAreServiceFlowsAllocated", (PyCFunction) _wrap_PyNs3SSRecord_SetAreServiceFlowsAllocated, METH_KEYWORDS|METH_VARARGS, "SetAreServiceFlowsAllocated(val)\n\ntype: val: bool" },
    {(char *) "SetPrimaryCid", (PyCFunction) _wrap_PyNs3SSRecord_SetPrimaryCid, METH_KEYWORDS|METH_VARARGS, "SetPrimaryCid(primaryCid)\n\ntype: primaryCid: ns3::Cid" },
    {(char *) "SetPollMeBit", (PyCFunction) _wrap_PyNs3SSRecord_SetPollMeBit, METH_KEYWORDS|METH_VARARGS, "SetPollMeBit(pollMeBit)\n\ntype: pollMeBit: bool" },
    {(char *) "SetModulationType", (PyCFunction) _wrap_PyNs3SSRecord_SetModulationType, METH_KEYWORDS|METH_VARARGS, "SetModulationType(modulationType)\n\ntype: modulationType: ns3::WimaxPhy::ModulationType" },
    {(char *) "GetRangingStatus", (PyCFunction) _wrap_PyNs3SSRecord_GetRangingStatus, METH_NOARGS, "GetRangingStatus()\n\n" },
    {(char *) "SetMacAddress", (PyCFunction) _wrap_PyNs3SSRecord_SetMacAddress, METH_KEYWORDS|METH_VARARGS, "SetMacAddress(macAddress)\n\ntype: macAddress: ns3::Mac48Address" },
    {(char *) "GetInvitedRangRetries", (PyCFunction) _wrap_PyNs3SSRecord_GetInvitedRangRetries, METH_NOARGS, "GetInvitedRangRetries()\n\n" },
    {(char *) "GetPrimaryCid", (PyCFunction) _wrap_PyNs3SSRecord_GetPrimaryCid, METH_NOARGS, "GetPrimaryCid()\n\n" },
    {(char *) "GetDsaRsp", (PyCFunction) _wrap_PyNs3SSRecord_GetDsaRsp, METH_NOARGS, "GetDsaRsp()\n\n" },
    {(char *) "ResetInvitedRangingRetries", (PyCFunction) _wrap_PyNs3SSRecord_ResetInvitedRangingRetries, METH_NOARGS, "ResetInvitedRangingRetries()\n\n" },
    {(char *) "GetBasicCid", (PyCFunction) _wrap_PyNs3SSRecord_GetBasicCid, METH_NOARGS, "GetBasicCid()\n\n" },
    {(char *) "GetHasServiceFlowNrtps", (PyCFunction) _wrap_PyNs3SSRecord_GetHasServiceFlowNrtps, METH_NOARGS, "GetHasServiceFlowNrtps()\n\n" },
    {(char *) "GetDsaRspRetries", (PyCFunction) _wrap_PyNs3SSRecord_GetDsaRspRetries, METH_NOARGS, "GetDsaRspRetries()\n\n" },
    {(char *) "GetHasServiceFlowUgs", (PyCFunction) _wrap_PyNs3SSRecord_GetHasServiceFlowUgs, METH_NOARGS, "GetHasServiceFlowUgs()\n\n" },
    {(char *) "SetDsaRspRetries", (PyCFunction) _wrap_PyNs3SSRecord_SetDsaRspRetries, METH_KEYWORDS|METH_VARARGS, "SetDsaRspRetries(dsaRspRetries)\n\ntype: dsaRspRetries: uint8_t" },
    {(char *) "SetIPAddress", (PyCFunction) _wrap_PyNs3SSRecord_SetIPAddress, METH_KEYWORDS|METH_VARARGS, "SetIPAddress(IPaddress)\n\ntype: IPaddress: ns3::Ipv4Address" },
    {(char *) "IncrementInvitedRangingRetries", (PyCFunction) _wrap_PyNs3SSRecord_IncrementInvitedRangingRetries, METH_NOARGS, "IncrementInvitedRangingRetries()\n\n" },
    {(char *) "SetSfTransactionId", (PyCFunction) _wrap_PyNs3SSRecord_SetSfTransactionId, METH_KEYWORDS|METH_VARARGS, "SetSfTransactionId(sfTransactionId)\n\ntype: sfTransactionId: uint16_t" },
    {(char *) "GetRangingCorrectionRetries", (PyCFunction) _wrap_PyNs3SSRecord_GetRangingCorrectionRetries, METH_NOARGS, "GetRangingCorrectionRetries()\n\n" },
    {(char *) "GetIPAddress", (PyCFunction) _wrap_PyNs3SSRecord_GetIPAddress, METH_NOARGS, "GetIPAddress()\n\n" },
    {(char *) "GetHasServiceFlowBe", (PyCFunction) _wrap_PyNs3SSRecord_GetHasServiceFlowBe, METH_NOARGS, "GetHasServiceFlowBe()\n\n" },
    {(char *) "GetPollForRanging", (PyCFunction) _wrap_PyNs3SSRecord_GetPollForRanging, METH_NOARGS, "GetPollForRanging()\n\n" },
    {(char *) "SetIsBroadcastSS", (PyCFunction) _wrap_PyNs3SSRecord_SetIsBroadcastSS, METH_KEYWORDS|METH_VARARGS, "SetIsBroadcastSS(arg0)\n\ntype: arg0: bool" },
    {(char *) "GetPollMeBit", (PyCFunction) _wrap_PyNs3SSRecord_GetPollMeBit, METH_NOARGS, "GetPollMeBit()\n\n" },
    {(char *) "GetIsBroadcastSS", (PyCFunction) _wrap_PyNs3SSRecord_GetIsBroadcastSS, METH_NOARGS, "GetIsBroadcastSS()\n\n" },
    {(char *) "IncrementDsaRspRetries", (PyCFunction) _wrap_PyNs3SSRecord_IncrementDsaRspRetries, METH_NOARGS, "IncrementDsaRspRetries()\n\n" },
    {(char *) "SetDsaRsp", (PyCFunction) _wrap_PyNs3SSRecord_SetDsaRsp, METH_KEYWORDS|METH_VARARGS, "SetDsaRsp(dsaRsp)\n\ntype: dsaRsp: ns3::DsaRsp" },
    {(char *) "DisablePollForRanging", (PyCFunction) _wrap_PyNs3SSRecord_DisablePollForRanging, METH_NOARGS, "DisablePollForRanging()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SSRecord__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SSRecord__tp_dealloc(PyNs3SSRecord *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3SSRecord_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3SSRecord_wrapper_registry.end()) {
        PyNs3SSRecord_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::SSRecord *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SSRecord__tp_richcompare (PyNs3SSRecord *PYBINDGEN_UNUSED(self), PyNs3SSRecord *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SSRecord_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SSRecord_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.SSRecord",            /* tp_name */
    sizeof(PyNs3SSRecord),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SSRecord__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SSRecord(macAddress, IPaddress)\nSSRecord(macAddress)\nSSRecord(arg0)\nSSRecord()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SSRecord__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SSRecord_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SSRecord__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3SendParams_wrapper_registry;


static int
_wrap_PyNs3SendParams__tp_init__0(PyNs3SendParams *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SendParams *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SendParams_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SendParams(*((PyNs3SendParams *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SendParams__tp_init__1(PyNs3SendParams *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SendParams();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SendParams__tp_init(PyNs3SendParams *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SendParams__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SendParams__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3SendParams__copy__(PyNs3SendParams *self)
{

    PyNs3SendParams *py_copy;
    py_copy = PyObject_New(PyNs3SendParams, &PyNs3SendParams_Type);
    py_copy->obj = new ns3::SendParams(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3SendParams_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SendParams_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SendParams__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SendParams__tp_dealloc(PyNs3SendParams *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3SendParams_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3SendParams_wrapper_registry.end()) {
        PyNs3SendParams_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::SendParams *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SendParams__tp_richcompare (PyNs3SendParams *PYBINDGEN_UNUSED(self), PyNs3SendParams *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SendParams_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SendParams_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.SendParams",            /* tp_name */
    sizeof(PyNs3SendParams),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SendParams__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "SendParams(arg0)\nSendParams()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SendParams__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SendParams_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SendParams__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3ServiceFlow_wrapper_registry;


static int
_wrap_PyNs3ServiceFlow__tp_init__0(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Tlv *tlv;
    const char *keywords[] = {"tlv", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Tlv_Type, &tlv)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ServiceFlow(*((PyNs3Tlv *) tlv)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ServiceFlow__tp_init__1(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    ns3::ServiceFlow::Direction direction;
    const char *keywords[] = {"direction", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &direction)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ServiceFlow(direction);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ServiceFlow__tp_init__2(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ServiceFlow();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ServiceFlow__tp_init__3(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ServiceFlow *sf;
    const char *keywords[] = {"sf", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ServiceFlow_Type, &sf)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ServiceFlow(*((PyNs3ServiceFlow *) sf)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ServiceFlow__tp_init__4(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    unsigned int sfid;
    ns3::ServiceFlow::Direction direction;
    PyNs3WimaxConnection *connection;
    ns3::WimaxConnection *connection_ptr;
    const char *keywords[] = {"sfid", "direction", "connection", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IiO!", (char **) keywords, &sfid, &direction, &PyNs3WimaxConnection_Type, &connection)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    connection_ptr = (connection ? connection->obj : NULL);
    self->obj = new ns3::ServiceFlow(sfid, direction, ns3::Ptr< ns3::WimaxConnection  > (connection_ptr));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3ServiceFlow__tp_init(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[5] = {0,};
    retval = _wrap_PyNs3ServiceFlow__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ServiceFlow__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3ServiceFlow__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3ServiceFlow__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyNs3ServiceFlow__tp_init__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    error_list = PyList_New(5);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetQosParamSetType(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetQosParamSetType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_InitValues(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    
    self->obj->InitValues();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetArqBlockLifeTime(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetArqBlockLifeTime(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetArqRetryTimeoutTx(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetArqRetryTimeoutTx(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetTrafficPriority(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTrafficPriority();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}



PyObject *
_wrap_PyNs3ServiceFlow_HasPackets__0(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    bool retval;
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->HasPackets();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3ServiceFlow_HasPackets__1(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    bool retval;
    ns3::MacHeaderType::HeaderType packetType;
    const char *keywords[] = {"packetType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &packetType)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->HasPackets(packetType);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject * _wrap_PyNs3ServiceFlow_HasPackets(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ServiceFlow_HasPackets__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ServiceFlow_HasPackets__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetSfid(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetSfid(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetIsEnabled(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetIsEnabled();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetArqBlockSize(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetArqBlockSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetCid(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetCid();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetArqSyncLoss(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetArqSyncLoss(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetServiceSchedulingType(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    ns3::ServiceFlow::SchedulingType retval;
    
    retval = self->obj->GetServiceSchedulingType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetArqEnable(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetArqEnable(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetMinTolerableTrafficRate(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMinTolerableTrafficRate();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetMinReservedTrafficRate(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetMinReservedTrafficRate(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetIsEnabled(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool isEnabled;
    PyObject *py_isEnabled;
    const char *keywords[] = {"isEnabled", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_isEnabled)) {
        return NULL;
    }
    isEnabled = (bool) PyObject_IsTrue(py_isEnabled);
    self->obj->SetIsEnabled(isEnabled);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetArqSyncLoss(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetArqSyncLoss();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetMaximumLatency(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetMaximumLatency(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetServiceSchedulingType(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::ServiceFlow::SchedulingType arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetServiceSchedulingType(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetArqRetryTimeoutTx(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetArqRetryTimeoutTx();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetDirection(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::ServiceFlow::Direction direction;
    const char *keywords[] = {"direction", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &direction)) {
        return NULL;
    }
    self->obj->SetDirection(direction);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetMaxSustainedTrafficRate(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMaxSustainedTrafficRate();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetMaxSustainedTrafficRate(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetMaxSustainedTrafficRate(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetRequestTransmissionPolicy(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetRequestTransmissionPolicy(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetConnection(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxConnection > retval;
    PyNs3WimaxConnection *py_WimaxConnection;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetConnection();
    if (!(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3WimaxConnection__PythonHelper).name())
    {
        py_WimaxConnection = reinterpret_cast< PyNs3WimaxConnection* >(reinterpret_cast< PyNs3WimaxConnection__PythonHelper* >(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))->m_pyself);
        py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval));
        Py_INCREF(py_WimaxConnection);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WimaxConnection = NULL;
        } else {
            py_WimaxConnection = (PyNs3WimaxConnection *) wrapper_lookup_iter->second;
            Py_INCREF(py_WimaxConnection);
        }
    
        if (py_WimaxConnection == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))), &PyNs3WimaxConnection_Type);
            py_WimaxConnection = PyObject_GC_New(PyNs3WimaxConnection, wrapper_type);
            py_WimaxConnection->inst_dict = NULL;
    
            py_WimaxConnection->inst_dict = NULL;
            py_WimaxConnection->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval))->Ref();
            py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxConnection->obj] = (PyObject *) py_WimaxConnection;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxConnection);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetModulation(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    ns3::WimaxPhy::ModulationType retval;
    
    retval = self->obj->GetModulation();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetConvergenceSublayerParam(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    PyNs3CsParameters *py_CsParameters;
    
    ns3::CsParameters retval = self->obj->GetConvergenceSublayerParam();
    py_CsParameters = PyObject_New(PyNs3CsParameters, &PyNs3CsParameters_Type);
    py_CsParameters->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_CsParameters->obj = new ns3::CsParameters(retval);
    PyNs3CsParameters_wrapper_registry[(void *) py_CsParameters->obj] = (PyObject *) py_CsParameters;
    py_retval = Py_BuildValue((char *) "N", py_CsParameters);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetCsSpecification(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::ServiceFlow::CsSpecification arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetCsSpecification(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetUnsolicitedGrantInterval(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetUnsolicitedGrantInterval();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_ToTlv(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    PyNs3Tlv *py_Tlv;
    
    ns3::Tlv retval = self->obj->ToTlv();
    py_Tlv = PyObject_GC_New(PyNs3Tlv, &PyNs3Tlv_Type);
    py_Tlv->inst_dict = NULL;
    py_Tlv->inst_dict = NULL;
    py_Tlv->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Tlv->obj = new ns3::Tlv(retval);
    PyNs3ObjectBase_wrapper_registry[(void *) py_Tlv->obj] = (PyObject *) py_Tlv;
    py_retval = Py_BuildValue((char *) "N", py_Tlv);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetDirection(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    ns3::ServiceFlow::Direction retval;
    
    retval = self->obj->GetDirection();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetToleratedJitter(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetToleratedJitter();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetFixedversusVariableSduIndicator(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFixedversusVariableSduIndicator(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetToleratedJitter(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetToleratedJitter(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetQueue(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxMacQueue > retval;
    PyNs3WimaxMacQueue *py_WimaxMacQueue;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetQueue();
    if (!(const_cast<ns3::WimaxMacQueue *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxMacQueue *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WimaxMacQueue = NULL;
    } else {
        py_WimaxMacQueue = (PyNs3WimaxMacQueue *) wrapper_lookup_iter->second;
        Py_INCREF(py_WimaxMacQueue);
    }
    
    if (py_WimaxMacQueue == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxMacQueue *> (ns3::PeekPointer (retval)))), &PyNs3WimaxMacQueue_Type);
        py_WimaxMacQueue = PyObject_GC_New(PyNs3WimaxMacQueue, wrapper_type);
        py_WimaxMacQueue->inst_dict = NULL;
    
        py_WimaxMacQueue->inst_dict = NULL;
        py_WimaxMacQueue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WimaxMacQueue *> (ns3::PeekPointer (retval))->Ref();
        py_WimaxMacQueue->obj = const_cast<ns3::WimaxMacQueue *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxMacQueue->obj] = (PyObject *) py_WimaxMacQueue;
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxMacQueue);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetSchedulingTypeStr(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    char *retval;
    
    retval = self->obj->GetSchedulingTypeStr();
    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetType(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::ServiceFlow::Type type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    self->obj->SetType(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetTrafficPriority(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTrafficPriority(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetArqBlockLifeTime(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetArqBlockLifeTime();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetArqDeliverInOrder(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetArqDeliverInOrder();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetMaximumLatency(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMaximumLatency();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetSfid(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSfid();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetMinTolerableTrafficRate(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetMinTolerableTrafficRate(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetSchedulingType(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    ns3::ServiceFlow::SchedulingType retval;
    
    retval = self->obj->GetSchedulingType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetConvergenceSublayerParam(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3CsParameters *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CsParameters_Type, &arg0)) {
        return NULL;
    }
    self->obj->SetConvergenceSublayerParam(*((PyNs3CsParameters *) arg0)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetSduSize(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSduSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetIsMulticast(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool isMulticast;
    PyObject *py_isMulticast;
    const char *keywords[] = {"isMulticast", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_isMulticast)) {
        return NULL;
    }
    isMulticast = (bool) PyObject_IsTrue(py_isMulticast);
    self->obj->SetIsMulticast(isMulticast);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_CleanUpQueue(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    
    self->obj->CleanUpQueue();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetTargetSAID(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTargetSAID(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetArqEnable(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetArqEnable();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetQosParamSetType(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetQosParamSetType(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetMaxTrafficBurst(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMaxTrafficBurst();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetArqRetryTimeoutRx(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetArqRetryTimeoutRx(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetUnsolicitedGrantInterval(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetUnsolicitedGrantInterval(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetArqRetryTimeoutRx(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetArqRetryTimeoutRx();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetModulation(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WimaxPhy::ModulationType modulationType;
    const char *keywords[] = {"modulationType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &modulationType)) {
        return NULL;
    }
    self->obj->SetModulation(modulationType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetMinReservedTrafficRate(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMinReservedTrafficRate();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetArqWindowSize(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetArqWindowSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_CheckClassifierMatch(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *srcAddress;
    PyNs3Ipv4Address *dstAddress;
    int srcPort;
    int dstPort;
    int proto;
    const char *keywords[] = {"srcAddress", "dstAddress", "srcPort", "dstPort", "proto", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!iii", (char **) keywords, &PyNs3Ipv4Address_Type, &srcAddress, &PyNs3Ipv4Address_Type, &dstAddress, &srcPort, &dstPort, &proto)) {
        return NULL;
    }
    if (srcPort > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (dstPort > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (proto > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->CheckClassifierMatch(*((PyNs3Ipv4Address *) srcAddress)->obj, *((PyNs3Ipv4Address *) dstAddress)->obj, srcPort, dstPort, proto);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_CopyParametersFrom(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ServiceFlow *sf;
    const char *keywords[] = {"sf", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ServiceFlow_Type, &sf)) {
        return NULL;
    }
    self->obj->CopyParametersFrom(*((PyNs3ServiceFlow *) sf)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_PrintQoSParameters(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    
    self->obj->PrintQoSParameters();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetArqDeliverInOrder(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetArqDeliverInOrder(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetSduSize(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSduSize(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetIsMulticast(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetIsMulticast();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetUnsolicitedPollingInterval(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetUnsolicitedPollingInterval(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetType(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    ns3::ServiceFlow::Type retval;
    
    retval = self->obj->GetType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetArqBlockSize(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetArqBlockSize(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetArqPurgeTimeout(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetArqPurgeTimeout(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetUnsolicitedPollingInterval(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetUnsolicitedPollingInterval();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetArqWindowSize(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetArqWindowSize(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetArqPurgeTimeout(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetArqPurgeTimeout();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetCsSpecification(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    ns3::ServiceFlow::CsSpecification retval;
    
    retval = self->obj->GetCsSpecification();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetMaxTrafficBurst(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetMaxTrafficBurst(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetConnection(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WimaxConnection *connection;
    ns3::WimaxConnection *connection_ptr;
    const char *keywords[] = {"connection", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WimaxConnection_Type, &connection)) {
        return NULL;
    }
    connection_ptr = (connection ? connection->obj : NULL);
    self->obj->SetConnection(ns3::Ptr< ns3::WimaxConnection  > (connection_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_SetServiceClassName(PyNs3ServiceFlow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *arg0;
    Py_ssize_t arg0_len;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &arg0, &arg0_len)) {
        return NULL;
    }
    self->obj->SetServiceClassName(std::string(arg0, arg0_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetRequestTransmissionPolicy(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetRequestTransmissionPolicy();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetFixedversusVariableSduIndicator(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetFixedversusVariableSduIndicator();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetTargetSAID(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetTargetSAID();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlow_GetServiceClassName(PyNs3ServiceFlow *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetServiceClassName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


static PyObject*
_wrap_PyNs3ServiceFlow__copy__(PyNs3ServiceFlow *self)
{

    PyNs3ServiceFlow *py_copy;
    py_copy = PyObject_New(PyNs3ServiceFlow, &PyNs3ServiceFlow_Type);
    py_copy->obj = new ns3::ServiceFlow(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ServiceFlow_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ServiceFlow_methods[] = {
    {(char *) "GetQosParamSetType", (PyCFunction) _wrap_PyNs3ServiceFlow_GetQosParamSetType, METH_NOARGS, "GetQosParamSetType()\n\n" },
    {(char *) "InitValues", (PyCFunction) _wrap_PyNs3ServiceFlow_InitValues, METH_NOARGS, "InitValues()\n\n" },
    {(char *) "SetArqBlockLifeTime", (PyCFunction) _wrap_PyNs3ServiceFlow_SetArqBlockLifeTime, METH_KEYWORDS|METH_VARARGS, "SetArqBlockLifeTime(arg0)\n\ntype: arg0: uint16_t" },
    {(char *) "SetArqRetryTimeoutTx", (PyCFunction) _wrap_PyNs3ServiceFlow_SetArqRetryTimeoutTx, METH_KEYWORDS|METH_VARARGS, "SetArqRetryTimeoutTx(arg0)\n\ntype: arg0: uint16_t" },
    {(char *) "GetTrafficPriority", (PyCFunction) _wrap_PyNs3ServiceFlow_GetTrafficPriority, METH_NOARGS, "GetTrafficPriority()\n\n" },
    {(char *) "HasPackets", (PyCFunction) _wrap_PyNs3ServiceFlow_HasPackets, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSfid", (PyCFunction) _wrap_PyNs3ServiceFlow_SetSfid, METH_KEYWORDS|METH_VARARGS, "SetSfid(arg0)\n\ntype: arg0: uint32_t" },
    {(char *) "GetIsEnabled", (PyCFunction) _wrap_PyNs3ServiceFlow_GetIsEnabled, METH_NOARGS, "GetIsEnabled()\n\n" },
    {(char *) "GetArqBlockSize", (PyCFunction) _wrap_PyNs3ServiceFlow_GetArqBlockSize, METH_NOARGS, "GetArqBlockSize()\n\n" },
    {(char *) "GetCid", (PyCFunction) _wrap_PyNs3ServiceFlow_GetCid, METH_NOARGS, "GetCid()\n\n" },
    {(char *) "SetArqSyncLoss", (PyCFunction) _wrap_PyNs3ServiceFlow_SetArqSyncLoss, METH_KEYWORDS|METH_VARARGS, "SetArqSyncLoss(arg0)\n\ntype: arg0: uint16_t" },
    {(char *) "GetServiceSchedulingType", (PyCFunction) _wrap_PyNs3ServiceFlow_GetServiceSchedulingType, METH_NOARGS, "GetServiceSchedulingType()\n\n" },
    {(char *) "SetArqEnable", (PyCFunction) _wrap_PyNs3ServiceFlow_SetArqEnable, METH_KEYWORDS|METH_VARARGS, "SetArqEnable(arg0)\n\ntype: arg0: uint8_t" },
    {(char *) "GetMinTolerableTrafficRate", (PyCFunction) _wrap_PyNs3ServiceFlow_GetMinTolerableTrafficRate, METH_NOARGS, "GetMinTolerableTrafficRate()\n\n" },
    {(char *) "SetMinReservedTrafficRate", (PyCFunction) _wrap_PyNs3ServiceFlow_SetMinReservedTrafficRate, METH_KEYWORDS|METH_VARARGS, "SetMinReservedTrafficRate(arg0)\n\ntype: arg0: uint32_t" },
    {(char *) "SetIsEnabled", (PyCFunction) _wrap_PyNs3ServiceFlow_SetIsEnabled, METH_KEYWORDS|METH_VARARGS, "SetIsEnabled(isEnabled)\n\ntype: isEnabled: bool" },
    {(char *) "GetArqSyncLoss", (PyCFunction) _wrap_PyNs3ServiceFlow_GetArqSyncLoss, METH_NOARGS, "GetArqSyncLoss()\n\n" },
    {(char *) "SetMaximumLatency", (PyCFunction) _wrap_PyNs3ServiceFlow_SetMaximumLatency, METH_KEYWORDS|METH_VARARGS, "SetMaximumLatency(arg0)\n\ntype: arg0: uint32_t" },
    {(char *) "SetServiceSchedulingType", (PyCFunction) _wrap_PyNs3ServiceFlow_SetServiceSchedulingType, METH_KEYWORDS|METH_VARARGS, "SetServiceSchedulingType(arg0)\n\ntype: arg0: ns3::ServiceFlow::SchedulingType" },
    {(char *) "GetArqRetryTimeoutTx", (PyCFunction) _wrap_PyNs3ServiceFlow_GetArqRetryTimeoutTx, METH_NOARGS, "GetArqRetryTimeoutTx()\n\n" },
    {(char *) "SetDirection", (PyCFunction) _wrap_PyNs3ServiceFlow_SetDirection, METH_KEYWORDS|METH_VARARGS, "SetDirection(direction)\n\ntype: direction: ns3::ServiceFlow::Direction" },
    {(char *) "GetMaxSustainedTrafficRate", (PyCFunction) _wrap_PyNs3ServiceFlow_GetMaxSustainedTrafficRate, METH_NOARGS, "GetMaxSustainedTrafficRate()\n\n" },
    {(char *) "SetMaxSustainedTrafficRate", (PyCFunction) _wrap_PyNs3ServiceFlow_SetMaxSustainedTrafficRate, METH_KEYWORDS|METH_VARARGS, "SetMaxSustainedTrafficRate(arg0)\n\ntype: arg0: uint32_t" },
    {(char *) "SetRequestTransmissionPolicy", (PyCFunction) _wrap_PyNs3ServiceFlow_SetRequestTransmissionPolicy, METH_KEYWORDS|METH_VARARGS, "SetRequestTransmissionPolicy(arg0)\n\ntype: arg0: uint32_t" },
    {(char *) "GetConnection", (PyCFunction) _wrap_PyNs3ServiceFlow_GetConnection, METH_NOARGS, "GetConnection()\n\n" },
    {(char *) "GetModulation", (PyCFunction) _wrap_PyNs3ServiceFlow_GetModulation, METH_NOARGS, "GetModulation()\n\n" },
    {(char *) "GetConvergenceSublayerParam", (PyCFunction) _wrap_PyNs3ServiceFlow_GetConvergenceSublayerParam, METH_NOARGS, "GetConvergenceSublayerParam()\n\n" },
    {(char *) "SetCsSpecification", (PyCFunction) _wrap_PyNs3ServiceFlow_SetCsSpecification, METH_KEYWORDS|METH_VARARGS, "SetCsSpecification(arg0)\n\ntype: arg0: ns3::ServiceFlow::CsSpecification" },
    {(char *) "GetUnsolicitedGrantInterval", (PyCFunction) _wrap_PyNs3ServiceFlow_GetUnsolicitedGrantInterval, METH_NOARGS, "GetUnsolicitedGrantInterval()\n\n" },
    {(char *) "ToTlv", (PyCFunction) _wrap_PyNs3ServiceFlow_ToTlv, METH_NOARGS, "ToTlv()\n\n" },
    {(char *) "GetDirection", (PyCFunction) _wrap_PyNs3ServiceFlow_GetDirection, METH_NOARGS, "GetDirection()\n\n" },
    {(char *) "GetToleratedJitter", (PyCFunction) _wrap_PyNs3ServiceFlow_GetToleratedJitter, METH_NOARGS, "GetToleratedJitter()\n\n" },
    {(char *) "SetFixedversusVariableSduIndicator", (PyCFunction) _wrap_PyNs3ServiceFlow_SetFixedversusVariableSduIndicator, METH_KEYWORDS|METH_VARARGS, "SetFixedversusVariableSduIndicator(arg0)\n\ntype: arg0: uint8_t" },
    {(char *) "SetToleratedJitter", (PyCFunction) _wrap_PyNs3ServiceFlow_SetToleratedJitter, METH_KEYWORDS|METH_VARARGS, "SetToleratedJitter(arg0)\n\ntype: arg0: uint32_t" },
    {(char *) "GetQueue", (PyCFunction) _wrap_PyNs3ServiceFlow_GetQueue, METH_NOARGS, "GetQueue()\n\n" },
    {(char *) "GetSchedulingTypeStr", (PyCFunction) _wrap_PyNs3ServiceFlow_GetSchedulingTypeStr, METH_NOARGS, "GetSchedulingTypeStr()\n\n" },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3ServiceFlow_SetType, METH_KEYWORDS|METH_VARARGS, "SetType(type)\n\ntype: type: ns3::ServiceFlow::Type" },
    {(char *) "SetTrafficPriority", (PyCFunction) _wrap_PyNs3ServiceFlow_SetTrafficPriority, METH_KEYWORDS|METH_VARARGS, "SetTrafficPriority(arg0)\n\ntype: arg0: uint8_t" },
    {(char *) "GetArqBlockLifeTime", (PyCFunction) _wrap_PyNs3ServiceFlow_GetArqBlockLifeTime, METH_NOARGS, "GetArqBlockLifeTime()\n\n" },
    {(char *) "GetArqDeliverInOrder", (PyCFunction) _wrap_PyNs3ServiceFlow_GetArqDeliverInOrder, METH_NOARGS, "GetArqDeliverInOrder()\n\n" },
    {(char *) "GetMaximumLatency", (PyCFunction) _wrap_PyNs3ServiceFlow_GetMaximumLatency, METH_NOARGS, "GetMaximumLatency()\n\n" },
    {(char *) "GetSfid", (PyCFunction) _wrap_PyNs3ServiceFlow_GetSfid, METH_NOARGS, "GetSfid()\n\n" },
    {(char *) "SetMinTolerableTrafficRate", (PyCFunction) _wrap_PyNs3ServiceFlow_SetMinTolerableTrafficRate, METH_KEYWORDS|METH_VARARGS, "SetMinTolerableTrafficRate(arg0)\n\ntype: arg0: uint32_t" },
    {(char *) "GetSchedulingType", (PyCFunction) _wrap_PyNs3ServiceFlow_GetSchedulingType, METH_NOARGS, "GetSchedulingType()\n\n" },
    {(char *) "SetConvergenceSublayerParam", (PyCFunction) _wrap_PyNs3ServiceFlow_SetConvergenceSublayerParam, METH_KEYWORDS|METH_VARARGS, "SetConvergenceSublayerParam(arg0)\n\ntype: arg0: ns3::CsParameters" },
    {(char *) "GetSduSize", (PyCFunction) _wrap_PyNs3ServiceFlow_GetSduSize, METH_NOARGS, "GetSduSize()\n\n" },
    {(char *) "SetIsMulticast", (PyCFunction) _wrap_PyNs3ServiceFlow_SetIsMulticast, METH_KEYWORDS|METH_VARARGS, "SetIsMulticast(isMulticast)\n\ntype: isMulticast: bool" },
    {(char *) "CleanUpQueue", (PyCFunction) _wrap_PyNs3ServiceFlow_CleanUpQueue, METH_NOARGS, "CleanUpQueue()\n\n" },
    {(char *) "SetTargetSAID", (PyCFunction) _wrap_PyNs3ServiceFlow_SetTargetSAID, METH_KEYWORDS|METH_VARARGS, "SetTargetSAID(arg0)\n\ntype: arg0: uint16_t" },
    {(char *) "GetArqEnable", (PyCFunction) _wrap_PyNs3ServiceFlow_GetArqEnable, METH_NOARGS, "GetArqEnable()\n\n" },
    {(char *) "SetQosParamSetType", (PyCFunction) _wrap_PyNs3ServiceFlow_SetQosParamSetType, METH_KEYWORDS|METH_VARARGS, "SetQosParamSetType(arg0)\n\ntype: arg0: uint8_t" },
    {(char *) "GetMaxTrafficBurst", (PyCFunction) _wrap_PyNs3ServiceFlow_GetMaxTrafficBurst, METH_NOARGS, "GetMaxTrafficBurst()\n\n" },
    {(char *) "SetArqRetryTimeoutRx", (PyCFunction) _wrap_PyNs3ServiceFlow_SetArqRetryTimeoutRx, METH_KEYWORDS|METH_VARARGS, "SetArqRetryTimeoutRx(arg0)\n\ntype: arg0: uint16_t" },
    {(char *) "SetUnsolicitedGrantInterval", (PyCFunction) _wrap_PyNs3ServiceFlow_SetUnsolicitedGrantInterval, METH_KEYWORDS|METH_VARARGS, "SetUnsolicitedGrantInterval(arg0)\n\ntype: arg0: uint16_t" },
    {(char *) "GetArqRetryTimeoutRx", (PyCFunction) _wrap_PyNs3ServiceFlow_GetArqRetryTimeoutRx, METH_NOARGS, "GetArqRetryTimeoutRx()\n\n" },
    {(char *) "SetModulation", (PyCFunction) _wrap_PyNs3ServiceFlow_SetModulation, METH_KEYWORDS|METH_VARARGS, "SetModulation(modulationType)\n\ntype: modulationType: ns3::WimaxPhy::ModulationType" },
    {(char *) "GetMinReservedTrafficRate", (PyCFunction) _wrap_PyNs3ServiceFlow_GetMinReservedTrafficRate, METH_NOARGS, "GetMinReservedTrafficRate()\n\n" },
    {(char *) "GetArqWindowSize", (PyCFunction) _wrap_PyNs3ServiceFlow_GetArqWindowSize, METH_NOARGS, "GetArqWindowSize()\n\n" },
    {(char *) "CheckClassifierMatch", (PyCFunction) _wrap_PyNs3ServiceFlow_CheckClassifierMatch, METH_KEYWORDS|METH_VARARGS, "CheckClassifierMatch(srcAddress, dstAddress, srcPort, dstPort, proto)\n\ntype: srcAddress: ns3::Ipv4Address\ntype: dstAddress: ns3::Ipv4Address\ntype: srcPort: uint16_t\ntype: dstPort: uint16_t\ntype: proto: uint8_t" },
    {(char *) "CopyParametersFrom", (PyCFunction) _wrap_PyNs3ServiceFlow_CopyParametersFrom, METH_KEYWORDS|METH_VARARGS, "CopyParametersFrom(sf)\n\ntype: sf: ns3::ServiceFlow" },
    {(char *) "PrintQoSParameters", (PyCFunction) _wrap_PyNs3ServiceFlow_PrintQoSParameters, METH_NOARGS, "PrintQoSParameters()\n\n" },
    {(char *) "SetArqDeliverInOrder", (PyCFunction) _wrap_PyNs3ServiceFlow_SetArqDeliverInOrder, METH_KEYWORDS|METH_VARARGS, "SetArqDeliverInOrder(arg0)\n\ntype: arg0: uint8_t" },
    {(char *) "SetSduSize", (PyCFunction) _wrap_PyNs3ServiceFlow_SetSduSize, METH_KEYWORDS|METH_VARARGS, "SetSduSize(arg0)\n\ntype: arg0: uint8_t" },
    {(char *) "GetIsMulticast", (PyCFunction) _wrap_PyNs3ServiceFlow_GetIsMulticast, METH_NOARGS, "GetIsMulticast()\n\n" },
    {(char *) "SetUnsolicitedPollingInterval", (PyCFunction) _wrap_PyNs3ServiceFlow_SetUnsolicitedPollingInterval, METH_KEYWORDS|METH_VARARGS, "SetUnsolicitedPollingInterval(arg0)\n\ntype: arg0: uint16_t" },
    {(char *) "GetType", (PyCFunction) _wrap_PyNs3ServiceFlow_GetType, METH_NOARGS, "GetType()\n\n" },
    {(char *) "SetArqBlockSize", (PyCFunction) _wrap_PyNs3ServiceFlow_SetArqBlockSize, METH_KEYWORDS|METH_VARARGS, "SetArqBlockSize(arg0)\n\ntype: arg0: uint16_t" },
    {(char *) "SetArqPurgeTimeout", (PyCFunction) _wrap_PyNs3ServiceFlow_SetArqPurgeTimeout, METH_KEYWORDS|METH_VARARGS, "SetArqPurgeTimeout(arg0)\n\ntype: arg0: uint16_t" },
    {(char *) "GetUnsolicitedPollingInterval", (PyCFunction) _wrap_PyNs3ServiceFlow_GetUnsolicitedPollingInterval, METH_NOARGS, "GetUnsolicitedPollingInterval()\n\n" },
    {(char *) "SetArqWindowSize", (PyCFunction) _wrap_PyNs3ServiceFlow_SetArqWindowSize, METH_KEYWORDS|METH_VARARGS, "SetArqWindowSize(arg0)\n\ntype: arg0: uint16_t" },
    {(char *) "GetArqPurgeTimeout", (PyCFunction) _wrap_PyNs3ServiceFlow_GetArqPurgeTimeout, METH_NOARGS, "GetArqPurgeTimeout()\n\n" },
    {(char *) "GetCsSpecification", (PyCFunction) _wrap_PyNs3ServiceFlow_GetCsSpecification, METH_NOARGS, "GetCsSpecification()\n\n" },
    {(char *) "SetMaxTrafficBurst", (PyCFunction) _wrap_PyNs3ServiceFlow_SetMaxTrafficBurst, METH_KEYWORDS|METH_VARARGS, "SetMaxTrafficBurst(arg0)\n\ntype: arg0: uint32_t" },
    {(char *) "SetConnection", (PyCFunction) _wrap_PyNs3ServiceFlow_SetConnection, METH_KEYWORDS|METH_VARARGS, "SetConnection(connection)\n\ntype: connection: ns3::Ptr< ns3::WimaxConnection >" },
    {(char *) "SetServiceClassName", (PyCFunction) _wrap_PyNs3ServiceFlow_SetServiceClassName, METH_KEYWORDS|METH_VARARGS, "SetServiceClassName(arg0)\n\ntype: arg0: std::string" },
    {(char *) "GetRequestTransmissionPolicy", (PyCFunction) _wrap_PyNs3ServiceFlow_GetRequestTransmissionPolicy, METH_NOARGS, "GetRequestTransmissionPolicy()\n\n" },
    {(char *) "GetFixedversusVariableSduIndicator", (PyCFunction) _wrap_PyNs3ServiceFlow_GetFixedversusVariableSduIndicator, METH_NOARGS, "GetFixedversusVariableSduIndicator()\n\n" },
    {(char *) "GetTargetSAID", (PyCFunction) _wrap_PyNs3ServiceFlow_GetTargetSAID, METH_NOARGS, "GetTargetSAID()\n\n" },
    {(char *) "GetServiceClassName", (PyCFunction) _wrap_PyNs3ServiceFlow_GetServiceClassName, METH_NOARGS, "GetServiceClassName()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ServiceFlow__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3ServiceFlow__tp_dealloc(PyNs3ServiceFlow *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ServiceFlow_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ServiceFlow_wrapper_registry.end()) {
        PyNs3ServiceFlow_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ServiceFlow *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ServiceFlow__tp_richcompare (PyNs3ServiceFlow *PYBINDGEN_UNUSED(self), PyNs3ServiceFlow *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ServiceFlow_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ServiceFlow_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.ServiceFlow",            /* tp_name */
    sizeof(PyNs3ServiceFlow),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ServiceFlow__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "ServiceFlow(sfid, direction, connection)\nServiceFlow(direction)\nServiceFlow(tlv)\nServiceFlow(sf)\nServiceFlow()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ServiceFlow__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ServiceFlow_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ServiceFlow__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3ServiceFlowRecord_wrapper_registry;


static int
_wrap_PyNs3ServiceFlowRecord__tp_init__0(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ServiceFlowRecord *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ServiceFlowRecord_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ServiceFlowRecord(*((PyNs3ServiceFlowRecord *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ServiceFlowRecord__tp_init__1(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ServiceFlowRecord();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3ServiceFlowRecord__tp_init(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ServiceFlowRecord__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ServiceFlowRecord__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_UpdatePktsRcvd(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int pktsRcvd;
    const char *keywords[] = {"pktsRcvd", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &pktsRcvd)) {
        return NULL;
    }
    self->obj->UpdatePktsRcvd(pktsRcvd);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_GetGrantSize(PyNs3ServiceFlowRecord *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetGrantSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_GetBacklogged(PyNs3ServiceFlowRecord *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetBacklogged();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_SetDlTimeStamp(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *dlTimeStamp;
    const char *keywords[] = {"dlTimeStamp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &dlTimeStamp)) {
        return NULL;
    }
    self->obj->SetDlTimeStamp(*((PyNs3Time *) dlTimeStamp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_SetBytesRcvd(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int bytesRcvd;
    const char *keywords[] = {"bytesRcvd", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &bytesRcvd)) {
        return NULL;
    }
    self->obj->SetBytesRcvd(bytesRcvd);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_UpdateGrantedBandwidth(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int grantedBandwidth;
    const char *keywords[] = {"grantedBandwidth", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &grantedBandwidth)) {
        return NULL;
    }
    self->obj->UpdateGrantedBandwidth(grantedBandwidth);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_UpdatePktsSent(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int pktsSent;
    const char *keywords[] = {"pktsSent", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &pktsSent)) {
        return NULL;
    }
    self->obj->UpdatePktsSent(pktsSent);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_SetLastGrantTime(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *grantTime;
    const char *keywords[] = {"grantTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &grantTime)) {
        return NULL;
    }
    self->obj->SetLastGrantTime(*((PyNs3Time *) grantTime)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_SetPktsRcvd(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int pktsRcvd;
    const char *keywords[] = {"pktsRcvd", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &pktsRcvd)) {
        return NULL;
    }
    self->obj->SetPktsRcvd(pktsRcvd);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_SetBackloggedTemp(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int backloggedTemp;
    const char *keywords[] = {"backloggedTemp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &backloggedTemp)) {
        return NULL;
    }
    self->obj->SetBackloggedTemp(backloggedTemp);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_SetBacklogged(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int backlogged;
    const char *keywords[] = {"backlogged", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &backlogged)) {
        return NULL;
    }
    self->obj->SetBacklogged(backlogged);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_GetGrantedBandwidth(PyNs3ServiceFlowRecord *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetGrantedBandwidth();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_UpdateRequestedBandwidth(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int requestedBandwidth;
    const char *keywords[] = {"requestedBandwidth", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &requestedBandwidth)) {
        return NULL;
    }
    self->obj->UpdateRequestedBandwidth(requestedBandwidth);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_GetGrantedBandwidthTemp(PyNs3ServiceFlowRecord *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetGrantedBandwidthTemp();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_IncreaseBacklogged(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int backlogged;
    const char *keywords[] = {"backlogged", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &backlogged)) {
        return NULL;
    }
    self->obj->IncreaseBacklogged(backlogged);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_SetGrantedBandwidth(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int grantedBandwidth;
    const char *keywords[] = {"grantedBandwidth", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &grantedBandwidth)) {
        return NULL;
    }
    self->obj->SetGrantedBandwidth(grantedBandwidth);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_GetLastGrantTime(PyNs3ServiceFlowRecord *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetLastGrantTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_UpdateGrantedBandwidthTemp(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int grantedBandwidthTemp;
    const char *keywords[] = {"grantedBandwidthTemp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &grantedBandwidthTemp)) {
        return NULL;
    }
    self->obj->UpdateGrantedBandwidthTemp(grantedBandwidthTemp);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_UpdateBytesRcvd(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int bytesRcvd;
    const char *keywords[] = {"bytesRcvd", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &bytesRcvd)) {
        return NULL;
    }
    self->obj->UpdateBytesRcvd(bytesRcvd);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_GetDlTimeStamp(PyNs3ServiceFlowRecord *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetDlTimeStamp();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_GetGrantTimeStamp(PyNs3ServiceFlowRecord *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetGrantTimeStamp();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_SetGrantedBandwidthTemp(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int grantedBandwidthTemp;
    const char *keywords[] = {"grantedBandwidthTemp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &grantedBandwidthTemp)) {
        return NULL;
    }
    self->obj->SetGrantedBandwidthTemp(grantedBandwidthTemp);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_SetBytesSent(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int bytesSent;
    const char *keywords[] = {"bytesSent", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &bytesSent)) {
        return NULL;
    }
    self->obj->SetBytesSent(bytesSent);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_SetRequestedBandwidth(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int requestedBandwidth;
    const char *keywords[] = {"requestedBandwidth", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &requestedBandwidth)) {
        return NULL;
    }
    self->obj->SetRequestedBandwidth(requestedBandwidth);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_GetPktsSent(PyNs3ServiceFlowRecord *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetPktsSent();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_GetRequestedBandwidth(PyNs3ServiceFlowRecord *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetRequestedBandwidth();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_SetGrantTimeStamp(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *grantTimeStamp;
    const char *keywords[] = {"grantTimeStamp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &grantTimeStamp)) {
        return NULL;
    }
    self->obj->SetGrantTimeStamp(*((PyNs3Time *) grantTimeStamp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_SetBwSinceLastExpiry(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int bwSinceLastExpiry;
    const char *keywords[] = {"bwSinceLastExpiry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &bwSinceLastExpiry)) {
        return NULL;
    }
    self->obj->SetBwSinceLastExpiry(bwSinceLastExpiry);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_GetBytesSent(PyNs3ServiceFlowRecord *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetBytesSent();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_GetBwSinceLastExpiry(PyNs3ServiceFlowRecord *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetBwSinceLastExpiry();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_SetGrantSize(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int grantSize;
    const char *keywords[] = {"grantSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &grantSize)) {
        return NULL;
    }
    self->obj->SetGrantSize(grantSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_SetPktsSent(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int pktsSent;
    const char *keywords[] = {"pktsSent", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &pktsSent)) {
        return NULL;
    }
    self->obj->SetPktsSent(pktsSent);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_GetBytesRcvd(PyNs3ServiceFlowRecord *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetBytesRcvd();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_GetBackloggedTemp(PyNs3ServiceFlowRecord *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetBackloggedTemp();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_GetPktsRcvd(PyNs3ServiceFlowRecord *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetPktsRcvd();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_UpdateBytesSent(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int bytesSent;
    const char *keywords[] = {"bytesSent", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &bytesSent)) {
        return NULL;
    }
    self->obj->UpdateBytesSent(bytesSent);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_UpdateBwSinceLastExpiry(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int bwSinceLastExpiry;
    const char *keywords[] = {"bwSinceLastExpiry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &bwSinceLastExpiry)) {
        return NULL;
    }
    self->obj->UpdateBwSinceLastExpiry(bwSinceLastExpiry);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowRecord_IncreaseBackloggedTemp(PyNs3ServiceFlowRecord *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int backloggedTemp;
    const char *keywords[] = {"backloggedTemp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &backloggedTemp)) {
        return NULL;
    }
    self->obj->IncreaseBackloggedTemp(backloggedTemp);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3ServiceFlowRecord__copy__(PyNs3ServiceFlowRecord *self)
{

    PyNs3ServiceFlowRecord *py_copy;
    py_copy = PyObject_New(PyNs3ServiceFlowRecord, &PyNs3ServiceFlowRecord_Type);
    py_copy->obj = new ns3::ServiceFlowRecord(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ServiceFlowRecord_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ServiceFlowRecord_methods[] = {
    {(char *) "UpdatePktsRcvd", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_UpdatePktsRcvd, METH_KEYWORDS|METH_VARARGS, "UpdatePktsRcvd(pktsRcvd)\n\ntype: pktsRcvd: uint32_t" },
    {(char *) "GetGrantSize", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_GetGrantSize, METH_NOARGS, "GetGrantSize()\n\n" },
    {(char *) "GetBacklogged", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_GetBacklogged, METH_NOARGS, "GetBacklogged()\n\n" },
    {(char *) "SetDlTimeStamp", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_SetDlTimeStamp, METH_KEYWORDS|METH_VARARGS, "SetDlTimeStamp(dlTimeStamp)\n\ntype: dlTimeStamp: ns3::Time" },
    {(char *) "SetBytesRcvd", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_SetBytesRcvd, METH_KEYWORDS|METH_VARARGS, "SetBytesRcvd(bytesRcvd)\n\ntype: bytesRcvd: uint32_t" },
    {(char *) "UpdateGrantedBandwidth", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_UpdateGrantedBandwidth, METH_KEYWORDS|METH_VARARGS, "UpdateGrantedBandwidth(grantedBandwidth)\n\ntype: grantedBandwidth: uint32_t" },
    {(char *) "UpdatePktsSent", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_UpdatePktsSent, METH_KEYWORDS|METH_VARARGS, "UpdatePktsSent(pktsSent)\n\ntype: pktsSent: uint32_t" },
    {(char *) "SetLastGrantTime", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_SetLastGrantTime, METH_KEYWORDS|METH_VARARGS, "SetLastGrantTime(grantTime)\n\ntype: grantTime: ns3::Time" },
    {(char *) "SetPktsRcvd", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_SetPktsRcvd, METH_KEYWORDS|METH_VARARGS, "SetPktsRcvd(pktsRcvd)\n\ntype: pktsRcvd: uint32_t" },
    {(char *) "SetBackloggedTemp", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_SetBackloggedTemp, METH_KEYWORDS|METH_VARARGS, "SetBackloggedTemp(backloggedTemp)\n\ntype: backloggedTemp: uint32_t" },
    {(char *) "SetBacklogged", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_SetBacklogged, METH_KEYWORDS|METH_VARARGS, "SetBacklogged(backlogged)\n\ntype: backlogged: uint32_t" },
    {(char *) "GetGrantedBandwidth", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_GetGrantedBandwidth, METH_NOARGS, "GetGrantedBandwidth()\n\n" },
    {(char *) "UpdateRequestedBandwidth", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_UpdateRequestedBandwidth, METH_KEYWORDS|METH_VARARGS, "UpdateRequestedBandwidth(requestedBandwidth)\n\ntype: requestedBandwidth: uint32_t" },
    {(char *) "GetGrantedBandwidthTemp", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_GetGrantedBandwidthTemp, METH_NOARGS, "GetGrantedBandwidthTemp()\n\n" },
    {(char *) "IncreaseBacklogged", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_IncreaseBacklogged, METH_KEYWORDS|METH_VARARGS, "IncreaseBacklogged(backlogged)\n\ntype: backlogged: uint32_t" },
    {(char *) "SetGrantedBandwidth", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_SetGrantedBandwidth, METH_KEYWORDS|METH_VARARGS, "SetGrantedBandwidth(grantedBandwidth)\n\ntype: grantedBandwidth: uint32_t" },
    {(char *) "GetLastGrantTime", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_GetLastGrantTime, METH_NOARGS, "GetLastGrantTime()\n\n" },
    {(char *) "UpdateGrantedBandwidthTemp", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_UpdateGrantedBandwidthTemp, METH_KEYWORDS|METH_VARARGS, "UpdateGrantedBandwidthTemp(grantedBandwidthTemp)\n\ntype: grantedBandwidthTemp: uint32_t" },
    {(char *) "UpdateBytesRcvd", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_UpdateBytesRcvd, METH_KEYWORDS|METH_VARARGS, "UpdateBytesRcvd(bytesRcvd)\n\ntype: bytesRcvd: uint32_t" },
    {(char *) "GetDlTimeStamp", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_GetDlTimeStamp, METH_NOARGS, "GetDlTimeStamp()\n\n" },
    {(char *) "GetGrantTimeStamp", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_GetGrantTimeStamp, METH_NOARGS, "GetGrantTimeStamp()\n\n" },
    {(char *) "SetGrantedBandwidthTemp", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_SetGrantedBandwidthTemp, METH_KEYWORDS|METH_VARARGS, "SetGrantedBandwidthTemp(grantedBandwidthTemp)\n\ntype: grantedBandwidthTemp: uint32_t" },
    {(char *) "SetBytesSent", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_SetBytesSent, METH_KEYWORDS|METH_VARARGS, "SetBytesSent(bytesSent)\n\ntype: bytesSent: uint32_t" },
    {(char *) "SetRequestedBandwidth", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_SetRequestedBandwidth, METH_KEYWORDS|METH_VARARGS, "SetRequestedBandwidth(requestedBandwidth)\n\ntype: requestedBandwidth: uint32_t" },
    {(char *) "GetPktsSent", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_GetPktsSent, METH_NOARGS, "GetPktsSent()\n\n" },
    {(char *) "GetRequestedBandwidth", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_GetRequestedBandwidth, METH_NOARGS, "GetRequestedBandwidth()\n\n" },
    {(char *) "SetGrantTimeStamp", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_SetGrantTimeStamp, METH_KEYWORDS|METH_VARARGS, "SetGrantTimeStamp(grantTimeStamp)\n\ntype: grantTimeStamp: ns3::Time" },
    {(char *) "SetBwSinceLastExpiry", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_SetBwSinceLastExpiry, METH_KEYWORDS|METH_VARARGS, "SetBwSinceLastExpiry(bwSinceLastExpiry)\n\ntype: bwSinceLastExpiry: uint32_t" },
    {(char *) "GetBytesSent", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_GetBytesSent, METH_NOARGS, "GetBytesSent()\n\n" },
    {(char *) "GetBwSinceLastExpiry", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_GetBwSinceLastExpiry, METH_NOARGS, "GetBwSinceLastExpiry()\n\n" },
    {(char *) "SetGrantSize", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_SetGrantSize, METH_KEYWORDS|METH_VARARGS, "SetGrantSize(grantSize)\n\ntype: grantSize: uint32_t" },
    {(char *) "SetPktsSent", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_SetPktsSent, METH_KEYWORDS|METH_VARARGS, "SetPktsSent(pktsSent)\n\ntype: pktsSent: uint32_t" },
    {(char *) "GetBytesRcvd", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_GetBytesRcvd, METH_NOARGS, "GetBytesRcvd()\n\n" },
    {(char *) "GetBackloggedTemp", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_GetBackloggedTemp, METH_NOARGS, "GetBackloggedTemp()\n\n" },
    {(char *) "GetPktsRcvd", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_GetPktsRcvd, METH_NOARGS, "GetPktsRcvd()\n\n" },
    {(char *) "UpdateBytesSent", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_UpdateBytesSent, METH_KEYWORDS|METH_VARARGS, "UpdateBytesSent(bytesSent)\n\ntype: bytesSent: uint32_t" },
    {(char *) "UpdateBwSinceLastExpiry", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_UpdateBwSinceLastExpiry, METH_KEYWORDS|METH_VARARGS, "UpdateBwSinceLastExpiry(bwSinceLastExpiry)\n\ntype: bwSinceLastExpiry: uint32_t" },
    {(char *) "IncreaseBackloggedTemp", (PyCFunction) _wrap_PyNs3ServiceFlowRecord_IncreaseBackloggedTemp, METH_KEYWORDS|METH_VARARGS, "IncreaseBackloggedTemp(backloggedTemp)\n\ntype: backloggedTemp: uint32_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ServiceFlowRecord__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3ServiceFlowRecord__tp_dealloc(PyNs3ServiceFlowRecord *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ServiceFlowRecord_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ServiceFlowRecord_wrapper_registry.end()) {
        PyNs3ServiceFlowRecord_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ServiceFlowRecord *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ServiceFlowRecord__tp_richcompare (PyNs3ServiceFlowRecord *PYBINDGEN_UNUSED(self), PyNs3ServiceFlowRecord *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ServiceFlowRecord_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ServiceFlowRecord_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.ServiceFlowRecord",            /* tp_name */
    sizeof(PyNs3ServiceFlowRecord),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ServiceFlowRecord__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "ServiceFlowRecord(arg0)\nServiceFlowRecord()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ServiceFlowRecord__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ServiceFlowRecord_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ServiceFlowRecord__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3TlvValue_wrapper_registry;

static int
_wrap_PyNs3TlvValue__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'TlvValue' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3TlvValue_GetSerializedSize(PyNs3TlvValue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3TlvValue_Serialize(PyNs3TlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3TlvValue_Deserialize(PyNs3TlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    uint64_t valueLen;
    const char *keywords[] = {"start", "valueLen", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!K", (char **) keywords, &PyNs3BufferIterator_Type, &start, &valueLen)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj, valueLen);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

static PyMethodDef PyNs3TlvValue_methods[] = {
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3TlvValue_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3TlvValue_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3TlvValue_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start, valueLen)\n\ntype: start: ns3::Buffer::Iterator\ntype: valueLen: uint64_t" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3TlvValue__tp_clear(PyNs3TlvValue *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::TlvValue *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3TlvValue__tp_traverse(PyNs3TlvValue *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3TlvValue__tp_dealloc(PyNs3TlvValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3TlvValue_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3TlvValue_wrapper_registry.end()) {
        PyNs3TlvValue_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3TlvValue__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3TlvValue__tp_richcompare (PyNs3TlvValue *PYBINDGEN_UNUSED(self), PyNs3TlvValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3TlvValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3TlvValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.TlvValue",            /* tp_name */
    sizeof(PyNs3TlvValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3TlvValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "TlvValue(arg0)\nTlvValue()",                        /* Documentation string */
    (traverseproc)PyNs3TlvValue__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3TlvValue__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3TlvValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3TlvValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3TlvValue, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3TlvValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3TosTlvValue__tp_init__0(PyNs3TosTlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3TosTlvValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3TosTlvValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::TosTlvValue(*((PyNs3TosTlvValue *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3TosTlvValue__tp_init__1(PyNs3TosTlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::TosTlvValue();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3TosTlvValue__tp_init__2(PyNs3TosTlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int arg0;
    int arg1;
    int arg2;
    const char *keywords[] = {"arg0", "arg1", "arg2", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iii", (char **) keywords, &arg0, &arg1, &arg2)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (arg0 > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (arg1 > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (arg2 > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::TosTlvValue(arg0, arg1, arg2);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3TosTlvValue__tp_init(PyNs3TosTlvValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3TosTlvValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3TosTlvValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3TosTlvValue__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3TosTlvValue_Deserialize(PyNs3TosTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    uint64_t valueLength;
    const char *keywords[] = {"start", "valueLength", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!K", (char **) keywords, &PyNs3BufferIterator_Type, &start, &valueLength)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj, valueLength);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3TosTlvValue_Serialize(PyNs3TosTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3TosTlvValue_GetMask(PyNs3TosTlvValue *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetMask();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3TosTlvValue_GetHigh(PyNs3TosTlvValue *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetHigh();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3TosTlvValue_GetSerializedSize(PyNs3TosTlvValue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3TosTlvValue_GetLow(PyNs3TosTlvValue *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetLow();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3TosTlvValue__copy__(PyNs3TosTlvValue *self)
{

    PyNs3TosTlvValue *py_copy;
    py_copy = PyObject_GC_New(PyNs3TosTlvValue, &PyNs3TosTlvValue_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::TosTlvValue(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3TlvValue_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3TosTlvValue_methods[] = {
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3TosTlvValue_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start, valueLength)\n\ntype: start: ns3::Buffer::Iterator\ntype: valueLength: uint64_t" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3TosTlvValue_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetMask", (PyCFunction) _wrap_PyNs3TosTlvValue_GetMask, METH_NOARGS, "GetMask()\n\n" },
    {(char *) "GetHigh", (PyCFunction) _wrap_PyNs3TosTlvValue_GetHigh, METH_NOARGS, "GetHigh()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3TosTlvValue_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetLow", (PyCFunction) _wrap_PyNs3TosTlvValue_GetLow, METH_NOARGS, "GetLow()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3TosTlvValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3TosTlvValue__tp_clear(PyNs3TosTlvValue *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::TosTlvValue *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3TosTlvValue__tp_traverse(PyNs3TosTlvValue *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3TosTlvValue__tp_dealloc(PyNs3TosTlvValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3TlvValue_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3TlvValue_wrapper_registry.end()) {
        PyNs3TlvValue_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3TosTlvValue__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3TosTlvValue__tp_richcompare (PyNs3TosTlvValue *PYBINDGEN_UNUSED(self), PyNs3TosTlvValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3TosTlvValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3TosTlvValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.TosTlvValue",            /* tp_name */
    sizeof(PyNs3TosTlvValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3TosTlvValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "TosTlvValue(arg0, arg1, arg2)\nTosTlvValue(arg0)\nTosTlvValue()",                        /* Documentation string */
    (traverseproc)PyNs3TosTlvValue__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3TosTlvValue__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3TosTlvValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3TosTlvValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3TosTlvValue, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3TosTlvValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3U16TlvValue__tp_init__0(PyNs3U16TlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3U16TlvValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3U16TlvValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::U16TlvValue(*((PyNs3U16TlvValue *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3U16TlvValue__tp_init__1(PyNs3U16TlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (value > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::U16TlvValue(value);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3U16TlvValue__tp_init__2(PyNs3U16TlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::U16TlvValue();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3U16TlvValue__tp_init(PyNs3U16TlvValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3U16TlvValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3U16TlvValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3U16TlvValue__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3U16TlvValue_GetSerializedSize(PyNs3U16TlvValue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3U16TlvValue_Serialize(PyNs3U16TlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3U16TlvValue_Deserialize__0(PyNs3U16TlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    uint64_t valueLen;
    const char *keywords[] = {"start", "valueLen", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!K", (char **) keywords, &PyNs3BufferIterator_Type, &start, &valueLen)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj, valueLen);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3U16TlvValue_Deserialize__1(PyNs3U16TlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

PyObject * _wrap_PyNs3U16TlvValue_Deserialize(PyNs3U16TlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3U16TlvValue_Deserialize__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3U16TlvValue_Deserialize__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3U16TlvValue_GetValue(PyNs3U16TlvValue *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetValue();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3U16TlvValue__copy__(PyNs3U16TlvValue *self)
{

    PyNs3U16TlvValue *py_copy;
    py_copy = PyObject_GC_New(PyNs3U16TlvValue, &PyNs3U16TlvValue_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::U16TlvValue(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3TlvValue_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3U16TlvValue_methods[] = {
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3U16TlvValue_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3U16TlvValue_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3U16TlvValue_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetValue", (PyCFunction) _wrap_PyNs3U16TlvValue_GetValue, METH_NOARGS, "GetValue()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3U16TlvValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3U16TlvValue__tp_clear(PyNs3U16TlvValue *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::U16TlvValue *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3U16TlvValue__tp_traverse(PyNs3U16TlvValue *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3U16TlvValue__tp_dealloc(PyNs3U16TlvValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3TlvValue_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3TlvValue_wrapper_registry.end()) {
        PyNs3TlvValue_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3U16TlvValue__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3U16TlvValue__tp_richcompare (PyNs3U16TlvValue *PYBINDGEN_UNUSED(self), PyNs3U16TlvValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3U16TlvValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3U16TlvValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.U16TlvValue",            /* tp_name */
    sizeof(PyNs3U16TlvValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3U16TlvValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "U16TlvValue(value)\nU16TlvValue(arg0)\nU16TlvValue()",                        /* Documentation string */
    (traverseproc)PyNs3U16TlvValue__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3U16TlvValue__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3U16TlvValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3U16TlvValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3U16TlvValue, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3U16TlvValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3U32TlvValue__tp_init__0(PyNs3U32TlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3U32TlvValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3U32TlvValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::U32TlvValue(*((PyNs3U32TlvValue *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3U32TlvValue__tp_init__1(PyNs3U32TlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    unsigned int value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::U32TlvValue(value);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3U32TlvValue__tp_init__2(PyNs3U32TlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::U32TlvValue();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3U32TlvValue__tp_init(PyNs3U32TlvValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3U32TlvValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3U32TlvValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3U32TlvValue__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3U32TlvValue_GetSerializedSize(PyNs3U32TlvValue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3U32TlvValue_Serialize(PyNs3U32TlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3U32TlvValue_Deserialize__0(PyNs3U32TlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    uint64_t valueLen;
    const char *keywords[] = {"start", "valueLen", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!K", (char **) keywords, &PyNs3BufferIterator_Type, &start, &valueLen)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj, valueLen);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3U32TlvValue_Deserialize__1(PyNs3U32TlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

PyObject * _wrap_PyNs3U32TlvValue_Deserialize(PyNs3U32TlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3U32TlvValue_Deserialize__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3U32TlvValue_Deserialize__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3U32TlvValue_GetValue(PyNs3U32TlvValue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetValue();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3U32TlvValue__copy__(PyNs3U32TlvValue *self)
{

    PyNs3U32TlvValue *py_copy;
    py_copy = PyObject_GC_New(PyNs3U32TlvValue, &PyNs3U32TlvValue_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::U32TlvValue(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3TlvValue_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3U32TlvValue_methods[] = {
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3U32TlvValue_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3U32TlvValue_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3U32TlvValue_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetValue", (PyCFunction) _wrap_PyNs3U32TlvValue_GetValue, METH_NOARGS, "GetValue()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3U32TlvValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3U32TlvValue__tp_clear(PyNs3U32TlvValue *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::U32TlvValue *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3U32TlvValue__tp_traverse(PyNs3U32TlvValue *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3U32TlvValue__tp_dealloc(PyNs3U32TlvValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3TlvValue_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3TlvValue_wrapper_registry.end()) {
        PyNs3TlvValue_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3U32TlvValue__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3U32TlvValue__tp_richcompare (PyNs3U32TlvValue *PYBINDGEN_UNUSED(self), PyNs3U32TlvValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3U32TlvValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3U32TlvValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.U32TlvValue",            /* tp_name */
    sizeof(PyNs3U32TlvValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3U32TlvValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "U32TlvValue(value)\nU32TlvValue(arg0)\nU32TlvValue()",                        /* Documentation string */
    (traverseproc)PyNs3U32TlvValue__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3U32TlvValue__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3U32TlvValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3U32TlvValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3U32TlvValue, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3U32TlvValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3U8TlvValue__tp_init__0(PyNs3U8TlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3U8TlvValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3U8TlvValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::U8TlvValue(*((PyNs3U8TlvValue *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3U8TlvValue__tp_init__1(PyNs3U8TlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (value > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::U8TlvValue(value);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3U8TlvValue__tp_init__2(PyNs3U8TlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::U8TlvValue();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3U8TlvValue__tp_init(PyNs3U8TlvValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3U8TlvValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3U8TlvValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3U8TlvValue__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3U8TlvValue_GetSerializedSize(PyNs3U8TlvValue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3U8TlvValue_Serialize(PyNs3U8TlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3U8TlvValue_Deserialize__0(PyNs3U8TlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    uint64_t valueLen;
    const char *keywords[] = {"start", "valueLen", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!K", (char **) keywords, &PyNs3BufferIterator_Type, &start, &valueLen)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj, valueLen);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3U8TlvValue_Deserialize__1(PyNs3U8TlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

PyObject * _wrap_PyNs3U8TlvValue_Deserialize(PyNs3U8TlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3U8TlvValue_Deserialize__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3U8TlvValue_Deserialize__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3U8TlvValue_GetValue(PyNs3U8TlvValue *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetValue();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3U8TlvValue__copy__(PyNs3U8TlvValue *self)
{

    PyNs3U8TlvValue *py_copy;
    py_copy = PyObject_GC_New(PyNs3U8TlvValue, &PyNs3U8TlvValue_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::U8TlvValue(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3TlvValue_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3U8TlvValue_methods[] = {
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3U8TlvValue_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3U8TlvValue_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3U8TlvValue_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetValue", (PyCFunction) _wrap_PyNs3U8TlvValue_GetValue, METH_NOARGS, "GetValue()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3U8TlvValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3U8TlvValue__tp_clear(PyNs3U8TlvValue *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::U8TlvValue *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3U8TlvValue__tp_traverse(PyNs3U8TlvValue *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3U8TlvValue__tp_dealloc(PyNs3U8TlvValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3TlvValue_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3TlvValue_wrapper_registry.end()) {
        PyNs3TlvValue_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3U8TlvValue__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3U8TlvValue__tp_richcompare (PyNs3U8TlvValue *PYBINDGEN_UNUSED(self), PyNs3U8TlvValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3U8TlvValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3U8TlvValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.U8TlvValue",            /* tp_name */
    sizeof(PyNs3U8TlvValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3U8TlvValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "U8TlvValue(value)\nU8TlvValue(arg0)\nU8TlvValue()",                        /* Documentation string */
    (traverseproc)PyNs3U8TlvValue__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3U8TlvValue__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3U8TlvValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3U8TlvValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3U8TlvValue, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3U8TlvValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3UcdChannelEncodings_wrapper_registry;

ns3::Buffer::Iterator
PyNs3UcdChannelEncodings__PythonHelper::DoRead(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UcdChannelEncodings *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    PyNs3BufferIterator *tmp_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoRead"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    self_obj_before = reinterpret_cast< PyNs3UcdChannelEncodings* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UcdChannelEncodings* >(m_pyself)->obj = (ns3::UcdChannelEncodings*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoRead", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3BufferIterator_Type, &tmp_Iterator)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    ns3::Buffer::Iterator retval = *tmp_Iterator->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Buffer::Iterator
PyNs3UcdChannelEncodings__PythonHelper::DoWrite(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UcdChannelEncodings *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    PyNs3BufferIterator *tmp_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoWrite"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    self_obj_before = reinterpret_cast< PyNs3UcdChannelEncodings* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UcdChannelEncodings* >(m_pyself)->obj = const_cast< ns3::UcdChannelEncodings* >((const ns3::UcdChannelEncodings*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoWrite", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3BufferIterator_Type, &tmp_Iterator)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    ns3::Buffer::Iterator retval = *tmp_Iterator->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


static int
_wrap_PyNs3UcdChannelEncodings__tp_init__0(PyNs3UcdChannelEncodings *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UcdChannelEncodings *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UcdChannelEncodings_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3UcdChannelEncodings_Type)
    {
        self->obj = new PyNs3UcdChannelEncodings__PythonHelper(*((PyNs3UcdChannelEncodings *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3UcdChannelEncodings__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'UcdChannelEncodings' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3UcdChannelEncodings__tp_init__1(PyNs3UcdChannelEncodings *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3UcdChannelEncodings_Type)
    {
        self->obj = new PyNs3UcdChannelEncodings__PythonHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3UcdChannelEncodings__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'UcdChannelEncodings' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3UcdChannelEncodings__tp_init(PyNs3UcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UcdChannelEncodings__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UcdChannelEncodings__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UcdChannelEncodings_Write(PyNs3UcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Write(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3UcdChannelEncodings_GetFrequency(PyNs3UcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetFrequency();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UcdChannelEncodings_SetFrequency(PyNs3UcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int frequency;
    const char *keywords[] = {"frequency", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &frequency)) {
        return NULL;
    }
    self->obj->SetFrequency(frequency);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UcdChannelEncodings_Read(PyNs3UcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Read(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3UcdChannelEncodings_SetRangReqOppSize(PyNs3UcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rangReqOppSize;
    const char *keywords[] = {"rangReqOppSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rangReqOppSize)) {
        return NULL;
    }
    if (rangReqOppSize > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRangReqOppSize(rangReqOppSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UcdChannelEncodings_GetSize(PyNs3UcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UcdChannelEncodings_GetBwReqOppSize(PyNs3UcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetBwReqOppSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UcdChannelEncodings_SetBwReqOppSize(PyNs3UcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int bwReqOppSize;
    const char *keywords[] = {"bwReqOppSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &bwReqOppSize)) {
        return NULL;
    }
    if (bwReqOppSize > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBwReqOppSize(bwReqOppSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UcdChannelEncodings_GetRangReqOppSize(PyNs3UcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetRangReqOppSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

static PyMethodDef PyNs3UcdChannelEncodings_methods[] = {
    {(char *) "Write", (PyCFunction) _wrap_PyNs3UcdChannelEncodings_Write, METH_KEYWORDS|METH_VARARGS, "Write(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetFrequency", (PyCFunction) _wrap_PyNs3UcdChannelEncodings_GetFrequency, METH_NOARGS, "GetFrequency()\n\n" },
    {(char *) "SetFrequency", (PyCFunction) _wrap_PyNs3UcdChannelEncodings_SetFrequency, METH_KEYWORDS|METH_VARARGS, "SetFrequency(frequency)\n\ntype: frequency: uint32_t" },
    {(char *) "Read", (PyCFunction) _wrap_PyNs3UcdChannelEncodings_Read, METH_KEYWORDS|METH_VARARGS, "Read(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetRangReqOppSize", (PyCFunction) _wrap_PyNs3UcdChannelEncodings_SetRangReqOppSize, METH_KEYWORDS|METH_VARARGS, "SetRangReqOppSize(rangReqOppSize)\n\ntype: rangReqOppSize: uint16_t" },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3UcdChannelEncodings_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "GetBwReqOppSize", (PyCFunction) _wrap_PyNs3UcdChannelEncodings_GetBwReqOppSize, METH_NOARGS, "GetBwReqOppSize()\n\n" },
    {(char *) "SetBwReqOppSize", (PyCFunction) _wrap_PyNs3UcdChannelEncodings_SetBwReqOppSize, METH_KEYWORDS|METH_VARARGS, "SetBwReqOppSize(bwReqOppSize)\n\ntype: bwReqOppSize: uint16_t" },
    {(char *) "GetRangReqOppSize", (PyCFunction) _wrap_PyNs3UcdChannelEncodings_GetRangReqOppSize, METH_NOARGS, "GetRangReqOppSize()\n\n" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UcdChannelEncodings__tp_clear(PyNs3UcdChannelEncodings *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::UcdChannelEncodings *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3UcdChannelEncodings__tp_traverse(PyNs3UcdChannelEncodings *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3UcdChannelEncodings__PythonHelper).name() )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UcdChannelEncodings__tp_dealloc(PyNs3UcdChannelEncodings *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3UcdChannelEncodings_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3UcdChannelEncodings_wrapper_registry.end()) {
        PyNs3UcdChannelEncodings_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UcdChannelEncodings__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UcdChannelEncodings__tp_richcompare (PyNs3UcdChannelEncodings *PYBINDGEN_UNUSED(self), PyNs3UcdChannelEncodings *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UcdChannelEncodings_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UcdChannelEncodings_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.UcdChannelEncodings",            /* tp_name */
    sizeof(PyNs3UcdChannelEncodings),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UcdChannelEncodings__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "UcdChannelEncodings(arg0)\nUcdChannelEncodings()",                        /* Documentation string */
    (traverseproc)PyNs3UcdChannelEncodings__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UcdChannelEncodings__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UcdChannelEncodings__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UcdChannelEncodings_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UcdChannelEncodings, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UcdChannelEncodings__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3VectorTlvValue__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'VectorTlvValue' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3VectorTlvValue_GetSerializedSize(PyNs3VectorTlvValue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3VectorTlvValue_Add(PyNs3VectorTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Tlv *val;
    const char *keywords[] = {"val", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Tlv_Type, &val)) {
        return NULL;
    }
    self->obj->Add(*((PyNs3Tlv *) val)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VectorTlvValue_Serialize(PyNs3VectorTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3VectorTlvValue_Deserialize(PyNs3VectorTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    uint64_t valueLength;
    const char *keywords[] = {"start", "valueLength", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!K", (char **) keywords, &PyNs3BufferIterator_Type, &start, &valueLength)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj, valueLength);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

static PyMethodDef PyNs3VectorTlvValue_methods[] = {
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3VectorTlvValue_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "Add", (PyCFunction) _wrap_PyNs3VectorTlvValue_Add, METH_KEYWORDS|METH_VARARGS, "Add(val)\n\ntype: val: ns3::Tlv const &" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3VectorTlvValue_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3VectorTlvValue_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start, valueLength)\n\ntype: start: ns3::Buffer::Iterator\ntype: valueLength: uint64_t" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3VectorTlvValue__tp_clear(PyNs3VectorTlvValue *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::VectorTlvValue *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3VectorTlvValue__tp_traverse(PyNs3VectorTlvValue *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3VectorTlvValue__tp_dealloc(PyNs3VectorTlvValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3TlvValue_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3TlvValue_wrapper_registry.end()) {
        PyNs3TlvValue_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3VectorTlvValue__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3VectorTlvValue__tp_richcompare (PyNs3VectorTlvValue *PYBINDGEN_UNUSED(self), PyNs3VectorTlvValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3VectorTlvValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3VectorTlvValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.VectorTlvValue",            /* tp_name */
    sizeof(PyNs3VectorTlvValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3VectorTlvValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "VectorTlvValue(arg0)\nVectorTlvValue()",                        /* Documentation string */
    (traverseproc)PyNs3VectorTlvValue__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3VectorTlvValue__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3VectorTlvValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3VectorTlvValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3VectorTlvValue, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3VectorTlvValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




void
PyNs3WimaxHelper__PythonHelper::EnableAsciiInternal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool explicitFilename)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxHelper *self_obj_before;
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *py_OutputStreamWrapper;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    const char *prefix_ptr;
    Py_ssize_t prefix_len;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "EnableAsciiInternal"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxHelper* >(m_pyself)->obj = (ns3::WimaxHelper*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::OutputStreamWrapper *> (ns3::PeekPointer (stream)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_OutputStreamWrapper = NULL;
    } else {
        py_OutputStreamWrapper = (PyNs3OutputStreamWrapper *) wrapper_lookup_iter->second;
        Py_INCREF(py_OutputStreamWrapper);
    }
    
    if (py_OutputStreamWrapper == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::OutputStreamWrapper *> (ns3::PeekPointer (stream))), &PyNs3OutputStreamWrapper_Type);
        py_OutputStreamWrapper = PyObject_New(PyNs3OutputStreamWrapper, wrapper_type);
    
        py_OutputStreamWrapper->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::OutputStreamWrapper *> (ns3::PeekPointer (stream))->Ref();
        py_OutputStreamWrapper->obj = const_cast<ns3::OutputStreamWrapper *> (ns3::PeekPointer (stream));
        PyNs3Empty_wrapper_registry[(void *) py_OutputStreamWrapper->obj] = (PyObject *) py_OutputStreamWrapper;
    }
    prefix_ptr = (prefix).c_str();
    prefix_len = (prefix).size();
    if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter2->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type2);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "EnableAsciiInternal", (char *) "Ns#NN", py_OutputStreamWrapper, prefix_ptr, prefix_len, py_NetDevice, PyBool_FromLong(explicitFilename));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WimaxHelper__PythonHelper::EnablePcapInternal(std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool explicitFilename, bool promiscuous)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxHelper *self_obj_before;
    PyObject *py_retval;
    const char *prefix_ptr;
    Py_ssize_t prefix_len;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "EnablePcapInternal"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxHelper* >(m_pyself)->obj = (ns3::WimaxHelper*) this;
    prefix_ptr = (prefix).c_str();
    prefix_len = (prefix).size();
    if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (nd));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "EnablePcapInternal", (char *) "s#NNN", prefix_ptr, prefix_len, py_NetDevice, PyBool_FromLong(explicitFilename), PyBool_FromLong(promiscuous));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WimaxHelper__tp_init__0(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WimaxHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WimaxHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WimaxHelper_Type)
    {
        self->obj = new PyNs3WimaxHelper__PythonHelper(*((PyNs3WimaxHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WimaxHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WimaxHelper(*((PyNs3WimaxHelper *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

static int
_wrap_PyNs3WimaxHelper__tp_init__1(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WimaxHelper_Type)
    {
        self->obj = new PyNs3WimaxHelper__PythonHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WimaxHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WimaxHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

int _wrap_PyNs3WimaxHelper__tp_init(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WimaxHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WimaxHelper_CreateServiceFlow(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::ServiceFlow::Direction direction;
    ns3::ServiceFlow::SchedulingType schedulinType;
    PyNs3IpcsClassifierRecord *classifier;
    const char *keywords[] = {"direction", "schedulinType", "classifier", NULL};
    PyNs3ServiceFlow *py_ServiceFlow;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iiO!", (char **) keywords, &direction, &schedulinType, &PyNs3IpcsClassifierRecord_Type, &classifier)) {
        return NULL;
    }
    ns3::ServiceFlow retval = self->obj->CreateServiceFlow(direction, schedulinType, *((PyNs3IpcsClassifierRecord *) classifier)->obj);
    py_ServiceFlow = PyObject_New(PyNs3ServiceFlow, &PyNs3ServiceFlow_Type);
    py_ServiceFlow->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ServiceFlow->obj = new ns3::ServiceFlow(retval);
    PyNs3ServiceFlow_wrapper_registry[(void *) py_ServiceFlow->obj] = (PyObject *) py_ServiceFlow;
    py_retval = Py_BuildValue((char *) "N", py_ServiceFlow);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxHelper_CreateUplinkScheduler(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UplinkScheduler > retval;
    ns3::WimaxHelper::SchedulerType schedulerType;
    const char *keywords[] = {"schedulerType", NULL};
    PyNs3UplinkScheduler *py_UplinkScheduler;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &schedulerType)) {
        return NULL;
    }
    retval = self->obj->CreateUplinkScheduler(schedulerType);
    if (!(const_cast<ns3::UplinkScheduler *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UplinkScheduler *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_UplinkScheduler = NULL;
    } else {
        py_UplinkScheduler = (PyNs3UplinkScheduler *) wrapper_lookup_iter->second;
        Py_INCREF(py_UplinkScheduler);
    }
    
    if (py_UplinkScheduler == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UplinkScheduler *> (ns3::PeekPointer (retval)))), &PyNs3UplinkScheduler_Type);
        py_UplinkScheduler = PyObject_GC_New(PyNs3UplinkScheduler, wrapper_type);
        py_UplinkScheduler->inst_dict = NULL;
    
        py_UplinkScheduler->inst_dict = NULL;
        py_UplinkScheduler->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::UplinkScheduler *> (ns3::PeekPointer (retval))->Ref();
        py_UplinkScheduler->obj = const_cast<ns3::UplinkScheduler *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_UplinkScheduler->obj] = (PyObject *) py_UplinkScheduler;
    }
    py_retval = Py_BuildValue((char *) "N", py_UplinkScheduler);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxHelper_SetPropagationLossModel(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::SimpleOfdmWimaxChannel::PropModel propagationModel;
    const char *keywords[] = {"propagationModel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &propagationModel)) {
        return NULL;
    }
    self->obj->SetPropagationLossModel(propagationModel);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxHelper_CreateBSScheduler(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::BSScheduler > retval;
    ns3::WimaxHelper::SchedulerType schedulerType;
    const char *keywords[] = {"schedulerType", NULL};
    PyNs3BSScheduler *py_BSScheduler;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &schedulerType)) {
        return NULL;
    }
    retval = self->obj->CreateBSScheduler(schedulerType);
    if (!(const_cast<ns3::BSScheduler *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::BSScheduler *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_BSScheduler = NULL;
    } else {
        py_BSScheduler = (PyNs3BSScheduler *) wrapper_lookup_iter->second;
        Py_INCREF(py_BSScheduler);
    }
    
    if (py_BSScheduler == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::BSScheduler *> (ns3::PeekPointer (retval)))), &PyNs3BSScheduler_Type);
        py_BSScheduler = PyObject_GC_New(PyNs3BSScheduler, wrapper_type);
        py_BSScheduler->inst_dict = NULL;
    
        py_BSScheduler->inst_dict = NULL;
        py_BSScheduler->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::BSScheduler *> (ns3::PeekPointer (retval))->Ref();
        py_BSScheduler->obj = const_cast<ns3::BSScheduler *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_BSScheduler->obj] = (PyObject *) py_BSScheduler;
    }
    py_retval = Py_BuildValue((char *) "N", py_BSScheduler);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxHelper_EnableLogComponents(void)
{
    PyObject *py_retval;
    
    ns3::WimaxHelper::EnableLogComponents();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3WimaxHelper_AssignStreams__0(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->AssignStreams(stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_AssignStreams__1(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int64_t retval;
    PyNs3NetDeviceContainer *c;
    int64_t stream;
    const char *keywords[] = {"c", "stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!L", (char **) keywords, &PyNs3NetDeviceContainer_Type, &c, &stream)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->AssignStreams(*((PyNs3NetDeviceContainer *) c)->obj, stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}

PyObject * _wrap_PyNs3WimaxHelper_AssignStreams(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WimaxHelper_AssignStreams__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_AssignStreams__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyNs3WimaxHelper_CreatePhy__0(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxPhy > retval;
    ns3::WimaxHelper::PhyType phyType;
    const char *keywords[] = {"phyType", NULL};
    PyNs3WimaxPhy *py_WimaxPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &phyType)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->CreatePhy(phyType);
    if (!(const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WimaxPhy = NULL;
    } else {
        py_WimaxPhy = (PyNs3WimaxPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_WimaxPhy);
    }
    
    if (py_WimaxPhy == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval)))), &PyNs3WimaxPhy_Type);
        py_WimaxPhy = PyObject_GC_New(PyNs3WimaxPhy, wrapper_type);
        py_WimaxPhy->inst_dict = NULL;
    
        py_WimaxPhy->inst_dict = NULL;
        py_WimaxPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval))->Ref();
        py_WimaxPhy->obj = const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxPhy->obj] = (PyObject *) py_WimaxPhy;
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxPhy);
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_CreatePhy__1(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxPhy > retval;
    ns3::WimaxHelper::PhyType phyType;
    char *SNRTraceFilePath;
    bool activateLoss;
    PyObject *py_activateLoss;
    const char *keywords[] = {"phyType", "SNRTraceFilePath", "activateLoss", NULL};
    PyNs3WimaxPhy *py_WimaxPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "isO", (char **) keywords, &phyType, &SNRTraceFilePath, &py_activateLoss)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    activateLoss = (bool) PyObject_IsTrue(py_activateLoss);
    retval = self->obj->CreatePhy(phyType, SNRTraceFilePath, activateLoss);
    if (!(const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WimaxPhy = NULL;
    } else {
        py_WimaxPhy = (PyNs3WimaxPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_WimaxPhy);
    }
    
    if (py_WimaxPhy == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval)))), &PyNs3WimaxPhy_Type);
        py_WimaxPhy = PyObject_GC_New(PyNs3WimaxPhy, wrapper_type);
        py_WimaxPhy->inst_dict = NULL;
    
        py_WimaxPhy->inst_dict = NULL;
        py_WimaxPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval))->Ref();
        py_WimaxPhy->obj = const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxPhy->obj] = (PyObject *) py_WimaxPhy;
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxPhy);
    return py_retval;
}

PyObject * _wrap_PyNs3WimaxHelper_CreatePhy(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WimaxHelper_CreatePhy__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_CreatePhy__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyNs3WimaxHelper_Install__0(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NodeContainer *c;
    ns3::WimaxHelper::NetDeviceType type;
    ns3::WimaxHelper::PhyType phyType;
    ns3::WimaxHelper::SchedulerType schedulerType;
    const char *keywords[] = {"c", "type", "phyType", "schedulerType", NULL};
    PyNs3NetDeviceContainer *py_NetDeviceContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iii", (char **) keywords, &PyNs3NodeContainer_Type, &c, &type, &phyType, &schedulerType)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::NetDeviceContainer retval = self->obj->Install(*((PyNs3NodeContainer *) c)->obj, type, phyType, schedulerType);
    py_NetDeviceContainer = PyObject_New(PyNs3NetDeviceContainer, &PyNs3NetDeviceContainer_Type);
    py_NetDeviceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_NetDeviceContainer->obj = new ns3::NetDeviceContainer(retval);
    PyNs3NetDeviceContainer_wrapper_registry[(void *) py_NetDeviceContainer->obj] = (PyObject *) py_NetDeviceContainer;
    py_retval = Py_BuildValue((char *) "N", py_NetDeviceContainer);
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_Install__1(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NodeContainer *c;
    ns3::WimaxHelper::NetDeviceType deviceType;
    ns3::WimaxHelper::PhyType phyType;
    PyNs3WimaxChannel *channel;
    ns3::WimaxChannel *channel_ptr;
    ns3::WimaxHelper::SchedulerType schedulerType;
    const char *keywords[] = {"c", "deviceType", "phyType", "channel", "schedulerType", NULL};
    PyNs3NetDeviceContainer *py_NetDeviceContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iiO!i", (char **) keywords, &PyNs3NodeContainer_Type, &c, &deviceType, &phyType, &PyNs3WimaxChannel_Type, &channel, &schedulerType)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    channel_ptr = (channel ? channel->obj : NULL);
    ns3::NetDeviceContainer retval = self->obj->Install(*((PyNs3NodeContainer *) c)->obj, deviceType, phyType, ns3::Ptr< ns3::WimaxChannel  > (channel_ptr), schedulerType);
    py_NetDeviceContainer = PyObject_New(PyNs3NetDeviceContainer, &PyNs3NetDeviceContainer_Type);
    py_NetDeviceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_NetDeviceContainer->obj = new ns3::NetDeviceContainer(retval);
    PyNs3NetDeviceContainer_wrapper_registry[(void *) py_NetDeviceContainer->obj] = (PyObject *) py_NetDeviceContainer;
    py_retval = Py_BuildValue((char *) "N", py_NetDeviceContainer);
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_Install__2(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NodeContainer *c;
    ns3::WimaxHelper::NetDeviceType deviceType;
    ns3::WimaxHelper::PhyType phyType;
    ns3::WimaxHelper::SchedulerType schedulerType;
    double frameDuration;
    const char *keywords[] = {"c", "deviceType", "phyType", "schedulerType", "frameDuration", NULL};
    PyNs3NetDeviceContainer *py_NetDeviceContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iiid", (char **) keywords, &PyNs3NodeContainer_Type, &c, &deviceType, &phyType, &schedulerType, &frameDuration)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::NetDeviceContainer retval = self->obj->Install(*((PyNs3NodeContainer *) c)->obj, deviceType, phyType, schedulerType, frameDuration);
    py_NetDeviceContainer = PyObject_New(PyNs3NetDeviceContainer, &PyNs3NetDeviceContainer_Type);
    py_NetDeviceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_NetDeviceContainer->obj = new ns3::NetDeviceContainer(retval);
    PyNs3NetDeviceContainer_wrapper_registry[(void *) py_NetDeviceContainer->obj] = (PyObject *) py_NetDeviceContainer;
    py_retval = Py_BuildValue((char *) "N", py_NetDeviceContainer);
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_Install__3(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxNetDevice > retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    ns3::WimaxHelper::NetDeviceType deviceType;
    ns3::WimaxHelper::PhyType phyType;
    PyNs3WimaxChannel *channel;
    ns3::WimaxChannel *channel_ptr;
    ns3::WimaxHelper::SchedulerType schedulerType;
    const char *keywords[] = {"node", "deviceType", "phyType", "channel", "schedulerType", NULL};
    PyNs3WimaxNetDevice *py_WimaxNetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iiO!i", (char **) keywords, &PyNs3Node_Type, &node, &deviceType, &phyType, &PyNs3WimaxChannel_Type, &channel, &schedulerType)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    channel_ptr = (channel ? channel->obj : NULL);
    retval = self->obj->Install(ns3::Ptr< ns3::Node  > (node_ptr), deviceType, phyType, ns3::Ptr< ns3::WimaxChannel  > (channel_ptr), schedulerType);
    if (!(const_cast<ns3::WimaxNetDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WimaxNetDevice *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3WimaxNetDevice__PythonHelper).name())
    {
        py_WimaxNetDevice = reinterpret_cast< PyNs3WimaxNetDevice* >(reinterpret_cast< PyNs3WimaxNetDevice__PythonHelper* >(const_cast<ns3::WimaxNetDevice *> (ns3::PeekPointer (retval)))->m_pyself);
        py_WimaxNetDevice->obj = const_cast<ns3::WimaxNetDevice *> (ns3::PeekPointer (retval));
        Py_INCREF(py_WimaxNetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxNetDevice *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WimaxNetDevice = NULL;
        } else {
            py_WimaxNetDevice = (PyNs3WimaxNetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_WimaxNetDevice);
        }
    
        if (py_WimaxNetDevice == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxNetDevice *> (ns3::PeekPointer (retval)))), &PyNs3WimaxNetDevice_Type);
            py_WimaxNetDevice = PyObject_GC_New(PyNs3WimaxNetDevice, wrapper_type);
            py_WimaxNetDevice->inst_dict = NULL;
    
            py_WimaxNetDevice->inst_dict = NULL;
            py_WimaxNetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WimaxNetDevice *> (ns3::PeekPointer (retval))->Ref();
            py_WimaxNetDevice->obj = const_cast<ns3::WimaxNetDevice *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxNetDevice->obj] = (PyObject *) py_WimaxNetDevice;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxNetDevice);
    return py_retval;
}

PyObject * _wrap_PyNs3WimaxHelper_Install(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyNs3WimaxHelper_Install__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_Install__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_Install__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_Install__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyNs3WimaxHelper_CreatePhyWithoutChannel__0(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxPhy > retval;
    ns3::WimaxHelper::PhyType phyType;
    const char *keywords[] = {"phyType", NULL};
    PyNs3WimaxPhy *py_WimaxPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &phyType)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->CreatePhyWithoutChannel(phyType);
    if (!(const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WimaxPhy = NULL;
    } else {
        py_WimaxPhy = (PyNs3WimaxPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_WimaxPhy);
    }
    
    if (py_WimaxPhy == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval)))), &PyNs3WimaxPhy_Type);
        py_WimaxPhy = PyObject_GC_New(PyNs3WimaxPhy, wrapper_type);
        py_WimaxPhy->inst_dict = NULL;
    
        py_WimaxPhy->inst_dict = NULL;
        py_WimaxPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval))->Ref();
        py_WimaxPhy->obj = const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxPhy->obj] = (PyObject *) py_WimaxPhy;
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxPhy);
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_CreatePhyWithoutChannel__1(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxPhy > retval;
    ns3::WimaxHelper::PhyType phyType;
    char *SNRTraceFilePath;
    bool activateLoss;
    PyObject *py_activateLoss;
    const char *keywords[] = {"phyType", "SNRTraceFilePath", "activateLoss", NULL};
    PyNs3WimaxPhy *py_WimaxPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "isO", (char **) keywords, &phyType, &SNRTraceFilePath, &py_activateLoss)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    activateLoss = (bool) PyObject_IsTrue(py_activateLoss);
    retval = self->obj->CreatePhyWithoutChannel(phyType, SNRTraceFilePath, activateLoss);
    if (!(const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WimaxPhy = NULL;
    } else {
        py_WimaxPhy = (PyNs3WimaxPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_WimaxPhy);
    }
    
    if (py_WimaxPhy == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval)))), &PyNs3WimaxPhy_Type);
        py_WimaxPhy = PyObject_GC_New(PyNs3WimaxPhy, wrapper_type);
        py_WimaxPhy->inst_dict = NULL;
    
        py_WimaxPhy->inst_dict = NULL;
        py_WimaxPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval))->Ref();
        py_WimaxPhy->obj = const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxPhy->obj] = (PyObject *) py_WimaxPhy;
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxPhy);
    return py_retval;
}

PyObject * _wrap_PyNs3WimaxHelper_CreatePhyWithoutChannel(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WimaxHelper_CreatePhyWithoutChannel__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_CreatePhyWithoutChannel__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WimaxHelper_EnableAsciiForConnection(PyNs3WimaxHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *oss;
    ns3::OutputStreamWrapper *oss_ptr;
    unsigned int nodeid;
    unsigned int deviceid;
    char *netdevice;
    char *connection;
    const char *keywords[] = {"oss", "nodeid", "deviceid", "netdevice", "connection", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!IIss", (char **) keywords, &PyNs3OutputStreamWrapper_Type, &oss, &nodeid, &deviceid, &netdevice, &connection)) {
        return NULL;
    }
    oss_ptr = (oss ? oss->obj : NULL);
    ns3::WimaxHelper::EnableAsciiForConnection(ns3::Ptr< ns3::OutputStreamWrapper  > (oss_ptr), nodeid, deviceid, netdevice, connection);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxHelper_EnableAsciiAll__0(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    const char *keywords[] = {"prefix", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &prefix, &prefix_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->EnableAsciiAll(std::string(prefix, prefix_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_EnableAsciiAll__1(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *stream;
    ns3::OutputStreamWrapper *stream_ptr;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OutputStreamWrapper_Type, &stream)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    stream_ptr = (stream ? stream->obj : NULL);
    self->obj->EnableAsciiAll(ns3::Ptr< ns3::OutputStreamWrapper  > (stream_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3WimaxHelper_EnableAsciiAll(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WimaxHelper_EnableAsciiAll__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_EnableAsciiAll__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WimaxHelper_EnablePcap__0(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    PyNs3NetDevice *nd;
    ns3::NetDevice *nd_ptr;
    bool promiscuous;
    PyObject *py_promiscuous = NULL;
    bool explicitFilename;
    PyObject *py_explicitFilename = NULL;
    const char *keywords[] = {"prefix", "nd", "promiscuous", "explicitFilename", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!|OO", (char **) keywords, &prefix, &prefix_len, &PyNs3NetDevice_Type, &nd, &py_promiscuous, &py_explicitFilename)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    nd_ptr = (nd ? nd->obj : NULL);
    promiscuous = py_promiscuous? (bool) PyObject_IsTrue(py_promiscuous) : false;
    explicitFilename = py_explicitFilename? (bool) PyObject_IsTrue(py_explicitFilename) : false;
    self->obj->EnablePcap(std::string(prefix, prefix_len), ns3::Ptr< ns3::NetDevice  > (nd_ptr), promiscuous, explicitFilename);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_EnablePcap__1(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    const char *ndName;
    Py_ssize_t ndName_len;
    bool promiscuous;
    PyObject *py_promiscuous = NULL;
    bool explicitFilename;
    PyObject *py_explicitFilename = NULL;
    const char *keywords[] = {"prefix", "ndName", "promiscuous", "explicitFilename", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#|OO", (char **) keywords, &prefix, &prefix_len, &ndName, &ndName_len, &py_promiscuous, &py_explicitFilename)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    promiscuous = py_promiscuous? (bool) PyObject_IsTrue(py_promiscuous) : false;
    explicitFilename = py_explicitFilename? (bool) PyObject_IsTrue(py_explicitFilename) : false;
    self->obj->EnablePcap(std::string(prefix, prefix_len), std::string(ndName, ndName_len), promiscuous, explicitFilename);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_EnablePcap__2(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    PyNs3NetDeviceContainer *d;
    bool promiscuous;
    PyObject *py_promiscuous = NULL;
    const char *keywords[] = {"prefix", "d", "promiscuous", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!|O", (char **) keywords, &prefix, &prefix_len, &PyNs3NetDeviceContainer_Type, &d, &py_promiscuous)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    promiscuous = py_promiscuous? (bool) PyObject_IsTrue(py_promiscuous) : false;
    self->obj->EnablePcap(std::string(prefix, prefix_len), *((PyNs3NetDeviceContainer *) d)->obj, promiscuous);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_EnablePcap__3(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    PyNs3NodeContainer *n;
    bool promiscuous;
    PyObject *py_promiscuous = NULL;
    const char *keywords[] = {"prefix", "n", "promiscuous", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!|O", (char **) keywords, &prefix, &prefix_len, &PyNs3NodeContainer_Type, &n, &py_promiscuous)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    promiscuous = py_promiscuous? (bool) PyObject_IsTrue(py_promiscuous) : false;
    self->obj->EnablePcap(std::string(prefix, prefix_len), *((PyNs3NodeContainer *) n)->obj, promiscuous);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_EnablePcap__4(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    unsigned int nodeid;
    unsigned int deviceid;
    bool promiscuous;
    PyObject *py_promiscuous = NULL;
    const char *keywords[] = {"prefix", "nodeid", "deviceid", "promiscuous", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#II|O", (char **) keywords, &prefix, &prefix_len, &nodeid, &deviceid, &py_promiscuous)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    promiscuous = py_promiscuous? (bool) PyObject_IsTrue(py_promiscuous) : false;
    self->obj->EnablePcap(std::string(prefix, prefix_len), nodeid, deviceid, promiscuous);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3WimaxHelper_EnablePcap(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[5] = {0,};
    retval = _wrap_PyNs3WimaxHelper_EnablePcap__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_EnablePcap__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_EnablePcap__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_EnablePcap__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_EnablePcap__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    error_list = PyList_New(5);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WimaxHelper_EnableAscii__0(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    PyNs3NetDevice *nd;
    ns3::NetDevice *nd_ptr;
    bool explicitFilename;
    PyObject *py_explicitFilename = NULL;
    const char *keywords[] = {"prefix", "nd", "explicitFilename", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!|O", (char **) keywords, &prefix, &prefix_len, &PyNs3NetDevice_Type, &nd, &py_explicitFilename)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    nd_ptr = (nd ? nd->obj : NULL);
    explicitFilename = py_explicitFilename? (bool) PyObject_IsTrue(py_explicitFilename) : false;
    self->obj->EnableAscii(std::string(prefix, prefix_len), ns3::Ptr< ns3::NetDevice  > (nd_ptr), explicitFilename);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_EnableAscii__1(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *stream;
    ns3::OutputStreamWrapper *stream_ptr;
    PyNs3NetDevice *nd;
    ns3::NetDevice *nd_ptr;
    const char *keywords[] = {"stream", "nd", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3OutputStreamWrapper_Type, &stream, &PyNs3NetDevice_Type, &nd)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    stream_ptr = (stream ? stream->obj : NULL);
    nd_ptr = (nd ? nd->obj : NULL);
    self->obj->EnableAscii(ns3::Ptr< ns3::OutputStreamWrapper  > (stream_ptr), ns3::Ptr< ns3::NetDevice  > (nd_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_EnableAscii__2(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    const char *ndName;
    Py_ssize_t ndName_len;
    bool explicitFilename;
    PyObject *py_explicitFilename = NULL;
    const char *keywords[] = {"prefix", "ndName", "explicitFilename", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#|O", (char **) keywords, &prefix, &prefix_len, &ndName, &ndName_len, &py_explicitFilename)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    explicitFilename = py_explicitFilename? (bool) PyObject_IsTrue(py_explicitFilename) : false;
    self->obj->EnableAscii(std::string(prefix, prefix_len), std::string(ndName, ndName_len), explicitFilename);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_EnableAscii__3(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *stream;
    ns3::OutputStreamWrapper *stream_ptr;
    const char *ndName;
    Py_ssize_t ndName_len;
    const char *keywords[] = {"stream", "ndName", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#", (char **) keywords, &PyNs3OutputStreamWrapper_Type, &stream, &ndName, &ndName_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    stream_ptr = (stream ? stream->obj : NULL);
    self->obj->EnableAscii(ns3::Ptr< ns3::OutputStreamWrapper  > (stream_ptr), std::string(ndName, ndName_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_EnableAscii__4(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    PyNs3NetDeviceContainer *d;
    const char *keywords[] = {"prefix", "d", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &prefix, &prefix_len, &PyNs3NetDeviceContainer_Type, &d)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->EnableAscii(std::string(prefix, prefix_len), *((PyNs3NetDeviceContainer *) d)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_EnableAscii__5(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *stream;
    ns3::OutputStreamWrapper *stream_ptr;
    PyNs3NetDeviceContainer *d;
    const char *keywords[] = {"stream", "d", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3OutputStreamWrapper_Type, &stream, &PyNs3NetDeviceContainer_Type, &d)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    stream_ptr = (stream ? stream->obj : NULL);
    self->obj->EnableAscii(ns3::Ptr< ns3::OutputStreamWrapper  > (stream_ptr), *((PyNs3NetDeviceContainer *) d)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_EnableAscii__6(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    PyNs3NodeContainer *n;
    const char *keywords[] = {"prefix", "n", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &prefix, &prefix_len, &PyNs3NodeContainer_Type, &n)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->EnableAscii(std::string(prefix, prefix_len), *((PyNs3NodeContainer *) n)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_EnableAscii__7(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *stream;
    ns3::OutputStreamWrapper *stream_ptr;
    PyNs3NodeContainer *n;
    const char *keywords[] = {"stream", "n", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3OutputStreamWrapper_Type, &stream, &PyNs3NodeContainer_Type, &n)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    stream_ptr = (stream ? stream->obj : NULL);
    self->obj->EnableAscii(ns3::Ptr< ns3::OutputStreamWrapper  > (stream_ptr), *((PyNs3NodeContainer *) n)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_EnableAscii__8(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    unsigned int nodeid;
    unsigned int deviceid;
    bool explicitFilename;
    PyObject *py_explicitFilename;
    const char *keywords[] = {"prefix", "nodeid", "deviceid", "explicitFilename", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#IIO", (char **) keywords, &prefix, &prefix_len, &nodeid, &deviceid, &py_explicitFilename)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    explicitFilename = (bool) PyObject_IsTrue(py_explicitFilename);
    self->obj->EnableAscii(std::string(prefix, prefix_len), nodeid, deviceid, explicitFilename);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxHelper_EnableAscii__9(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3OutputStreamWrapper *stream;
    ns3::OutputStreamWrapper *stream_ptr;
    unsigned int nodeid;
    unsigned int deviceid;
    const char *keywords[] = {"stream", "nodeid", "deviceid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!II", (char **) keywords, &PyNs3OutputStreamWrapper_Type, &stream, &nodeid, &deviceid)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    stream_ptr = (stream ? stream->obj : NULL);
    self->obj->EnableAscii(ns3::Ptr< ns3::OutputStreamWrapper  > (stream_ptr), nodeid, deviceid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3WimaxHelper_EnableAscii(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[10] = {0,};
    retval = _wrap_PyNs3WimaxHelper_EnableAscii__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_EnableAscii__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_EnableAscii__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_EnableAscii__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_EnableAscii__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_EnableAscii__5(self, args, kwargs, &exceptions[5]);
    if (!exceptions[5]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_EnableAscii__6(self, args, kwargs, &exceptions[6]);
    if (!exceptions[6]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_EnableAscii__7(self, args, kwargs, &exceptions[7]);
    if (!exceptions[7]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_EnableAscii__8(self, args, kwargs, &exceptions[8]);
    if (!exceptions[8]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxHelper_EnableAscii__9(self, args, kwargs, &exceptions[9]);
    if (!exceptions[9]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        Py_DECREF(exceptions[4]);
        Py_DECREF(exceptions[5]);
        Py_DECREF(exceptions[6]);
        Py_DECREF(exceptions[7]);
        Py_DECREF(exceptions[8]);
        return retval;
    }
    error_list = PyList_New(10);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyList_SET_ITEM(error_list, 5, PyObject_Str(exceptions[5]));
    Py_DECREF(exceptions[5]);
    PyList_SET_ITEM(error_list, 6, PyObject_Str(exceptions[6]));
    Py_DECREF(exceptions[6]);
    PyList_SET_ITEM(error_list, 7, PyObject_Str(exceptions[7]));
    Py_DECREF(exceptions[7]);
    PyList_SET_ITEM(error_list, 8, PyObject_Str(exceptions[8]));
    Py_DECREF(exceptions[8]);
    PyList_SET_ITEM(error_list, 9, PyObject_Str(exceptions[9]));
    Py_DECREF(exceptions[9]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

PyObject *
_wrap_PyNs3WimaxHelper_EnablePcapAll(PyNs3WimaxHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    bool promiscuous;
    PyObject *py_promiscuous = NULL;
    const char *keywords[] = {"prefix", "promiscuous", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|O", (char **) keywords, &prefix, &prefix_len, &py_promiscuous)) {
        return NULL;
    }
    promiscuous = py_promiscuous? (bool) PyObject_IsTrue(py_promiscuous) : false;
    self->obj->EnablePcapAll(std::string(prefix, prefix_len), promiscuous);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3WimaxHelper__copy__(PyNs3WimaxHelper *self)
{

    PyNs3WimaxHelper *py_copy;
    py_copy = PyObject_GC_New(PyNs3WimaxHelper, &PyNs3WimaxHelper_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::WimaxHelper(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3PcapHelperForDevice_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WimaxHelper_methods[] = {
    {(char *) "CreateServiceFlow", (PyCFunction) _wrap_PyNs3WimaxHelper_CreateServiceFlow, METH_KEYWORDS|METH_VARARGS, "CreateServiceFlow(direction, schedulinType, classifier)\n\ntype: direction: ns3::ServiceFlow::Direction\ntype: schedulinType: ns3::ServiceFlow::SchedulingType\ntype: classifier: ns3::IpcsClassifierRecord" },
    {(char *) "CreateUplinkScheduler", (PyCFunction) _wrap_PyNs3WimaxHelper_CreateUplinkScheduler, METH_KEYWORDS|METH_VARARGS, "CreateUplinkScheduler(schedulerType)\n\ntype: schedulerType: ns3::WimaxHelper::SchedulerType" },
    {(char *) "SetPropagationLossModel", (PyCFunction) _wrap_PyNs3WimaxHelper_SetPropagationLossModel, METH_KEYWORDS|METH_VARARGS, "SetPropagationLossModel(propagationModel)\n\ntype: propagationModel: ns3::SimpleOfdmWimaxChannel::PropModel" },
    {(char *) "CreateBSScheduler", (PyCFunction) _wrap_PyNs3WimaxHelper_CreateBSScheduler, METH_KEYWORDS|METH_VARARGS, "CreateBSScheduler(schedulerType)\n\ntype: schedulerType: ns3::WimaxHelper::SchedulerType" },
    {(char *) "EnableLogComponents", (PyCFunction) _wrap_PyNs3WimaxHelper_EnableLogComponents, METH_NOARGS|METH_STATIC, "EnableLogComponents()\n\n" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3WimaxHelper_AssignStreams, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "CreatePhy", (PyCFunction) _wrap_PyNs3WimaxHelper_CreatePhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3WimaxHelper_Install, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "CreatePhyWithoutChannel", (PyCFunction) _wrap_PyNs3WimaxHelper_CreatePhyWithoutChannel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "EnableAsciiForConnection", (PyCFunction) _wrap_PyNs3WimaxHelper_EnableAsciiForConnection, METH_KEYWORDS|METH_VARARGS|METH_STATIC, "EnableAsciiForConnection(oss, nodeid, deviceid, netdevice, connection)\n\ntype: oss: ns3::Ptr< ns3::OutputStreamWrapper >\ntype: nodeid: uint32_t\ntype: deviceid: uint32_t\ntype: netdevice: char *\ntype: connection: char *" },
    {(char *) "EnableAsciiAll", (PyCFunction) _wrap_PyNs3WimaxHelper_EnableAsciiAll, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "EnablePcap", (PyCFunction) _wrap_PyNs3WimaxHelper_EnablePcap, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "EnableAscii", (PyCFunction) _wrap_PyNs3WimaxHelper_EnableAscii, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "EnablePcapAll", (PyCFunction) _wrap_PyNs3WimaxHelper_EnablePcapAll, METH_KEYWORDS|METH_VARARGS, "EnablePcapAll(prefix, promiscuous)\n\ntype: prefix: std::string\ntype: promiscuous: bool" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WimaxHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WimaxHelper__tp_clear(PyNs3WimaxHelper *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WimaxHelper *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WimaxHelper__tp_traverse(PyNs3WimaxHelper *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3WimaxHelper__PythonHelper).name() )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WimaxHelper__tp_dealloc(PyNs3WimaxHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3PcapHelperForDevice_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3PcapHelperForDevice_wrapper_registry.end()) {
        PyNs3PcapHelperForDevice_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WimaxHelper__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WimaxHelper__tp_richcompare (PyNs3WimaxHelper *PYBINDGEN_UNUSED(self), PyNs3WimaxHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WimaxHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WimaxHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.WimaxHelper",            /* tp_name */
    sizeof(PyNs3WimaxHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WimaxHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WimaxHelper(arg0)\nWimaxHelper()",                        /* Documentation string */
    (traverseproc)PyNs3WimaxHelper__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WimaxHelper__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WimaxHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WimaxHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WimaxHelper, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WimaxHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3SimpleOfdmSendParam_wrapper_registry;


static int
_wrap_PyNs3SimpleOfdmSendParam__tp_init__0(PyNs3SimpleOfdmSendParam *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleOfdmSendParam *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleOfdmSendParam_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::simpleOfdmSendParam(*((PyNs3SimpleOfdmSendParam *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleOfdmSendParam__tp_init__1(PyNs3SimpleOfdmSendParam *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::simpleOfdmSendParam();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleOfdmSendParam__tp_init__2(PyNs3SimpleOfdmSendParam *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    ns3::bvec fecBlock_value;
    unsigned int burstSize;
    bool isFirstBlock;
    PyObject *py_isFirstBlock;
    uint64_t Frequency;
    ns3::WimaxPhy::ModulationType modulationType;
    int direction;
    double rxPowerDbm;
    const char *keywords[] = {"fecBlock", "burstSize", "isFirstBlock", "Frequency", "modulationType", "direction", "rxPowerDbm", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&IOKiid", (char **) keywords, _wrap_convert_py2c__ns3__bvec, &fecBlock_value, &burstSize, &py_isFirstBlock, &Frequency, &modulationType, &direction, &rxPowerDbm)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    isFirstBlock = (bool) PyObject_IsTrue(py_isFirstBlock);
    if (direction > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::simpleOfdmSendParam(fecBlock_value, burstSize, isFirstBlock, Frequency, modulationType, direction, rxPowerDbm);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleOfdmSendParam__tp_init__3(PyNs3SimpleOfdmSendParam *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    unsigned int burstSize;
    bool isFirstBlock;
    PyObject *py_isFirstBlock;
    uint64_t Frequency;
    ns3::WimaxPhy::ModulationType modulationType;
    int direction;
    double rxPowerDbm;
    PyNs3PacketBurst *burst;
    ns3::PacketBurst *burst_ptr;
    const char *keywords[] = {"burstSize", "isFirstBlock", "Frequency", "modulationType", "direction", "rxPowerDbm", "burst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IOKiidO!", (char **) keywords, &burstSize, &py_isFirstBlock, &Frequency, &modulationType, &direction, &rxPowerDbm, &PyNs3PacketBurst_Type, &burst)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    isFirstBlock = (bool) PyObject_IsTrue(py_isFirstBlock);
    if (direction > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    burst_ptr = (burst ? burst->obj : NULL);
    self->obj = new ns3::simpleOfdmSendParam(burstSize, isFirstBlock, Frequency, modulationType, direction, rxPowerDbm, ns3::Ptr< ns3::PacketBurst  > (burst_ptr));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleOfdmSendParam__tp_init(PyNs3SimpleOfdmSendParam *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyNs3SimpleOfdmSendParam__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleOfdmSendParam__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3SimpleOfdmSendParam__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3SimpleOfdmSendParam__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleOfdmSendParam_SetBurstSize(PyNs3SimpleOfdmSendParam *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int burstSize;
    const char *keywords[] = {"burstSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &burstSize)) {
        return NULL;
    }
    self->obj->SetBurstSize(burstSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmSendParam_GetRxPowerDbm(PyNs3SimpleOfdmSendParam *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRxPowerDbm();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmSendParam_GetFrequency(PyNs3SimpleOfdmSendParam *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetFrequency();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmSendParam_SetModulationType(PyNs3SimpleOfdmSendParam *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WimaxPhy::ModulationType modulationType;
    const char *keywords[] = {"modulationType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &modulationType)) {
        return NULL;
    }
    self->obj->SetModulationType(modulationType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmSendParam_SetFrequency(PyNs3SimpleOfdmSendParam *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t Frequency;
    const char *keywords[] = {"Frequency", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &Frequency)) {
        return NULL;
    }
    self->obj->SetFrequency(Frequency);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmSendParam_GetBurst(PyNs3SimpleOfdmSendParam *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::PacketBurst > retval;
    PyNs3PacketBurst *py_PacketBurst;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetBurst();
    if (!(const_cast<ns3::PacketBurst *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::PacketBurst *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3PacketBurst__PythonHelper).name())
    {
        py_PacketBurst = reinterpret_cast< PyNs3PacketBurst* >(reinterpret_cast< PyNs3PacketBurst__PythonHelper* >(const_cast<ns3::PacketBurst *> (ns3::PeekPointer (retval)))->m_pyself);
        py_PacketBurst->obj = const_cast<ns3::PacketBurst *> (ns3::PeekPointer (retval));
        Py_INCREF(py_PacketBurst);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::PacketBurst *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_PacketBurst = NULL;
        } else {
            py_PacketBurst = (PyNs3PacketBurst *) wrapper_lookup_iter->second;
            Py_INCREF(py_PacketBurst);
        }
    
        if (py_PacketBurst == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::PacketBurst *> (ns3::PeekPointer (retval)))), &PyNs3PacketBurst_Type);
            py_PacketBurst = PyObject_GC_New(PyNs3PacketBurst, wrapper_type);
            py_PacketBurst->inst_dict = NULL;
    
            py_PacketBurst->inst_dict = NULL;
            py_PacketBurst->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::PacketBurst *> (ns3::PeekPointer (retval))->Ref();
            py_PacketBurst->obj = const_cast<ns3::PacketBurst *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_PacketBurst->obj] = (PyObject *) py_PacketBurst;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_PacketBurst);
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmSendParam_GetModulationType(PyNs3SimpleOfdmSendParam *self)
{
    PyObject *py_retval;
    ns3::WimaxPhy::ModulationType retval;
    
    retval = self->obj->GetModulationType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmSendParam_GetIsFirstBlock(PyNs3SimpleOfdmSendParam *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetIsFirstBlock();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmSendParam_SetDirection(PyNs3SimpleOfdmSendParam *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int direction;
    const char *keywords[] = {"direction", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &direction)) {
        return NULL;
    }
    if (direction > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetDirection(direction);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmSendParam_SetRxPowerDbm(PyNs3SimpleOfdmSendParam *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double rxPowerDbm;
    const char *keywords[] = {"rxPowerDbm", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &rxPowerDbm)) {
        return NULL;
    }
    self->obj->SetRxPowerDbm(rxPowerDbm);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmSendParam_SetIsFirstBlock(PyNs3SimpleOfdmSendParam *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool isFirstBlock;
    PyObject *py_isFirstBlock;
    const char *keywords[] = {"isFirstBlock", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_isFirstBlock)) {
        return NULL;
    }
    isFirstBlock = (bool) PyObject_IsTrue(py_isFirstBlock);
    self->obj->SetIsFirstBlock(isFirstBlock);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmSendParam_GetDirection(PyNs3SimpleOfdmSendParam *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetDirection();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmSendParam_SetFecBlock(PyNs3SimpleOfdmSendParam *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::bvec fecBlock_value;
    const char *keywords[] = {"fecBlock", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__ns3__bvec, &fecBlock_value)) {
        return NULL;
    }
    self->obj->SetFecBlock(fecBlock_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmSendParam_GetFecBlock(PyNs3SimpleOfdmSendParam *self)
{
    PyObject *py_retval;
    ns3::bvec retval;
    Pyns3__bvec *py_ns3__bvec;
    
    retval = self->obj->GetFecBlock();
    py_ns3__bvec = PyObject_New(Pyns3__bvec, &Pyns3__bvec_Type);
    py_ns3__bvec->obj = new ns3::bvec(retval);
    py_retval = Py_BuildValue((char *) "N", py_ns3__bvec);
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmSendParam_GetBurstSize(PyNs3SimpleOfdmSendParam *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetBurstSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleOfdmSendParam__copy__(PyNs3SimpleOfdmSendParam *self)
{

    PyNs3SimpleOfdmSendParam *py_copy;
    py_copy = PyObject_New(PyNs3SimpleOfdmSendParam, &PyNs3SimpleOfdmSendParam_Type);
    py_copy->obj = new ns3::simpleOfdmSendParam(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3SimpleOfdmSendParam_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleOfdmSendParam_methods[] = {
    {(char *) "SetBurstSize", (PyCFunction) _wrap_PyNs3SimpleOfdmSendParam_SetBurstSize, METH_KEYWORDS|METH_VARARGS, "SetBurstSize(burstSize)\n\ntype: burstSize: uint32_t" },
    {(char *) "GetRxPowerDbm", (PyCFunction) _wrap_PyNs3SimpleOfdmSendParam_GetRxPowerDbm, METH_NOARGS, "GetRxPowerDbm()\n\n" },
    {(char *) "GetFrequency", (PyCFunction) _wrap_PyNs3SimpleOfdmSendParam_GetFrequency, METH_NOARGS, "GetFrequency()\n\n" },
    {(char *) "SetModulationType", (PyCFunction) _wrap_PyNs3SimpleOfdmSendParam_SetModulationType, METH_KEYWORDS|METH_VARARGS, "SetModulationType(modulationType)\n\ntype: modulationType: ns3::WimaxPhy::ModulationType" },
    {(char *) "SetFrequency", (PyCFunction) _wrap_PyNs3SimpleOfdmSendParam_SetFrequency, METH_KEYWORDS|METH_VARARGS, "SetFrequency(Frequency)\n\ntype: Frequency: uint64_t" },
    {(char *) "GetBurst", (PyCFunction) _wrap_PyNs3SimpleOfdmSendParam_GetBurst, METH_NOARGS, "GetBurst()\n\n" },
    {(char *) "GetModulationType", (PyCFunction) _wrap_PyNs3SimpleOfdmSendParam_GetModulationType, METH_NOARGS, "GetModulationType()\n\n" },
    {(char *) "GetIsFirstBlock", (PyCFunction) _wrap_PyNs3SimpleOfdmSendParam_GetIsFirstBlock, METH_NOARGS, "GetIsFirstBlock()\n\n" },
    {(char *) "SetDirection", (PyCFunction) _wrap_PyNs3SimpleOfdmSendParam_SetDirection, METH_KEYWORDS|METH_VARARGS, "SetDirection(direction)\n\ntype: direction: uint8_t" },
    {(char *) "SetRxPowerDbm", (PyCFunction) _wrap_PyNs3SimpleOfdmSendParam_SetRxPowerDbm, METH_KEYWORDS|METH_VARARGS, "SetRxPowerDbm(rxPowerDbm)\n\ntype: rxPowerDbm: double" },
    {(char *) "SetIsFirstBlock", (PyCFunction) _wrap_PyNs3SimpleOfdmSendParam_SetIsFirstBlock, METH_KEYWORDS|METH_VARARGS, "SetIsFirstBlock(isFirstBlock)\n\ntype: isFirstBlock: bool" },
    {(char *) "GetDirection", (PyCFunction) _wrap_PyNs3SimpleOfdmSendParam_GetDirection, METH_NOARGS, "GetDirection()\n\n" },
    {(char *) "SetFecBlock", (PyCFunction) _wrap_PyNs3SimpleOfdmSendParam_SetFecBlock, METH_KEYWORDS|METH_VARARGS, "SetFecBlock(fecBlock)\n\ntype: fecBlock: ns3::bvec const &" },
    {(char *) "GetFecBlock", (PyCFunction) _wrap_PyNs3SimpleOfdmSendParam_GetFecBlock, METH_NOARGS, "GetFecBlock()\n\n" },
    {(char *) "GetBurstSize", (PyCFunction) _wrap_PyNs3SimpleOfdmSendParam_GetBurstSize, METH_NOARGS, "GetBurstSize()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleOfdmSendParam__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleOfdmSendParam__tp_dealloc(PyNs3SimpleOfdmSendParam *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3SimpleOfdmSendParam_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3SimpleOfdmSendParam_wrapper_registry.end()) {
        PyNs3SimpleOfdmSendParam_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::simpleOfdmSendParam *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleOfdmSendParam__tp_richcompare (PyNs3SimpleOfdmSendParam *PYBINDGEN_UNUSED(self), PyNs3SimpleOfdmSendParam *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleOfdmSendParam_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleOfdmSendParam_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.SimpleOfdmSendParam",            /* tp_name */
    sizeof(PyNs3SimpleOfdmSendParam),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleOfdmSendParam__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "simpleOfdmSendParam(fecBlock, burstSize, isFirstBlock, Frequency, modulationType, direction, rxPowerDbm)\nsimpleOfdmSendParam(burstSize, isFirstBlock, Frequency, modulationType, direction, rxPowerDbm, burst)\nsimpleOfdmSendParam(arg0)\nsimpleOfdmSendParam()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleOfdmSendParam__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleOfdmSendParam_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleOfdmSendParam__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3ClassificationRuleVectorTlvValue__tp_init__0(PyNs3ClassificationRuleVectorTlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ClassificationRuleVectorTlvValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ClassificationRuleVectorTlvValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ClassificationRuleVectorTlvValue(*((PyNs3ClassificationRuleVectorTlvValue *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ClassificationRuleVectorTlvValue__tp_init__1(PyNs3ClassificationRuleVectorTlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ClassificationRuleVectorTlvValue();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3ClassificationRuleVectorTlvValue__tp_init(PyNs3ClassificationRuleVectorTlvValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ClassificationRuleVectorTlvValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ClassificationRuleVectorTlvValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ClassificationRuleVectorTlvValue_Deserialize(PyNs3ClassificationRuleVectorTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    uint64_t valueLength;
    const char *keywords[] = {"start", "valueLength", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!K", (char **) keywords, &PyNs3BufferIterator_Type, &start, &valueLength)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj, valueLength);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3ClassificationRuleVectorTlvValue__copy__(PyNs3ClassificationRuleVectorTlvValue *self)
{

    PyNs3ClassificationRuleVectorTlvValue *py_copy;
    py_copy = PyObject_GC_New(PyNs3ClassificationRuleVectorTlvValue, &PyNs3ClassificationRuleVectorTlvValue_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::ClassificationRuleVectorTlvValue(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3TlvValue_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ClassificationRuleVectorTlvValue_methods[] = {
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3ClassificationRuleVectorTlvValue_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start, valueLength)\n\ntype: start: ns3::Buffer::Iterator\ntype: valueLength: uint64_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ClassificationRuleVectorTlvValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3ClassificationRuleVectorTlvValue__tp_clear(PyNs3ClassificationRuleVectorTlvValue *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::ClassificationRuleVectorTlvValue *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3ClassificationRuleVectorTlvValue__tp_traverse(PyNs3ClassificationRuleVectorTlvValue *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3ClassificationRuleVectorTlvValue__tp_dealloc(PyNs3ClassificationRuleVectorTlvValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3TlvValue_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3TlvValue_wrapper_registry.end()) {
        PyNs3TlvValue_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3ClassificationRuleVectorTlvValue__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ClassificationRuleVectorTlvValue__tp_richcompare (PyNs3ClassificationRuleVectorTlvValue *PYBINDGEN_UNUSED(self), PyNs3ClassificationRuleVectorTlvValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ClassificationRuleVectorTlvValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ClassificationRuleVectorTlvValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.ClassificationRuleVectorTlvValue",            /* tp_name */
    sizeof(PyNs3ClassificationRuleVectorTlvValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ClassificationRuleVectorTlvValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "ClassificationRuleVectorTlvValue(arg0)\nClassificationRuleVectorTlvValue()",                        /* Documentation string */
    (traverseproc)PyNs3ClassificationRuleVectorTlvValue__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3ClassificationRuleVectorTlvValue__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ClassificationRuleVectorTlvValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ClassificationRuleVectorTlvValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3ClassificationRuleVectorTlvValue, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ClassificationRuleVectorTlvValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3CsParamVectorTlvValue__tp_init__0(PyNs3CsParamVectorTlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3CsParamVectorTlvValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CsParamVectorTlvValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CsParamVectorTlvValue(*((PyNs3CsParamVectorTlvValue *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3CsParamVectorTlvValue__tp_init__1(PyNs3CsParamVectorTlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CsParamVectorTlvValue();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3CsParamVectorTlvValue__tp_init(PyNs3CsParamVectorTlvValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3CsParamVectorTlvValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3CsParamVectorTlvValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3CsParamVectorTlvValue_Deserialize(PyNs3CsParamVectorTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    uint64_t valueLength;
    const char *keywords[] = {"start", "valueLength", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!K", (char **) keywords, &PyNs3BufferIterator_Type, &start, &valueLength)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj, valueLength);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3CsParamVectorTlvValue__copy__(PyNs3CsParamVectorTlvValue *self)
{

    PyNs3CsParamVectorTlvValue *py_copy;
    py_copy = PyObject_GC_New(PyNs3CsParamVectorTlvValue, &PyNs3CsParamVectorTlvValue_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::CsParamVectorTlvValue(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3TlvValue_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3CsParamVectorTlvValue_methods[] = {
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3CsParamVectorTlvValue_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start, valueLength)\n\ntype: start: ns3::Buffer::Iterator\ntype: valueLength: uint64_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3CsParamVectorTlvValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3CsParamVectorTlvValue__tp_clear(PyNs3CsParamVectorTlvValue *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::CsParamVectorTlvValue *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3CsParamVectorTlvValue__tp_traverse(PyNs3CsParamVectorTlvValue *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3CsParamVectorTlvValue__tp_dealloc(PyNs3CsParamVectorTlvValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3TlvValue_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3TlvValue_wrapper_registry.end()) {
        PyNs3TlvValue_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3CsParamVectorTlvValue__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CsParamVectorTlvValue__tp_richcompare (PyNs3CsParamVectorTlvValue *PYBINDGEN_UNUSED(self), PyNs3CsParamVectorTlvValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CsParamVectorTlvValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CsParamVectorTlvValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.CsParamVectorTlvValue",            /* tp_name */
    sizeof(PyNs3CsParamVectorTlvValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CsParamVectorTlvValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "CsParamVectorTlvValue(arg0)\nCsParamVectorTlvValue()",                        /* Documentation string */
    (traverseproc)PyNs3CsParamVectorTlvValue__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3CsParamVectorTlvValue__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CsParamVectorTlvValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CsParamVectorTlvValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3CsParamVectorTlvValue, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CsParamVectorTlvValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Ipv4AddressTlvValue__tp_init__0(PyNs3Ipv4AddressTlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Ipv4AddressTlvValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4AddressTlvValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Ipv4AddressTlvValue(*((PyNs3Ipv4AddressTlvValue *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Ipv4AddressTlvValue__tp_init__1(PyNs3Ipv4AddressTlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Ipv4AddressTlvValue();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Ipv4AddressTlvValue__tp_init(PyNs3Ipv4AddressTlvValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Ipv4AddressTlvValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Ipv4AddressTlvValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Ipv4AddressTlvValue_GetSerializedSize(PyNs3Ipv4AddressTlvValue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Ipv4AddressTlvValue_Add(PyNs3Ipv4AddressTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *address;
    PyNs3Ipv4Mask *Mask;
    const char *keywords[] = {"address", "Mask", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &address, &PyNs3Ipv4Mask_Type, &Mask)) {
        return NULL;
    }
    self->obj->Add(*((PyNs3Ipv4Address *) address)->obj, *((PyNs3Ipv4Mask *) Mask)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Ipv4AddressTlvValue_Serialize(PyNs3Ipv4AddressTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Ipv4AddressTlvValue_Deserialize(PyNs3Ipv4AddressTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    uint64_t valueLength;
    const char *keywords[] = {"start", "valueLength", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!K", (char **) keywords, &PyNs3BufferIterator_Type, &start, &valueLength)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj, valueLength);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3Ipv4AddressTlvValue__copy__(PyNs3Ipv4AddressTlvValue *self)
{

    PyNs3Ipv4AddressTlvValue *py_copy;
    py_copy = PyObject_GC_New(PyNs3Ipv4AddressTlvValue, &PyNs3Ipv4AddressTlvValue_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::Ipv4AddressTlvValue(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3TlvValue_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Ipv4AddressTlvValue_methods[] = {
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3Ipv4AddressTlvValue_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "Add", (PyCFunction) _wrap_PyNs3Ipv4AddressTlvValue_Add, METH_KEYWORDS|METH_VARARGS, "Add(address, Mask)\n\ntype: address: ns3::Ipv4Address\ntype: Mask: ns3::Ipv4Mask" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3Ipv4AddressTlvValue_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3Ipv4AddressTlvValue_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start, valueLength)\n\ntype: start: ns3::Buffer::Iterator\ntype: valueLength: uint64_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Ipv4AddressTlvValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3Ipv4AddressTlvValue__tp_clear(PyNs3Ipv4AddressTlvValue *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::Ipv4AddressTlvValue *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3Ipv4AddressTlvValue__tp_traverse(PyNs3Ipv4AddressTlvValue *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3Ipv4AddressTlvValue__tp_dealloc(PyNs3Ipv4AddressTlvValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3TlvValue_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3TlvValue_wrapper_registry.end()) {
        PyNs3TlvValue_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3Ipv4AddressTlvValue__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Ipv4AddressTlvValue__tp_richcompare (PyNs3Ipv4AddressTlvValue *PYBINDGEN_UNUSED(self), PyNs3Ipv4AddressTlvValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Ipv4AddressTlvValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Ipv4AddressTlvValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Ipv4AddressTlvValue",            /* tp_name */
    sizeof(PyNs3Ipv4AddressTlvValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Ipv4AddressTlvValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "Ipv4AddressTlvValue(arg0)\nIpv4AddressTlvValue()",                        /* Documentation string */
    (traverseproc)PyNs3Ipv4AddressTlvValue__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3Ipv4AddressTlvValue__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Ipv4AddressTlvValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Ipv4AddressTlvValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3Ipv4AddressTlvValue, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Ipv4AddressTlvValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3Ipv4AddressTlvValueIpv4Addr_wrapper_registry;
static PyObject* _wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__get_Address(PyNs3Ipv4AddressTlvValueIpv4Addr *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->Address);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__set_Address(PyNs3Ipv4AddressTlvValueIpv4Addr *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->Address = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__get_Mask(PyNs3Ipv4AddressTlvValueIpv4Addr *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Mask *py_Ipv4Mask;
    
    py_Ipv4Mask = PyObject_New(PyNs3Ipv4Mask, &PyNs3Ipv4Mask_Type);
    py_Ipv4Mask->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Mask->obj = new ns3::Ipv4Mask(self->obj->Mask);
    PyNs3Ipv4Mask_wrapper_registry[(void *) py_Ipv4Mask->obj] = (PyObject *) py_Ipv4Mask;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Mask);
    return py_retval;
}
static int _wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__set_Mask(PyNs3Ipv4AddressTlvValueIpv4Addr *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Mask *tmp_Ipv4Mask;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Mask_Type, &tmp_Ipv4Mask)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->Mask = *tmp_Ipv4Mask->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3Ipv4AddressTlvValueIpv4Addr__getsets[] = {
    {
        (char*) "Mask", /* attribute name */
        (getter) _wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__get_Mask, /* C function to get the attribute */
        (setter) _wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__set_Mask, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "Address", /* attribute name */
        (getter) _wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__get_Address, /* C function to get the attribute */
        (setter) _wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__set_Address, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__tp_init__0(PyNs3Ipv4AddressTlvValueIpv4Addr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Ipv4AddressTlvValue::ipv4Addr();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__tp_init__1(PyNs3Ipv4AddressTlvValueIpv4Addr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Ipv4AddressTlvValueIpv4Addr *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4AddressTlvValueIpv4Addr_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Ipv4AddressTlvValue::ipv4Addr(*((PyNs3Ipv4AddressTlvValueIpv4Addr *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__tp_init(PyNs3Ipv4AddressTlvValueIpv4Addr *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__copy__(PyNs3Ipv4AddressTlvValueIpv4Addr *self)
{

    PyNs3Ipv4AddressTlvValueIpv4Addr *py_copy;
    py_copy = PyObject_New(PyNs3Ipv4AddressTlvValueIpv4Addr, &PyNs3Ipv4AddressTlvValueIpv4Addr_Type);
    py_copy->obj = new ns3::Ipv4AddressTlvValue::ipv4Addr(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Ipv4AddressTlvValueIpv4Addr_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Ipv4AddressTlvValueIpv4Addr_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__tp_dealloc(PyNs3Ipv4AddressTlvValueIpv4Addr *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Ipv4AddressTlvValueIpv4Addr_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Ipv4AddressTlvValueIpv4Addr_wrapper_registry.end()) {
        PyNs3Ipv4AddressTlvValueIpv4Addr_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::Ipv4AddressTlvValue::ipv4Addr *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__tp_richcompare (PyNs3Ipv4AddressTlvValueIpv4Addr *PYBINDGEN_UNUSED(self), PyNs3Ipv4AddressTlvValueIpv4Addr *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Ipv4AddressTlvValueIpv4Addr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Ipv4AddressTlvValueIpv4Addr_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Ipv4AddressTlvValue.ipv4Addr",            /* tp_name */
    sizeof(PyNs3Ipv4AddressTlvValueIpv4Addr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "ipv4Addr(arg0)\nipv4Addr()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Ipv4AddressTlvValueIpv4Addr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3Ipv4AddressTlvValueIpv4Addr__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Ipv4AddressTlvValueIpv4Addr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MacHeaderType__tp_init__0(PyNs3MacHeaderType *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MacHeaderType *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MacHeaderType_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MacHeaderType(*((PyNs3MacHeaderType *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MacHeaderType__tp_init__1(PyNs3MacHeaderType *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MacHeaderType();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3MacHeaderType__tp_init__2(PyNs3MacHeaderType *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (type > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MacHeaderType(type);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3MacHeaderType__tp_init(PyNs3MacHeaderType *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3MacHeaderType__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MacHeaderType__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3MacHeaderType__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MacHeaderType_Serialize(PyNs3MacHeaderType *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacHeaderType_Deserialize(PyNs3MacHeaderType *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacHeaderType_GetName(PyNs3MacHeaderType *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3MacHeaderType_GetType(PyNs3MacHeaderType *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacHeaderType_GetInstanceTypeId(PyNs3MacHeaderType *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacHeaderType_GetSerializedSize(PyNs3MacHeaderType *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacHeaderType_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MacHeaderType::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacHeaderType_SetType(PyNs3MacHeaderType *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    if (type > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetType(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3MacHeaderType__copy__(PyNs3MacHeaderType *self)
{

    PyNs3MacHeaderType *py_copy;
    py_copy = PyObject_GC_New(PyNs3MacHeaderType, &PyNs3MacHeaderType_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::MacHeaderType(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MacHeaderType_methods[] = {
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3MacHeaderType_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3MacHeaderType_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3MacHeaderType_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "GetType", (PyCFunction) _wrap_PyNs3MacHeaderType_GetType, METH_NOARGS, "GetType()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MacHeaderType_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3MacHeaderType_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MacHeaderType_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3MacHeaderType_SetType, METH_KEYWORDS|METH_VARARGS, "SetType(type)\n\ntype: type: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MacHeaderType__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MacHeaderType__tp_clear(PyNs3MacHeaderType *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MacHeaderType *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MacHeaderType__tp_traverse(PyNs3MacHeaderType *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MacHeaderType__tp_dealloc(PyNs3MacHeaderType *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MacHeaderType__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MacHeaderType__tp_richcompare (PyNs3MacHeaderType *PYBINDGEN_UNUSED(self), PyNs3MacHeaderType *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MacHeaderType_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MacHeaderType_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.MacHeaderType",            /* tp_name */
    sizeof(PyNs3MacHeaderType),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MacHeaderType__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "MacHeaderType(arg0)\nMacHeaderType(type)\nMacHeaderType()",                        /* Documentation string */
    (traverseproc)PyNs3MacHeaderType__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MacHeaderType__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MacHeaderType__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MacHeaderType_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MacHeaderType, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MacHeaderType__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3ManagementMessageType__tp_init__0(PyNs3ManagementMessageType *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ManagementMessageType *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ManagementMessageType_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ManagementMessageType(*((PyNs3ManagementMessageType *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ManagementMessageType__tp_init__1(PyNs3ManagementMessageType *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ManagementMessageType();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ManagementMessageType__tp_init__2(PyNs3ManagementMessageType *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (type > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ManagementMessageType(type);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3ManagementMessageType__tp_init(PyNs3ManagementMessageType *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3ManagementMessageType__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ManagementMessageType__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3ManagementMessageType__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ManagementMessageType_Serialize(PyNs3ManagementMessageType *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ManagementMessageType_Deserialize(PyNs3ManagementMessageType *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ManagementMessageType_GetName(PyNs3ManagementMessageType *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3ManagementMessageType_GetType(PyNs3ManagementMessageType *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ManagementMessageType_GetInstanceTypeId(PyNs3ManagementMessageType *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3ManagementMessageType_GetSerializedSize(PyNs3ManagementMessageType *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ManagementMessageType_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ManagementMessageType::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3ManagementMessageType_SetType(PyNs3ManagementMessageType *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    if (type > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetType(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3ManagementMessageType__copy__(PyNs3ManagementMessageType *self)
{

    PyNs3ManagementMessageType *py_copy;
    py_copy = PyObject_GC_New(PyNs3ManagementMessageType, &PyNs3ManagementMessageType_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::ManagementMessageType(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ManagementMessageType_methods[] = {
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3ManagementMessageType_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3ManagementMessageType_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3ManagementMessageType_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "GetType", (PyCFunction) _wrap_PyNs3ManagementMessageType_GetType, METH_NOARGS, "GetType()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3ManagementMessageType_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3ManagementMessageType_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3ManagementMessageType_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3ManagementMessageType_SetType, METH_KEYWORDS|METH_VARARGS, "SetType(type)\n\ntype: type: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ManagementMessageType__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3ManagementMessageType__tp_clear(PyNs3ManagementMessageType *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::ManagementMessageType *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3ManagementMessageType__tp_traverse(PyNs3ManagementMessageType *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3ManagementMessageType__tp_dealloc(PyNs3ManagementMessageType *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3ManagementMessageType__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ManagementMessageType__tp_richcompare (PyNs3ManagementMessageType *PYBINDGEN_UNUSED(self), PyNs3ManagementMessageType *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ManagementMessageType_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ManagementMessageType_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.ManagementMessageType",            /* tp_name */
    sizeof(PyNs3ManagementMessageType),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ManagementMessageType__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "ManagementMessageType(arg0)\nManagementMessageType(type)\nManagementMessageType()",                        /* Documentation string */
    (traverseproc)PyNs3ManagementMessageType__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3ManagementMessageType__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ManagementMessageType__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ManagementMessageType_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3ManagementMessageType, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ManagementMessageType__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3OfdmDownlinkFramePrefix__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'OfdmDownlinkFramePrefix' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3OfdmDownlinkFramePrefix_GetFrameNumber(PyNs3OfdmDownlinkFramePrefix *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetFrameNumber();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDownlinkFramePrefix_SetHcs(PyNs3OfdmDownlinkFramePrefix *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int hcs;
    const char *keywords[] = {"hcs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &hcs)) {
        return NULL;
    }
    if (hcs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHcs(hcs);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDownlinkFramePrefix_Deserialize(PyNs3OfdmDownlinkFramePrefix *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDownlinkFramePrefix_GetBaseStationId(PyNs3OfdmDownlinkFramePrefix *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetBaseStationId();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDownlinkFramePrefix_GetConfigurationChangeCount(PyNs3OfdmDownlinkFramePrefix *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetConfigurationChangeCount();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDownlinkFramePrefix_GetName(PyNs3OfdmDownlinkFramePrefix *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDownlinkFramePrefix_Serialize(PyNs3OfdmDownlinkFramePrefix *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDownlinkFramePrefix_GetSerializedSize(PyNs3OfdmDownlinkFramePrefix *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDownlinkFramePrefix_SetFrameNumber(PyNs3OfdmDownlinkFramePrefix *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int frameNumber;
    const char *keywords[] = {"frameNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &frameNumber)) {
        return NULL;
    }
    self->obj->SetFrameNumber(frameNumber);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDownlinkFramePrefix_GetDlFramePrefixElements(PyNs3OfdmDownlinkFramePrefix *self)
{
    PyObject *py_retval;
    std::vector< ns3::DlFramePrefixIe > retval;
    Pystd__vector__lt___ns3__DlFramePrefixIe___gt__ *py_std__vector__lt___ns3__DlFramePrefixIe___gt__;
    
    retval = self->obj->GetDlFramePrefixElements();
    py_std__vector__lt___ns3__DlFramePrefixIe___gt__ = PyObject_New(Pystd__vector__lt___ns3__DlFramePrefixIe___gt__, &Pystd__vector__lt___ns3__DlFramePrefixIe___gt___Type);
    py_std__vector__lt___ns3__DlFramePrefixIe___gt__->obj = new std::vector< ns3::DlFramePrefixIe >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__DlFramePrefixIe___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDownlinkFramePrefix_GetHcs(PyNs3OfdmDownlinkFramePrefix *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetHcs();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDownlinkFramePrefix_SetBaseStationId(PyNs3OfdmDownlinkFramePrefix *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *baseStationId;
    const char *keywords[] = {"baseStationId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &baseStationId)) {
        return NULL;
    }
    self->obj->SetBaseStationId(*((PyNs3Mac48Address *) baseStationId)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDownlinkFramePrefix_AddDlFramePrefixElement(PyNs3OfdmDownlinkFramePrefix *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DlFramePrefixIe *dlFramePrefixElement;
    const char *keywords[] = {"dlFramePrefixElement", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DlFramePrefixIe_Type, &dlFramePrefixElement)) {
        return NULL;
    }
    self->obj->AddDlFramePrefixElement(*((PyNs3DlFramePrefixIe *) dlFramePrefixElement)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDownlinkFramePrefix_SetConfigurationChangeCount(PyNs3OfdmDownlinkFramePrefix *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int configurationChangeCount;
    const char *keywords[] = {"configurationChangeCount", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &configurationChangeCount)) {
        return NULL;
    }
    if (configurationChangeCount > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetConfigurationChangeCount(configurationChangeCount);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmDownlinkFramePrefix_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::OfdmDownlinkFramePrefix::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}

static PyMethodDef PyNs3OfdmDownlinkFramePrefix_methods[] = {
    {(char *) "GetFrameNumber", (PyCFunction) _wrap_PyNs3OfdmDownlinkFramePrefix_GetFrameNumber, METH_NOARGS, "GetFrameNumber()\n\n" },
    {(char *) "SetHcs", (PyCFunction) _wrap_PyNs3OfdmDownlinkFramePrefix_SetHcs, METH_KEYWORDS|METH_VARARGS, "SetHcs(hcs)\n\ntype: hcs: uint8_t" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3OfdmDownlinkFramePrefix_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetBaseStationId", (PyCFunction) _wrap_PyNs3OfdmDownlinkFramePrefix_GetBaseStationId, METH_NOARGS, "GetBaseStationId()\n\n" },
    {(char *) "GetConfigurationChangeCount", (PyCFunction) _wrap_PyNs3OfdmDownlinkFramePrefix_GetConfigurationChangeCount, METH_NOARGS, "GetConfigurationChangeCount()\n\n" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3OfdmDownlinkFramePrefix_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3OfdmDownlinkFramePrefix_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3OfdmDownlinkFramePrefix_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetFrameNumber", (PyCFunction) _wrap_PyNs3OfdmDownlinkFramePrefix_SetFrameNumber, METH_KEYWORDS|METH_VARARGS, "SetFrameNumber(frameNumber)\n\ntype: frameNumber: uint32_t" },
    {(char *) "GetDlFramePrefixElements", (PyCFunction) _wrap_PyNs3OfdmDownlinkFramePrefix_GetDlFramePrefixElements, METH_NOARGS, "GetDlFramePrefixElements()\n\n" },
    {(char *) "GetHcs", (PyCFunction) _wrap_PyNs3OfdmDownlinkFramePrefix_GetHcs, METH_NOARGS, "GetHcs()\n\n" },
    {(char *) "SetBaseStationId", (PyCFunction) _wrap_PyNs3OfdmDownlinkFramePrefix_SetBaseStationId, METH_KEYWORDS|METH_VARARGS, "SetBaseStationId(baseStationId)\n\ntype: baseStationId: ns3::Mac48Address" },
    {(char *) "AddDlFramePrefixElement", (PyCFunction) _wrap_PyNs3OfdmDownlinkFramePrefix_AddDlFramePrefixElement, METH_KEYWORDS|METH_VARARGS, "AddDlFramePrefixElement(dlFramePrefixElement)\n\ntype: dlFramePrefixElement: ns3::DlFramePrefixIe" },
    {(char *) "SetConfigurationChangeCount", (PyCFunction) _wrap_PyNs3OfdmDownlinkFramePrefix_SetConfigurationChangeCount, METH_KEYWORDS|METH_VARARGS, "SetConfigurationChangeCount(configurationChangeCount)\n\ntype: configurationChangeCount: uint8_t" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3OfdmDownlinkFramePrefix_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3OfdmDownlinkFramePrefix__tp_clear(PyNs3OfdmDownlinkFramePrefix *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::OfdmDownlinkFramePrefix *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3OfdmDownlinkFramePrefix__tp_traverse(PyNs3OfdmDownlinkFramePrefix *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3OfdmDownlinkFramePrefix__tp_dealloc(PyNs3OfdmDownlinkFramePrefix *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3OfdmDownlinkFramePrefix__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3OfdmDownlinkFramePrefix__tp_richcompare (PyNs3OfdmDownlinkFramePrefix *PYBINDGEN_UNUSED(self), PyNs3OfdmDownlinkFramePrefix *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3OfdmDownlinkFramePrefix_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3OfdmDownlinkFramePrefix_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.OfdmDownlinkFramePrefix",            /* tp_name */
    sizeof(PyNs3OfdmDownlinkFramePrefix),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3OfdmDownlinkFramePrefix__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "OfdmDownlinkFramePrefix(arg0)\nOfdmDownlinkFramePrefix()",                        /* Documentation string */
    (traverseproc)PyNs3OfdmDownlinkFramePrefix__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3OfdmDownlinkFramePrefix__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3OfdmDownlinkFramePrefix__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3OfdmDownlinkFramePrefix_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3OfdmDownlinkFramePrefix, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3OfdmDownlinkFramePrefix__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3OfdmSendParams__tp_init__0(PyNs3OfdmSendParams *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3OfdmSendParams *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OfdmSendParams_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OfdmSendParams(*((PyNs3OfdmSendParams *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3OfdmSendParams__tp_init__1(PyNs3OfdmSendParams *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3PacketBurst *burst;
    ns3::PacketBurst *burst_ptr;
    int modulationType;
    int direction;
    const char *keywords[] = {"burst", "modulationType", "direction", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!ii", (char **) keywords, &PyNs3PacketBurst_Type, &burst, &modulationType, &direction)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    burst_ptr = (burst ? burst->obj : NULL);
    if (modulationType > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (direction > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OfdmSendParams(ns3::Ptr< ns3::PacketBurst  > (burst_ptr), modulationType, direction);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3OfdmSendParams__tp_init(PyNs3OfdmSendParams *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3OfdmSendParams__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3OfdmSendParams__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3OfdmSendParams_GetDirection(PyNs3OfdmSendParams *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetDirection();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmSendParams_GetBurst(PyNs3OfdmSendParams *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::PacketBurst > retval;
    PyNs3PacketBurst *py_PacketBurst;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetBurst();
    if (!(const_cast<ns3::PacketBurst *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::PacketBurst *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3PacketBurst__PythonHelper).name())
    {
        py_PacketBurst = reinterpret_cast< PyNs3PacketBurst* >(reinterpret_cast< PyNs3PacketBurst__PythonHelper* >(const_cast<ns3::PacketBurst *> (ns3::PeekPointer (retval)))->m_pyself);
        py_PacketBurst->obj = const_cast<ns3::PacketBurst *> (ns3::PeekPointer (retval));
        Py_INCREF(py_PacketBurst);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::PacketBurst *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_PacketBurst = NULL;
        } else {
            py_PacketBurst = (PyNs3PacketBurst *) wrapper_lookup_iter->second;
            Py_INCREF(py_PacketBurst);
        }
    
        if (py_PacketBurst == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::PacketBurst *> (ns3::PeekPointer (retval)))), &PyNs3PacketBurst_Type);
            py_PacketBurst = PyObject_GC_New(PyNs3PacketBurst, wrapper_type);
            py_PacketBurst->inst_dict = NULL;
    
            py_PacketBurst->inst_dict = NULL;
            py_PacketBurst->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::PacketBurst *> (ns3::PeekPointer (retval))->Ref();
            py_PacketBurst->obj = const_cast<ns3::PacketBurst *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_PacketBurst->obj] = (PyObject *) py_PacketBurst;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_PacketBurst);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmSendParams_GetModulationType(PyNs3OfdmSendParams *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetModulationType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3OfdmSendParams__copy__(PyNs3OfdmSendParams *self)
{

    PyNs3OfdmSendParams *py_copy;
    py_copy = PyObject_New(PyNs3OfdmSendParams, &PyNs3OfdmSendParams_Type);
    py_copy->obj = new ns3::OfdmSendParams(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3SendParams_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3OfdmSendParams_methods[] = {
    {(char *) "GetDirection", (PyCFunction) _wrap_PyNs3OfdmSendParams_GetDirection, METH_NOARGS, "GetDirection()\n\n" },
    {(char *) "GetBurst", (PyCFunction) _wrap_PyNs3OfdmSendParams_GetBurst, METH_NOARGS, "GetBurst()\n\n" },
    {(char *) "GetModulationType", (PyCFunction) _wrap_PyNs3OfdmSendParams_GetModulationType, METH_NOARGS, "GetModulationType()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3OfdmSendParams__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3OfdmSendParams__tp_dealloc(PyNs3OfdmSendParams *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3SendParams_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3SendParams_wrapper_registry.end()) {
        PyNs3SendParams_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::OfdmSendParams *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3OfdmSendParams__tp_richcompare (PyNs3OfdmSendParams *PYBINDGEN_UNUSED(self), PyNs3OfdmSendParams *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3OfdmSendParams_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3OfdmSendParams_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.OfdmSendParams",            /* tp_name */
    sizeof(PyNs3OfdmSendParams),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3OfdmSendParams__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "OfdmSendParams(burst, modulationType, direction)\nOfdmSendParams(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3OfdmSendParams__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3OfdmSendParams_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3OfdmSendParams__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




ns3::Buffer::Iterator
PyNs3OfdmUcdChannelEncodings__PythonHelper::DoRead(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::OfdmUcdChannelEncodings *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    PyNs3BufferIterator *tmp_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoRead"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    self_obj_before = reinterpret_cast< PyNs3OfdmUcdChannelEncodings* >(m_pyself)->obj;
    reinterpret_cast< PyNs3OfdmUcdChannelEncodings* >(m_pyself)->obj = (ns3::OfdmUcdChannelEncodings*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoRead", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3OfdmUcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3BufferIterator_Type, &tmp_Iterator)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3OfdmUcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    ns3::Buffer::Iterator retval = *tmp_Iterator->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3OfdmUcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Buffer::Iterator
PyNs3OfdmUcdChannelEncodings__PythonHelper::DoWrite(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::OfdmUcdChannelEncodings *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    PyNs3BufferIterator *tmp_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoWrite"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    self_obj_before = reinterpret_cast< PyNs3OfdmUcdChannelEncodings* >(m_pyself)->obj;
    reinterpret_cast< PyNs3OfdmUcdChannelEncodings* >(m_pyself)->obj = const_cast< ns3::OfdmUcdChannelEncodings* >((const ns3::OfdmUcdChannelEncodings*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoWrite", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3OfdmUcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3BufferIterator_Type, &tmp_Iterator)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3OfdmUcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Buffer::Iterator();
    }
    ns3::Buffer::Iterator retval = *tmp_Iterator->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3OfdmUcdChannelEncodings* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


static int
_wrap_PyNs3OfdmUcdChannelEncodings__tp_init__0(PyNs3OfdmUcdChannelEncodings *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3OfdmUcdChannelEncodings *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OfdmUcdChannelEncodings_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3OfdmUcdChannelEncodings_Type)
    {
        self->obj = new PyNs3OfdmUcdChannelEncodings__PythonHelper(*((PyNs3OfdmUcdChannelEncodings *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3OfdmUcdChannelEncodings__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::OfdmUcdChannelEncodings(*((PyNs3OfdmUcdChannelEncodings *) arg0)->obj);
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

static int
_wrap_PyNs3OfdmUcdChannelEncodings__tp_init__1(PyNs3OfdmUcdChannelEncodings *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3OfdmUcdChannelEncodings_Type)
    {
        self->obj = new PyNs3OfdmUcdChannelEncodings__PythonHelper();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3OfdmUcdChannelEncodings__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::OfdmUcdChannelEncodings();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    }
    return 0;
}

int _wrap_PyNs3OfdmUcdChannelEncodings__tp_init(PyNs3OfdmUcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3OfdmUcdChannelEncodings__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3OfdmUcdChannelEncodings__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3OfdmUcdChannelEncodings_GetSize(PyNs3OfdmUcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUcdChannelEncodings_SetSbchnlReqRegionFullParams(PyNs3OfdmUcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int sbchnlReqRegionFullParams;
    const char *keywords[] = {"sbchnlReqRegionFullParams", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &sbchnlReqRegionFullParams)) {
        return NULL;
    }
    if (sbchnlReqRegionFullParams > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSbchnlReqRegionFullParams(sbchnlReqRegionFullParams);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUcdChannelEncodings_GetSbchnlFocContCodes(PyNs3OfdmUcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSbchnlFocContCodes();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUcdChannelEncodings_GetSbchnlReqRegionFullParams(PyNs3OfdmUcdChannelEncodings *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSbchnlReqRegionFullParams();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3OfdmUcdChannelEncodings_SetSbchnlFocContCodes(PyNs3OfdmUcdChannelEncodings *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int sbchnlFocContCodes;
    const char *keywords[] = {"sbchnlFocContCodes", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &sbchnlFocContCodes)) {
        return NULL;
    }
    if (sbchnlFocContCodes > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSbchnlFocContCodes(sbchnlFocContCodes);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3OfdmUcdChannelEncodings__copy__(PyNs3OfdmUcdChannelEncodings *self)
{

    PyNs3OfdmUcdChannelEncodings *py_copy;
    py_copy = PyObject_GC_New(PyNs3OfdmUcdChannelEncodings, &PyNs3OfdmUcdChannelEncodings_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::OfdmUcdChannelEncodings(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3UcdChannelEncodings_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3OfdmUcdChannelEncodings_methods[] = {
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3OfdmUcdChannelEncodings_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "SetSbchnlReqRegionFullParams", (PyCFunction) _wrap_PyNs3OfdmUcdChannelEncodings_SetSbchnlReqRegionFullParams, METH_KEYWORDS|METH_VARARGS, "SetSbchnlReqRegionFullParams(sbchnlReqRegionFullParams)\n\ntype: sbchnlReqRegionFullParams: uint8_t" },
    {(char *) "GetSbchnlFocContCodes", (PyCFunction) _wrap_PyNs3OfdmUcdChannelEncodings_GetSbchnlFocContCodes, METH_NOARGS, "GetSbchnlFocContCodes()\n\n" },
    {(char *) "GetSbchnlReqRegionFullParams", (PyCFunction) _wrap_PyNs3OfdmUcdChannelEncodings_GetSbchnlReqRegionFullParams, METH_NOARGS, "GetSbchnlReqRegionFullParams()\n\n" },
    {(char *) "SetSbchnlFocContCodes", (PyCFunction) _wrap_PyNs3OfdmUcdChannelEncodings_SetSbchnlFocContCodes, METH_KEYWORDS|METH_VARARGS, "SetSbchnlFocContCodes(sbchnlFocContCodes)\n\ntype: sbchnlFocContCodes: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3OfdmUcdChannelEncodings__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3OfdmUcdChannelEncodings__tp_clear(PyNs3OfdmUcdChannelEncodings *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::OfdmUcdChannelEncodings *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3OfdmUcdChannelEncodings__tp_traverse(PyNs3OfdmUcdChannelEncodings *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3OfdmUcdChannelEncodings__PythonHelper).name() )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3OfdmUcdChannelEncodings__tp_dealloc(PyNs3OfdmUcdChannelEncodings *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3UcdChannelEncodings_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3UcdChannelEncodings_wrapper_registry.end()) {
        PyNs3UcdChannelEncodings_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3OfdmUcdChannelEncodings__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3OfdmUcdChannelEncodings__tp_richcompare (PyNs3OfdmUcdChannelEncodings *PYBINDGEN_UNUSED(self), PyNs3OfdmUcdChannelEncodings *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3OfdmUcdChannelEncodings_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3OfdmUcdChannelEncodings_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.OfdmUcdChannelEncodings",            /* tp_name */
    sizeof(PyNs3OfdmUcdChannelEncodings),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3OfdmUcdChannelEncodings__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "OfdmUcdChannelEncodings(arg0)\nOfdmUcdChannelEncodings()",                        /* Documentation string */
    (traverseproc)PyNs3OfdmUcdChannelEncodings__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3OfdmUcdChannelEncodings__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3OfdmUcdChannelEncodings__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3OfdmUcdChannelEncodings_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3OfdmUcdChannelEncodings, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3OfdmUcdChannelEncodings__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3PortRangeTlvValue__tp_init__0(PyNs3PortRangeTlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3PortRangeTlvValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3PortRangeTlvValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::PortRangeTlvValue(*((PyNs3PortRangeTlvValue *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3PortRangeTlvValue__tp_init__1(PyNs3PortRangeTlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::PortRangeTlvValue();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3PortRangeTlvValue__tp_init(PyNs3PortRangeTlvValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3PortRangeTlvValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3PortRangeTlvValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3PortRangeTlvValue_GetSerializedSize(PyNs3PortRangeTlvValue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3PortRangeTlvValue_Add(PyNs3PortRangeTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int portLow;
    int portHigh;
    const char *keywords[] = {"portLow", "portHigh", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &portLow, &portHigh)) {
        return NULL;
    }
    if (portLow > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (portHigh > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->Add(portLow, portHigh);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3PortRangeTlvValue_Serialize(PyNs3PortRangeTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3PortRangeTlvValue_Deserialize(PyNs3PortRangeTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    uint64_t valueLength;
    const char *keywords[] = {"start", "valueLength", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!K", (char **) keywords, &PyNs3BufferIterator_Type, &start, &valueLength)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj, valueLength);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3PortRangeTlvValue__copy__(PyNs3PortRangeTlvValue *self)
{

    PyNs3PortRangeTlvValue *py_copy;
    py_copy = PyObject_GC_New(PyNs3PortRangeTlvValue, &PyNs3PortRangeTlvValue_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::PortRangeTlvValue(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3TlvValue_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3PortRangeTlvValue_methods[] = {
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3PortRangeTlvValue_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "Add", (PyCFunction) _wrap_PyNs3PortRangeTlvValue_Add, METH_KEYWORDS|METH_VARARGS, "Add(portLow, portHigh)\n\ntype: portLow: uint16_t\ntype: portHigh: uint16_t" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3PortRangeTlvValue_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3PortRangeTlvValue_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start, valueLength)\n\ntype: start: ns3::Buffer::Iterator\ntype: valueLength: uint64_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3PortRangeTlvValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3PortRangeTlvValue__tp_clear(PyNs3PortRangeTlvValue *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::PortRangeTlvValue *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3PortRangeTlvValue__tp_traverse(PyNs3PortRangeTlvValue *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3PortRangeTlvValue__tp_dealloc(PyNs3PortRangeTlvValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3TlvValue_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3TlvValue_wrapper_registry.end()) {
        PyNs3TlvValue_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3PortRangeTlvValue__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3PortRangeTlvValue__tp_richcompare (PyNs3PortRangeTlvValue *PYBINDGEN_UNUSED(self), PyNs3PortRangeTlvValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3PortRangeTlvValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3PortRangeTlvValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.PortRangeTlvValue",            /* tp_name */
    sizeof(PyNs3PortRangeTlvValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3PortRangeTlvValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "PortRangeTlvValue(arg0)\nPortRangeTlvValue()",                        /* Documentation string */
    (traverseproc)PyNs3PortRangeTlvValue__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3PortRangeTlvValue__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3PortRangeTlvValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3PortRangeTlvValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3PortRangeTlvValue, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3PortRangeTlvValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3PortRangeTlvValuePortRange_wrapper_registry;
static PyObject* _wrap_PyNs3PortRangeTlvValuePortRange__get_PortHigh(PyNs3PortRangeTlvValuePortRange *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->PortHigh);
    return py_retval;
}
static int _wrap_PyNs3PortRangeTlvValuePortRange__set_PortHigh(PyNs3PortRangeTlvValuePortRange *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->PortHigh = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3PortRangeTlvValuePortRange__get_PortLow(PyNs3PortRangeTlvValuePortRange *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->PortLow);
    return py_retval;
}
static int _wrap_PyNs3PortRangeTlvValuePortRange__set_PortLow(PyNs3PortRangeTlvValuePortRange *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->PortLow = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3PortRangeTlvValuePortRange__getsets[] = {
    {
        (char*) "PortHigh", /* attribute name */
        (getter) _wrap_PyNs3PortRangeTlvValuePortRange__get_PortHigh, /* C function to get the attribute */
        (setter) _wrap_PyNs3PortRangeTlvValuePortRange__set_PortHigh, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "PortLow", /* attribute name */
        (getter) _wrap_PyNs3PortRangeTlvValuePortRange__get_PortLow, /* C function to get the attribute */
        (setter) _wrap_PyNs3PortRangeTlvValuePortRange__set_PortLow, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3PortRangeTlvValuePortRange__tp_init__0(PyNs3PortRangeTlvValuePortRange *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::PortRangeTlvValue::PortRange();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3PortRangeTlvValuePortRange__tp_init__1(PyNs3PortRangeTlvValuePortRange *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3PortRangeTlvValuePortRange *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3PortRangeTlvValuePortRange_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::PortRangeTlvValue::PortRange(*((PyNs3PortRangeTlvValuePortRange *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3PortRangeTlvValuePortRange__tp_init(PyNs3PortRangeTlvValuePortRange *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3PortRangeTlvValuePortRange__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3PortRangeTlvValuePortRange__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3PortRangeTlvValuePortRange__copy__(PyNs3PortRangeTlvValuePortRange *self)
{

    PyNs3PortRangeTlvValuePortRange *py_copy;
    py_copy = PyObject_New(PyNs3PortRangeTlvValuePortRange, &PyNs3PortRangeTlvValuePortRange_Type);
    py_copy->obj = new ns3::PortRangeTlvValue::PortRange(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3PortRangeTlvValuePortRange_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3PortRangeTlvValuePortRange_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3PortRangeTlvValuePortRange__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3PortRangeTlvValuePortRange__tp_dealloc(PyNs3PortRangeTlvValuePortRange *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3PortRangeTlvValuePortRange_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3PortRangeTlvValuePortRange_wrapper_registry.end()) {
        PyNs3PortRangeTlvValuePortRange_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::PortRangeTlvValue::PortRange *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3PortRangeTlvValuePortRange__tp_richcompare (PyNs3PortRangeTlvValuePortRange *PYBINDGEN_UNUSED(self), PyNs3PortRangeTlvValuePortRange *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3PortRangeTlvValuePortRange_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3PortRangeTlvValuePortRange_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.PortRangeTlvValue.PortRange",            /* tp_name */
    sizeof(PyNs3PortRangeTlvValuePortRange),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3PortRangeTlvValuePortRange__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "PortRange(arg0)\nPortRange()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3PortRangeTlvValuePortRange__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3PortRangeTlvValuePortRange_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3PortRangeTlvValuePortRange__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3PortRangeTlvValuePortRange__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3PriorityUlJob__tp_init__0(PyNs3PriorityUlJob *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3PriorityUlJob *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3PriorityUlJob_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::PriorityUlJob(*((PyNs3PriorityUlJob *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3PriorityUlJob__tp_init__1(PyNs3PriorityUlJob *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::PriorityUlJob();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3PriorityUlJob__tp_init(PyNs3PriorityUlJob *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3PriorityUlJob__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3PriorityUlJob__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3PriorityUlJob_SetUlJob(PyNs3PriorityUlJob *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UlJob *job;
    ns3::UlJob *job_ptr;
    const char *keywords[] = {"job", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UlJob_Type, &job)) {
        return NULL;
    }
    job_ptr = (job ? job->obj : NULL);
    self->obj->SetUlJob(ns3::Ptr< ns3::UlJob  > (job_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3PriorityUlJob_SetPriority(PyNs3PriorityUlJob *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int priority;
    const char *keywords[] = {"priority", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &priority)) {
        return NULL;
    }
    self->obj->SetPriority(priority);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3PriorityUlJob_GetUlJob(PyNs3PriorityUlJob *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UlJob > retval;
    PyNs3UlJob *py_UlJob;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetUlJob();
    if (!(const_cast<ns3::UlJob *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UlJob *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_UlJob = NULL;
    } else {
        py_UlJob = (PyNs3UlJob *) wrapper_lookup_iter->second;
        Py_INCREF(py_UlJob);
    }
    
    if (py_UlJob == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UlJob *> (ns3::PeekPointer (retval)))), &PyNs3UlJob_Type);
        py_UlJob = PyObject_GC_New(PyNs3UlJob, wrapper_type);
        py_UlJob->inst_dict = NULL;
    
        py_UlJob->inst_dict = NULL;
        py_UlJob->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::UlJob *> (ns3::PeekPointer (retval))->Ref();
        py_UlJob->obj = const_cast<ns3::UlJob *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_UlJob->obj] = (PyObject *) py_UlJob;
    }
    py_retval = Py_BuildValue((char *) "N", py_UlJob);
    return py_retval;
}


PyObject *
_wrap_PyNs3PriorityUlJob_GetPriority(PyNs3PriorityUlJob *self)
{
    PyObject *py_retval;
    int retval;
    
    retval = self->obj->GetPriority();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3PriorityUlJob__copy__(PyNs3PriorityUlJob *self)
{

    PyNs3PriorityUlJob *py_copy;
    py_copy = PyObject_GC_New(PyNs3PriorityUlJob, &PyNs3PriorityUlJob_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::PriorityUlJob(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3PriorityUlJob_methods[] = {
    {(char *) "SetUlJob", (PyCFunction) _wrap_PyNs3PriorityUlJob_SetUlJob, METH_KEYWORDS|METH_VARARGS, "SetUlJob(job)\n\ntype: job: ns3::Ptr< ns3::UlJob >" },
    {(char *) "SetPriority", (PyCFunction) _wrap_PyNs3PriorityUlJob_SetPriority, METH_KEYWORDS|METH_VARARGS, "SetPriority(priority)\n\ntype: priority: int" },
    {(char *) "GetUlJob", (PyCFunction) _wrap_PyNs3PriorityUlJob_GetUlJob, METH_NOARGS, "GetUlJob()\n\n" },
    {(char *) "GetPriority", (PyCFunction) _wrap_PyNs3PriorityUlJob_GetPriority, METH_NOARGS, "GetPriority()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3PriorityUlJob__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3PriorityUlJob__tp_clear(PyNs3PriorityUlJob *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::PriorityUlJob *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3PriorityUlJob__tp_traverse(PyNs3PriorityUlJob *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3PriorityUlJob__tp_dealloc(PyNs3PriorityUlJob *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3PriorityUlJob__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3PriorityUlJob__tp_richcompare (PyNs3PriorityUlJob *PYBINDGEN_UNUSED(self), PyNs3PriorityUlJob *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3PriorityUlJob_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3PriorityUlJob_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.PriorityUlJob",            /* tp_name */
    sizeof(PyNs3PriorityUlJob),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3PriorityUlJob__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "PriorityUlJob(arg0)\nPriorityUlJob()",                        /* Documentation string */
    (traverseproc)PyNs3PriorityUlJob__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3PriorityUlJob__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3PriorityUlJob__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3PriorityUlJob_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3PriorityUlJob, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3PriorityUlJob__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3ProtocolTlvValue__tp_init__0(PyNs3ProtocolTlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ProtocolTlvValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ProtocolTlvValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ProtocolTlvValue(*((PyNs3ProtocolTlvValue *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3ProtocolTlvValue__tp_init__1(PyNs3ProtocolTlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ProtocolTlvValue();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3ProtocolTlvValue__tp_init(PyNs3ProtocolTlvValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ProtocolTlvValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ProtocolTlvValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ProtocolTlvValue_GetSerializedSize(PyNs3ProtocolTlvValue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ProtocolTlvValue_Add(PyNs3ProtocolTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int protiocol;
    const char *keywords[] = {"protiocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &protiocol)) {
        return NULL;
    }
    if (protiocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->Add(protiocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ProtocolTlvValue_Serialize(PyNs3ProtocolTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ProtocolTlvValue_Deserialize(PyNs3ProtocolTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    uint64_t valueLength;
    const char *keywords[] = {"start", "valueLength", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!K", (char **) keywords, &PyNs3BufferIterator_Type, &start, &valueLength)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj, valueLength);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3ProtocolTlvValue__copy__(PyNs3ProtocolTlvValue *self)
{

    PyNs3ProtocolTlvValue *py_copy;
    py_copy = PyObject_GC_New(PyNs3ProtocolTlvValue, &PyNs3ProtocolTlvValue_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::ProtocolTlvValue(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3TlvValue_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ProtocolTlvValue_methods[] = {
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3ProtocolTlvValue_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "Add", (PyCFunction) _wrap_PyNs3ProtocolTlvValue_Add, METH_KEYWORDS|METH_VARARGS, "Add(protiocol)\n\ntype: protiocol: uint8_t" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3ProtocolTlvValue_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3ProtocolTlvValue_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start, valueLength)\n\ntype: start: ns3::Buffer::Iterator\ntype: valueLength: uint64_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ProtocolTlvValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3ProtocolTlvValue__tp_clear(PyNs3ProtocolTlvValue *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::ProtocolTlvValue *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3ProtocolTlvValue__tp_traverse(PyNs3ProtocolTlvValue *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3ProtocolTlvValue__tp_dealloc(PyNs3ProtocolTlvValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3TlvValue_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3TlvValue_wrapper_registry.end()) {
        PyNs3TlvValue_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3ProtocolTlvValue__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ProtocolTlvValue__tp_richcompare (PyNs3ProtocolTlvValue *PYBINDGEN_UNUSED(self), PyNs3ProtocolTlvValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ProtocolTlvValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ProtocolTlvValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.ProtocolTlvValue",            /* tp_name */
    sizeof(PyNs3ProtocolTlvValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ProtocolTlvValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "ProtocolTlvValue(arg0)\nProtocolTlvValue()",                        /* Documentation string */
    (traverseproc)PyNs3ProtocolTlvValue__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3ProtocolTlvValue__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ProtocolTlvValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ProtocolTlvValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3ProtocolTlvValue, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ProtocolTlvValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3RngReq__tp_init__0(PyNs3RngReq *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3RngReq *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3RngReq_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::RngReq(*((PyNs3RngReq *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3RngReq__tp_init__1(PyNs3RngReq *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::RngReq();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3RngReq__tp_init(PyNs3RngReq *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3RngReq__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3RngReq__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3RngReq_GetReqDlBurstProfile(PyNs3RngReq *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetReqDlBurstProfile();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngReq_GetMacAddress(PyNs3RngReq *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetMacAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngReq_SetMacAddress(PyNs3RngReq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *macAddress;
    const char *keywords[] = {"macAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &macAddress)) {
        return NULL;
    }
    self->obj->SetMacAddress(*((PyNs3Mac48Address *) macAddress)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngReq_Deserialize(PyNs3RngReq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3RngReq_PrintDebug(PyNs3RngReq *self)
{
    PyObject *py_retval;
    
    self->obj->PrintDebug();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngReq_GetName(PyNs3RngReq *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3RngReq_Serialize(PyNs3RngReq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngReq_GetRangingAnomalies(PyNs3RngReq *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRangingAnomalies();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngReq_SetRangingAnomalies(PyNs3RngReq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rangingAnomalies;
    const char *keywords[] = {"rangingAnomalies", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rangingAnomalies)) {
        return NULL;
    }
    if (rangingAnomalies > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRangingAnomalies(rangingAnomalies);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngReq_GetInstanceTypeId(PyNs3RngReq *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngReq_GetSerializedSize(PyNs3RngReq *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3RngReq_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::RngReq::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngReq_SetReqDlBurstProfile(PyNs3RngReq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int reqDlBurstProfile;
    const char *keywords[] = {"reqDlBurstProfile", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &reqDlBurstProfile)) {
        return NULL;
    }
    if (reqDlBurstProfile > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetReqDlBurstProfile(reqDlBurstProfile);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3RngReq__copy__(PyNs3RngReq *self)
{

    PyNs3RngReq *py_copy;
    py_copy = PyObject_GC_New(PyNs3RngReq, &PyNs3RngReq_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::RngReq(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3RngReq_methods[] = {
    {(char *) "GetReqDlBurstProfile", (PyCFunction) _wrap_PyNs3RngReq_GetReqDlBurstProfile, METH_NOARGS, "GetReqDlBurstProfile()\n\n" },
    {(char *) "GetMacAddress", (PyCFunction) _wrap_PyNs3RngReq_GetMacAddress, METH_NOARGS, "GetMacAddress()\n\n" },
    {(char *) "SetMacAddress", (PyCFunction) _wrap_PyNs3RngReq_SetMacAddress, METH_KEYWORDS|METH_VARARGS, "SetMacAddress(macAddress)\n\ntype: macAddress: ns3::Mac48Address" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3RngReq_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "PrintDebug", (PyCFunction) _wrap_PyNs3RngReq_PrintDebug, METH_NOARGS, "PrintDebug()\n\n" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3RngReq_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3RngReq_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetRangingAnomalies", (PyCFunction) _wrap_PyNs3RngReq_GetRangingAnomalies, METH_NOARGS, "GetRangingAnomalies()\n\n" },
    {(char *) "SetRangingAnomalies", (PyCFunction) _wrap_PyNs3RngReq_SetRangingAnomalies, METH_KEYWORDS|METH_VARARGS, "SetRangingAnomalies(rangingAnomalies)\n\ntype: rangingAnomalies: uint8_t" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3RngReq_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3RngReq_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3RngReq_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetReqDlBurstProfile", (PyCFunction) _wrap_PyNs3RngReq_SetReqDlBurstProfile, METH_KEYWORDS|METH_VARARGS, "SetReqDlBurstProfile(reqDlBurstProfile)\n\ntype: reqDlBurstProfile: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3RngReq__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3RngReq__tp_clear(PyNs3RngReq *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::RngReq *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3RngReq__tp_traverse(PyNs3RngReq *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3RngReq__tp_dealloc(PyNs3RngReq *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3RngReq__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3RngReq__tp_richcompare (PyNs3RngReq *PYBINDGEN_UNUSED(self), PyNs3RngReq *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3RngReq_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3RngReq_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.RngReq",            /* tp_name */
    sizeof(PyNs3RngReq),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3RngReq__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "RngReq(arg0)\nRngReq()",                        /* Documentation string */
    (traverseproc)PyNs3RngReq__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3RngReq__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3RngReq__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3RngReq_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3RngReq, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3RngReq__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3RngRsp__tp_init__0(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3RngRsp *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3RngRsp_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::RngRsp(*((PyNs3RngRsp *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3RngRsp__tp_init__1(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::RngRsp();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3RngRsp__tp_init(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3RngRsp__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3RngRsp__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3RngRsp_GetMacAddress(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetMacAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_SetFrameNumber(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int frameNumber;
    const char *keywords[] = {"frameNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &frameNumber)) {
        return NULL;
    }
    self->obj->SetFrameNumber(frameNumber);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::RngRsp::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetTimingAdjust(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetTimingAdjust();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetOffsetFreqAdjust(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetOffsetFreqAdjust();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_SetUlChnlIdOverride(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ulChnlIdOverride;
    const char *keywords[] = {"ulChnlIdOverride", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ulChnlIdOverride)) {
        return NULL;
    }
    if (ulChnlIdOverride > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetUlChnlIdOverride(ulChnlIdOverride);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_SetTimingAdjust(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int timingAdjust;
    const char *keywords[] = {"timingAdjust", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &timingAdjust)) {
        return NULL;
    }
    self->obj->SetTimingAdjust(timingAdjust);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetAasBdcastPermission(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetAasBdcastPermission();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_SetMacAddress(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *macAddress;
    const char *keywords[] = {"macAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &macAddress)) {
        return NULL;
    }
    self->obj->SetMacAddress(*((PyNs3Mac48Address *) macAddress)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_SetDlOperBurstProfile(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int dlOperBurstProfile;
    const char *keywords[] = {"dlOperBurstProfile", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &dlOperBurstProfile)) {
        return NULL;
    }
    if (dlOperBurstProfile > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetDlOperBurstProfile(dlOperBurstProfile);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_SetRangStatus(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rangStatus;
    const char *keywords[] = {"rangStatus", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rangStatus)) {
        return NULL;
    }
    if (rangStatus > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRangStatus(rangStatus);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetRangStatus(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRangStatus();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetPrimaryCid(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->GetPrimaryCid();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_SetDlFreqOverride(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int dlFreqOverride;
    const char *keywords[] = {"dlFreqOverride", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &dlFreqOverride)) {
        return NULL;
    }
    self->obj->SetDlFreqOverride(dlFreqOverride);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetFrameNumber(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetFrameNumber();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_Deserialize(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_SetOffsetFreqAdjust(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int offsetFreqAdjust;
    const char *keywords[] = {"offsetFreqAdjust", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &offsetFreqAdjust)) {
        return NULL;
    }
    self->obj->SetOffsetFreqAdjust(offsetFreqAdjust);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetBasicCid(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->GetBasicCid();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetName(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetUlChnlIdOverride(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetUlChnlIdOverride();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetDlFreqOverride(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetDlFreqOverride();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetDlOperBurstProfile(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetDlOperBurstProfile();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetInstanceTypeId(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetSerializedSize(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_SetAasBdcastPermission(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int aasBdcastPermission;
    const char *keywords[] = {"aasBdcastPermission", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &aasBdcastPermission)) {
        return NULL;
    }
    if (aasBdcastPermission > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetAasBdcastPermission(aasBdcastPermission);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_SetRangSubchnl(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rangSubchnl;
    const char *keywords[] = {"rangSubchnl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rangSubchnl)) {
        return NULL;
    }
    if (rangSubchnl > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRangSubchnl(rangSubchnl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetRangSubchnl(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRangSubchnl();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_SetInitRangOppNumber(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int initRangOppNumber;
    const char *keywords[] = {"initRangOppNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &initRangOppNumber)) {
        return NULL;
    }
    if (initRangOppNumber > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetInitRangOppNumber(initRangOppNumber);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_SetPowerLevelAdjust(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int powerLevelAdjust;
    const char *keywords[] = {"powerLevelAdjust", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &powerLevelAdjust)) {
        return NULL;
    }
    if (powerLevelAdjust > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPowerLevelAdjust(powerLevelAdjust);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_Serialize(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_SetBasicCid(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Cid *basicCid;
    const char *keywords[] = {"basicCid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &basicCid)) {
        return NULL;
    }
    self->obj->SetBasicCid(*((PyNs3Cid *) basicCid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetInitRangOppNumber(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInitRangOppNumber();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_GetPowerLevelAdjust(PyNs3RngRsp *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetPowerLevelAdjust();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3RngRsp_SetPrimaryCid(PyNs3RngRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Cid *primaryCid;
    const char *keywords[] = {"primaryCid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &primaryCid)) {
        return NULL;
    }
    self->obj->SetPrimaryCid(*((PyNs3Cid *) primaryCid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3RngRsp__copy__(PyNs3RngRsp *self)
{

    PyNs3RngRsp *py_copy;
    py_copy = PyObject_GC_New(PyNs3RngRsp, &PyNs3RngRsp_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::RngRsp(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3RngRsp_methods[] = {
    {(char *) "GetMacAddress", (PyCFunction) _wrap_PyNs3RngRsp_GetMacAddress, METH_NOARGS, "GetMacAddress()\n\n" },
    {(char *) "SetFrameNumber", (PyCFunction) _wrap_PyNs3RngRsp_SetFrameNumber, METH_KEYWORDS|METH_VARARGS, "SetFrameNumber(frameNumber)\n\ntype: frameNumber: uint32_t" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3RngRsp_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetTimingAdjust", (PyCFunction) _wrap_PyNs3RngRsp_GetTimingAdjust, METH_NOARGS, "GetTimingAdjust()\n\n" },
    {(char *) "GetOffsetFreqAdjust", (PyCFunction) _wrap_PyNs3RngRsp_GetOffsetFreqAdjust, METH_NOARGS, "GetOffsetFreqAdjust()\n\n" },
    {(char *) "SetUlChnlIdOverride", (PyCFunction) _wrap_PyNs3RngRsp_SetUlChnlIdOverride, METH_KEYWORDS|METH_VARARGS, "SetUlChnlIdOverride(ulChnlIdOverride)\n\ntype: ulChnlIdOverride: uint8_t" },
    {(char *) "SetTimingAdjust", (PyCFunction) _wrap_PyNs3RngRsp_SetTimingAdjust, METH_KEYWORDS|METH_VARARGS, "SetTimingAdjust(timingAdjust)\n\ntype: timingAdjust: uint32_t" },
    {(char *) "GetAasBdcastPermission", (PyCFunction) _wrap_PyNs3RngRsp_GetAasBdcastPermission, METH_NOARGS, "GetAasBdcastPermission()\n\n" },
    {(char *) "SetMacAddress", (PyCFunction) _wrap_PyNs3RngRsp_SetMacAddress, METH_KEYWORDS|METH_VARARGS, "SetMacAddress(macAddress)\n\ntype: macAddress: ns3::Mac48Address" },
    {(char *) "SetDlOperBurstProfile", (PyCFunction) _wrap_PyNs3RngRsp_SetDlOperBurstProfile, METH_KEYWORDS|METH_VARARGS, "SetDlOperBurstProfile(dlOperBurstProfile)\n\ntype: dlOperBurstProfile: uint16_t" },
    {(char *) "SetRangStatus", (PyCFunction) _wrap_PyNs3RngRsp_SetRangStatus, METH_KEYWORDS|METH_VARARGS, "SetRangStatus(rangStatus)\n\ntype: rangStatus: uint8_t" },
    {(char *) "GetRangStatus", (PyCFunction) _wrap_PyNs3RngRsp_GetRangStatus, METH_NOARGS, "GetRangStatus()\n\n" },
    {(char *) "GetPrimaryCid", (PyCFunction) _wrap_PyNs3RngRsp_GetPrimaryCid, METH_NOARGS, "GetPrimaryCid()\n\n" },
    {(char *) "SetDlFreqOverride", (PyCFunction) _wrap_PyNs3RngRsp_SetDlFreqOverride, METH_KEYWORDS|METH_VARARGS, "SetDlFreqOverride(dlFreqOverride)\n\ntype: dlFreqOverride: uint32_t" },
    {(char *) "GetFrameNumber", (PyCFunction) _wrap_PyNs3RngRsp_GetFrameNumber, METH_NOARGS, "GetFrameNumber()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3RngRsp_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetOffsetFreqAdjust", (PyCFunction) _wrap_PyNs3RngRsp_SetOffsetFreqAdjust, METH_KEYWORDS|METH_VARARGS, "SetOffsetFreqAdjust(offsetFreqAdjust)\n\ntype: offsetFreqAdjust: uint32_t" },
    {(char *) "GetBasicCid", (PyCFunction) _wrap_PyNs3RngRsp_GetBasicCid, METH_NOARGS, "GetBasicCid()\n\n" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3RngRsp_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "GetUlChnlIdOverride", (PyCFunction) _wrap_PyNs3RngRsp_GetUlChnlIdOverride, METH_NOARGS, "GetUlChnlIdOverride()\n\n" },
    {(char *) "GetDlFreqOverride", (PyCFunction) _wrap_PyNs3RngRsp_GetDlFreqOverride, METH_NOARGS, "GetDlFreqOverride()\n\n" },
    {(char *) "GetDlOperBurstProfile", (PyCFunction) _wrap_PyNs3RngRsp_GetDlOperBurstProfile, METH_NOARGS, "GetDlOperBurstProfile()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3RngRsp_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3RngRsp_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetAasBdcastPermission", (PyCFunction) _wrap_PyNs3RngRsp_SetAasBdcastPermission, METH_KEYWORDS|METH_VARARGS, "SetAasBdcastPermission(aasBdcastPermission)\n\ntype: aasBdcastPermission: uint8_t" },
    {(char *) "SetRangSubchnl", (PyCFunction) _wrap_PyNs3RngRsp_SetRangSubchnl, METH_KEYWORDS|METH_VARARGS, "SetRangSubchnl(rangSubchnl)\n\ntype: rangSubchnl: uint8_t" },
    {(char *) "GetRangSubchnl", (PyCFunction) _wrap_PyNs3RngRsp_GetRangSubchnl, METH_NOARGS, "GetRangSubchnl()\n\n" },
    {(char *) "SetInitRangOppNumber", (PyCFunction) _wrap_PyNs3RngRsp_SetInitRangOppNumber, METH_KEYWORDS|METH_VARARGS, "SetInitRangOppNumber(initRangOppNumber)\n\ntype: initRangOppNumber: uint8_t" },
    {(char *) "SetPowerLevelAdjust", (PyCFunction) _wrap_PyNs3RngRsp_SetPowerLevelAdjust, METH_KEYWORDS|METH_VARARGS, "SetPowerLevelAdjust(powerLevelAdjust)\n\ntype: powerLevelAdjust: uint8_t" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3RngRsp_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetBasicCid", (PyCFunction) _wrap_PyNs3RngRsp_SetBasicCid, METH_KEYWORDS|METH_VARARGS, "SetBasicCid(basicCid)\n\ntype: basicCid: ns3::Cid" },
    {(char *) "GetInitRangOppNumber", (PyCFunction) _wrap_PyNs3RngRsp_GetInitRangOppNumber, METH_NOARGS, "GetInitRangOppNumber()\n\n" },
    {(char *) "GetPowerLevelAdjust", (PyCFunction) _wrap_PyNs3RngRsp_GetPowerLevelAdjust, METH_NOARGS, "GetPowerLevelAdjust()\n\n" },
    {(char *) "SetPrimaryCid", (PyCFunction) _wrap_PyNs3RngRsp_SetPrimaryCid, METH_KEYWORDS|METH_VARARGS, "SetPrimaryCid(primaryCid)\n\ntype: primaryCid: ns3::Cid" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3RngRsp__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3RngRsp__tp_clear(PyNs3RngRsp *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::RngRsp *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3RngRsp__tp_traverse(PyNs3RngRsp *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3RngRsp__tp_dealloc(PyNs3RngRsp *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3RngRsp__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3RngRsp__tp_richcompare (PyNs3RngRsp *PYBINDGEN_UNUSED(self), PyNs3RngRsp *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3RngRsp_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3RngRsp_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.RngRsp",            /* tp_name */
    sizeof(PyNs3RngRsp),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3RngRsp__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "RngRsp(arg0)\nRngRsp()",                        /* Documentation string */
    (traverseproc)PyNs3RngRsp__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3RngRsp__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3RngRsp__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3RngRsp_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3RngRsp, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3RngRsp__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3SSManager__tp_init__0(PyNs3SSManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SSManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SSManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SSManager(*((PyNs3SSManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SSManager__tp_init__1(PyNs3SSManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SSManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SSManager__tp_init(PyNs3SSManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SSManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SSManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SSManager_IsInRecord(PyNs3SSManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *macAddress;
    const char *keywords[] = {"macAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &macAddress)) {
        return NULL;
    }
    retval = self->obj->IsInRecord(*((PyNs3Mac48Address *) macAddress)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SSManager_GetMacAddress(PyNs3SSManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Cid *cid;
    const char *keywords[] = {"cid", NULL};
    PyNs3Mac48Address *py_Mac48Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &cid)) {
        return NULL;
    }
    ns3::Mac48Address retval = self->obj->GetMacAddress(*((PyNs3Cid *) cid)->obj);
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3SSManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::SSManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3SSManager_GetNRegisteredSSs(PyNs3SSManager *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNRegisteredSSs();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SSManager_GetNSSs(PyNs3SSManager *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNSSs();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SSManager_IsRegistered(PyNs3SSManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *macAddress;
    const char *keywords[] = {"macAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &macAddress)) {
        return NULL;
    }
    retval = self->obj->IsRegistered(*((PyNs3Mac48Address *) macAddress)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SSManager_DeleteSSRecord(PyNs3SSManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Cid *cid;
    const char *keywords[] = {"cid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &cid)) {
        return NULL;
    }
    self->obj->DeleteSSRecord(*((PyNs3Cid *) cid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SSManager__copy__(PyNs3SSManager *self)
{

    PyNs3SSManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3SSManager, &PyNs3SSManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::SSManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SSManager_methods[] = {
    {(char *) "IsInRecord", (PyCFunction) _wrap_PyNs3SSManager_IsInRecord, METH_KEYWORDS|METH_VARARGS, "IsInRecord(macAddress)\n\ntype: macAddress: ns3::Mac48Address const &" },
    {(char *) "GetMacAddress", (PyCFunction) _wrap_PyNs3SSManager_GetMacAddress, METH_KEYWORDS|METH_VARARGS, "GetMacAddress(cid)\n\ntype: cid: ns3::Cid" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3SSManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetNRegisteredSSs", (PyCFunction) _wrap_PyNs3SSManager_GetNRegisteredSSs, METH_NOARGS, "GetNRegisteredSSs()\n\n" },
    {(char *) "GetNSSs", (PyCFunction) _wrap_PyNs3SSManager_GetNSSs, METH_NOARGS, "GetNSSs()\n\n" },
    {(char *) "IsRegistered", (PyCFunction) _wrap_PyNs3SSManager_IsRegistered, METH_KEYWORDS|METH_VARARGS, "IsRegistered(macAddress)\n\ntype: macAddress: ns3::Mac48Address const &" },
    {(char *) "DeleteSSRecord", (PyCFunction) _wrap_PyNs3SSManager_DeleteSSRecord, METH_KEYWORDS|METH_VARARGS, "DeleteSSRecord(cid)\n\ntype: cid: ns3::Cid" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SSManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3SSManager__tp_clear(PyNs3SSManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::SSManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3SSManager__tp_traverse(PyNs3SSManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3SSManager__tp_dealloc(PyNs3SSManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3SSManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SSManager__tp_richcompare (PyNs3SSManager *PYBINDGEN_UNUSED(self), PyNs3SSManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SSManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SSManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.SSManager",            /* tp_name */
    sizeof(PyNs3SSManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SSManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "SSManager(arg0)\nSSManager()",                        /* Documentation string */
    (traverseproc)PyNs3SSManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3SSManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SSManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SSManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3SSManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SSManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3ServiceFlowManager__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3ServiceFlowManager *self)
{
    PyObject *py_retval;
    PyNs3ServiceFlowManager__PythonHelper *helper = dynamic_cast< PyNs3ServiceFlowManager__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3ServiceFlowManager__PythonHelper::_wrap_DoInitialize(PyNs3ServiceFlowManager *self)
{
    PyObject *py_retval;
    PyNs3ServiceFlowManager__PythonHelper *helper = dynamic_cast< PyNs3ServiceFlowManager__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3ServiceFlowManager__PythonHelper::_wrap_NotifyNewAggregate(PyNs3ServiceFlowManager *self)
{
    PyObject *py_retval;
    PyNs3ServiceFlowManager__PythonHelper *helper = dynamic_cast< PyNs3ServiceFlowManager__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3ServiceFlowManager__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ServiceFlowManager *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ServiceFlowManager::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ServiceFlowManager* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ServiceFlowManager* >(m_pyself)->obj = (ns3::ServiceFlowManager*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ServiceFlowManager* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ServiceFlowManager* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ServiceFlowManager* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3ServiceFlowManager__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3ServiceFlowManager__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ServiceFlowManager__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ServiceFlowManager__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3ServiceFlowManager__tp_init__0(PyNs3ServiceFlowManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ServiceFlowManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ServiceFlowManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3ServiceFlowManager_Type)
    {
        self->obj = new PyNs3ServiceFlowManager__PythonHelper(*((PyNs3ServiceFlowManager *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3ServiceFlowManager__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::ServiceFlowManager(*((PyNs3ServiceFlowManager *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3ServiceFlowManager__tp_init__1(PyNs3ServiceFlowManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3ServiceFlowManager_Type)
    {
        self->obj = new PyNs3ServiceFlowManager__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3ServiceFlowManager__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::ServiceFlowManager();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3ServiceFlowManager__tp_init(PyNs3ServiceFlowManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ServiceFlowManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ServiceFlowManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ServiceFlowManager_AreServiceFlowsAllocated(PyNs3ServiceFlowManager *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->AreServiceFlowsAllocated();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ServiceFlowManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowManager_GetNrServiceFlows(PyNs3ServiceFlowManager *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNrServiceFlows();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ServiceFlowManager_DoDispose(PyNs3ServiceFlowManager *self)
{
    PyObject *py_retval;
    PyNs3ServiceFlowManager__PythonHelper *helper_class = dynamic_cast<PyNs3ServiceFlowManager__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::ServiceFlowManager::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3ServiceFlowManager__copy__(PyNs3ServiceFlowManager *self)
{

    PyNs3ServiceFlowManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3ServiceFlowManager, &PyNs3ServiceFlowManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::ServiceFlowManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ServiceFlowManager_methods[] = {
    {(char *) "AreServiceFlowsAllocated", (PyCFunction) _wrap_PyNs3ServiceFlowManager_AreServiceFlowsAllocated, METH_NOARGS, "AreServiceFlowsAllocated()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3ServiceFlowManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetNrServiceFlows", (PyCFunction) _wrap_PyNs3ServiceFlowManager_GetNrServiceFlows, METH_NOARGS, "GetNrServiceFlows()\n\n" },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3ServiceFlowManager_DoDispose, METH_NOARGS, "DoDispose()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3ServiceFlowManager__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3ServiceFlowManager__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3ServiceFlowManager__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ServiceFlowManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3ServiceFlowManager__tp_clear(PyNs3ServiceFlowManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ServiceFlowManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3ServiceFlowManager__tp_traverse(PyNs3ServiceFlowManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3ServiceFlowManager__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3ServiceFlowManager__tp_dealloc(PyNs3ServiceFlowManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3ServiceFlowManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ServiceFlowManager__tp_richcompare (PyNs3ServiceFlowManager *PYBINDGEN_UNUSED(self), PyNs3ServiceFlowManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ServiceFlowManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ServiceFlowManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.ServiceFlowManager",            /* tp_name */
    sizeof(PyNs3ServiceFlowManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ServiceFlowManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "ServiceFlowManager(arg0)\nServiceFlowManager()",                        /* Documentation string */
    (traverseproc)PyNs3ServiceFlowManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3ServiceFlowManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ServiceFlowManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ServiceFlowManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3ServiceFlowManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ServiceFlowManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3SfVectorTlvValue__tp_init__0(PyNs3SfVectorTlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SfVectorTlvValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SfVectorTlvValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SfVectorTlvValue(*((PyNs3SfVectorTlvValue *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SfVectorTlvValue__tp_init__1(PyNs3SfVectorTlvValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SfVectorTlvValue();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SfVectorTlvValue__tp_init(PyNs3SfVectorTlvValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SfVectorTlvValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SfVectorTlvValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SfVectorTlvValue_Deserialize(PyNs3SfVectorTlvValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    uint64_t valueLength;
    const char *keywords[] = {"start", "valueLength", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!K", (char **) keywords, &PyNs3BufferIterator_Type, &start, &valueLength)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj, valueLength);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3SfVectorTlvValue__copy__(PyNs3SfVectorTlvValue *self)
{

    PyNs3SfVectorTlvValue *py_copy;
    py_copy = PyObject_GC_New(PyNs3SfVectorTlvValue, &PyNs3SfVectorTlvValue_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::SfVectorTlvValue(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3TlvValue_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SfVectorTlvValue_methods[] = {
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3SfVectorTlvValue_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start, valueLength)\n\ntype: start: ns3::Buffer::Iterator\ntype: valueLength: uint64_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SfVectorTlvValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3SfVectorTlvValue__tp_clear(PyNs3SfVectorTlvValue *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::SfVectorTlvValue *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3SfVectorTlvValue__tp_traverse(PyNs3SfVectorTlvValue *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3SfVectorTlvValue__tp_dealloc(PyNs3SfVectorTlvValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3TlvValue_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3TlvValue_wrapper_registry.end()) {
        PyNs3TlvValue_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3SfVectorTlvValue__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SfVectorTlvValue__tp_richcompare (PyNs3SfVectorTlvValue *PYBINDGEN_UNUSED(self), PyNs3SfVectorTlvValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SfVectorTlvValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SfVectorTlvValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.SfVectorTlvValue",            /* tp_name */
    sizeof(PyNs3SfVectorTlvValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SfVectorTlvValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "SfVectorTlvValue(arg0)\nSfVectorTlvValue()",                        /* Documentation string */
    (traverseproc)PyNs3SfVectorTlvValue__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3SfVectorTlvValue__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SfVectorTlvValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SfVectorTlvValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3SfVectorTlvValue, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SfVectorTlvValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3SsServiceFlowManager__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3SsServiceFlowManager *self)
{
    PyObject *py_retval;
    PyNs3SsServiceFlowManager__PythonHelper *helper = dynamic_cast< PyNs3SsServiceFlowManager__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3SsServiceFlowManager__PythonHelper::_wrap_DoInitialize(PyNs3SsServiceFlowManager *self)
{
    PyObject *py_retval;
    PyNs3SsServiceFlowManager__PythonHelper *helper = dynamic_cast< PyNs3SsServiceFlowManager__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3SsServiceFlowManager__PythonHelper::_wrap_NotifyNewAggregate(PyNs3SsServiceFlowManager *self)
{
    PyObject *py_retval;
    PyNs3SsServiceFlowManager__PythonHelper *helper = dynamic_cast< PyNs3SsServiceFlowManager__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3SsServiceFlowManager__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SsServiceFlowManager *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::SsServiceFlowManager::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3SsServiceFlowManager* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SsServiceFlowManager* >(m_pyself)->obj = (ns3::SsServiceFlowManager*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SsServiceFlowManager* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SsServiceFlowManager* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SsServiceFlowManager* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3SsServiceFlowManager__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3SsServiceFlowManager__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SsServiceFlowManager__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SsServiceFlowManager__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3SsServiceFlowManager__tp_init__0(PyNs3SsServiceFlowManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SsServiceFlowManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SsServiceFlowManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3SsServiceFlowManager_Type)
    {
        self->obj = new PyNs3SsServiceFlowManager__PythonHelper(*((PyNs3SsServiceFlowManager *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3SsServiceFlowManager__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::SsServiceFlowManager(*((PyNs3SsServiceFlowManager *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3SsServiceFlowManager__tp_init__1(PyNs3SsServiceFlowManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SubscriberStationNetDevice *device;
    ns3::SubscriberStationNetDevice *device_ptr;
    const char *keywords[] = {"device", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SubscriberStationNetDevice_Type, &device)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    device_ptr = (device ? device->obj : NULL);
    if (Py_TYPE(self) != &PyNs3SsServiceFlowManager_Type)
    {
        self->obj = new PyNs3SsServiceFlowManager__PythonHelper(ns3::Ptr< ns3::SubscriberStationNetDevice  > (device_ptr));
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3SsServiceFlowManager__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::SsServiceFlowManager(ns3::Ptr< ns3::SubscriberStationNetDevice  > (device_ptr));
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3SsServiceFlowManager__tp_init(PyNs3SsServiceFlowManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SsServiceFlowManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SsServiceFlowManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SsServiceFlowManager_AddServiceFlow(PyNs3SsServiceFlowManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ServiceFlow *serviceFlow;
    const char *keywords[] = {"serviceFlow", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ServiceFlow_Type, &serviceFlow)) {
        return NULL;
    }
    self->obj->AddServiceFlow(*((PyNs3ServiceFlow *) serviceFlow)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SsServiceFlowManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::SsServiceFlowManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3SsServiceFlowManager_SetMaxDsaReqRetries(PyNs3SsServiceFlowManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int maxDsaReqRetries;
    const char *keywords[] = {"maxDsaReqRetries", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &maxDsaReqRetries)) {
        return NULL;
    }
    if (maxDsaReqRetries > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxDsaReqRetries(maxDsaReqRetries);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SsServiceFlowManager_InitiateServiceFlows(PyNs3SsServiceFlowManager *self)
{
    PyObject *py_retval;
    
    self->obj->InitiateServiceFlows();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SsServiceFlowManager_CreateDsaAck(PyNs3SsServiceFlowManager *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->CreateDsaAck();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3SsServiceFlowManager_ProcessDsaRsp(PyNs3SsServiceFlowManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsaRsp *dsaRsp;
    const char *keywords[] = {"dsaRsp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsaRsp_Type, &dsaRsp)) {
        return NULL;
    }
    self->obj->ProcessDsaRsp(*((PyNs3DsaRsp *) dsaRsp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SsServiceFlowManager_DoDispose(PyNs3SsServiceFlowManager *self)
{
    PyObject *py_retval;
    PyNs3SsServiceFlowManager__PythonHelper *helper_class = dynamic_cast<PyNs3SsServiceFlowManager__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::SsServiceFlowManager::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SsServiceFlowManager_GetDsaAckTimeoutEvent(PyNs3SsServiceFlowManager *self)
{
    PyObject *py_retval;
    PyNs3EventId *py_EventId;
    
    ns3::EventId retval = self->obj->GetDsaAckTimeoutEvent();
    py_EventId = PyObject_New(PyNs3EventId, &PyNs3EventId_Type);
    py_EventId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_EventId->obj = new ns3::EventId(retval);
    PyNs3EventId_wrapper_registry[(void *) py_EventId->obj] = (PyObject *) py_EventId;
    py_retval = Py_BuildValue((char *) "N", py_EventId);
    return py_retval;
}


PyObject *
_wrap_PyNs3SsServiceFlowManager_GetMaxDsaReqRetries(PyNs3SsServiceFlowManager *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetMaxDsaReqRetries();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SsServiceFlowManager_CreateDsaReq(PyNs3SsServiceFlowManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ServiceFlow *serviceFlow;
    ns3::ServiceFlow *serviceFlow_ptr;
    const char *keywords[] = {"serviceFlow", NULL};
    PyNs3DsaReq *py_DsaReq;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ServiceFlow_Type, &serviceFlow)) {
        return NULL;
    }
    serviceFlow_ptr = (serviceFlow ? serviceFlow->obj : NULL);
    ns3::DsaReq retval = self->obj->CreateDsaReq(serviceFlow_ptr);
    py_DsaReq = PyObject_GC_New(PyNs3DsaReq, &PyNs3DsaReq_Type);
    py_DsaReq->inst_dict = NULL;
    py_DsaReq->inst_dict = NULL;
    py_DsaReq->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_DsaReq->obj = new ns3::DsaReq(retval);
    PyNs3ObjectBase_wrapper_registry[(void *) py_DsaReq->obj] = (PyObject *) py_DsaReq;
    py_retval = Py_BuildValue((char *) "N", py_DsaReq);
    return py_retval;
}


PyObject *
_wrap_PyNs3SsServiceFlowManager_GetDsaRspTimeoutEvent(PyNs3SsServiceFlowManager *self)
{
    PyObject *py_retval;
    PyNs3EventId *py_EventId;
    
    ns3::EventId retval = self->obj->GetDsaRspTimeoutEvent();
    py_EventId = PyObject_New(PyNs3EventId, &PyNs3EventId_Type);
    py_EventId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_EventId->obj = new ns3::EventId(retval);
    PyNs3EventId_wrapper_registry[(void *) py_EventId->obj] = (PyObject *) py_EventId;
    py_retval = Py_BuildValue((char *) "N", py_EventId);
    return py_retval;
}


PyObject *
_wrap_PyNs3SsServiceFlowManager_ScheduleDsaReq(PyNs3SsServiceFlowManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ServiceFlow *serviceFlow;
    ns3::ServiceFlow *serviceFlow_ptr;
    const char *keywords[] = {"serviceFlow", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ServiceFlow_Type, &serviceFlow)) {
        return NULL;
    }
    serviceFlow_ptr = (serviceFlow ? serviceFlow->obj : NULL);
    self->obj->ScheduleDsaReq(serviceFlow_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SsServiceFlowManager__copy__(PyNs3SsServiceFlowManager *self)
{

    PyNs3SsServiceFlowManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3SsServiceFlowManager, &PyNs3SsServiceFlowManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::SsServiceFlowManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SsServiceFlowManager_methods[] = {
    {(char *) "AddServiceFlow", (PyCFunction) _wrap_PyNs3SsServiceFlowManager_AddServiceFlow, METH_KEYWORDS|METH_VARARGS, "AddServiceFlow(serviceFlow)\n\ntype: serviceFlow: ns3::ServiceFlow" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3SsServiceFlowManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetMaxDsaReqRetries", (PyCFunction) _wrap_PyNs3SsServiceFlowManager_SetMaxDsaReqRetries, METH_KEYWORDS|METH_VARARGS, "SetMaxDsaReqRetries(maxDsaReqRetries)\n\ntype: maxDsaReqRetries: uint8_t" },
    {(char *) "InitiateServiceFlows", (PyCFunction) _wrap_PyNs3SsServiceFlowManager_InitiateServiceFlows, METH_NOARGS, "InitiateServiceFlows()\n\n" },
    {(char *) "CreateDsaAck", (PyCFunction) _wrap_PyNs3SsServiceFlowManager_CreateDsaAck, METH_NOARGS, "CreateDsaAck()\n\n" },
    {(char *) "ProcessDsaRsp", (PyCFunction) _wrap_PyNs3SsServiceFlowManager_ProcessDsaRsp, METH_KEYWORDS|METH_VARARGS, "ProcessDsaRsp(dsaRsp)\n\ntype: dsaRsp: ns3::DsaRsp const &" },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3SsServiceFlowManager_DoDispose, METH_NOARGS, "DoDispose()\n\n" },
    {(char *) "GetDsaAckTimeoutEvent", (PyCFunction) _wrap_PyNs3SsServiceFlowManager_GetDsaAckTimeoutEvent, METH_NOARGS, "GetDsaAckTimeoutEvent()\n\n" },
    {(char *) "GetMaxDsaReqRetries", (PyCFunction) _wrap_PyNs3SsServiceFlowManager_GetMaxDsaReqRetries, METH_NOARGS, "GetMaxDsaReqRetries()\n\n" },
    {(char *) "CreateDsaReq", (PyCFunction) _wrap_PyNs3SsServiceFlowManager_CreateDsaReq, METH_KEYWORDS|METH_VARARGS, "CreateDsaReq(serviceFlow)\n\ntype: serviceFlow: ns3::ServiceFlow const *" },
    {(char *) "GetDsaRspTimeoutEvent", (PyCFunction) _wrap_PyNs3SsServiceFlowManager_GetDsaRspTimeoutEvent, METH_NOARGS, "GetDsaRspTimeoutEvent()\n\n" },
    {(char *) "ScheduleDsaReq", (PyCFunction) _wrap_PyNs3SsServiceFlowManager_ScheduleDsaReq, METH_KEYWORDS|METH_VARARGS, "ScheduleDsaReq(serviceFlow)\n\ntype: serviceFlow: ns3::ServiceFlow const *" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3SsServiceFlowManager__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3SsServiceFlowManager__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3SsServiceFlowManager__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SsServiceFlowManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3SsServiceFlowManager__tp_clear(PyNs3SsServiceFlowManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::SsServiceFlowManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3SsServiceFlowManager__tp_traverse(PyNs3SsServiceFlowManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3SsServiceFlowManager__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3SsServiceFlowManager__tp_dealloc(PyNs3SsServiceFlowManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3SsServiceFlowManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SsServiceFlowManager__tp_richcompare (PyNs3SsServiceFlowManager *PYBINDGEN_UNUSED(self), PyNs3SsServiceFlowManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SsServiceFlowManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SsServiceFlowManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.SsServiceFlowManager",            /* tp_name */
    sizeof(PyNs3SsServiceFlowManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SsServiceFlowManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "SsServiceFlowManager(device)\nSsServiceFlowManager(arg0)",                        /* Documentation string */
    (traverseproc)PyNs3SsServiceFlowManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3SsServiceFlowManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SsServiceFlowManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SsServiceFlowManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3SsServiceFlowManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SsServiceFlowManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Tlv__tp_init__0(PyNs3Tlv *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int type;
    uint64_t length;
    PyNs3TlvValue *value;
    const char *keywords[] = {"type", "length", "value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iKO!", (char **) keywords, &type, &length, &PyNs3TlvValue_Type, &value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (type > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Tlv(type, length, *((PyNs3TlvValue *) value)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Tlv__tp_init__1(PyNs3Tlv *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Tlv();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Tlv__tp_init__2(PyNs3Tlv *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Tlv *tlv;
    const char *keywords[] = {"tlv", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Tlv_Type, &tlv)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Tlv(*((PyNs3Tlv *) tlv)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Tlv__tp_init(PyNs3Tlv *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3Tlv__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Tlv__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3Tlv__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Tlv_Serialize(PyNs3Tlv *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Tlv_Deserialize(PyNs3Tlv *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Tlv_GetLength(PyNs3Tlv *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetLength();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Tlv_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::Tlv::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Tlv_GetType(PyNs3Tlv *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Tlv_GetInstanceTypeId(PyNs3Tlv *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Tlv_GetSerializedSize(PyNs3Tlv *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Tlv_GetSizeOfLen(PyNs3Tlv *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSizeOfLen();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3Tlv__copy__(PyNs3Tlv *self)
{

    PyNs3Tlv *py_copy;
    py_copy = PyObject_GC_New(PyNs3Tlv, &PyNs3Tlv_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::Tlv(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Tlv_methods[] = {
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3Tlv_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3Tlv_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetLength", (PyCFunction) _wrap_PyNs3Tlv_GetLength, METH_NOARGS, "GetLength()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3Tlv_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetType", (PyCFunction) _wrap_PyNs3Tlv_GetType, METH_NOARGS, "GetType()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3Tlv_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3Tlv_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetSizeOfLen", (PyCFunction) _wrap_PyNs3Tlv_GetSizeOfLen, METH_NOARGS, "GetSizeOfLen()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Tlv__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3Tlv__tp_clear(PyNs3Tlv *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::Tlv *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3Tlv__tp_traverse(PyNs3Tlv *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3Tlv__tp_dealloc(PyNs3Tlv *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3Tlv__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Tlv__tp_richcompare (PyNs3Tlv *PYBINDGEN_UNUSED(self), PyNs3Tlv *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Tlv_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Tlv_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Tlv",            /* tp_name */
    sizeof(PyNs3Tlv),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Tlv__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "Tlv(type, length, value)\nTlv(tlv)\nTlv()",                        /* Documentation string */
    (traverseproc)PyNs3Tlv__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3Tlv__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Tlv__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Tlv_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3Tlv, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Tlv__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Ucd__tp_init__0(PyNs3Ucd *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Ucd *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ucd_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Ucd(*((PyNs3Ucd *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Ucd__tp_init__1(PyNs3Ucd *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Ucd();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Ucd__tp_init(PyNs3Ucd *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Ucd__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Ucd__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Ucd_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::Ucd::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_SetRangingBackoffStart(PyNs3Ucd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rangingBackoffStart;
    const char *keywords[] = {"rangingBackoffStart", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rangingBackoffStart)) {
        return NULL;
    }
    if (rangingBackoffStart > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRangingBackoffStart(rangingBackoffStart);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_GetNrUlBurstProfiles(PyNs3Ucd *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNrUlBurstProfiles();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_GetChannelEncodings(PyNs3Ucd *self)
{
    PyObject *py_retval;
    PyNs3OfdmUcdChannelEncodings *py_OfdmUcdChannelEncodings;
    
    ns3::OfdmUcdChannelEncodings retval = self->obj->GetChannelEncodings();
    py_OfdmUcdChannelEncodings = PyObject_GC_New(PyNs3OfdmUcdChannelEncodings, &PyNs3OfdmUcdChannelEncodings_Type);
    py_OfdmUcdChannelEncodings->inst_dict = NULL;
    py_OfdmUcdChannelEncodings->inst_dict = NULL;
    py_OfdmUcdChannelEncodings->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_OfdmUcdChannelEncodings->obj = new ns3::OfdmUcdChannelEncodings(retval);
    PyNs3UcdChannelEncodings_wrapper_registry[(void *) py_OfdmUcdChannelEncodings->obj] = (PyObject *) py_OfdmUcdChannelEncodings;
    py_retval = Py_BuildValue((char *) "N", py_OfdmUcdChannelEncodings);
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_GetRequestBackoffEnd(PyNs3Ucd *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRequestBackoffEnd();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_GetRangingBackoffStart(PyNs3Ucd *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRangingBackoffStart();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_SetRequestBackoffStart(PyNs3Ucd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int requestBackoffStart;
    const char *keywords[] = {"requestBackoffStart", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &requestBackoffStart)) {
        return NULL;
    }
    if (requestBackoffStart > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRequestBackoffStart(requestBackoffStart);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_SetNrUlBurstProfiles(PyNs3Ucd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nrUlBurstProfiles;
    const char *keywords[] = {"nrUlBurstProfiles", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &nrUlBurstProfiles)) {
        return NULL;
    }
    if (nrUlBurstProfiles > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNrUlBurstProfiles(nrUlBurstProfiles);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_GetRequestBackoffStart(PyNs3Ucd *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRequestBackoffStart();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_GetRangingBackoffEnd(PyNs3Ucd *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRangingBackoffEnd();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_Deserialize(PyNs3Ucd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_GetConfigurationChangeCount(PyNs3Ucd *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetConfigurationChangeCount();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_GetName(PyNs3Ucd *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_GetInstanceTypeId(PyNs3Ucd *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_GetSerializedSize(PyNs3Ucd *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_SetConfigurationChangeCount(PyNs3Ucd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ucdCount;
    const char *keywords[] = {"ucdCount", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ucdCount)) {
        return NULL;
    }
    if (ucdCount > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetConfigurationChangeCount(ucdCount);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_SetChannelEncodings(PyNs3Ucd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3OfdmUcdChannelEncodings *channelEncodings;
    const char *keywords[] = {"channelEncodings", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OfdmUcdChannelEncodings_Type, &channelEncodings)) {
        return NULL;
    }
    self->obj->SetChannelEncodings(*((PyNs3OfdmUcdChannelEncodings *) channelEncodings)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_Serialize(PyNs3Ucd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_SetRequestBackoffEnd(PyNs3Ucd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int requestBackoffEnd;
    const char *keywords[] = {"requestBackoffEnd", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &requestBackoffEnd)) {
        return NULL;
    }
    if (requestBackoffEnd > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRequestBackoffEnd(requestBackoffEnd);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_SetRangingBackoffEnd(PyNs3Ucd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rangingBackoffEnd;
    const char *keywords[] = {"rangingBackoffEnd", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rangingBackoffEnd)) {
        return NULL;
    }
    if (rangingBackoffEnd > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRangingBackoffEnd(rangingBackoffEnd);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_GetUlBurstProfiles(PyNs3Ucd *self)
{
    PyObject *py_retval;
    std::vector< ns3::OfdmUlBurstProfile > retval;
    Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__ *py_std__vector__lt___ns3__OfdmUlBurstProfile___gt__;
    
    retval = self->obj->GetUlBurstProfiles();
    py_std__vector__lt___ns3__OfdmUlBurstProfile___gt__ = PyObject_New(Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__, &Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt___Type);
    py_std__vector__lt___ns3__OfdmUlBurstProfile___gt__->obj = new std::vector< ns3::OfdmUlBurstProfile >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__OfdmUlBurstProfile___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3Ucd_AddUlBurstProfile(PyNs3Ucd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3OfdmUlBurstProfile *ulBurstProfile;
    const char *keywords[] = {"ulBurstProfile", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OfdmUlBurstProfile_Type, &ulBurstProfile)) {
        return NULL;
    }
    self->obj->AddUlBurstProfile(*((PyNs3OfdmUlBurstProfile *) ulBurstProfile)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3Ucd__copy__(PyNs3Ucd *self)
{

    PyNs3Ucd *py_copy;
    py_copy = PyObject_GC_New(PyNs3Ucd, &PyNs3Ucd_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::Ucd(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Ucd_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3Ucd_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetRangingBackoffStart", (PyCFunction) _wrap_PyNs3Ucd_SetRangingBackoffStart, METH_KEYWORDS|METH_VARARGS, "SetRangingBackoffStart(rangingBackoffStart)\n\ntype: rangingBackoffStart: uint8_t" },
    {(char *) "GetNrUlBurstProfiles", (PyCFunction) _wrap_PyNs3Ucd_GetNrUlBurstProfiles, METH_NOARGS, "GetNrUlBurstProfiles()\n\n" },
    {(char *) "GetChannelEncodings", (PyCFunction) _wrap_PyNs3Ucd_GetChannelEncodings, METH_NOARGS, "GetChannelEncodings()\n\n" },
    {(char *) "GetRequestBackoffEnd", (PyCFunction) _wrap_PyNs3Ucd_GetRequestBackoffEnd, METH_NOARGS, "GetRequestBackoffEnd()\n\n" },
    {(char *) "GetRangingBackoffStart", (PyCFunction) _wrap_PyNs3Ucd_GetRangingBackoffStart, METH_NOARGS, "GetRangingBackoffStart()\n\n" },
    {(char *) "SetRequestBackoffStart", (PyCFunction) _wrap_PyNs3Ucd_SetRequestBackoffStart, METH_KEYWORDS|METH_VARARGS, "SetRequestBackoffStart(requestBackoffStart)\n\ntype: requestBackoffStart: uint8_t" },
    {(char *) "SetNrUlBurstProfiles", (PyCFunction) _wrap_PyNs3Ucd_SetNrUlBurstProfiles, METH_KEYWORDS|METH_VARARGS, "SetNrUlBurstProfiles(nrUlBurstProfiles)\n\ntype: nrUlBurstProfiles: uint8_t" },
    {(char *) "GetRequestBackoffStart", (PyCFunction) _wrap_PyNs3Ucd_GetRequestBackoffStart, METH_NOARGS, "GetRequestBackoffStart()\n\n" },
    {(char *) "GetRangingBackoffEnd", (PyCFunction) _wrap_PyNs3Ucd_GetRangingBackoffEnd, METH_NOARGS, "GetRangingBackoffEnd()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3Ucd_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetConfigurationChangeCount", (PyCFunction) _wrap_PyNs3Ucd_GetConfigurationChangeCount, METH_NOARGS, "GetConfigurationChangeCount()\n\n" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3Ucd_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3Ucd_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3Ucd_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetConfigurationChangeCount", (PyCFunction) _wrap_PyNs3Ucd_SetConfigurationChangeCount, METH_KEYWORDS|METH_VARARGS, "SetConfigurationChangeCount(ucdCount)\n\ntype: ucdCount: uint8_t" },
    {(char *) "SetChannelEncodings", (PyCFunction) _wrap_PyNs3Ucd_SetChannelEncodings, METH_KEYWORDS|METH_VARARGS, "SetChannelEncodings(channelEncodings)\n\ntype: channelEncodings: ns3::OfdmUcdChannelEncodings" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3Ucd_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetRequestBackoffEnd", (PyCFunction) _wrap_PyNs3Ucd_SetRequestBackoffEnd, METH_KEYWORDS|METH_VARARGS, "SetRequestBackoffEnd(requestBackoffEnd)\n\ntype: requestBackoffEnd: uint8_t" },
    {(char *) "SetRangingBackoffEnd", (PyCFunction) _wrap_PyNs3Ucd_SetRangingBackoffEnd, METH_KEYWORDS|METH_VARARGS, "SetRangingBackoffEnd(rangingBackoffEnd)\n\ntype: rangingBackoffEnd: uint8_t" },
    {(char *) "GetUlBurstProfiles", (PyCFunction) _wrap_PyNs3Ucd_GetUlBurstProfiles, METH_NOARGS, "GetUlBurstProfiles()\n\n" },
    {(char *) "AddUlBurstProfile", (PyCFunction) _wrap_PyNs3Ucd_AddUlBurstProfile, METH_KEYWORDS|METH_VARARGS, "AddUlBurstProfile(ulBurstProfile)\n\ntype: ulBurstProfile: ns3::OfdmUlBurstProfile" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Ucd__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3Ucd__tp_clear(PyNs3Ucd *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::Ucd *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3Ucd__tp_traverse(PyNs3Ucd *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3Ucd__tp_dealloc(PyNs3Ucd *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3Ucd__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Ucd__tp_richcompare (PyNs3Ucd *PYBINDGEN_UNUSED(self), PyNs3Ucd *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Ucd_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Ucd_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Ucd",            /* tp_name */
    sizeof(PyNs3Ucd),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Ucd__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "Ucd(arg0)\nUcd()",                        /* Documentation string */
    (traverseproc)PyNs3Ucd__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3Ucd__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Ucd__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Ucd_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3Ucd, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Ucd__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3UlJob__tp_init__0(PyNs3UlJob *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UlJob *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UlJob_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UlJob(*((PyNs3UlJob *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3UlJob__tp_init__1(PyNs3UlJob *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UlJob();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3UlJob__tp_init(PyNs3UlJob *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UlJob__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UlJob__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UlJob_SetPeriod(PyNs3UlJob *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *period;
    const char *keywords[] = {"period", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &period)) {
        return NULL;
    }
    self->obj->SetPeriod(*((PyNs3Time *) period)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UlJob_GetDeadline(PyNs3UlJob *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetDeadline();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3UlJob_GetReleaseTime(PyNs3UlJob *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetReleaseTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3UlJob_GetSchedulingType(PyNs3UlJob *self)
{
    PyObject *py_retval;
    ns3::ServiceFlow::SchedulingType retval;
    
    retval = self->obj->GetSchedulingType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UlJob_GetType(PyNs3UlJob *self)
{
    PyObject *py_retval;
    ns3::ReqType retval;
    
    retval = self->obj->GetType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UlJob_GetSize(PyNs3UlJob *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UlJob_SetSchedulingType(PyNs3UlJob *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::ServiceFlow::SchedulingType schedulingType;
    const char *keywords[] = {"schedulingType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &schedulingType)) {
        return NULL;
    }
    self->obj->SetSchedulingType(schedulingType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UlJob_SetDeadline(PyNs3UlJob *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *deadline;
    const char *keywords[] = {"deadline", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &deadline)) {
        return NULL;
    }
    self->obj->SetDeadline(*((PyNs3Time *) deadline)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UlJob_SetReleaseTime(PyNs3UlJob *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *releaseTime;
    const char *keywords[] = {"releaseTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &releaseTime)) {
        return NULL;
    }
    self->obj->SetReleaseTime(*((PyNs3Time *) releaseTime)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UlJob_SetSize(PyNs3UlJob *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int size;
    const char *keywords[] = {"size", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &size)) {
        return NULL;
    }
    self->obj->SetSize(size);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UlJob_GetPeriod(PyNs3UlJob *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetPeriod();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3UlJob_SetType(PyNs3UlJob *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::ReqType type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    self->obj->SetType(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3UlJob__copy__(PyNs3UlJob *self)
{

    PyNs3UlJob *py_copy;
    py_copy = PyObject_GC_New(PyNs3UlJob, &PyNs3UlJob_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::UlJob(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UlJob_methods[] = {
    {(char *) "SetPeriod", (PyCFunction) _wrap_PyNs3UlJob_SetPeriod, METH_KEYWORDS|METH_VARARGS, "SetPeriod(period)\n\ntype: period: ns3::Time" },
    {(char *) "GetDeadline", (PyCFunction) _wrap_PyNs3UlJob_GetDeadline, METH_NOARGS, "GetDeadline()\n\n" },
    {(char *) "GetReleaseTime", (PyCFunction) _wrap_PyNs3UlJob_GetReleaseTime, METH_NOARGS, "GetReleaseTime()\n\n" },
    {(char *) "GetSchedulingType", (PyCFunction) _wrap_PyNs3UlJob_GetSchedulingType, METH_NOARGS, "GetSchedulingType()\n\n" },
    {(char *) "GetType", (PyCFunction) _wrap_PyNs3UlJob_GetType, METH_NOARGS, "GetType()\n\n" },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3UlJob_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "SetSchedulingType", (PyCFunction) _wrap_PyNs3UlJob_SetSchedulingType, METH_KEYWORDS|METH_VARARGS, "SetSchedulingType(schedulingType)\n\ntype: schedulingType: ns3::ServiceFlow::SchedulingType" },
    {(char *) "SetDeadline", (PyCFunction) _wrap_PyNs3UlJob_SetDeadline, METH_KEYWORDS|METH_VARARGS, "SetDeadline(deadline)\n\ntype: deadline: ns3::Time" },
    {(char *) "SetReleaseTime", (PyCFunction) _wrap_PyNs3UlJob_SetReleaseTime, METH_KEYWORDS|METH_VARARGS, "SetReleaseTime(releaseTime)\n\ntype: releaseTime: ns3::Time" },
    {(char *) "SetSize", (PyCFunction) _wrap_PyNs3UlJob_SetSize, METH_KEYWORDS|METH_VARARGS, "SetSize(size)\n\ntype: size: uint32_t" },
    {(char *) "GetPeriod", (PyCFunction) _wrap_PyNs3UlJob_GetPeriod, METH_NOARGS, "GetPeriod()\n\n" },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3UlJob_SetType, METH_KEYWORDS|METH_VARARGS, "SetType(type)\n\ntype: type: ns3::ReqType" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UlJob__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UlJob__tp_clear(PyNs3UlJob *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UlJob *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UlJob__tp_traverse(PyNs3UlJob *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3UlJob__tp_dealloc(PyNs3UlJob *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UlJob__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UlJob__tp_richcompare (PyNs3UlJob *PYBINDGEN_UNUSED(self), PyNs3UlJob *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UlJob_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UlJob_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.UlJob",            /* tp_name */
    sizeof(PyNs3UlJob),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UlJob__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "UlJob(arg0)\nUlJob()",                        /* Documentation string */
    (traverseproc)PyNs3UlJob__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UlJob__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UlJob__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UlJob_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UlJob, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UlJob__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3UlMap__tp_init__0(PyNs3UlMap *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UlMap *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UlMap_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UlMap(*((PyNs3UlMap *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3UlMap__tp_init__1(PyNs3UlMap *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UlMap();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3UlMap__tp_init(PyNs3UlMap *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UlMap__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UlMap__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UlMap_GetUlMapElements(PyNs3UlMap *self)
{
    PyObject *py_retval;
    std::list< ns3::OfdmUlMapIe > retval;
    Pystd__list__lt___ns3__OfdmUlMapIe___gt__ *py_std__list__lt___ns3__OfdmUlMapIe___gt__;
    
    retval = self->obj->GetUlMapElements();
    py_std__list__lt___ns3__OfdmUlMapIe___gt__ = PyObject_New(Pystd__list__lt___ns3__OfdmUlMapIe___gt__, &Pystd__list__lt___ns3__OfdmUlMapIe___gt___Type);
    py_std__list__lt___ns3__OfdmUlMapIe___gt__->obj = new std::list< ns3::OfdmUlMapIe >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__list__lt___ns3__OfdmUlMapIe___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3UlMap_Serialize(PyNs3UlMap *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UlMap_Deserialize(PyNs3UlMap *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UlMap_GetAllocationStartTime(PyNs3UlMap *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetAllocationStartTime();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UlMap_GetName(PyNs3UlMap *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3UlMap_AddUlMapElement(PyNs3UlMap *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3OfdmUlMapIe *ulMapElement;
    const char *keywords[] = {"ulMapElement", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OfdmUlMapIe_Type, &ulMapElement)) {
        return NULL;
    }
    self->obj->AddUlMapElement(*((PyNs3OfdmUlMapIe *) ulMapElement)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UlMap_GetUcdCount(PyNs3UlMap *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetUcdCount();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UlMap_SetAllocationStartTime(PyNs3UlMap *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int allocationStartTime;
    const char *keywords[] = {"allocationStartTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &allocationStartTime)) {
        return NULL;
    }
    self->obj->SetAllocationStartTime(allocationStartTime);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UlMap_GetInstanceTypeId(PyNs3UlMap *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UlMap_GetSerializedSize(PyNs3UlMap *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UlMap_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UlMap::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UlMap_SetUcdCount(PyNs3UlMap *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ucdCount;
    const char *keywords[] = {"ucdCount", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ucdCount)) {
        return NULL;
    }
    if (ucdCount > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetUcdCount(ucdCount);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3UlMap__copy__(PyNs3UlMap *self)
{

    PyNs3UlMap *py_copy;
    py_copy = PyObject_GC_New(PyNs3UlMap, &PyNs3UlMap_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::UlMap(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UlMap_methods[] = {
    {(char *) "GetUlMapElements", (PyCFunction) _wrap_PyNs3UlMap_GetUlMapElements, METH_NOARGS, "GetUlMapElements()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3UlMap_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3UlMap_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetAllocationStartTime", (PyCFunction) _wrap_PyNs3UlMap_GetAllocationStartTime, METH_NOARGS, "GetAllocationStartTime()\n\n" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3UlMap_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "AddUlMapElement", (PyCFunction) _wrap_PyNs3UlMap_AddUlMapElement, METH_KEYWORDS|METH_VARARGS, "AddUlMapElement(ulMapElement)\n\ntype: ulMapElement: ns3::OfdmUlMapIe" },
    {(char *) "GetUcdCount", (PyCFunction) _wrap_PyNs3UlMap_GetUcdCount, METH_NOARGS, "GetUcdCount()\n\n" },
    {(char *) "SetAllocationStartTime", (PyCFunction) _wrap_PyNs3UlMap_SetAllocationStartTime, METH_KEYWORDS|METH_VARARGS, "SetAllocationStartTime(allocationStartTime)\n\ntype: allocationStartTime: uint32_t" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3UlMap_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3UlMap_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UlMap_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetUcdCount", (PyCFunction) _wrap_PyNs3UlMap_SetUcdCount, METH_KEYWORDS|METH_VARARGS, "SetUcdCount(ucdCount)\n\ntype: ucdCount: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UlMap__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UlMap__tp_clear(PyNs3UlMap *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::UlMap *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3UlMap__tp_traverse(PyNs3UlMap *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3UlMap__tp_dealloc(PyNs3UlMap *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UlMap__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UlMap__tp_richcompare (PyNs3UlMap *PYBINDGEN_UNUSED(self), PyNs3UlMap *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UlMap_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UlMap_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.UlMap",            /* tp_name */
    sizeof(PyNs3UlMap),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UlMap__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "UlMap(arg0)\nUlMap()",                        /* Documentation string */
    (traverseproc)PyNs3UlMap__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UlMap__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UlMap__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UlMap_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UlMap, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UlMap__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3UplinkScheduler__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'UplinkScheduler' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3UplinkScheduler_GetDcdTimeStamp(PyNs3UplinkScheduler *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetDcdTimeStamp();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_SetBs(PyNs3UplinkScheduler *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BaseStationNetDevice *bs;
    ns3::BaseStationNetDevice *bs_ptr;
    const char *keywords[] = {"bs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BaseStationNetDevice_Type, &bs)) {
        return NULL;
    }
    bs_ptr = (bs ? bs->obj : NULL);
    self->obj->SetBs(ns3::Ptr< ns3::BaseStationNetDevice  > (bs_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_GetUcdTimeStamp(PyNs3UplinkScheduler *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetUcdTimeStamp();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_GetChannelDescriptorsToUpdate(PyNs3UplinkScheduler *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool arg0;
    PyObject *py_arg0;
    bool arg1;
    PyObject *py_arg1;
    bool arg2;
    PyObject *py_arg2;
    bool arg3;
    PyObject *py_arg3;
    const char *keywords[] = {"arg0", "arg1", "arg2", "arg3", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "OOOO", (char **) keywords, &py_arg0, &py_arg1, &py_arg2, &py_arg3)) {
        return NULL;
    }
    arg0 = PyObject_IsTrue(py_arg0);
    arg1 = PyObject_IsTrue(py_arg1);
    arg2 = PyObject_IsTrue(py_arg2);
    arg3 = PyObject_IsTrue(py_arg3);
    self->obj->GetChannelDescriptorsToUpdate(arg0, arg1, arg2, arg3);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_InitOnce(PyNs3UplinkScheduler *self)
{
    PyObject *py_retval;
    
    self->obj->InitOnce();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_Schedule(PyNs3UplinkScheduler *self)
{
    PyObject *py_retval;
    
    self->obj->Schedule();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_SetDcdTimeStamp(PyNs3UplinkScheduler *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *dcdTimeStamp;
    const char *keywords[] = {"dcdTimeStamp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &dcdTimeStamp)) {
        return NULL;
    }
    self->obj->SetDcdTimeStamp(*((PyNs3Time *) dcdTimeStamp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UplinkScheduler::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_ProcessBandwidthRequest(PyNs3UplinkScheduler *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BandwidthRequestHeader *bwRequestHdr;
    const char *keywords[] = {"bwRequestHdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BandwidthRequestHeader_Type, &bwRequestHdr)) {
        return NULL;
    }
    self->obj->ProcessBandwidthRequest(*((PyNs3BandwidthRequestHeader *) bwRequestHdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_SetIsIrIntrvlAllocated(PyNs3UplinkScheduler *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool isIrIntrvlAllocated;
    PyObject *py_isIrIntrvlAllocated;
    const char *keywords[] = {"isIrIntrvlAllocated", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_isIrIntrvlAllocated)) {
        return NULL;
    }
    isIrIntrvlAllocated = (bool) PyObject_IsTrue(py_isIrIntrvlAllocated);
    self->obj->SetIsIrIntrvlAllocated(isIrIntrvlAllocated);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_SetTimeStampIrInterval(PyNs3UplinkScheduler *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *timeStampIrInterval;
    const char *keywords[] = {"timeStampIrInterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &timeStampIrInterval)) {
        return NULL;
    }
    self->obj->SetTimeStampIrInterval(*((PyNs3Time *) timeStampIrInterval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_GetUplinkAllocations(PyNs3UplinkScheduler *self)
{
    PyObject *py_retval;
    std::list< ns3::OfdmUlMapIe > retval;
    Pystd__list__lt___ns3__OfdmUlMapIe___gt__ *py_std__list__lt___ns3__OfdmUlMapIe___gt__;
    
    retval = self->obj->GetUplinkAllocations();
    py_std__list__lt___ns3__OfdmUlMapIe___gt__ = PyObject_New(Pystd__list__lt___ns3__OfdmUlMapIe___gt__, &Pystd__list__lt___ns3__OfdmUlMapIe___gt___Type);
    py_std__list__lt___ns3__OfdmUlMapIe___gt__->obj = new std::list< ns3::OfdmUlMapIe >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__list__lt___ns3__OfdmUlMapIe___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_GetIsIrIntrvlAllocated(PyNs3UplinkScheduler *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetIsIrIntrvlAllocated();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_SetNrIrOppsAllocated(PyNs3UplinkScheduler *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nrIrOppsAllocated;
    const char *keywords[] = {"nrIrOppsAllocated", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &nrIrOppsAllocated)) {
        return NULL;
    }
    if (nrIrOppsAllocated > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNrIrOppsAllocated(nrIrOppsAllocated);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_GetTimeStampIrInterval(PyNs3UplinkScheduler *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetTimeStampIrInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_CalculateAllocationStartTime(PyNs3UplinkScheduler *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->CalculateAllocationStartTime();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_GetNrIrOppsAllocated(PyNs3UplinkScheduler *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNrIrOppsAllocated();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_SetIsInvIrIntrvlAllocated(PyNs3UplinkScheduler *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool isInvIrIntrvlAllocated;
    PyObject *py_isInvIrIntrvlAllocated;
    const char *keywords[] = {"isInvIrIntrvlAllocated", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_isInvIrIntrvlAllocated)) {
        return NULL;
    }
    isInvIrIntrvlAllocated = (bool) PyObject_IsTrue(py_isInvIrIntrvlAllocated);
    self->obj->SetIsInvIrIntrvlAllocated(isInvIrIntrvlAllocated);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_GetBs(PyNs3UplinkScheduler *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::BaseStationNetDevice > retval;
    PyNs3BaseStationNetDevice *py_BaseStationNetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetBs();
    if (!(const_cast<ns3::BaseStationNetDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::BaseStationNetDevice *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3BaseStationNetDevice__PythonHelper).name())
    {
        py_BaseStationNetDevice = reinterpret_cast< PyNs3BaseStationNetDevice* >(reinterpret_cast< PyNs3BaseStationNetDevice__PythonHelper* >(const_cast<ns3::BaseStationNetDevice *> (ns3::PeekPointer (retval)))->m_pyself);
        py_BaseStationNetDevice->obj = const_cast<ns3::BaseStationNetDevice *> (ns3::PeekPointer (retval));
        Py_INCREF(py_BaseStationNetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::BaseStationNetDevice *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_BaseStationNetDevice = NULL;
        } else {
            py_BaseStationNetDevice = (PyNs3BaseStationNetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_BaseStationNetDevice);
        }
    
        if (py_BaseStationNetDevice == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::BaseStationNetDevice *> (ns3::PeekPointer (retval)))), &PyNs3BaseStationNetDevice_Type);
            py_BaseStationNetDevice = PyObject_GC_New(PyNs3BaseStationNetDevice, wrapper_type);
            py_BaseStationNetDevice->inst_dict = NULL;
    
            py_BaseStationNetDevice->inst_dict = NULL;
            py_BaseStationNetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::BaseStationNetDevice *> (ns3::PeekPointer (retval))->Ref();
            py_BaseStationNetDevice->obj = const_cast<ns3::BaseStationNetDevice *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_BaseStationNetDevice->obj] = (PyObject *) py_BaseStationNetDevice;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_BaseStationNetDevice);
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_GetIsInvIrIntrvlAllocated(PyNs3UplinkScheduler *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetIsInvIrIntrvlAllocated();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkScheduler_SetUcdTimeStamp(PyNs3UplinkScheduler *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *ucdTimeStamp;
    const char *keywords[] = {"ucdTimeStamp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &ucdTimeStamp)) {
        return NULL;
    }
    self->obj->SetUcdTimeStamp(*((PyNs3Time *) ucdTimeStamp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3UplinkScheduler_methods[] = {
    {(char *) "GetDcdTimeStamp", (PyCFunction) _wrap_PyNs3UplinkScheduler_GetDcdTimeStamp, METH_NOARGS, "GetDcdTimeStamp()\n\n" },
    {(char *) "SetBs", (PyCFunction) _wrap_PyNs3UplinkScheduler_SetBs, METH_KEYWORDS|METH_VARARGS, "SetBs(bs)\n\ntype: bs: ns3::Ptr< ns3::BaseStationNetDevice >" },
    {(char *) "GetUcdTimeStamp", (PyCFunction) _wrap_PyNs3UplinkScheduler_GetUcdTimeStamp, METH_NOARGS, "GetUcdTimeStamp()\n\n" },
    {(char *) "GetChannelDescriptorsToUpdate", (PyCFunction) _wrap_PyNs3UplinkScheduler_GetChannelDescriptorsToUpdate, METH_KEYWORDS|METH_VARARGS, "GetChannelDescriptorsToUpdate(arg0, arg1, arg2, arg3)\n\ntype: arg0: bool &\ntype: arg1: bool &\ntype: arg2: bool &\ntype: arg3: bool &" },
    {(char *) "InitOnce", (PyCFunction) _wrap_PyNs3UplinkScheduler_InitOnce, METH_NOARGS, "InitOnce()\n\n" },
    {(char *) "Schedule", (PyCFunction) _wrap_PyNs3UplinkScheduler_Schedule, METH_NOARGS, "Schedule()\n\n" },
    {(char *) "SetDcdTimeStamp", (PyCFunction) _wrap_PyNs3UplinkScheduler_SetDcdTimeStamp, METH_KEYWORDS|METH_VARARGS, "SetDcdTimeStamp(dcdTimeStamp)\n\ntype: dcdTimeStamp: ns3::Time" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UplinkScheduler_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "ProcessBandwidthRequest", (PyCFunction) _wrap_PyNs3UplinkScheduler_ProcessBandwidthRequest, METH_KEYWORDS|METH_VARARGS, "ProcessBandwidthRequest(bwRequestHdr)\n\ntype: bwRequestHdr: ns3::BandwidthRequestHeader const &" },
    {(char *) "SetIsIrIntrvlAllocated", (PyCFunction) _wrap_PyNs3UplinkScheduler_SetIsIrIntrvlAllocated, METH_KEYWORDS|METH_VARARGS, "SetIsIrIntrvlAllocated(isIrIntrvlAllocated)\n\ntype: isIrIntrvlAllocated: bool" },
    {(char *) "SetTimeStampIrInterval", (PyCFunction) _wrap_PyNs3UplinkScheduler_SetTimeStampIrInterval, METH_KEYWORDS|METH_VARARGS, "SetTimeStampIrInterval(timeStampIrInterval)\n\ntype: timeStampIrInterval: ns3::Time" },
    {(char *) "GetUplinkAllocations", (PyCFunction) _wrap_PyNs3UplinkScheduler_GetUplinkAllocations, METH_NOARGS, "GetUplinkAllocations()\n\n" },
    {(char *) "GetIsIrIntrvlAllocated", (PyCFunction) _wrap_PyNs3UplinkScheduler_GetIsIrIntrvlAllocated, METH_NOARGS, "GetIsIrIntrvlAllocated()\n\n" },
    {(char *) "SetNrIrOppsAllocated", (PyCFunction) _wrap_PyNs3UplinkScheduler_SetNrIrOppsAllocated, METH_KEYWORDS|METH_VARARGS, "SetNrIrOppsAllocated(nrIrOppsAllocated)\n\ntype: nrIrOppsAllocated: uint8_t" },
    {(char *) "GetTimeStampIrInterval", (PyCFunction) _wrap_PyNs3UplinkScheduler_GetTimeStampIrInterval, METH_NOARGS, "GetTimeStampIrInterval()\n\n" },
    {(char *) "CalculateAllocationStartTime", (PyCFunction) _wrap_PyNs3UplinkScheduler_CalculateAllocationStartTime, METH_NOARGS, "CalculateAllocationStartTime()\n\n" },
    {(char *) "GetNrIrOppsAllocated", (PyCFunction) _wrap_PyNs3UplinkScheduler_GetNrIrOppsAllocated, METH_NOARGS, "GetNrIrOppsAllocated()\n\n" },
    {(char *) "SetIsInvIrIntrvlAllocated", (PyCFunction) _wrap_PyNs3UplinkScheduler_SetIsInvIrIntrvlAllocated, METH_KEYWORDS|METH_VARARGS, "SetIsInvIrIntrvlAllocated(isInvIrIntrvlAllocated)\n\ntype: isInvIrIntrvlAllocated: bool" },
    {(char *) "GetBs", (PyCFunction) _wrap_PyNs3UplinkScheduler_GetBs, METH_NOARGS, "GetBs()\n\n" },
    {(char *) "GetIsInvIrIntrvlAllocated", (PyCFunction) _wrap_PyNs3UplinkScheduler_GetIsInvIrIntrvlAllocated, METH_NOARGS, "GetIsInvIrIntrvlAllocated()\n\n" },
    {(char *) "SetUcdTimeStamp", (PyCFunction) _wrap_PyNs3UplinkScheduler_SetUcdTimeStamp, METH_KEYWORDS|METH_VARARGS, "SetUcdTimeStamp(ucdTimeStamp)\n\ntype: ucdTimeStamp: ns3::Time" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UplinkScheduler__tp_clear(PyNs3UplinkScheduler *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UplinkScheduler *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UplinkScheduler__tp_traverse(PyNs3UplinkScheduler *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3UplinkScheduler__tp_dealloc(PyNs3UplinkScheduler *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UplinkScheduler__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UplinkScheduler__tp_richcompare (PyNs3UplinkScheduler *PYBINDGEN_UNUSED(self), PyNs3UplinkScheduler *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UplinkScheduler_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UplinkScheduler_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.UplinkScheduler",            /* tp_name */
    sizeof(PyNs3UplinkScheduler),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UplinkScheduler__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "UplinkScheduler(arg0)\nUplinkScheduler(bs)\nUplinkScheduler()",                        /* Documentation string */
    (traverseproc)PyNs3UplinkScheduler__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UplinkScheduler__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UplinkScheduler__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UplinkScheduler_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UplinkScheduler, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UplinkScheduler__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3UplinkSchedulerMBQoS__tp_init__0(PyNs3UplinkSchedulerMBQoS *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UplinkSchedulerMBQoS *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UplinkSchedulerMBQoS_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UplinkSchedulerMBQoS(*((PyNs3UplinkSchedulerMBQoS *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3UplinkSchedulerMBQoS__tp_init__1(PyNs3UplinkSchedulerMBQoS *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UplinkSchedulerMBQoS();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3UplinkSchedulerMBQoS__tp_init__2(PyNs3UplinkSchedulerMBQoS *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Time *time;
    const char *keywords[] = {"time", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &time)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UplinkSchedulerMBQoS(*((PyNs3Time *) time)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3UplinkSchedulerMBQoS__tp_init(PyNs3UplinkSchedulerMBQoS *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3UplinkSchedulerMBQoS__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UplinkSchedulerMBQoS__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3UplinkSchedulerMBQoS__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UplinkSchedulerMBQoS_CountSymbolsQueue(PyNs3UplinkSchedulerMBQoS *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    std::list< ns3::Ptr< ns3::UlJob > > jobs_value;
    const char *keywords[] = {"jobs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__, &jobs_value)) {
        return NULL;
    }
    retval = self->obj->CountSymbolsQueue(jobs_value);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerMBQoS_GetChannelDescriptorsToUpdate(PyNs3UplinkSchedulerMBQoS *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool arg0;
    PyObject *py_arg0;
    bool arg1;
    PyObject *py_arg1;
    bool arg2;
    PyObject *py_arg2;
    bool arg3;
    PyObject *py_arg3;
    const char *keywords[] = {"arg0", "arg1", "arg2", "arg3", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "OOOO", (char **) keywords, &py_arg0, &py_arg1, &py_arg2, &py_arg3)) {
        return NULL;
    }
    arg0 = PyObject_IsTrue(py_arg0);
    arg1 = PyObject_IsTrue(py_arg1);
    arg2 = PyObject_IsTrue(py_arg2);
    arg3 = PyObject_IsTrue(py_arg3);
    self->obj->GetChannelDescriptorsToUpdate(arg0, arg1, arg2, arg3);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerMBQoS_DequeueJob(PyNs3UplinkSchedulerMBQoS *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UlJob > retval;
    ns3::UlJob::JobPriority priority;
    const char *keywords[] = {"priority", NULL};
    PyNs3UlJob *py_UlJob;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &priority)) {
        return NULL;
    }
    retval = self->obj->DequeueJob(priority);
    if (!(const_cast<ns3::UlJob *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UlJob *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_UlJob = NULL;
    } else {
        py_UlJob = (PyNs3UlJob *) wrapper_lookup_iter->second;
        Py_INCREF(py_UlJob);
    }
    
    if (py_UlJob == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UlJob *> (ns3::PeekPointer (retval)))), &PyNs3UlJob_Type);
        py_UlJob = PyObject_GC_New(PyNs3UlJob, wrapper_type);
        py_UlJob->inst_dict = NULL;
    
        py_UlJob->inst_dict = NULL;
        py_UlJob->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::UlJob *> (ns3::PeekPointer (retval))->Ref();
        py_UlJob->obj = const_cast<ns3::UlJob *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_UlJob->obj] = (PyObject *) py_UlJob;
    }
    py_retval = Py_BuildValue((char *) "N", py_UlJob);
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerMBQoS_Schedule(PyNs3UplinkSchedulerMBQoS *self)
{
    PyObject *py_retval;
    
    self->obj->Schedule();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerMBQoS_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UplinkSchedulerMBQoS::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerMBQoS_EnqueueJob(PyNs3UplinkSchedulerMBQoS *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::UlJob::JobPriority priority;
    PyNs3UlJob *job;
    ns3::UlJob *job_ptr;
    const char *keywords[] = {"priority", "job", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &priority, &PyNs3UlJob_Type, &job)) {
        return NULL;
    }
    job_ptr = (job ? job->obj : NULL);
    self->obj->EnqueueJob(priority, ns3::Ptr< ns3::UlJob  > (job_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerMBQoS_UplinkSchedWindowTimer(PyNs3UplinkSchedulerMBQoS *self)
{
    PyObject *py_retval;
    
    self->obj->UplinkSchedWindowTimer();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerMBQoS_GetUplinkAllocations(PyNs3UplinkSchedulerMBQoS *self)
{
    PyObject *py_retval;
    std::list< ns3::OfdmUlMapIe > retval;
    Pystd__list__lt___ns3__OfdmUlMapIe___gt__ *py_std__list__lt___ns3__OfdmUlMapIe___gt__;
    
    retval = self->obj->GetUplinkAllocations();
    py_std__list__lt___ns3__OfdmUlMapIe___gt__ = PyObject_New(Pystd__list__lt___ns3__OfdmUlMapIe___gt__, &Pystd__list__lt___ns3__OfdmUlMapIe___gt___Type);
    py_std__list__lt___ns3__OfdmUlMapIe___gt__->obj = new std::list< ns3::OfdmUlMapIe >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__list__lt___ns3__OfdmUlMapIe___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerMBQoS_CalculateAllocationStartTime(PyNs3UplinkSchedulerMBQoS *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->CalculateAllocationStartTime();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerMBQoS_CountSymbolsJobs(PyNs3UplinkSchedulerMBQoS *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3UlJob *job;
    ns3::UlJob *job_ptr;
    const char *keywords[] = {"job", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UlJob_Type, &job)) {
        return NULL;
    }
    job_ptr = (job ? job->obj : NULL);
    retval = self->obj->CountSymbolsJobs(ns3::Ptr< ns3::UlJob  > (job_ptr));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerMBQoS_ProcessBandwidthRequest(PyNs3UplinkSchedulerMBQoS *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BandwidthRequestHeader *bwRequestHdr;
    const char *keywords[] = {"bwRequestHdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BandwidthRequestHeader_Type, &bwRequestHdr)) {
        return NULL;
    }
    self->obj->ProcessBandwidthRequest(*((PyNs3BandwidthRequestHeader *) bwRequestHdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerMBQoS_InitOnce(PyNs3UplinkSchedulerMBQoS *self)
{
    PyObject *py_retval;
    
    self->obj->InitOnce();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3UplinkSchedulerMBQoS__copy__(PyNs3UplinkSchedulerMBQoS *self)
{

    PyNs3UplinkSchedulerMBQoS *py_copy;
    py_copy = PyObject_GC_New(PyNs3UplinkSchedulerMBQoS, &PyNs3UplinkSchedulerMBQoS_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::UplinkSchedulerMBQoS(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UplinkSchedulerMBQoS_methods[] = {
    {(char *) "CountSymbolsQueue", (PyCFunction) _wrap_PyNs3UplinkSchedulerMBQoS_CountSymbolsQueue, METH_KEYWORDS|METH_VARARGS, "CountSymbolsQueue(jobs)\n\ntype: jobs: std::list< ns3::Ptr< ns3::UlJob > >" },
    {(char *) "GetChannelDescriptorsToUpdate", (PyCFunction) _wrap_PyNs3UplinkSchedulerMBQoS_GetChannelDescriptorsToUpdate, METH_KEYWORDS|METH_VARARGS, "GetChannelDescriptorsToUpdate(arg0, arg1, arg2, arg3)\n\ntype: arg0: bool &\ntype: arg1: bool &\ntype: arg2: bool &\ntype: arg3: bool &" },
    {(char *) "DequeueJob", (PyCFunction) _wrap_PyNs3UplinkSchedulerMBQoS_DequeueJob, METH_KEYWORDS|METH_VARARGS, "DequeueJob(priority)\n\ntype: priority: ns3::UlJob::JobPriority" },
    {(char *) "Schedule", (PyCFunction) _wrap_PyNs3UplinkSchedulerMBQoS_Schedule, METH_NOARGS, "Schedule()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UplinkSchedulerMBQoS_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "EnqueueJob", (PyCFunction) _wrap_PyNs3UplinkSchedulerMBQoS_EnqueueJob, METH_KEYWORDS|METH_VARARGS, "EnqueueJob(priority, job)\n\ntype: priority: ns3::UlJob::JobPriority\ntype: job: ns3::Ptr< ns3::UlJob >" },
    {(char *) "UplinkSchedWindowTimer", (PyCFunction) _wrap_PyNs3UplinkSchedulerMBQoS_UplinkSchedWindowTimer, METH_NOARGS, "UplinkSchedWindowTimer()\n\n" },
    {(char *) "GetUplinkAllocations", (PyCFunction) _wrap_PyNs3UplinkSchedulerMBQoS_GetUplinkAllocations, METH_NOARGS, "GetUplinkAllocations()\n\n" },
    {(char *) "CalculateAllocationStartTime", (PyCFunction) _wrap_PyNs3UplinkSchedulerMBQoS_CalculateAllocationStartTime, METH_NOARGS, "CalculateAllocationStartTime()\n\n" },
    {(char *) "CountSymbolsJobs", (PyCFunction) _wrap_PyNs3UplinkSchedulerMBQoS_CountSymbolsJobs, METH_KEYWORDS|METH_VARARGS, "CountSymbolsJobs(job)\n\ntype: job: ns3::Ptr< ns3::UlJob >" },
    {(char *) "ProcessBandwidthRequest", (PyCFunction) _wrap_PyNs3UplinkSchedulerMBQoS_ProcessBandwidthRequest, METH_KEYWORDS|METH_VARARGS, "ProcessBandwidthRequest(bwRequestHdr)\n\ntype: bwRequestHdr: ns3::BandwidthRequestHeader const &" },
    {(char *) "InitOnce", (PyCFunction) _wrap_PyNs3UplinkSchedulerMBQoS_InitOnce, METH_NOARGS, "InitOnce()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UplinkSchedulerMBQoS__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UplinkSchedulerMBQoS__tp_clear(PyNs3UplinkSchedulerMBQoS *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UplinkSchedulerMBQoS *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UplinkSchedulerMBQoS__tp_traverse(PyNs3UplinkSchedulerMBQoS *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3UplinkSchedulerMBQoS__tp_dealloc(PyNs3UplinkSchedulerMBQoS *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UplinkSchedulerMBQoS__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UplinkSchedulerMBQoS__tp_richcompare (PyNs3UplinkSchedulerMBQoS *PYBINDGEN_UNUSED(self), PyNs3UplinkSchedulerMBQoS *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UplinkSchedulerMBQoS_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UplinkSchedulerMBQoS_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.UplinkSchedulerMBQoS",            /* tp_name */
    sizeof(PyNs3UplinkSchedulerMBQoS),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UplinkSchedulerMBQoS__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "UplinkSchedulerMBQoS(arg0)\nUplinkSchedulerMBQoS(time)\nUplinkSchedulerMBQoS()",                        /* Documentation string */
    (traverseproc)PyNs3UplinkSchedulerMBQoS__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UplinkSchedulerMBQoS__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UplinkSchedulerMBQoS__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UplinkSchedulerMBQoS_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UplinkSchedulerMBQoS, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UplinkSchedulerMBQoS__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3UplinkSchedulerRtps__tp_init__0(PyNs3UplinkSchedulerRtps *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UplinkSchedulerRtps *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UplinkSchedulerRtps_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UplinkSchedulerRtps(*((PyNs3UplinkSchedulerRtps *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3UplinkSchedulerRtps__tp_init__1(PyNs3UplinkSchedulerRtps *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UplinkSchedulerRtps();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3UplinkSchedulerRtps__tp_init__2(PyNs3UplinkSchedulerRtps *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3BaseStationNetDevice *bs;
    ns3::BaseStationNetDevice *bs_ptr;
    const char *keywords[] = {"bs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BaseStationNetDevice_Type, &bs)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bs_ptr = (bs ? bs->obj : NULL);
    self->obj = new ns3::UplinkSchedulerRtps(ns3::Ptr< ns3::BaseStationNetDevice  > (bs_ptr));
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3UplinkSchedulerRtps__tp_init(PyNs3UplinkSchedulerRtps *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3UplinkSchedulerRtps__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UplinkSchedulerRtps__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3UplinkSchedulerRtps__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UplinkSchedulerRtps_GetChannelDescriptorsToUpdate(PyNs3UplinkSchedulerRtps *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool arg0;
    PyObject *py_arg0;
    bool arg1;
    PyObject *py_arg1;
    bool arg2;
    PyObject *py_arg2;
    bool arg3;
    PyObject *py_arg3;
    const char *keywords[] = {"arg0", "arg1", "arg2", "arg3", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "OOOO", (char **) keywords, &py_arg0, &py_arg1, &py_arg2, &py_arg3)) {
        return NULL;
    }
    arg0 = PyObject_IsTrue(py_arg0);
    arg1 = PyObject_IsTrue(py_arg1);
    arg2 = PyObject_IsTrue(py_arg2);
    arg3 = PyObject_IsTrue(py_arg3);
    self->obj->GetChannelDescriptorsToUpdate(arg0, arg1, arg2, arg3);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerRtps_InitOnce(PyNs3UplinkSchedulerRtps *self)
{
    PyObject *py_retval;
    
    self->obj->InitOnce();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerRtps_Schedule(PyNs3UplinkSchedulerRtps *self)
{
    PyObject *py_retval;
    
    self->obj->Schedule();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerRtps_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UplinkSchedulerRtps::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerRtps_GetUplinkAllocations(PyNs3UplinkSchedulerRtps *self)
{
    PyObject *py_retval;
    std::list< ns3::OfdmUlMapIe > retval;
    Pystd__list__lt___ns3__OfdmUlMapIe___gt__ *py_std__list__lt___ns3__OfdmUlMapIe___gt__;
    
    retval = self->obj->GetUplinkAllocations();
    py_std__list__lt___ns3__OfdmUlMapIe___gt__ = PyObject_New(Pystd__list__lt___ns3__OfdmUlMapIe___gt__, &Pystd__list__lt___ns3__OfdmUlMapIe___gt___Type);
    py_std__list__lt___ns3__OfdmUlMapIe___gt__->obj = new std::list< ns3::OfdmUlMapIe >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__list__lt___ns3__OfdmUlMapIe___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerRtps_CalculateAllocationStartTime(PyNs3UplinkSchedulerRtps *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->CalculateAllocationStartTime();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerRtps_ProcessBandwidthRequest(PyNs3UplinkSchedulerRtps *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BandwidthRequestHeader *bwRequestHdr;
    const char *keywords[] = {"bwRequestHdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BandwidthRequestHeader_Type, &bwRequestHdr)) {
        return NULL;
    }
    self->obj->ProcessBandwidthRequest(*((PyNs3BandwidthRequestHeader *) bwRequestHdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3UplinkSchedulerRtps__copy__(PyNs3UplinkSchedulerRtps *self)
{

    PyNs3UplinkSchedulerRtps *py_copy;
    py_copy = PyObject_GC_New(PyNs3UplinkSchedulerRtps, &PyNs3UplinkSchedulerRtps_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::UplinkSchedulerRtps(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UplinkSchedulerRtps_methods[] = {
    {(char *) "GetChannelDescriptorsToUpdate", (PyCFunction) _wrap_PyNs3UplinkSchedulerRtps_GetChannelDescriptorsToUpdate, METH_KEYWORDS|METH_VARARGS, "GetChannelDescriptorsToUpdate(arg0, arg1, arg2, arg3)\n\ntype: arg0: bool &\ntype: arg1: bool &\ntype: arg2: bool &\ntype: arg3: bool &" },
    {(char *) "InitOnce", (PyCFunction) _wrap_PyNs3UplinkSchedulerRtps_InitOnce, METH_NOARGS, "InitOnce()\n\n" },
    {(char *) "Schedule", (PyCFunction) _wrap_PyNs3UplinkSchedulerRtps_Schedule, METH_NOARGS, "Schedule()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UplinkSchedulerRtps_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetUplinkAllocations", (PyCFunction) _wrap_PyNs3UplinkSchedulerRtps_GetUplinkAllocations, METH_NOARGS, "GetUplinkAllocations()\n\n" },
    {(char *) "CalculateAllocationStartTime", (PyCFunction) _wrap_PyNs3UplinkSchedulerRtps_CalculateAllocationStartTime, METH_NOARGS, "CalculateAllocationStartTime()\n\n" },
    {(char *) "ProcessBandwidthRequest", (PyCFunction) _wrap_PyNs3UplinkSchedulerRtps_ProcessBandwidthRequest, METH_KEYWORDS|METH_VARARGS, "ProcessBandwidthRequest(bwRequestHdr)\n\ntype: bwRequestHdr: ns3::BandwidthRequestHeader const &" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UplinkSchedulerRtps__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UplinkSchedulerRtps__tp_clear(PyNs3UplinkSchedulerRtps *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UplinkSchedulerRtps *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UplinkSchedulerRtps__tp_traverse(PyNs3UplinkSchedulerRtps *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3UplinkSchedulerRtps__tp_dealloc(PyNs3UplinkSchedulerRtps *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UplinkSchedulerRtps__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UplinkSchedulerRtps__tp_richcompare (PyNs3UplinkSchedulerRtps *PYBINDGEN_UNUSED(self), PyNs3UplinkSchedulerRtps *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UplinkSchedulerRtps_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UplinkSchedulerRtps_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.UplinkSchedulerRtps",            /* tp_name */
    sizeof(PyNs3UplinkSchedulerRtps),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UplinkSchedulerRtps__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "UplinkSchedulerRtps(arg0)\nUplinkSchedulerRtps(bs)\nUplinkSchedulerRtps()",                        /* Documentation string */
    (traverseproc)PyNs3UplinkSchedulerRtps__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UplinkSchedulerRtps__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UplinkSchedulerRtps__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UplinkSchedulerRtps_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UplinkSchedulerRtps, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UplinkSchedulerRtps__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3UplinkSchedulerSimple__tp_init__0(PyNs3UplinkSchedulerSimple *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UplinkSchedulerSimple *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UplinkSchedulerSimple_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UplinkSchedulerSimple(*((PyNs3UplinkSchedulerSimple *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3UplinkSchedulerSimple__tp_init__1(PyNs3UplinkSchedulerSimple *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UplinkSchedulerSimple();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3UplinkSchedulerSimple__tp_init__2(PyNs3UplinkSchedulerSimple *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3BaseStationNetDevice *bs;
    ns3::BaseStationNetDevice *bs_ptr;
    const char *keywords[] = {"bs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BaseStationNetDevice_Type, &bs)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bs_ptr = (bs ? bs->obj : NULL);
    self->obj = new ns3::UplinkSchedulerSimple(ns3::Ptr< ns3::BaseStationNetDevice  > (bs_ptr));
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3UplinkSchedulerSimple__tp_init(PyNs3UplinkSchedulerSimple *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3UplinkSchedulerSimple__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UplinkSchedulerSimple__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3UplinkSchedulerSimple__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UplinkSchedulerSimple_GetChannelDescriptorsToUpdate(PyNs3UplinkSchedulerSimple *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool arg0;
    PyObject *py_arg0;
    bool arg1;
    PyObject *py_arg1;
    bool arg2;
    PyObject *py_arg2;
    bool arg3;
    PyObject *py_arg3;
    const char *keywords[] = {"arg0", "arg1", "arg2", "arg3", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "OOOO", (char **) keywords, &py_arg0, &py_arg1, &py_arg2, &py_arg3)) {
        return NULL;
    }
    arg0 = PyObject_IsTrue(py_arg0);
    arg1 = PyObject_IsTrue(py_arg1);
    arg2 = PyObject_IsTrue(py_arg2);
    arg3 = PyObject_IsTrue(py_arg3);
    self->obj->GetChannelDescriptorsToUpdate(arg0, arg1, arg2, arg3);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerSimple_InitOnce(PyNs3UplinkSchedulerSimple *self)
{
    PyObject *py_retval;
    
    self->obj->InitOnce();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerSimple_Schedule(PyNs3UplinkSchedulerSimple *self)
{
    PyObject *py_retval;
    
    self->obj->Schedule();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerSimple_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UplinkSchedulerSimple::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerSimple_GetUplinkAllocations(PyNs3UplinkSchedulerSimple *self)
{
    PyObject *py_retval;
    std::list< ns3::OfdmUlMapIe > retval;
    Pystd__list__lt___ns3__OfdmUlMapIe___gt__ *py_std__list__lt___ns3__OfdmUlMapIe___gt__;
    
    retval = self->obj->GetUplinkAllocations();
    py_std__list__lt___ns3__OfdmUlMapIe___gt__ = PyObject_New(Pystd__list__lt___ns3__OfdmUlMapIe___gt__, &Pystd__list__lt___ns3__OfdmUlMapIe___gt___Type);
    py_std__list__lt___ns3__OfdmUlMapIe___gt__->obj = new std::list< ns3::OfdmUlMapIe >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__list__lt___ns3__OfdmUlMapIe___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerSimple_CalculateAllocationStartTime(PyNs3UplinkSchedulerSimple *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->CalculateAllocationStartTime();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UplinkSchedulerSimple_ProcessBandwidthRequest(PyNs3UplinkSchedulerSimple *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BandwidthRequestHeader *bwRequestHdr;
    const char *keywords[] = {"bwRequestHdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BandwidthRequestHeader_Type, &bwRequestHdr)) {
        return NULL;
    }
    self->obj->ProcessBandwidthRequest(*((PyNs3BandwidthRequestHeader *) bwRequestHdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3UplinkSchedulerSimple__copy__(PyNs3UplinkSchedulerSimple *self)
{

    PyNs3UplinkSchedulerSimple *py_copy;
    py_copy = PyObject_GC_New(PyNs3UplinkSchedulerSimple, &PyNs3UplinkSchedulerSimple_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::UplinkSchedulerSimple(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UplinkSchedulerSimple_methods[] = {
    {(char *) "GetChannelDescriptorsToUpdate", (PyCFunction) _wrap_PyNs3UplinkSchedulerSimple_GetChannelDescriptorsToUpdate, METH_KEYWORDS|METH_VARARGS, "GetChannelDescriptorsToUpdate(arg0, arg1, arg2, arg3)\n\ntype: arg0: bool &\ntype: arg1: bool &\ntype: arg2: bool &\ntype: arg3: bool &" },
    {(char *) "InitOnce", (PyCFunction) _wrap_PyNs3UplinkSchedulerSimple_InitOnce, METH_NOARGS, "InitOnce()\n\n" },
    {(char *) "Schedule", (PyCFunction) _wrap_PyNs3UplinkSchedulerSimple_Schedule, METH_NOARGS, "Schedule()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UplinkSchedulerSimple_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetUplinkAllocations", (PyCFunction) _wrap_PyNs3UplinkSchedulerSimple_GetUplinkAllocations, METH_NOARGS, "GetUplinkAllocations()\n\n" },
    {(char *) "CalculateAllocationStartTime", (PyCFunction) _wrap_PyNs3UplinkSchedulerSimple_CalculateAllocationStartTime, METH_NOARGS, "CalculateAllocationStartTime()\n\n" },
    {(char *) "ProcessBandwidthRequest", (PyCFunction) _wrap_PyNs3UplinkSchedulerSimple_ProcessBandwidthRequest, METH_KEYWORDS|METH_VARARGS, "ProcessBandwidthRequest(bwRequestHdr)\n\ntype: bwRequestHdr: ns3::BandwidthRequestHeader const &" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UplinkSchedulerSimple__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UplinkSchedulerSimple__tp_clear(PyNs3UplinkSchedulerSimple *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UplinkSchedulerSimple *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UplinkSchedulerSimple__tp_traverse(PyNs3UplinkSchedulerSimple *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3UplinkSchedulerSimple__tp_dealloc(PyNs3UplinkSchedulerSimple *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UplinkSchedulerSimple__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UplinkSchedulerSimple__tp_richcompare (PyNs3UplinkSchedulerSimple *PYBINDGEN_UNUSED(self), PyNs3UplinkSchedulerSimple *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UplinkSchedulerSimple_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UplinkSchedulerSimple_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.UplinkSchedulerSimple",            /* tp_name */
    sizeof(PyNs3UplinkSchedulerSimple),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UplinkSchedulerSimple__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "UplinkSchedulerSimple(arg0)\nUplinkSchedulerSimple(bs)\nUplinkSchedulerSimple()",                        /* Documentation string */
    (traverseproc)PyNs3UplinkSchedulerSimple__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UplinkSchedulerSimple__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UplinkSchedulerSimple__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UplinkSchedulerSimple_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UplinkSchedulerSimple, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UplinkSchedulerSimple__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3WimaxConnection__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3WimaxConnection *self)
{
    PyObject *py_retval;
    PyNs3WimaxConnection__PythonHelper *helper = dynamic_cast< PyNs3WimaxConnection__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WimaxConnection__PythonHelper::_wrap_DoInitialize(PyNs3WimaxConnection *self)
{
    PyObject *py_retval;
    PyNs3WimaxConnection__PythonHelper *helper = dynamic_cast< PyNs3WimaxConnection__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WimaxConnection__PythonHelper::_wrap_NotifyNewAggregate(PyNs3WimaxConnection *self)
{
    PyObject *py_retval;
    PyNs3WimaxConnection__PythonHelper *helper = dynamic_cast< PyNs3WimaxConnection__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3WimaxConnection__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxConnection *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxConnection* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxConnection* >(m_pyself)->obj = (ns3::WimaxConnection*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxConnection* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxConnection* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxConnection* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3WimaxConnection__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WimaxConnection__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WimaxConnection__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WimaxConnection__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WimaxConnection__tp_init__0(PyNs3WimaxConnection *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WimaxConnection *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WimaxConnection_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WimaxConnection_Type)
    {
        self->obj = new PyNs3WimaxConnection__PythonHelper(*((PyNs3WimaxConnection *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WimaxConnection__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WimaxConnection(*((PyNs3WimaxConnection *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3WimaxConnection__tp_init__1(PyNs3WimaxConnection *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Cid *cid;
    ns3::Cid::Type type;
    const char *keywords[] = {"cid", "type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Cid_Type, &cid, &type)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WimaxConnection_Type)
    {
        self->obj = new PyNs3WimaxConnection__PythonHelper(*((PyNs3Cid *) cid)->obj, type);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WimaxConnection__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WimaxConnection(*((PyNs3Cid *) cid)->obj, type);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3WimaxConnection__tp_init(PyNs3WimaxConnection *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WimaxConnection__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxConnection__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WimaxConnection_GetFragmentsQueue(PyNs3WimaxConnection *self)
{
    PyObject *py_retval;
    std::list< ns3::Ptr< ns3::Packet const > > retval;
    Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__ *py_std__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__;
    
    retval = self->obj->GetFragmentsQueue();
    py_std__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__ = PyObject_New(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__, &Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt___Type);
    py_std__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__->obj = new std::list< ns3::Ptr< ns3::Packet const > >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxConnection_GetTypeStr(PyNs3WimaxConnection *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetTypeStr();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxConnection_GetSchedulingType(PyNs3WimaxConnection *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSchedulingType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}



PyObject *
_wrap_PyNs3WimaxConnection_HasPackets__0(PyNs3WimaxConnection *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    bool retval;
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->HasPackets();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxConnection_HasPackets__1(PyNs3WimaxConnection *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    bool retval;
    ns3::MacHeaderType::HeaderType packetType;
    const char *keywords[] = {"packetType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &packetType)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->HasPackets(packetType);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject * _wrap_PyNs3WimaxConnection_HasPackets(PyNs3WimaxConnection *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WimaxConnection_HasPackets__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxConnection_HasPackets__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyNs3WimaxConnection_Dequeue__0(PyNs3WimaxConnection *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    ns3::MacHeaderType::HeaderType packetType = ::ns3::MacHeaderType::HEADER_TYPE_GENERIC;
    const char *keywords[] = {"packetType", NULL};
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|i", (char **) keywords, &packetType)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Dequeue(packetType);
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxConnection_Dequeue__1(PyNs3WimaxConnection *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    ns3::MacHeaderType::HeaderType packetType;
    unsigned int availableByte;
    const char *keywords[] = {"packetType", "availableByte", NULL};
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iI", (char **) keywords, &packetType, &availableByte)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Dequeue(packetType, availableByte);
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}

PyObject * _wrap_PyNs3WimaxConnection_Dequeue(PyNs3WimaxConnection *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WimaxConnection_Dequeue__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxConnection_Dequeue__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WimaxConnection_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WimaxConnection::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxConnection_GetType(PyNs3WimaxConnection *self)
{
    PyObject *py_retval;
    ns3::Cid::Type retval;
    
    retval = self->obj->GetType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxConnection_GetCid(PyNs3WimaxConnection *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->GetCid();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxConnection_Enqueue(PyNs3WimaxConnection *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3MacHeaderType *hdrType;
    PyNs3GenericMacHeader *hdr;
    const char *keywords[] = {"packet", "hdrType", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3MacHeaderType_Type, &hdrType, &PyNs3GenericMacHeader_Type, &hdr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3MacHeaderType *) hdrType)->obj, *((PyNs3GenericMacHeader *) hdr)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxConnection_ClearFragmentsQueue(PyNs3WimaxConnection *self)
{
    PyObject *py_retval;
    
    self->obj->ClearFragmentsQueue();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxConnection_GetQueue(PyNs3WimaxConnection *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxMacQueue > retval;
    PyNs3WimaxMacQueue *py_WimaxMacQueue;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetQueue();
    if (!(const_cast<ns3::WimaxMacQueue *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxMacQueue *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WimaxMacQueue = NULL;
    } else {
        py_WimaxMacQueue = (PyNs3WimaxMacQueue *) wrapper_lookup_iter->second;
        Py_INCREF(py_WimaxMacQueue);
    }
    
    if (py_WimaxMacQueue == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxMacQueue *> (ns3::PeekPointer (retval)))), &PyNs3WimaxMacQueue_Type);
        py_WimaxMacQueue = PyObject_GC_New(PyNs3WimaxMacQueue, wrapper_type);
        py_WimaxMacQueue->inst_dict = NULL;
    
        py_WimaxMacQueue->inst_dict = NULL;
        py_WimaxMacQueue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WimaxMacQueue *> (ns3::PeekPointer (retval))->Ref();
        py_WimaxMacQueue->obj = const_cast<ns3::WimaxMacQueue *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxMacQueue->obj] = (PyObject *) py_WimaxMacQueue;
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxMacQueue);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxConnection_FragmentEnqueue(PyNs3WimaxConnection *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *fragment;
    ns3::Packet *fragment_ptr;
    const char *keywords[] = {"fragment", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &fragment)) {
        return NULL;
    }
    fragment_ptr = (fragment ? fragment->obj : NULL);
    self->obj->FragmentEnqueue(ns3::Ptr< ns3::Packet  > (fragment_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3WimaxConnection__copy__(PyNs3WimaxConnection *self)
{

    PyNs3WimaxConnection *py_copy;
    py_copy = PyObject_GC_New(PyNs3WimaxConnection, &PyNs3WimaxConnection_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::WimaxConnection(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WimaxConnection_methods[] = {
    {(char *) "GetFragmentsQueue", (PyCFunction) _wrap_PyNs3WimaxConnection_GetFragmentsQueue, METH_NOARGS, "GetFragmentsQueue()\n\n" },
    {(char *) "GetTypeStr", (PyCFunction) _wrap_PyNs3WimaxConnection_GetTypeStr, METH_NOARGS, "GetTypeStr()\n\n" },
    {(char *) "GetSchedulingType", (PyCFunction) _wrap_PyNs3WimaxConnection_GetSchedulingType, METH_NOARGS, "GetSchedulingType()\n\n" },
    {(char *) "HasPackets", (PyCFunction) _wrap_PyNs3WimaxConnection_HasPackets, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Dequeue", (PyCFunction) _wrap_PyNs3WimaxConnection_Dequeue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WimaxConnection_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetType", (PyCFunction) _wrap_PyNs3WimaxConnection_GetType, METH_NOARGS, "GetType()\n\n" },
    {(char *) "GetCid", (PyCFunction) _wrap_PyNs3WimaxConnection_GetCid, METH_NOARGS, "GetCid()\n\n" },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3WimaxConnection_Enqueue, METH_KEYWORDS|METH_VARARGS, "Enqueue(packet, hdrType, hdr)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: hdrType: ns3::MacHeaderType const &\ntype: hdr: ns3::GenericMacHeader const &" },
    {(char *) "ClearFragmentsQueue", (PyCFunction) _wrap_PyNs3WimaxConnection_ClearFragmentsQueue, METH_NOARGS, "ClearFragmentsQueue()\n\n" },
    {(char *) "GetQueue", (PyCFunction) _wrap_PyNs3WimaxConnection_GetQueue, METH_NOARGS, "GetQueue()\n\n" },
    {(char *) "FragmentEnqueue", (PyCFunction) _wrap_PyNs3WimaxConnection_FragmentEnqueue, METH_KEYWORDS|METH_VARARGS, "FragmentEnqueue(fragment)\n\ntype: fragment: ns3::Ptr< ns3::Packet const >" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3WimaxConnection__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3WimaxConnection__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3WimaxConnection__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WimaxConnection__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WimaxConnection__tp_clear(PyNs3WimaxConnection *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WimaxConnection *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WimaxConnection__tp_traverse(PyNs3WimaxConnection *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3WimaxConnection__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WimaxConnection__tp_dealloc(PyNs3WimaxConnection *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WimaxConnection__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WimaxConnection__tp_richcompare (PyNs3WimaxConnection *PYBINDGEN_UNUSED(self), PyNs3WimaxConnection *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WimaxConnection_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WimaxConnection_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.WimaxConnection",            /* tp_name */
    sizeof(PyNs3WimaxConnection),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WimaxConnection__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WimaxConnection(cid, type)\nWimaxConnection(arg0)",                        /* Documentation string */
    (traverseproc)PyNs3WimaxConnection__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WimaxConnection__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WimaxConnection__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WimaxConnection_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WimaxConnection, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WimaxConnection__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3WimaxMacQueue__tp_init__0(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WimaxMacQueue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WimaxMacQueue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WimaxMacQueue(*((PyNs3WimaxMacQueue *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WimaxMacQueue__tp_init__1(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WimaxMacQueue();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WimaxMacQueue__tp_init__2(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    unsigned int maxSize;
    const char *keywords[] = {"maxSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &maxSize)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WimaxMacQueue(maxSize);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WimaxMacQueue__tp_init(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3WimaxMacQueue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxMacQueue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxMacQueue__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WimaxMacQueue_SetFragmentOffset(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::MacHeaderType::HeaderType packetType;
    unsigned int offset;
    const char *keywords[] = {"packetType", "offset", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iI", (char **) keywords, &packetType, &offset)) {
        return NULL;
    }
    self->obj->SetFragmentOffset(packetType, offset);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3WimaxMacQueue_Peek__0(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    PyNs3GenericMacHeader *hdr;
    const char *keywords[] = {"hdr", NULL};
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3GenericMacHeader_Type, &hdr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Peek(*((PyNs3GenericMacHeader *) hdr)->obj);
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxMacQueue_Peek__1(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    PyNs3GenericMacHeader *hdr;
    PyNs3Time *timeStamp;
    const char *keywords[] = {"hdr", "timeStamp", NULL};
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3GenericMacHeader_Type, &hdr, &PyNs3Time_Type, &timeStamp)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Peek(*((PyNs3GenericMacHeader *) hdr)->obj, *((PyNs3Time *) timeStamp)->obj);
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxMacQueue_Peek__2(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    ns3::MacHeaderType::HeaderType packetType;
    const char *keywords[] = {"packetType", NULL};
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &packetType)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Peek(packetType);
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxMacQueue_Peek__3(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    ns3::MacHeaderType::HeaderType packetType;
    PyNs3Time *timeStamp;
    const char *keywords[] = {"packetType", "timeStamp", NULL};
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &packetType, &PyNs3Time_Type, &timeStamp)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Peek(packetType, *((PyNs3Time *) timeStamp)->obj);
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}

PyObject * _wrap_PyNs3WimaxMacQueue_Peek(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyNs3WimaxMacQueue_Peek__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxMacQueue_Peek__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxMacQueue_Peek__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxMacQueue_Peek__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WimaxMacQueue_GetFirstPacketHdrSize(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    ns3::MacHeaderType::HeaderType packetType;
    const char *keywords[] = {"packetType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &packetType)) {
        return NULL;
    }
    retval = self->obj->GetFirstPacketHdrSize(packetType);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacQueue_GetQueueLengthWithMACOverhead(PyNs3WimaxMacQueue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetQueueLengthWithMACOverhead();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacQueue_GetFirstPacketRequiredByte(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    ns3::MacHeaderType::HeaderType packetType;
    const char *keywords[] = {"packetType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &packetType)) {
        return NULL;
    }
    retval = self->obj->GetFirstPacketRequiredByte(packetType);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}



PyObject *
_wrap_PyNs3WimaxMacQueue_Dequeue__0(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    ns3::MacHeaderType::HeaderType packetType;
    const char *keywords[] = {"packetType", NULL};
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &packetType)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Dequeue(packetType);
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxMacQueue_Dequeue__1(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    ns3::MacHeaderType::HeaderType packetType;
    unsigned int availableByte;
    const char *keywords[] = {"packetType", "availableByte", NULL};
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iI", (char **) keywords, &packetType, &availableByte)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Dequeue(packetType, availableByte);
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}

PyObject * _wrap_PyNs3WimaxMacQueue_Dequeue(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WimaxMacQueue_Dequeue__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxMacQueue_Dequeue__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WimaxMacQueue_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WimaxMacQueue::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacQueue_GetMaxSize(PyNs3WimaxMacQueue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMaxSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacQueue_GetFirstPacketPayloadSize(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    ns3::MacHeaderType::HeaderType packetType;
    const char *keywords[] = {"packetType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &packetType)) {
        return NULL;
    }
    retval = self->obj->GetFirstPacketPayloadSize(packetType);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacQueue_GetSize(PyNs3WimaxMacQueue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacQueue_CheckForFragmentation(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    ns3::MacHeaderType::HeaderType packetType;
    const char *keywords[] = {"packetType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &packetType)) {
        return NULL;
    }
    retval = self->obj->CheckForFragmentation(packetType);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}



PyObject *
_wrap_PyNs3WimaxMacQueue_IsEmpty__0(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    bool retval;
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->IsEmpty();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxMacQueue_IsEmpty__1(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    bool retval;
    ns3::MacHeaderType::HeaderType packetType;
    const char *keywords[] = {"packetType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &packetType)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->IsEmpty(packetType);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject * _wrap_PyNs3WimaxMacQueue_IsEmpty(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WimaxMacQueue_IsEmpty__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxMacQueue_IsEmpty__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WimaxMacQueue_Enqueue(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3MacHeaderType *hdrType;
    PyNs3GenericMacHeader *hdr;
    const char *keywords[] = {"packet", "hdrType", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3MacHeaderType_Type, &hdrType, &PyNs3GenericMacHeader_Type, &hdr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3MacHeaderType *) hdrType)->obj, *((PyNs3GenericMacHeader *) hdr)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacQueue_GetNBytes(PyNs3WimaxMacQueue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNBytes();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacQueue_GetPacketQueue(PyNs3WimaxMacQueue *self)
{
    PyObject *py_retval;
    std::deque< ns3::WimaxMacQueue::QueueElement > retval;
    Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__ *py_std__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__;
    
    retval = self->obj->GetPacketQueue();
    py_std__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__ = PyObject_New(Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__, &Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt___Type);
    py_std__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__->obj = new std::deque< ns3::WimaxMacQueue::QueueElement >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacQueue_SetFragmentNumber(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::MacHeaderType::HeaderType packetType;
    const char *keywords[] = {"packetType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &packetType)) {
        return NULL;
    }
    self->obj->SetFragmentNumber(packetType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacQueue_SetMaxSize(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int maxSize;
    const char *keywords[] = {"maxSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &maxSize)) {
        return NULL;
    }
    self->obj->SetMaxSize(maxSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacQueue_SetFragmentation(PyNs3WimaxMacQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::MacHeaderType::HeaderType packetType;
    const char *keywords[] = {"packetType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &packetType)) {
        return NULL;
    }
    self->obj->SetFragmentation(packetType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3WimaxMacQueue__copy__(PyNs3WimaxMacQueue *self)
{

    PyNs3WimaxMacQueue *py_copy;
    py_copy = PyObject_GC_New(PyNs3WimaxMacQueue, &PyNs3WimaxMacQueue_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::WimaxMacQueue(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WimaxMacQueue_methods[] = {
    {(char *) "SetFragmentOffset", (PyCFunction) _wrap_PyNs3WimaxMacQueue_SetFragmentOffset, METH_KEYWORDS|METH_VARARGS, "SetFragmentOffset(packetType, offset)\n\ntype: packetType: ns3::MacHeaderType::HeaderType\ntype: offset: uint32_t" },
    {(char *) "Peek", (PyCFunction) _wrap_PyNs3WimaxMacQueue_Peek, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetFirstPacketHdrSize", (PyCFunction) _wrap_PyNs3WimaxMacQueue_GetFirstPacketHdrSize, METH_KEYWORDS|METH_VARARGS, "GetFirstPacketHdrSize(packetType)\n\ntype: packetType: ns3::MacHeaderType::HeaderType" },
    {(char *) "GetQueueLengthWithMACOverhead", (PyCFunction) _wrap_PyNs3WimaxMacQueue_GetQueueLengthWithMACOverhead, METH_NOARGS, "GetQueueLengthWithMACOverhead()\n\n" },
    {(char *) "GetFirstPacketRequiredByte", (PyCFunction) _wrap_PyNs3WimaxMacQueue_GetFirstPacketRequiredByte, METH_KEYWORDS|METH_VARARGS, "GetFirstPacketRequiredByte(packetType)\n\ntype: packetType: ns3::MacHeaderType::HeaderType" },
    {(char *) "Dequeue", (PyCFunction) _wrap_PyNs3WimaxMacQueue_Dequeue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WimaxMacQueue_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetMaxSize", (PyCFunction) _wrap_PyNs3WimaxMacQueue_GetMaxSize, METH_NOARGS, "GetMaxSize()\n\n" },
    {(char *) "GetFirstPacketPayloadSize", (PyCFunction) _wrap_PyNs3WimaxMacQueue_GetFirstPacketPayloadSize, METH_KEYWORDS|METH_VARARGS, "GetFirstPacketPayloadSize(packetType)\n\ntype: packetType: ns3::MacHeaderType::HeaderType" },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3WimaxMacQueue_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "CheckForFragmentation", (PyCFunction) _wrap_PyNs3WimaxMacQueue_CheckForFragmentation, METH_KEYWORDS|METH_VARARGS, "CheckForFragmentation(packetType)\n\ntype: packetType: ns3::MacHeaderType::HeaderType" },
    {(char *) "IsEmpty", (PyCFunction) _wrap_PyNs3WimaxMacQueue_IsEmpty, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3WimaxMacQueue_Enqueue, METH_KEYWORDS|METH_VARARGS, "Enqueue(packet, hdrType, hdr)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: hdrType: ns3::MacHeaderType const &\ntype: hdr: ns3::GenericMacHeader const &" },
    {(char *) "GetNBytes", (PyCFunction) _wrap_PyNs3WimaxMacQueue_GetNBytes, METH_NOARGS, "GetNBytes()\n\n" },
    {(char *) "GetPacketQueue", (PyCFunction) _wrap_PyNs3WimaxMacQueue_GetPacketQueue, METH_NOARGS, "GetPacketQueue()\n\n" },
    {(char *) "SetFragmentNumber", (PyCFunction) _wrap_PyNs3WimaxMacQueue_SetFragmentNumber, METH_KEYWORDS|METH_VARARGS, "SetFragmentNumber(packetType)\n\ntype: packetType: ns3::MacHeaderType::HeaderType" },
    {(char *) "SetMaxSize", (PyCFunction) _wrap_PyNs3WimaxMacQueue_SetMaxSize, METH_KEYWORDS|METH_VARARGS, "SetMaxSize(maxSize)\n\ntype: maxSize: uint32_t" },
    {(char *) "SetFragmentation", (PyCFunction) _wrap_PyNs3WimaxMacQueue_SetFragmentation, METH_KEYWORDS|METH_VARARGS, "SetFragmentation(packetType)\n\ntype: packetType: ns3::MacHeaderType::HeaderType" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WimaxMacQueue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WimaxMacQueue__tp_clear(PyNs3WimaxMacQueue *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WimaxMacQueue *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WimaxMacQueue__tp_traverse(PyNs3WimaxMacQueue *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3WimaxMacQueue__tp_dealloc(PyNs3WimaxMacQueue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WimaxMacQueue__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WimaxMacQueue__tp_richcompare (PyNs3WimaxMacQueue *PYBINDGEN_UNUSED(self), PyNs3WimaxMacQueue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WimaxMacQueue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WimaxMacQueue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.WimaxMacQueue",            /* tp_name */
    sizeof(PyNs3WimaxMacQueue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WimaxMacQueue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WimaxMacQueue(maxSize)\nWimaxMacQueue(arg0)\nWimaxMacQueue()",                        /* Documentation string */
    (traverseproc)PyNs3WimaxMacQueue__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WimaxMacQueue__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WimaxMacQueue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WimaxMacQueue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WimaxMacQueue, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WimaxMacQueue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WimaxMacQueueQueueElement_wrapper_registry;
static PyObject* _wrap_PyNs3WimaxMacQueueQueueElement__get_m_fragmentNumber(PyNs3WimaxMacQueueQueueElement *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->m_fragmentNumber));
    return py_retval;
}
static int _wrap_PyNs3WimaxMacQueueQueueElement__set_m_fragmentNumber(PyNs3WimaxMacQueueQueueElement *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->m_fragmentNumber)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WimaxMacQueueQueueElement__get_m_fragmentOffset(PyNs3WimaxMacQueueQueueElement *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->m_fragmentOffset));
    return py_retval;
}
static int _wrap_PyNs3WimaxMacQueueQueueElement__set_m_fragmentOffset(PyNs3WimaxMacQueueQueueElement *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->m_fragmentOffset)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WimaxMacQueueQueueElement__get_m_fragmentation(PyNs3WimaxMacQueueQueueElement *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_fragmentation));
    return py_retval;
}
static int _wrap_PyNs3WimaxMacQueueQueueElement__set_m_fragmentation(PyNs3WimaxMacQueueQueueElement *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_fragmentation = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WimaxMacQueueQueueElement__get_m_hdr(PyNs3WimaxMacQueueQueueElement *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3GenericMacHeader *py_GenericMacHeader;
    
    py_GenericMacHeader = PyObject_GC_New(PyNs3GenericMacHeader, &PyNs3GenericMacHeader_Type);
    py_GenericMacHeader->inst_dict = NULL;
    py_GenericMacHeader->inst_dict = NULL;
    py_GenericMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_GenericMacHeader->obj = new ns3::GenericMacHeader(self->obj->m_hdr);
    PyNs3ObjectBase_wrapper_registry[(void *) py_GenericMacHeader->obj] = (PyObject *) py_GenericMacHeader;
    py_retval = Py_BuildValue((char *) "N", py_GenericMacHeader);
    return py_retval;
}
static int _wrap_PyNs3WimaxMacQueueQueueElement__set_m_hdr(PyNs3WimaxMacQueueQueueElement *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3GenericMacHeader *tmp_GenericMacHeader;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3GenericMacHeader_Type, &tmp_GenericMacHeader)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_hdr = *tmp_GenericMacHeader->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WimaxMacQueueQueueElement__get_m_hdrType(PyNs3WimaxMacQueueQueueElement *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3MacHeaderType *py_MacHeaderType;
    
    py_MacHeaderType = PyObject_GC_New(PyNs3MacHeaderType, &PyNs3MacHeaderType_Type);
    py_MacHeaderType->inst_dict = NULL;
    py_MacHeaderType->inst_dict = NULL;
    py_MacHeaderType->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MacHeaderType->obj = new ns3::MacHeaderType(self->obj->m_hdrType);
    PyNs3ObjectBase_wrapper_registry[(void *) py_MacHeaderType->obj] = (PyObject *) py_MacHeaderType;
    py_retval = Py_BuildValue((char *) "N", py_MacHeaderType);
    return py_retval;
}
static int _wrap_PyNs3WimaxMacQueueQueueElement__set_m_hdrType(PyNs3WimaxMacQueueQueueElement *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3MacHeaderType *tmp_MacHeaderType;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3MacHeaderType_Type, &tmp_MacHeaderType)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_hdrType = *tmp_MacHeaderType->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WimaxMacQueueQueueElement__get_m_packet(PyNs3WimaxMacQueueQueueElement *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->m_packet)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->m_packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->m_packet)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->m_packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->m_packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}
static int _wrap_PyNs3WimaxMacQueueQueueElement__set_m_packet(PyNs3WimaxMacQueueQueueElement *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Packet *tmp_Packet;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Packet_Type, &tmp_Packet)) {
        Py_DECREF(py_retval);
        return -1;
    }
    // dangerous!
    self->obj->m_packet = ns3::Ptr< ns3::Packet  > (tmp_Packet->obj);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WimaxMacQueueQueueElement__get_m_timeStamp(PyNs3WimaxMacQueueQueueElement *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(self->obj->m_timeStamp);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}
static int _wrap_PyNs3WimaxMacQueueQueueElement__set_m_timeStamp(PyNs3WimaxMacQueueQueueElement *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_timeStamp = *tmp_Time->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3WimaxMacQueueQueueElement__getsets[] = {
    {
        (char*) "m_fragmentation", /* attribute name */
        (getter) _wrap_PyNs3WimaxMacQueueQueueElement__get_m_fragmentation, /* C function to get the attribute */
        (setter) _wrap_PyNs3WimaxMacQueueQueueElement__set_m_fragmentation, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_fragmentOffset", /* attribute name */
        (getter) _wrap_PyNs3WimaxMacQueueQueueElement__get_m_fragmentOffset, /* C function to get the attribute */
        (setter) _wrap_PyNs3WimaxMacQueueQueueElement__set_m_fragmentOffset, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_fragmentNumber", /* attribute name */
        (getter) _wrap_PyNs3WimaxMacQueueQueueElement__get_m_fragmentNumber, /* C function to get the attribute */
        (setter) _wrap_PyNs3WimaxMacQueueQueueElement__set_m_fragmentNumber, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_hdrType", /* attribute name */
        (getter) _wrap_PyNs3WimaxMacQueueQueueElement__get_m_hdrType, /* C function to get the attribute */
        (setter) _wrap_PyNs3WimaxMacQueueQueueElement__set_m_hdrType, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_packet", /* attribute name */
        (getter) _wrap_PyNs3WimaxMacQueueQueueElement__get_m_packet, /* C function to get the attribute */
        (setter) _wrap_PyNs3WimaxMacQueueQueueElement__set_m_packet, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_hdr", /* attribute name */
        (getter) _wrap_PyNs3WimaxMacQueueQueueElement__get_m_hdr, /* C function to get the attribute */
        (setter) _wrap_PyNs3WimaxMacQueueQueueElement__set_m_hdr, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_timeStamp", /* attribute name */
        (getter) _wrap_PyNs3WimaxMacQueueQueueElement__get_m_timeStamp, /* C function to get the attribute */
        (setter) _wrap_PyNs3WimaxMacQueueQueueElement__set_m_timeStamp, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3WimaxMacQueueQueueElement__tp_init__0(PyNs3WimaxMacQueueQueueElement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WimaxMacQueueQueueElement *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WimaxMacQueueQueueElement_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WimaxMacQueue::QueueElement(*((PyNs3WimaxMacQueueQueueElement *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WimaxMacQueueQueueElement__tp_init__1(PyNs3WimaxMacQueueQueueElement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WimaxMacQueue::QueueElement();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WimaxMacQueueQueueElement__tp_init__2(PyNs3WimaxMacQueueQueueElement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3MacHeaderType *hdrType;
    PyNs3GenericMacHeader *hdr;
    PyNs3Time *timeStamp;
    const char *keywords[] = {"packet", "hdrType", "hdr", "timeStamp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3MacHeaderType_Type, &hdrType, &PyNs3GenericMacHeader_Type, &hdr, &PyNs3Time_Type, &timeStamp)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj = new ns3::WimaxMacQueue::QueueElement(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3MacHeaderType *) hdrType)->obj, *((PyNs3GenericMacHeader *) hdr)->obj, *((PyNs3Time *) timeStamp)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WimaxMacQueueQueueElement__tp_init(PyNs3WimaxMacQueueQueueElement *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3WimaxMacQueueQueueElement__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxMacQueueQueueElement__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxMacQueueQueueElement__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WimaxMacQueueQueueElement_GetSize(PyNs3WimaxMacQueueQueueElement *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacQueueQueueElement_SetFragmentOffset(PyNs3WimaxMacQueueQueueElement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int offset;
    const char *keywords[] = {"offset", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &offset)) {
        return NULL;
    }
    self->obj->SetFragmentOffset(offset);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacQueueQueueElement_SetFragmentNumber(PyNs3WimaxMacQueueQueueElement *self)
{
    PyObject *py_retval;
    
    self->obj->SetFragmentNumber();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacQueueQueueElement_SetFragmentation(PyNs3WimaxMacQueueQueueElement *self)
{
    PyObject *py_retval;
    
    self->obj->SetFragmentation();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3WimaxMacQueueQueueElement__copy__(PyNs3WimaxMacQueueQueueElement *self)
{

    PyNs3WimaxMacQueueQueueElement *py_copy;
    py_copy = PyObject_New(PyNs3WimaxMacQueueQueueElement, &PyNs3WimaxMacQueueQueueElement_Type);
    py_copy->obj = new ns3::WimaxMacQueue::QueueElement(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WimaxMacQueueQueueElement_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WimaxMacQueueQueueElement_methods[] = {
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3WimaxMacQueueQueueElement_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "SetFragmentOffset", (PyCFunction) _wrap_PyNs3WimaxMacQueueQueueElement_SetFragmentOffset, METH_KEYWORDS|METH_VARARGS, "SetFragmentOffset(offset)\n\ntype: offset: uint32_t" },
    {(char *) "SetFragmentNumber", (PyCFunction) _wrap_PyNs3WimaxMacQueueQueueElement_SetFragmentNumber, METH_NOARGS, "SetFragmentNumber()\n\n" },
    {(char *) "SetFragmentation", (PyCFunction) _wrap_PyNs3WimaxMacQueueQueueElement_SetFragmentation, METH_NOARGS, "SetFragmentation()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WimaxMacQueueQueueElement__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WimaxMacQueueQueueElement__tp_dealloc(PyNs3WimaxMacQueueQueueElement *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WimaxMacQueueQueueElement_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WimaxMacQueueQueueElement_wrapper_registry.end()) {
        PyNs3WimaxMacQueueQueueElement_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::WimaxMacQueue::QueueElement *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WimaxMacQueueQueueElement__tp_richcompare (PyNs3WimaxMacQueueQueueElement *PYBINDGEN_UNUSED(self), PyNs3WimaxMacQueueQueueElement *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WimaxMacQueueQueueElement_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WimaxMacQueueQueueElement_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.WimaxMacQueue.QueueElement",            /* tp_name */
    sizeof(PyNs3WimaxMacQueueQueueElement),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WimaxMacQueueQueueElement__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "QueueElement(packet, hdrType, hdr, timeStamp)\nQueueElement(arg0)\nQueueElement()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WimaxMacQueueQueueElement__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WimaxMacQueueQueueElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3WimaxMacQueueQueueElement__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WimaxMacQueueQueueElement__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3WimaxMacToMacHeader__tp_init__0(PyNs3WimaxMacToMacHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WimaxMacToMacHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WimaxMacToMacHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WimaxMacToMacHeader(*((PyNs3WimaxMacToMacHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WimaxMacToMacHeader__tp_init__1(PyNs3WimaxMacToMacHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WimaxMacToMacHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3WimaxMacToMacHeader__tp_init__2(PyNs3WimaxMacToMacHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    unsigned int len;
    const char *keywords[] = {"len", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WimaxMacToMacHeader(len);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3WimaxMacToMacHeader__tp_init(PyNs3WimaxMacToMacHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3WimaxMacToMacHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxMacToMacHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxMacToMacHeader__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WimaxMacToMacHeader_Deserialize(PyNs3WimaxMacToMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacToMacHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WimaxMacToMacHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacToMacHeader_Serialize(PyNs3WimaxMacToMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacToMacHeader_GetInstanceTypeId(PyNs3WimaxMacToMacHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacToMacHeader_GetSerializedSize(PyNs3WimaxMacToMacHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxMacToMacHeader_GetSizeOfLen(PyNs3WimaxMacToMacHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSizeOfLen();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3WimaxMacToMacHeader__copy__(PyNs3WimaxMacToMacHeader *self)
{

    PyNs3WimaxMacToMacHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3WimaxMacToMacHeader, &PyNs3WimaxMacToMacHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::WimaxMacToMacHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WimaxMacToMacHeader_methods[] = {
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3WimaxMacToMacHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WimaxMacToMacHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3WimaxMacToMacHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3WimaxMacToMacHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3WimaxMacToMacHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetSizeOfLen", (PyCFunction) _wrap_PyNs3WimaxMacToMacHeader_GetSizeOfLen, METH_NOARGS, "GetSizeOfLen()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WimaxMacToMacHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WimaxMacToMacHeader__tp_clear(PyNs3WimaxMacToMacHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WimaxMacToMacHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WimaxMacToMacHeader__tp_traverse(PyNs3WimaxMacToMacHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3WimaxMacToMacHeader__tp_dealloc(PyNs3WimaxMacToMacHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WimaxMacToMacHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WimaxMacToMacHeader__tp_richcompare (PyNs3WimaxMacToMacHeader *PYBINDGEN_UNUSED(self), PyNs3WimaxMacToMacHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WimaxMacToMacHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WimaxMacToMacHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.WimaxMacToMacHeader",            /* tp_name */
    sizeof(PyNs3WimaxMacToMacHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WimaxMacToMacHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WimaxMacToMacHeader(arg0)\nWimaxMacToMacHeader(len)\nWimaxMacToMacHeader()",                        /* Documentation string */
    (traverseproc)PyNs3WimaxMacToMacHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WimaxMacToMacHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WimaxMacToMacHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WimaxMacToMacHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WimaxMacToMacHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WimaxMacToMacHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3WimaxPhy__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'WimaxPhy' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}



PyObject *
_wrap_PyNs3WimaxPhy_GetFrameDuration__0(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Time retval = self->obj->GetFrameDuration();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxPhy_GetFrameDuration__1(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int frameDurationCode;
    const char *keywords[] = {"frameDurationCode", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &frameDurationCode)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    if (frameDurationCode > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Time retval = self->obj->GetFrameDuration(frameDurationCode);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}

PyObject * _wrap_PyNs3WimaxPhy_GetFrameDuration(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WimaxPhy_GetFrameDuration__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxPhy_GetFrameDuration__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetFrameDurationCode(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetFrameDurationCode();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WimaxPhy::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetRtg(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetRtg();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetPsDuration(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetPsDuration();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetTransmissionTime(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int size;
    ns3::WimaxPhy::ModulationType modulationType;
    const char *keywords[] = {"size", "modulationType", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "Ii", (char **) keywords, &size, &modulationType)) {
        return NULL;
    }
    ns3::Time retval = self->obj->GetTransmissionTime(size, modulationType);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_Attach(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WimaxChannel *channel;
    ns3::WimaxChannel *channel_ptr;
    const char *keywords[] = {"channel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WimaxChannel_Type, &channel)) {
        return NULL;
    }
    channel_ptr = (channel ? channel->obj : NULL);
    self->obj->Attach(ns3::Ptr< ns3::WimaxChannel  > (channel_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetDataRates(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    
    self->obj->SetDataRates();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetFrequency(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int frequency;
    const char *keywords[] = {"frequency", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &frequency)) {
        return NULL;
    }
    self->obj->SetFrequency(frequency);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetMobility(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Object > retval;
    PyNs3Object *py_Object;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetMobility();
    if (!(const_cast<ns3::Object *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Object *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Object__PythonHelper).name())
    {
        py_Object = reinterpret_cast< PyNs3Object* >(reinterpret_cast< PyNs3Object__PythonHelper* >(const_cast<ns3::Object *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Object->obj = const_cast<ns3::Object *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Object);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Object *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Object = NULL;
        } else {
            py_Object = (PyNs3Object *) wrapper_lookup_iter->second;
            Py_INCREF(py_Object);
        }
    
        if (py_Object == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Object *> (ns3::PeekPointer (retval)))), &PyNs3Object_Type);
            py_Object = PyObject_GC_New(PyNs3Object, wrapper_type);
            py_Object->inst_dict = NULL;
    
            py_Object->inst_dict = NULL;
            py_Object->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Object *> (ns3::PeekPointer (retval))->Ref();
            py_Object->obj = const_cast<ns3::Object *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Object->obj] = (PyObject *) py_Object;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Object);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetMobility(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Object *mobility;
    ns3::Object *mobility_ptr;
    const char *keywords[] = {"mobility", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Object_Type, &mobility)) {
        return NULL;
    }
    mobility_ptr = (mobility ? mobility->obj : NULL);
    self->obj->SetMobility(ns3::Ptr< ns3::Object  > (mobility_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetScanningCallback(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    
    self->obj->SetScanningCallback();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetTxFrequency(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetTxFrequency();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetPsPerFrame(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetPsPerFrame();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetRxFrequency(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetRxFrequency();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetDuplex(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t rxFrequency;
    uint64_t txFrequency;
    const char *keywords[] = {"rxFrequency", "txFrequency", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "KK", (char **) keywords, &rxFrequency, &txFrequency)) {
        return NULL;
    }
    self->obj->SetDuplex(rxFrequency, txFrequency);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetDataRate(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    ns3::WimaxPhy::ModulationType modulationType;
    const char *keywords[] = {"modulationType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &modulationType)) {
        return NULL;
    }
    retval = self->obj->GetDataRate(modulationType);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetPsPerFrame(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int psPerFrame;
    const char *keywords[] = {"psPerFrame", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &psPerFrame)) {
        return NULL;
    }
    if (psPerFrame > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPsPerFrame(psPerFrame);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetChannelBandwidth(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int channelBandwidth;
    const char *keywords[] = {"channelBandwidth", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &channelBandwidth)) {
        return NULL;
    }
    self->obj->SetChannelBandwidth(channelBandwidth);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetSamplingFactor(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetSamplingFactor();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetChnlSrchTimeoutEvent(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    PyNs3EventId *py_EventId;
    
    ns3::EventId retval = self->obj->GetChnlSrchTimeoutEvent();
    py_EventId = PyObject_New(PyNs3EventId, &PyNs3EventId_Type);
    py_EventId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_EventId->obj = new ns3::EventId(retval);
    PyNs3EventId_wrapper_registry[(void *) py_EventId->obj] = (PyObject *) py_EventId;
    py_retval = Py_BuildValue((char *) "N", py_EventId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetGValue(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetGValue();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetDevice(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WimaxNetDevice *device;
    ns3::WimaxNetDevice *device_ptr;
    const char *keywords[] = {"device", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WimaxNetDevice_Type, &device)) {
        return NULL;
    }
    device_ptr = (device ? device->obj : NULL);
    self->obj->SetDevice(ns3::Ptr< ns3::WimaxNetDevice  > (device_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_DoDispose(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    
    self->obj->DoDispose();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetSymbolDuration(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetSymbolDuration();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetNrCarriers(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nrCarriers;
    const char *keywords[] = {"nrCarriers", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &nrCarriers)) {
        return NULL;
    }
    if (nrCarriers > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNrCarriers(nrCarriers);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetPsDuration(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *psDuration;
    const char *keywords[] = {"psDuration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &psDuration)) {
        return NULL;
    }
    self->obj->SetPsDuration(*((PyNs3Time *) psDuration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetState(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WimaxPhy::PhyState state;
    const char *keywords[] = {"state", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &state)) {
        return NULL;
    }
    self->obj->SetState(state);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetNfft(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetNfft();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetFrequency(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetFrequency();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetSymbolDuration(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *symbolDuration;
    const char *keywords[] = {"symbolDuration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &symbolDuration)) {
        return NULL;
    }
    self->obj->SetSymbolDuration(*((PyNs3Time *) symbolDuration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetNrCarriers(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNrCarriers();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetPsPerSymbol(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int psPerSymbol;
    const char *keywords[] = {"psPerSymbol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &psPerSymbol)) {
        return NULL;
    }
    if (psPerSymbol > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPsPerSymbol(psPerSymbol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetNrSymbols(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t retval;
    unsigned int size;
    ns3::WimaxPhy::ModulationType modulationType;
    const char *keywords[] = {"size", "modulationType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "Ii", (char **) keywords, &size, &modulationType)) {
        return NULL;
    }
    retval = self->obj->GetNrSymbols(size, modulationType);
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetNrBytes(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t retval;
    unsigned int symbols;
    ns3::WimaxPhy::ModulationType modulationType;
    const char *keywords[] = {"symbols", "modulationType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "Ii", (char **) keywords, &symbols, &modulationType)) {
        return NULL;
    }
    retval = self->obj->GetNrBytes(symbols, modulationType);
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetSymbolsPerFrame(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int symbolsPerFrame;
    const char *keywords[] = {"symbolsPerFrame", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &symbolsPerFrame)) {
        return NULL;
    }
    self->obj->SetSymbolsPerFrame(symbolsPerFrame);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetChannelBandwidth(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetChannelBandwidth();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetSimplex(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t frequency;
    const char *keywords[] = {"frequency", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &frequency)) {
        return NULL;
    }
    self->obj->SetSimplex(frequency);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetDevice(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetDevice();
    if (!(const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = reinterpret_cast< PyNs3NetDevice* >(reinterpret_cast< PyNs3NetDevice__PythonHelper* >(const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->inst_dict = NULL;
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_NetDevice);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_IsDuplex(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsDuplex();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_StartScanning(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t frequency;
    PyNs3Time *timeout;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl5> callback_cb_impl;
    const char *keywords[] = {"frequency", "timeout", "callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "KO!O", (char **) keywords, &frequency, &PyNs3Time_Type, &timeout, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl5> (callback);
    self->obj->StartScanning(frequency, *((PyNs3Time *) timeout)->obj, ns3::Callback<void, bool, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetFrameDurationSec(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetFrameDurationSec();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetState(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    ns3::WimaxPhy::PhyState retval;
    
    retval = self->obj->GetState();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetReceiveCallback(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl1> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl1> (callback);
    self->obj->SetReceiveCallback(ns3::Callback<void, ns3::Ptr<ns3::PacketBurst const>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetSamplingFrequency(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetSamplingFrequency();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetSymbolsPerFrame(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSymbolsPerFrame();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetChannel(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxChannel > retval;
    PyNs3WimaxChannel *py_WimaxChannel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetChannel();
    if (!(const_cast<ns3::WimaxChannel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WimaxChannel *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3WimaxChannel__PythonHelper).name())
    {
        py_WimaxChannel = reinterpret_cast< PyNs3WimaxChannel* >(reinterpret_cast< PyNs3WimaxChannel__PythonHelper* >(const_cast<ns3::WimaxChannel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_WimaxChannel->obj = const_cast<ns3::WimaxChannel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_WimaxChannel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxChannel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WimaxChannel = NULL;
        } else {
            py_WimaxChannel = (PyNs3WimaxChannel *) wrapper_lookup_iter->second;
            Py_INCREF(py_WimaxChannel);
        }
    
        if (py_WimaxChannel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxChannel *> (ns3::PeekPointer (retval)))), &PyNs3WimaxChannel_Type);
            py_WimaxChannel = PyObject_GC_New(PyNs3WimaxChannel, wrapper_type);
            py_WimaxChannel->inst_dict = NULL;
    
            py_WimaxChannel->inst_dict = NULL;
            py_WimaxChannel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WimaxChannel *> (ns3::PeekPointer (retval))->Ref();
            py_WimaxChannel->obj = const_cast<ns3::WimaxChannel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxChannel->obj] = (PyObject *) py_WimaxChannel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxChannel);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetScanningFrequency(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetScanningFrequency();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetTtg(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetTtg();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_AssignStreams(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetPhyParameters(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    
    self->obj->SetPhyParameters();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_SetFrameDuration(PyNs3WimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *frameDuration;
    const char *keywords[] = {"frameDuration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &frameDuration)) {
        return NULL;
    }
    self->obj->SetFrameDuration(*((PyNs3Time *) frameDuration)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetPsPerSymbol(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetPsPerSymbol();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxPhy_GetPhyType(PyNs3WimaxPhy *self)
{
    PyObject *py_retval;
    ns3::WimaxPhy::PhyType retval;
    
    retval = self->obj->GetPhyType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

static PyMethodDef PyNs3WimaxPhy_methods[] = {
    {(char *) "GetFrameDuration", (PyCFunction) _wrap_PyNs3WimaxPhy_GetFrameDuration, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetFrameDurationCode", (PyCFunction) _wrap_PyNs3WimaxPhy_GetFrameDurationCode, METH_NOARGS, "GetFrameDurationCode()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WimaxPhy_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetRtg", (PyCFunction) _wrap_PyNs3WimaxPhy_GetRtg, METH_NOARGS, "GetRtg()\n\n" },
    {(char *) "GetPsDuration", (PyCFunction) _wrap_PyNs3WimaxPhy_GetPsDuration, METH_NOARGS, "GetPsDuration()\n\n" },
    {(char *) "GetTransmissionTime", (PyCFunction) _wrap_PyNs3WimaxPhy_GetTransmissionTime, METH_KEYWORDS|METH_VARARGS, "GetTransmissionTime(size, modulationType)\n\ntype: size: uint32_t\ntype: modulationType: ns3::WimaxPhy::ModulationType" },
    {(char *) "Attach", (PyCFunction) _wrap_PyNs3WimaxPhy_Attach, METH_KEYWORDS|METH_VARARGS, "Attach(channel)\n\ntype: channel: ns3::Ptr< ns3::WimaxChannel >" },
    {(char *) "SetDataRates", (PyCFunction) _wrap_PyNs3WimaxPhy_SetDataRates, METH_NOARGS, "SetDataRates()\n\n" },
    {(char *) "SetFrequency", (PyCFunction) _wrap_PyNs3WimaxPhy_SetFrequency, METH_KEYWORDS|METH_VARARGS, "SetFrequency(frequency)\n\ntype: frequency: uint32_t" },
    {(char *) "GetMobility", (PyCFunction) _wrap_PyNs3WimaxPhy_GetMobility, METH_NOARGS, "GetMobility()\n\n" },
    {(char *) "SetMobility", (PyCFunction) _wrap_PyNs3WimaxPhy_SetMobility, METH_KEYWORDS|METH_VARARGS, "SetMobility(mobility)\n\ntype: mobility: ns3::Ptr< ns3::Object >" },
    {(char *) "SetScanningCallback", (PyCFunction) _wrap_PyNs3WimaxPhy_SetScanningCallback, METH_NOARGS, "SetScanningCallback()\n\n" },
    {(char *) "GetTxFrequency", (PyCFunction) _wrap_PyNs3WimaxPhy_GetTxFrequency, METH_NOARGS, "GetTxFrequency()\n\n" },
    {(char *) "GetPsPerFrame", (PyCFunction) _wrap_PyNs3WimaxPhy_GetPsPerFrame, METH_NOARGS, "GetPsPerFrame()\n\n" },
    {(char *) "GetRxFrequency", (PyCFunction) _wrap_PyNs3WimaxPhy_GetRxFrequency, METH_NOARGS, "GetRxFrequency()\n\n" },
    {(char *) "SetDuplex", (PyCFunction) _wrap_PyNs3WimaxPhy_SetDuplex, METH_KEYWORDS|METH_VARARGS, "SetDuplex(rxFrequency, txFrequency)\n\ntype: rxFrequency: uint64_t\ntype: txFrequency: uint64_t" },
    {(char *) "GetDataRate", (PyCFunction) _wrap_PyNs3WimaxPhy_GetDataRate, METH_KEYWORDS|METH_VARARGS, "GetDataRate(modulationType)\n\ntype: modulationType: ns3::WimaxPhy::ModulationType" },
    {(char *) "SetPsPerFrame", (PyCFunction) _wrap_PyNs3WimaxPhy_SetPsPerFrame, METH_KEYWORDS|METH_VARARGS, "SetPsPerFrame(psPerFrame)\n\ntype: psPerFrame: uint16_t" },
    {(char *) "SetChannelBandwidth", (PyCFunction) _wrap_PyNs3WimaxPhy_SetChannelBandwidth, METH_KEYWORDS|METH_VARARGS, "SetChannelBandwidth(channelBandwidth)\n\ntype: channelBandwidth: uint32_t" },
    {(char *) "GetSamplingFactor", (PyCFunction) _wrap_PyNs3WimaxPhy_GetSamplingFactor, METH_NOARGS, "GetSamplingFactor()\n\n" },
    {(char *) "GetChnlSrchTimeoutEvent", (PyCFunction) _wrap_PyNs3WimaxPhy_GetChnlSrchTimeoutEvent, METH_NOARGS, "GetChnlSrchTimeoutEvent()\n\n" },
    {(char *) "GetGValue", (PyCFunction) _wrap_PyNs3WimaxPhy_GetGValue, METH_NOARGS, "GetGValue()\n\n" },
    {(char *) "SetDevice", (PyCFunction) _wrap_PyNs3WimaxPhy_SetDevice, METH_KEYWORDS|METH_VARARGS, "SetDevice(device)\n\ntype: device: ns3::Ptr< ns3::WimaxNetDevice >" },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3WimaxPhy_DoDispose, METH_NOARGS, "DoDispose()\n\n" },
    {(char *) "GetSymbolDuration", (PyCFunction) _wrap_PyNs3WimaxPhy_GetSymbolDuration, METH_NOARGS, "GetSymbolDuration()\n\n" },
    {(char *) "SetNrCarriers", (PyCFunction) _wrap_PyNs3WimaxPhy_SetNrCarriers, METH_KEYWORDS|METH_VARARGS, "SetNrCarriers(nrCarriers)\n\ntype: nrCarriers: uint8_t" },
    {(char *) "SetPsDuration", (PyCFunction) _wrap_PyNs3WimaxPhy_SetPsDuration, METH_KEYWORDS|METH_VARARGS, "SetPsDuration(psDuration)\n\ntype: psDuration: ns3::Time" },
    {(char *) "SetState", (PyCFunction) _wrap_PyNs3WimaxPhy_SetState, METH_KEYWORDS|METH_VARARGS, "SetState(state)\n\ntype: state: ns3::WimaxPhy::PhyState" },
    {(char *) "GetNfft", (PyCFunction) _wrap_PyNs3WimaxPhy_GetNfft, METH_NOARGS, "GetNfft()\n\n" },
    {(char *) "GetFrequency", (PyCFunction) _wrap_PyNs3WimaxPhy_GetFrequency, METH_NOARGS, "GetFrequency()\n\n" },
    {(char *) "SetSymbolDuration", (PyCFunction) _wrap_PyNs3WimaxPhy_SetSymbolDuration, METH_KEYWORDS|METH_VARARGS, "SetSymbolDuration(symbolDuration)\n\ntype: symbolDuration: ns3::Time" },
    {(char *) "GetNrCarriers", (PyCFunction) _wrap_PyNs3WimaxPhy_GetNrCarriers, METH_NOARGS, "GetNrCarriers()\n\n" },
    {(char *) "SetPsPerSymbol", (PyCFunction) _wrap_PyNs3WimaxPhy_SetPsPerSymbol, METH_KEYWORDS|METH_VARARGS, "SetPsPerSymbol(psPerSymbol)\n\ntype: psPerSymbol: uint16_t" },
    {(char *) "GetNrSymbols", (PyCFunction) _wrap_PyNs3WimaxPhy_GetNrSymbols, METH_KEYWORDS|METH_VARARGS, "GetNrSymbols(size, modulationType)\n\ntype: size: uint32_t\ntype: modulationType: ns3::WimaxPhy::ModulationType" },
    {(char *) "GetNrBytes", (PyCFunction) _wrap_PyNs3WimaxPhy_GetNrBytes, METH_KEYWORDS|METH_VARARGS, "GetNrBytes(symbols, modulationType)\n\ntype: symbols: uint32_t\ntype: modulationType: ns3::WimaxPhy::ModulationType" },
    {(char *) "SetSymbolsPerFrame", (PyCFunction) _wrap_PyNs3WimaxPhy_SetSymbolsPerFrame, METH_KEYWORDS|METH_VARARGS, "SetSymbolsPerFrame(symbolsPerFrame)\n\ntype: symbolsPerFrame: uint32_t" },
    {(char *) "GetChannelBandwidth", (PyCFunction) _wrap_PyNs3WimaxPhy_GetChannelBandwidth, METH_NOARGS, "GetChannelBandwidth()\n\n" },
    {(char *) "SetSimplex", (PyCFunction) _wrap_PyNs3WimaxPhy_SetSimplex, METH_KEYWORDS|METH_VARARGS, "SetSimplex(frequency)\n\ntype: frequency: uint64_t" },
    {(char *) "GetDevice", (PyCFunction) _wrap_PyNs3WimaxPhy_GetDevice, METH_NOARGS, "GetDevice()\n\n" },
    {(char *) "IsDuplex", (PyCFunction) _wrap_PyNs3WimaxPhy_IsDuplex, METH_NOARGS, "IsDuplex()\n\n" },
    {(char *) "StartScanning", (PyCFunction) _wrap_PyNs3WimaxPhy_StartScanning, METH_KEYWORDS|METH_VARARGS, "StartScanning(frequency, timeout, callback)\n\ntype: frequency: uint64_t\ntype: timeout: ns3::Time\ntype: callback: ns3::Callback< void, bool, unsigned long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetFrameDurationSec", (PyCFunction) _wrap_PyNs3WimaxPhy_GetFrameDurationSec, METH_NOARGS, "GetFrameDurationSec()\n\n" },
    {(char *) "GetState", (PyCFunction) _wrap_PyNs3WimaxPhy_GetState, METH_NOARGS, "GetState()\n\n" },
    {(char *) "SetReceiveCallback", (PyCFunction) _wrap_PyNs3WimaxPhy_SetReceiveCallback, METH_KEYWORDS|METH_VARARGS, "SetReceiveCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::Ptr< ns3::PacketBurst const >, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetSamplingFrequency", (PyCFunction) _wrap_PyNs3WimaxPhy_GetSamplingFrequency, METH_NOARGS, "GetSamplingFrequency()\n\n" },
    {(char *) "GetSymbolsPerFrame", (PyCFunction) _wrap_PyNs3WimaxPhy_GetSymbolsPerFrame, METH_NOARGS, "GetSymbolsPerFrame()\n\n" },
    {(char *) "GetChannel", (PyCFunction) _wrap_PyNs3WimaxPhy_GetChannel, METH_NOARGS, "GetChannel()\n\n" },
    {(char *) "GetScanningFrequency", (PyCFunction) _wrap_PyNs3WimaxPhy_GetScanningFrequency, METH_NOARGS, "GetScanningFrequency()\n\n" },
    {(char *) "GetTtg", (PyCFunction) _wrap_PyNs3WimaxPhy_GetTtg, METH_NOARGS, "GetTtg()\n\n" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3WimaxPhy_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {(char *) "SetPhyParameters", (PyCFunction) _wrap_PyNs3WimaxPhy_SetPhyParameters, METH_NOARGS, "SetPhyParameters()\n\n" },
    {(char *) "SetFrameDuration", (PyCFunction) _wrap_PyNs3WimaxPhy_SetFrameDuration, METH_KEYWORDS|METH_VARARGS, "SetFrameDuration(frameDuration)\n\ntype: frameDuration: ns3::Time" },
    {(char *) "GetPsPerSymbol", (PyCFunction) _wrap_PyNs3WimaxPhy_GetPsPerSymbol, METH_NOARGS, "GetPsPerSymbol()\n\n" },
    {(char *) "GetPhyType", (PyCFunction) _wrap_PyNs3WimaxPhy_GetPhyType, METH_NOARGS, "GetPhyType()\n\n" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WimaxPhy__tp_clear(PyNs3WimaxPhy *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WimaxPhy *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WimaxPhy__tp_traverse(PyNs3WimaxPhy *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3WimaxPhy__tp_dealloc(PyNs3WimaxPhy *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WimaxPhy__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WimaxPhy__tp_richcompare (PyNs3WimaxPhy *PYBINDGEN_UNUSED(self), PyNs3WimaxPhy *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WimaxPhy_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WimaxPhy_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.WimaxPhy",            /* tp_name */
    sizeof(PyNs3WimaxPhy),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WimaxPhy__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WimaxPhy(arg0)\nWimaxPhy()",                        /* Documentation string */
    (traverseproc)PyNs3WimaxPhy__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WimaxPhy__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WimaxPhy__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WimaxPhy_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WimaxPhy, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WimaxPhy__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3BSScheduler__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'BSScheduler' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3BSScheduler_Schedule(PyNs3BSScheduler *self)
{
    PyObject *py_retval;
    
    self->obj->Schedule();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BSScheduler_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::BSScheduler::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3BSScheduler_SetBs(PyNs3BSScheduler *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BaseStationNetDevice *bs;
    ns3::BaseStationNetDevice *bs_ptr;
    const char *keywords[] = {"bs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BaseStationNetDevice_Type, &bs)) {
        return NULL;
    }
    bs_ptr = (bs ? bs->obj : NULL);
    self->obj->SetBs(ns3::Ptr< ns3::BaseStationNetDevice  > (bs_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BSScheduler_CheckForFragmentation(PyNs3BSScheduler *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WimaxConnection *connection;
    ns3::WimaxConnection *connection_ptr;
    int availableSymbols;
    ns3::WimaxPhy::ModulationType modulationType;
    const char *keywords[] = {"connection", "availableSymbols", "modulationType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!ii", (char **) keywords, &PyNs3WimaxConnection_Type, &connection, &availableSymbols, &modulationType)) {
        return NULL;
    }
    connection_ptr = (connection ? connection->obj : NULL);
    retval = self->obj->CheckForFragmentation(ns3::Ptr< ns3::WimaxConnection  > (connection_ptr), availableSymbols, modulationType);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BSScheduler_GetBs(PyNs3BSScheduler *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::BaseStationNetDevice > retval;
    PyNs3BaseStationNetDevice *py_BaseStationNetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetBs();
    if (!(const_cast<ns3::BaseStationNetDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::BaseStationNetDevice *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3BaseStationNetDevice__PythonHelper).name())
    {
        py_BaseStationNetDevice = reinterpret_cast< PyNs3BaseStationNetDevice* >(reinterpret_cast< PyNs3BaseStationNetDevice__PythonHelper* >(const_cast<ns3::BaseStationNetDevice *> (ns3::PeekPointer (retval)))->m_pyself);
        py_BaseStationNetDevice->obj = const_cast<ns3::BaseStationNetDevice *> (ns3::PeekPointer (retval));
        Py_INCREF(py_BaseStationNetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::BaseStationNetDevice *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_BaseStationNetDevice = NULL;
        } else {
            py_BaseStationNetDevice = (PyNs3BaseStationNetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_BaseStationNetDevice);
        }
    
        if (py_BaseStationNetDevice == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::BaseStationNetDevice *> (ns3::PeekPointer (retval)))), &PyNs3BaseStationNetDevice_Type);
            py_BaseStationNetDevice = PyObject_GC_New(PyNs3BaseStationNetDevice, wrapper_type);
            py_BaseStationNetDevice->inst_dict = NULL;
    
            py_BaseStationNetDevice->inst_dict = NULL;
            py_BaseStationNetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::BaseStationNetDevice *> (ns3::PeekPointer (retval))->Ref();
            py_BaseStationNetDevice->obj = const_cast<ns3::BaseStationNetDevice *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_BaseStationNetDevice->obj] = (PyObject *) py_BaseStationNetDevice;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_BaseStationNetDevice);
    return py_retval;
}


PyObject *
_wrap_PyNs3BSScheduler_AddDownlinkBurst(PyNs3BSScheduler *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WimaxConnection *connection;
    ns3::WimaxConnection *connection_ptr;
    int diuc;
    ns3::WimaxPhy::ModulationType modulationType;
    PyNs3PacketBurst *burst;
    ns3::PacketBurst *burst_ptr;
    const char *keywords[] = {"connection", "diuc", "modulationType", "burst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iiO!", (char **) keywords, &PyNs3WimaxConnection_Type, &connection, &diuc, &modulationType, &PyNs3PacketBurst_Type, &burst)) {
        return NULL;
    }
    connection_ptr = (connection ? connection->obj : NULL);
    if (diuc > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    burst_ptr = (burst ? burst->obj : NULL);
    self->obj->AddDownlinkBurst(ns3::Ptr< ns3::WimaxConnection  > (connection_ptr), diuc, modulationType, ns3::Ptr< ns3::PacketBurst  > (burst_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3BSScheduler_methods[] = {
    {(char *) "Schedule", (PyCFunction) _wrap_PyNs3BSScheduler_Schedule, METH_NOARGS, "Schedule()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3BSScheduler_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetBs", (PyCFunction) _wrap_PyNs3BSScheduler_SetBs, METH_KEYWORDS|METH_VARARGS, "SetBs(bs)\n\ntype: bs: ns3::Ptr< ns3::BaseStationNetDevice >" },
    {(char *) "CheckForFragmentation", (PyCFunction) _wrap_PyNs3BSScheduler_CheckForFragmentation, METH_KEYWORDS|METH_VARARGS, "CheckForFragmentation(connection, availableSymbols, modulationType)\n\ntype: connection: ns3::Ptr< ns3::WimaxConnection >\ntype: availableSymbols: int\ntype: modulationType: ns3::WimaxPhy::ModulationType" },
    {(char *) "GetBs", (PyCFunction) _wrap_PyNs3BSScheduler_GetBs, METH_NOARGS, "GetBs()\n\n" },
    {(char *) "AddDownlinkBurst", (PyCFunction) _wrap_PyNs3BSScheduler_AddDownlinkBurst, METH_KEYWORDS|METH_VARARGS, "AddDownlinkBurst(connection, diuc, modulationType, burst)\n\ntype: connection: ns3::Ptr< ns3::WimaxConnection const >\ntype: diuc: uint8_t\ntype: modulationType: ns3::WimaxPhy::ModulationType\ntype: burst: ns3::Ptr< ns3::PacketBurst >" },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3BSScheduler__tp_clear(PyNs3BSScheduler *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::BSScheduler *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3BSScheduler__tp_traverse(PyNs3BSScheduler *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3BSScheduler__tp_dealloc(PyNs3BSScheduler *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3BSScheduler__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3BSScheduler__tp_richcompare (PyNs3BSScheduler *PYBINDGEN_UNUSED(self), PyNs3BSScheduler *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3BSScheduler_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3BSScheduler_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.BSScheduler",            /* tp_name */
    sizeof(PyNs3BSScheduler),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3BSScheduler__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "BSScheduler(arg0)\nBSScheduler(bs)\nBSScheduler()",                        /* Documentation string */
    (traverseproc)PyNs3BSScheduler__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3BSScheduler__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3BSScheduler__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3BSScheduler_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3BSScheduler, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3BSScheduler__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3BSSchedulerRtps__tp_init__0(PyNs3BSSchedulerRtps *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3BSSchedulerRtps *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BSSchedulerRtps_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::BSSchedulerRtps(*((PyNs3BSSchedulerRtps *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3BSSchedulerRtps__tp_init__1(PyNs3BSSchedulerRtps *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::BSSchedulerRtps();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3BSSchedulerRtps__tp_init__2(PyNs3BSSchedulerRtps *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3BaseStationNetDevice *bs;
    ns3::BaseStationNetDevice *bs_ptr;
    const char *keywords[] = {"bs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BaseStationNetDevice_Type, &bs)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bs_ptr = (bs ? bs->obj : NULL);
    self->obj = new ns3::BSSchedulerRtps(ns3::Ptr< ns3::BaseStationNetDevice  > (bs_ptr));
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3BSSchedulerRtps__tp_init(PyNs3BSSchedulerRtps *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3BSSchedulerRtps__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3BSSchedulerRtps__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3BSSchedulerRtps__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3BSSchedulerRtps_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::BSSchedulerRtps::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3BSSchedulerRtps_AddDownlinkBurst(PyNs3BSSchedulerRtps *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WimaxConnection *connection;
    ns3::WimaxConnection *connection_ptr;
    int diuc;
    ns3::WimaxPhy::ModulationType modulationType;
    PyNs3PacketBurst *burst;
    ns3::PacketBurst *burst_ptr;
    const char *keywords[] = {"connection", "diuc", "modulationType", "burst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iiO!", (char **) keywords, &PyNs3WimaxConnection_Type, &connection, &diuc, &modulationType, &PyNs3PacketBurst_Type, &burst)) {
        return NULL;
    }
    connection_ptr = (connection ? connection->obj : NULL);
    if (diuc > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    burst_ptr = (burst ? burst->obj : NULL);
    self->obj->AddDownlinkBurst(ns3::Ptr< ns3::WimaxConnection  > (connection_ptr), diuc, modulationType, ns3::Ptr< ns3::PacketBurst  > (burst_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BSSchedulerRtps_Schedule(PyNs3BSSchedulerRtps *self)
{
    PyObject *py_retval;
    
    self->obj->Schedule();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3BSSchedulerRtps__copy__(PyNs3BSSchedulerRtps *self)
{

    PyNs3BSSchedulerRtps *py_copy;
    py_copy = PyObject_GC_New(PyNs3BSSchedulerRtps, &PyNs3BSSchedulerRtps_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::BSSchedulerRtps(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3BSSchedulerRtps_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3BSSchedulerRtps_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "AddDownlinkBurst", (PyCFunction) _wrap_PyNs3BSSchedulerRtps_AddDownlinkBurst, METH_KEYWORDS|METH_VARARGS, "AddDownlinkBurst(connection, diuc, modulationType, burst)\n\ntype: connection: ns3::Ptr< ns3::WimaxConnection const >\ntype: diuc: uint8_t\ntype: modulationType: ns3::WimaxPhy::ModulationType\ntype: burst: ns3::Ptr< ns3::PacketBurst >" },
    {(char *) "Schedule", (PyCFunction) _wrap_PyNs3BSSchedulerRtps_Schedule, METH_NOARGS, "Schedule()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3BSSchedulerRtps__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3BSSchedulerRtps__tp_clear(PyNs3BSSchedulerRtps *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::BSSchedulerRtps *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3BSSchedulerRtps__tp_traverse(PyNs3BSSchedulerRtps *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3BSSchedulerRtps__tp_dealloc(PyNs3BSSchedulerRtps *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3BSSchedulerRtps__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3BSSchedulerRtps__tp_richcompare (PyNs3BSSchedulerRtps *PYBINDGEN_UNUSED(self), PyNs3BSSchedulerRtps *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3BSSchedulerRtps_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3BSSchedulerRtps_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.BSSchedulerRtps",            /* tp_name */
    sizeof(PyNs3BSSchedulerRtps),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3BSSchedulerRtps__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "BSSchedulerRtps(arg0)\nBSSchedulerRtps(bs)\nBSSchedulerRtps()",                        /* Documentation string */
    (traverseproc)PyNs3BSSchedulerRtps__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3BSSchedulerRtps__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3BSSchedulerRtps__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3BSSchedulerRtps_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3BSSchedulerRtps, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3BSSchedulerRtps__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3BSSchedulerSimple__tp_init__0(PyNs3BSSchedulerSimple *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3BSSchedulerSimple *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BSSchedulerSimple_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::BSSchedulerSimple(*((PyNs3BSSchedulerSimple *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3BSSchedulerSimple__tp_init__1(PyNs3BSSchedulerSimple *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::BSSchedulerSimple();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3BSSchedulerSimple__tp_init__2(PyNs3BSSchedulerSimple *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3BaseStationNetDevice *bs;
    ns3::BaseStationNetDevice *bs_ptr;
    const char *keywords[] = {"bs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BaseStationNetDevice_Type, &bs)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    bs_ptr = (bs ? bs->obj : NULL);
    self->obj = new ns3::BSSchedulerSimple(ns3::Ptr< ns3::BaseStationNetDevice  > (bs_ptr));
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3BSSchedulerSimple__tp_init(PyNs3BSSchedulerSimple *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3BSSchedulerSimple__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3BSSchedulerSimple__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3BSSchedulerSimple__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3BSSchedulerSimple_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::BSSchedulerSimple::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3BSSchedulerSimple_AddDownlinkBurst(PyNs3BSSchedulerSimple *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WimaxConnection *connection;
    ns3::WimaxConnection *connection_ptr;
    int diuc;
    ns3::WimaxPhy::ModulationType modulationType;
    PyNs3PacketBurst *burst;
    ns3::PacketBurst *burst_ptr;
    const char *keywords[] = {"connection", "diuc", "modulationType", "burst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iiO!", (char **) keywords, &PyNs3WimaxConnection_Type, &connection, &diuc, &modulationType, &PyNs3PacketBurst_Type, &burst)) {
        return NULL;
    }
    connection_ptr = (connection ? connection->obj : NULL);
    if (diuc > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    burst_ptr = (burst ? burst->obj : NULL);
    self->obj->AddDownlinkBurst(ns3::Ptr< ns3::WimaxConnection  > (connection_ptr), diuc, modulationType, ns3::Ptr< ns3::PacketBurst  > (burst_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BSSchedulerSimple_Schedule(PyNs3BSSchedulerSimple *self)
{
    PyObject *py_retval;
    
    self->obj->Schedule();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3BSSchedulerSimple__copy__(PyNs3BSSchedulerSimple *self)
{

    PyNs3BSSchedulerSimple *py_copy;
    py_copy = PyObject_GC_New(PyNs3BSSchedulerSimple, &PyNs3BSSchedulerSimple_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::BSSchedulerSimple(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3BSSchedulerSimple_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3BSSchedulerSimple_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "AddDownlinkBurst", (PyCFunction) _wrap_PyNs3BSSchedulerSimple_AddDownlinkBurst, METH_KEYWORDS|METH_VARARGS, "AddDownlinkBurst(connection, diuc, modulationType, burst)\n\ntype: connection: ns3::Ptr< ns3::WimaxConnection const >\ntype: diuc: uint8_t\ntype: modulationType: ns3::WimaxPhy::ModulationType\ntype: burst: ns3::Ptr< ns3::PacketBurst >" },
    {(char *) "Schedule", (PyCFunction) _wrap_PyNs3BSSchedulerSimple_Schedule, METH_NOARGS, "Schedule()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3BSSchedulerSimple__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3BSSchedulerSimple__tp_clear(PyNs3BSSchedulerSimple *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::BSSchedulerSimple *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3BSSchedulerSimple__tp_traverse(PyNs3BSSchedulerSimple *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3BSSchedulerSimple__tp_dealloc(PyNs3BSSchedulerSimple *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3BSSchedulerSimple__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3BSSchedulerSimple__tp_richcompare (PyNs3BSSchedulerSimple *PYBINDGEN_UNUSED(self), PyNs3BSSchedulerSimple *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3BSSchedulerSimple_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3BSSchedulerSimple_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.BSSchedulerSimple",            /* tp_name */
    sizeof(PyNs3BSSchedulerSimple),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3BSSchedulerSimple__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "BSSchedulerSimple(arg0)\nBSSchedulerSimple(bs)\nBSSchedulerSimple()",                        /* Documentation string */
    (traverseproc)PyNs3BSSchedulerSimple__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3BSSchedulerSimple__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3BSSchedulerSimple__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3BSSchedulerSimple_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3BSSchedulerSimple, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3BSSchedulerSimple__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3BandwidthRequestHeader__tp_init__0(PyNs3BandwidthRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3BandwidthRequestHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BandwidthRequestHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::BandwidthRequestHeader(*((PyNs3BandwidthRequestHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3BandwidthRequestHeader__tp_init__1(PyNs3BandwidthRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::BandwidthRequestHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3BandwidthRequestHeader__tp_init(PyNs3BandwidthRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3BandwidthRequestHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3BandwidthRequestHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::BandwidthRequestHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_SetCid(PyNs3BandwidthRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Cid *cid;
    const char *keywords[] = {"cid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &cid)) {
        return NULL;
    }
    self->obj->SetCid(*((PyNs3Cid *) cid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_Serialize(PyNs3BandwidthRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_SetHcs(PyNs3BandwidthRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int hcs;
    const char *keywords[] = {"hcs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &hcs)) {
        return NULL;
    }
    if (hcs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHcs(hcs);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_Deserialize(PyNs3BandwidthRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_SetBr(PyNs3BandwidthRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int br;
    const char *keywords[] = {"br", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &br)) {
        return NULL;
    }
    self->obj->SetBr(br);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_SetEc(PyNs3BandwidthRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ec;
    const char *keywords[] = {"ec", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ec)) {
        return NULL;
    }
    if (ec > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetEc(ec);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_GetName(PyNs3BandwidthRequestHeader *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_GetType(PyNs3BandwidthRequestHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_GetCid(PyNs3BandwidthRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->GetCid();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_GetBr(PyNs3BandwidthRequestHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetBr();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_GetSerializedSize(PyNs3BandwidthRequestHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_GetEc(PyNs3BandwidthRequestHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetEc();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_check_hcs(PyNs3BandwidthRequestHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->check_hcs();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_GetInstanceTypeId(PyNs3BandwidthRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_GetHcs(PyNs3BandwidthRequestHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetHcs();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_GetHt(PyNs3BandwidthRequestHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetHt();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_SetHt(PyNs3BandwidthRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int HT;
    const char *keywords[] = {"HT", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &HT)) {
        return NULL;
    }
    if (HT > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHt(HT);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BandwidthRequestHeader_SetType(PyNs3BandwidthRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    if (type > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetType(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3BandwidthRequestHeader__copy__(PyNs3BandwidthRequestHeader *self)
{

    PyNs3BandwidthRequestHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3BandwidthRequestHeader, &PyNs3BandwidthRequestHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::BandwidthRequestHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3BandwidthRequestHeader_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetCid", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_SetCid, METH_KEYWORDS|METH_VARARGS, "SetCid(cid)\n\ntype: cid: ns3::Cid" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetHcs", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_SetHcs, METH_KEYWORDS|METH_VARARGS, "SetHcs(hcs)\n\ntype: hcs: uint8_t" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetBr", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_SetBr, METH_KEYWORDS|METH_VARARGS, "SetBr(br)\n\ntype: br: uint32_t" },
    {(char *) "SetEc", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_SetEc, METH_KEYWORDS|METH_VARARGS, "SetEc(ec)\n\ntype: ec: uint8_t" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "GetType", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_GetType, METH_NOARGS, "GetType()\n\n" },
    {(char *) "GetCid", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_GetCid, METH_NOARGS, "GetCid()\n\n" },
    {(char *) "GetBr", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_GetBr, METH_NOARGS, "GetBr()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetEc", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_GetEc, METH_NOARGS, "GetEc()\n\n" },
    {(char *) "check_hcs", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_check_hcs, METH_NOARGS, "check_hcs()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetHcs", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_GetHcs, METH_NOARGS, "GetHcs()\n\n" },
    {(char *) "GetHt", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_GetHt, METH_NOARGS, "GetHt()\n\n" },
    {(char *) "SetHt", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_SetHt, METH_KEYWORDS|METH_VARARGS, "SetHt(HT)\n\ntype: HT: uint8_t" },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader_SetType, METH_KEYWORDS|METH_VARARGS, "SetType(type)\n\ntype: type: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3BandwidthRequestHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3BandwidthRequestHeader__tp_clear(PyNs3BandwidthRequestHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::BandwidthRequestHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3BandwidthRequestHeader__tp_traverse(PyNs3BandwidthRequestHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3BandwidthRequestHeader__tp_dealloc(PyNs3BandwidthRequestHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3BandwidthRequestHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3BandwidthRequestHeader__tp_richcompare (PyNs3BandwidthRequestHeader *PYBINDGEN_UNUSED(self), PyNs3BandwidthRequestHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3BandwidthRequestHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3BandwidthRequestHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.BandwidthRequestHeader",            /* tp_name */
    sizeof(PyNs3BandwidthRequestHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3BandwidthRequestHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "BandwidthRequestHeader(arg0)\nBandwidthRequestHeader()",                        /* Documentation string */
    (traverseproc)PyNs3BandwidthRequestHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3BandwidthRequestHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3BandwidthRequestHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3BandwidthRequestHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3BandwidthRequestHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3BandwidthRequestHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3BsServiceFlowManager__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3BsServiceFlowManager *self)
{
    PyObject *py_retval;
    PyNs3BsServiceFlowManager__PythonHelper *helper = dynamic_cast< PyNs3BsServiceFlowManager__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3BsServiceFlowManager__PythonHelper::_wrap_DoInitialize(PyNs3BsServiceFlowManager *self)
{
    PyObject *py_retval;
    PyNs3BsServiceFlowManager__PythonHelper *helper = dynamic_cast< PyNs3BsServiceFlowManager__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3BsServiceFlowManager__PythonHelper::_wrap_NotifyNewAggregate(PyNs3BsServiceFlowManager *self)
{
    PyObject *py_retval;
    PyNs3BsServiceFlowManager__PythonHelper *helper = dynamic_cast< PyNs3BsServiceFlowManager__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3BsServiceFlowManager__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BsServiceFlowManager *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::BsServiceFlowManager::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3BsServiceFlowManager* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BsServiceFlowManager* >(m_pyself)->obj = (ns3::BsServiceFlowManager*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BsServiceFlowManager* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BsServiceFlowManager* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BsServiceFlowManager* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3BsServiceFlowManager__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3BsServiceFlowManager__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3BsServiceFlowManager__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3BsServiceFlowManager__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3BsServiceFlowManager__tp_init__0(PyNs3BsServiceFlowManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3BsServiceFlowManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BsServiceFlowManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3BsServiceFlowManager_Type)
    {
        self->obj = new PyNs3BsServiceFlowManager__PythonHelper(*((PyNs3BsServiceFlowManager *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3BsServiceFlowManager__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::BsServiceFlowManager(*((PyNs3BsServiceFlowManager *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3BsServiceFlowManager__tp_init__1(PyNs3BsServiceFlowManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3BaseStationNetDevice *device;
    ns3::BaseStationNetDevice *device_ptr;
    const char *keywords[] = {"device", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BaseStationNetDevice_Type, &device)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    device_ptr = (device ? device->obj : NULL);
    if (Py_TYPE(self) != &PyNs3BsServiceFlowManager_Type)
    {
        self->obj = new PyNs3BsServiceFlowManager__PythonHelper(ns3::Ptr< ns3::BaseStationNetDevice  > (device_ptr));
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3BsServiceFlowManager__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::BsServiceFlowManager(ns3::Ptr< ns3::BaseStationNetDevice  > (device_ptr));
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3BsServiceFlowManager__tp_init(PyNs3BsServiceFlowManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3BsServiceFlowManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3BsServiceFlowManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3BsServiceFlowManager_AllocateServiceFlows(PyNs3BsServiceFlowManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsaReq *dsaReq;
    PyNs3Cid *cid;
    const char *keywords[] = {"dsaReq", "cid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3DsaReq_Type, &dsaReq, &PyNs3Cid_Type, &cid)) {
        return NULL;
    }
    self->obj->AllocateServiceFlows(*((PyNs3DsaReq *) dsaReq)->obj, *((PyNs3Cid *) cid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BsServiceFlowManager_SetMaxDsaRspRetries(PyNs3BsServiceFlowManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int maxDsaRspRetries;
    const char *keywords[] = {"maxDsaRspRetries", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &maxDsaRspRetries)) {
        return NULL;
    }
    if (maxDsaRspRetries > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxDsaRspRetries(maxDsaRspRetries);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BsServiceFlowManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::BsServiceFlowManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3BsServiceFlowManager_DoDispose(PyNs3BsServiceFlowManager *self)
{
    PyObject *py_retval;
    PyNs3BsServiceFlowManager__PythonHelper *helper_class = dynamic_cast<PyNs3BsServiceFlowManager__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::BsServiceFlowManager::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BsServiceFlowManager_ProcessDsaAck(PyNs3BsServiceFlowManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsaAck *dsaAck;
    PyNs3Cid *cid;
    const char *keywords[] = {"dsaAck", "cid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3DsaAck_Type, &dsaAck, &PyNs3Cid_Type, &cid)) {
        return NULL;
    }
    self->obj->ProcessDsaAck(*((PyNs3DsaAck *) dsaAck)->obj, *((PyNs3Cid *) cid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BsServiceFlowManager_GetDsaAckTimeoutEvent(PyNs3BsServiceFlowManager *self)
{
    PyObject *py_retval;
    PyNs3EventId *py_EventId;
    
    ns3::EventId retval = self->obj->GetDsaAckTimeoutEvent();
    py_EventId = PyObject_New(PyNs3EventId, &PyNs3EventId_Type);
    py_EventId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_EventId->obj = new ns3::EventId(retval);
    PyNs3EventId_wrapper_registry[(void *) py_EventId->obj] = (PyObject *) py_EventId;
    py_retval = Py_BuildValue((char *) "N", py_EventId);
    return py_retval;
}


PyObject *
_wrap_PyNs3BsServiceFlowManager_AddMulticastServiceFlow(PyNs3BsServiceFlowManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ServiceFlow *sf;
    ns3::WimaxPhy::ModulationType modulation;
    const char *keywords[] = {"sf", "modulation", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3ServiceFlow_Type, &sf, &modulation)) {
        return NULL;
    }
    self->obj->AddMulticastServiceFlow(*((PyNs3ServiceFlow *) sf)->obj, modulation);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3BsServiceFlowManager__copy__(PyNs3BsServiceFlowManager *self)
{

    PyNs3BsServiceFlowManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3BsServiceFlowManager, &PyNs3BsServiceFlowManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::BsServiceFlowManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3BsServiceFlowManager_methods[] = {
    {(char *) "AllocateServiceFlows", (PyCFunction) _wrap_PyNs3BsServiceFlowManager_AllocateServiceFlows, METH_KEYWORDS|METH_VARARGS, "AllocateServiceFlows(dsaReq, cid)\n\ntype: dsaReq: ns3::DsaReq const &\ntype: cid: ns3::Cid" },
    {(char *) "SetMaxDsaRspRetries", (PyCFunction) _wrap_PyNs3BsServiceFlowManager_SetMaxDsaRspRetries, METH_KEYWORDS|METH_VARARGS, "SetMaxDsaRspRetries(maxDsaRspRetries)\n\ntype: maxDsaRspRetries: uint8_t" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3BsServiceFlowManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3BsServiceFlowManager_DoDispose, METH_NOARGS, "DoDispose()\n\n" },
    {(char *) "ProcessDsaAck", (PyCFunction) _wrap_PyNs3BsServiceFlowManager_ProcessDsaAck, METH_KEYWORDS|METH_VARARGS, "ProcessDsaAck(dsaAck, cid)\n\ntype: dsaAck: ns3::DsaAck const &\ntype: cid: ns3::Cid" },
    {(char *) "GetDsaAckTimeoutEvent", (PyCFunction) _wrap_PyNs3BsServiceFlowManager_GetDsaAckTimeoutEvent, METH_NOARGS, "GetDsaAckTimeoutEvent()\n\n" },
    {(char *) "AddMulticastServiceFlow", (PyCFunction) _wrap_PyNs3BsServiceFlowManager_AddMulticastServiceFlow, METH_KEYWORDS|METH_VARARGS, "AddMulticastServiceFlow(sf, modulation)\n\ntype: sf: ns3::ServiceFlow\ntype: modulation: ns3::WimaxPhy::ModulationType" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3BsServiceFlowManager__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3BsServiceFlowManager__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3BsServiceFlowManager__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3BsServiceFlowManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3BsServiceFlowManager__tp_clear(PyNs3BsServiceFlowManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::BsServiceFlowManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3BsServiceFlowManager__tp_traverse(PyNs3BsServiceFlowManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3BsServiceFlowManager__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3BsServiceFlowManager__tp_dealloc(PyNs3BsServiceFlowManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3BsServiceFlowManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3BsServiceFlowManager__tp_richcompare (PyNs3BsServiceFlowManager *PYBINDGEN_UNUSED(self), PyNs3BsServiceFlowManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3BsServiceFlowManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3BsServiceFlowManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.BsServiceFlowManager",            /* tp_name */
    sizeof(PyNs3BsServiceFlowManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3BsServiceFlowManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "BsServiceFlowManager(device)\nBsServiceFlowManager(arg0)",                        /* Documentation string */
    (traverseproc)PyNs3BsServiceFlowManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3BsServiceFlowManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3BsServiceFlowManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3BsServiceFlowManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3BsServiceFlowManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3BsServiceFlowManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3ConnectionManager__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3ConnectionManager *self)
{
    PyObject *py_retval;
    PyNs3ConnectionManager__PythonHelper *helper = dynamic_cast< PyNs3ConnectionManager__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3ConnectionManager__PythonHelper::_wrap_DoInitialize(PyNs3ConnectionManager *self)
{
    PyObject *py_retval;
    PyNs3ConnectionManager__PythonHelper *helper = dynamic_cast< PyNs3ConnectionManager__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3ConnectionManager__PythonHelper::_wrap_NotifyNewAggregate(PyNs3ConnectionManager *self)
{
    PyObject *py_retval;
    PyNs3ConnectionManager__PythonHelper *helper = dynamic_cast< PyNs3ConnectionManager__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3ConnectionManager__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ConnectionManager *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ConnectionManager::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ConnectionManager* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ConnectionManager* >(m_pyself)->obj = (ns3::ConnectionManager*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ConnectionManager* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ConnectionManager* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ConnectionManager* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3ConnectionManager__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3ConnectionManager__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ConnectionManager__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ConnectionManager__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3ConnectionManager__tp_init__0(PyNs3ConnectionManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ConnectionManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ConnectionManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3ConnectionManager_Type)
    {
        self->obj = new PyNs3ConnectionManager__PythonHelper(*((PyNs3ConnectionManager *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3ConnectionManager__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::ConnectionManager(*((PyNs3ConnectionManager *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3ConnectionManager__tp_init__1(PyNs3ConnectionManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3ConnectionManager_Type)
    {
        self->obj = new PyNs3ConnectionManager__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3ConnectionManager__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::ConnectionManager();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3ConnectionManager__tp_init(PyNs3ConnectionManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ConnectionManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ConnectionManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ConnectionManager_AddConnection(PyNs3ConnectionManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WimaxConnection *connection;
    ns3::WimaxConnection *connection_ptr;
    ns3::Cid::Type type;
    const char *keywords[] = {"connection", "type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3WimaxConnection_Type, &connection, &type)) {
        return NULL;
    }
    connection_ptr = (connection ? connection->obj : NULL);
    self->obj->AddConnection(ns3::Ptr< ns3::WimaxConnection  > (connection_ptr), type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ConnectionManager_HasPackets(PyNs3ConnectionManager *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->HasPackets();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ConnectionManager_GetConnection(PyNs3ConnectionManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxConnection > retval;
    PyNs3Cid *cid;
    const char *keywords[] = {"cid", NULL};
    PyNs3WimaxConnection *py_WimaxConnection;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &cid)) {
        return NULL;
    }
    retval = self->obj->GetConnection(*((PyNs3Cid *) cid)->obj);
    if (!(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3WimaxConnection__PythonHelper).name())
    {
        py_WimaxConnection = reinterpret_cast< PyNs3WimaxConnection* >(reinterpret_cast< PyNs3WimaxConnection__PythonHelper* >(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))->m_pyself);
        py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval));
        Py_INCREF(py_WimaxConnection);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WimaxConnection = NULL;
        } else {
            py_WimaxConnection = (PyNs3WimaxConnection *) wrapper_lookup_iter->second;
            Py_INCREF(py_WimaxConnection);
        }
    
        if (py_WimaxConnection == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))), &PyNs3WimaxConnection_Type);
            py_WimaxConnection = PyObject_GC_New(PyNs3WimaxConnection, wrapper_type);
            py_WimaxConnection->inst_dict = NULL;
    
            py_WimaxConnection->inst_dict = NULL;
            py_WimaxConnection->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval))->Ref();
            py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxConnection->obj] = (PyObject *) py_WimaxConnection;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxConnection);
    return py_retval;
}


PyObject *
_wrap_PyNs3ConnectionManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ConnectionManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3ConnectionManager_GetConnections(PyNs3ConnectionManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Cid::Type type;
    const char *keywords[] = {"type", NULL};
    std::vector< ns3::Ptr< ns3::WimaxConnection > > retval;
    Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__ *py_std__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    retval = self->obj->GetConnections(type);
    py_std__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__ = PyObject_New(Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__, &Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt___Type);
    py_std__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__->obj = new std::vector< ns3::Ptr< ns3::WimaxConnection > >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3ConnectionManager_GetNPackets(PyNs3ConnectionManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    ns3::Cid::Type type;
    ns3::ServiceFlow::SchedulingType schedulingType;
    const char *keywords[] = {"type", "schedulingType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &type, &schedulingType)) {
        return NULL;
    }
    retval = self->obj->GetNPackets(type, schedulingType);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3ConnectionManager_DoDispose(PyNs3ConnectionManager *self)
{
    PyObject *py_retval;
    PyNs3ConnectionManager__PythonHelper *helper_class = dynamic_cast<PyNs3ConnectionManager__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::ConnectionManager::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3ConnectionManager_CreateConnection(PyNs3ConnectionManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxConnection > retval;
    ns3::Cid::Type type;
    const char *keywords[] = {"type", NULL};
    PyNs3WimaxConnection *py_WimaxConnection;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    retval = self->obj->CreateConnection(type);
    if (!(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3WimaxConnection__PythonHelper).name())
    {
        py_WimaxConnection = reinterpret_cast< PyNs3WimaxConnection* >(reinterpret_cast< PyNs3WimaxConnection__PythonHelper* >(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))->m_pyself);
        py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval));
        Py_INCREF(py_WimaxConnection);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WimaxConnection = NULL;
        } else {
            py_WimaxConnection = (PyNs3WimaxConnection *) wrapper_lookup_iter->second;
            Py_INCREF(py_WimaxConnection);
        }
    
        if (py_WimaxConnection == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))), &PyNs3WimaxConnection_Type);
            py_WimaxConnection = PyObject_GC_New(PyNs3WimaxConnection, wrapper_type);
            py_WimaxConnection->inst_dict = NULL;
    
            py_WimaxConnection->inst_dict = NULL;
            py_WimaxConnection->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval))->Ref();
            py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxConnection->obj] = (PyObject *) py_WimaxConnection;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxConnection);
    return py_retval;
}


static PyObject*
_wrap_PyNs3ConnectionManager__copy__(PyNs3ConnectionManager *self)
{

    PyNs3ConnectionManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3ConnectionManager, &PyNs3ConnectionManager_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::ConnectionManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ConnectionManager_methods[] = {
    {(char *) "AddConnection", (PyCFunction) _wrap_PyNs3ConnectionManager_AddConnection, METH_KEYWORDS|METH_VARARGS, "AddConnection(connection, type)\n\ntype: connection: ns3::Ptr< ns3::WimaxConnection >\ntype: type: ns3::Cid::Type" },
    {(char *) "HasPackets", (PyCFunction) _wrap_PyNs3ConnectionManager_HasPackets, METH_NOARGS, "HasPackets()\n\n" },
    {(char *) "GetConnection", (PyCFunction) _wrap_PyNs3ConnectionManager_GetConnection, METH_KEYWORDS|METH_VARARGS, "GetConnection(cid)\n\ntype: cid: ns3::Cid" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3ConnectionManager_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetConnections", (PyCFunction) _wrap_PyNs3ConnectionManager_GetConnections, METH_KEYWORDS|METH_VARARGS, "GetConnections(type)\n\ntype: type: ns3::Cid::Type" },
    {(char *) "GetNPackets", (PyCFunction) _wrap_PyNs3ConnectionManager_GetNPackets, METH_KEYWORDS|METH_VARARGS, "GetNPackets(type, schedulingType)\n\ntype: type: ns3::Cid::Type\ntype: schedulingType: ns3::ServiceFlow::SchedulingType" },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3ConnectionManager_DoDispose, METH_NOARGS, "DoDispose()\n\n" },
    {(char *) "CreateConnection", (PyCFunction) _wrap_PyNs3ConnectionManager_CreateConnection, METH_KEYWORDS|METH_VARARGS, "CreateConnection(type)\n\ntype: type: ns3::Cid::Type" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3ConnectionManager__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3ConnectionManager__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3ConnectionManager__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ConnectionManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3ConnectionManager__tp_clear(PyNs3ConnectionManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ConnectionManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3ConnectionManager__tp_traverse(PyNs3ConnectionManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3ConnectionManager__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3ConnectionManager__tp_dealloc(PyNs3ConnectionManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3ConnectionManager__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ConnectionManager__tp_richcompare (PyNs3ConnectionManager *PYBINDGEN_UNUSED(self), PyNs3ConnectionManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ConnectionManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ConnectionManager_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.ConnectionManager",            /* tp_name */
    sizeof(PyNs3ConnectionManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ConnectionManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "ConnectionManager(arg0)\nConnectionManager()",                        /* Documentation string */
    (traverseproc)PyNs3ConnectionManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3ConnectionManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ConnectionManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ConnectionManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3ConnectionManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ConnectionManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Dcd__tp_init__0(PyNs3Dcd *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dcd *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dcd_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Dcd(*((PyNs3Dcd *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3Dcd__tp_init__1(PyNs3Dcd *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Dcd();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3Dcd__tp_init(PyNs3Dcd *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dcd__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dcd__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dcd_AddDlBurstProfile(PyNs3Dcd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3OfdmDlBurstProfile *dlBurstProfile;
    const char *keywords[] = {"dlBurstProfile", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OfdmDlBurstProfile_Type, &dlBurstProfile)) {
        return NULL;
    }
    self->obj->AddDlBurstProfile(*((PyNs3OfdmDlBurstProfile *) dlBurstProfile)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcd_SetNrDlBurstProfiles(PyNs3Dcd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nrDlBurstProfiles;
    const char *keywords[] = {"nrDlBurstProfiles", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &nrDlBurstProfiles)) {
        return NULL;
    }
    if (nrDlBurstProfiles > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNrDlBurstProfiles(nrDlBurstProfiles);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcd_Deserialize(PyNs3Dcd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcd_GetDlBurstProfiles(PyNs3Dcd *self)
{
    PyObject *py_retval;
    std::vector< ns3::OfdmDlBurstProfile > retval;
    Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__ *py_std__vector__lt___ns3__OfdmDlBurstProfile___gt__;
    
    retval = self->obj->GetDlBurstProfiles();
    py_std__vector__lt___ns3__OfdmDlBurstProfile___gt__ = PyObject_New(Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__, &Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt___Type);
    py_std__vector__lt___ns3__OfdmDlBurstProfile___gt__->obj = new std::vector< ns3::OfdmDlBurstProfile >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__OfdmDlBurstProfile___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcd_GetConfigurationChangeCount(PyNs3Dcd *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetConfigurationChangeCount();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcd_GetName(PyNs3Dcd *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcd_Serialize(PyNs3Dcd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcd_GetChannelEncodings(PyNs3Dcd *self)
{
    PyObject *py_retval;
    PyNs3OfdmDcdChannelEncodings *py_OfdmDcdChannelEncodings;
    
    ns3::OfdmDcdChannelEncodings retval = self->obj->GetChannelEncodings();
    py_OfdmDcdChannelEncodings = PyObject_GC_New(PyNs3OfdmDcdChannelEncodings, &PyNs3OfdmDcdChannelEncodings_Type);
    py_OfdmDcdChannelEncodings->inst_dict = NULL;
    py_OfdmDcdChannelEncodings->inst_dict = NULL;
    py_OfdmDcdChannelEncodings->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_OfdmDcdChannelEncodings->obj = new ns3::OfdmDcdChannelEncodings(retval);
    PyNs3DcdChannelEncodings_wrapper_registry[(void *) py_OfdmDcdChannelEncodings->obj] = (PyObject *) py_OfdmDcdChannelEncodings;
    py_retval = Py_BuildValue((char *) "N", py_OfdmDcdChannelEncodings);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcd_GetNrDlBurstProfiles(PyNs3Dcd *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNrDlBurstProfiles();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcd_GetInstanceTypeId(PyNs3Dcd *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcd_GetSerializedSize(PyNs3Dcd *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcd_SetChannelEncodings(PyNs3Dcd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3OfdmDcdChannelEncodings *channelEncodings;
    const char *keywords[] = {"channelEncodings", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OfdmDcdChannelEncodings_Type, &channelEncodings)) {
        return NULL;
    }
    self->obj->SetChannelEncodings(*((PyNs3OfdmDcdChannelEncodings *) channelEncodings)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcd_SetConfigurationChangeCount(PyNs3Dcd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int configurationChangeCount;
    const char *keywords[] = {"configurationChangeCount", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &configurationChangeCount)) {
        return NULL;
    }
    if (configurationChangeCount > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetConfigurationChangeCount(configurationChangeCount);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcd_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::Dcd::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3Dcd__copy__(PyNs3Dcd *self)
{

    PyNs3Dcd *py_copy;
    py_copy = PyObject_GC_New(PyNs3Dcd, &PyNs3Dcd_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::Dcd(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Dcd_methods[] = {
    {(char *) "AddDlBurstProfile", (PyCFunction) _wrap_PyNs3Dcd_AddDlBurstProfile, METH_KEYWORDS|METH_VARARGS, "AddDlBurstProfile(dlBurstProfile)\n\ntype: dlBurstProfile: ns3::OfdmDlBurstProfile" },
    {(char *) "SetNrDlBurstProfiles", (PyCFunction) _wrap_PyNs3Dcd_SetNrDlBurstProfiles, METH_KEYWORDS|METH_VARARGS, "SetNrDlBurstProfiles(nrDlBurstProfiles)\n\ntype: nrDlBurstProfiles: uint8_t" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3Dcd_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetDlBurstProfiles", (PyCFunction) _wrap_PyNs3Dcd_GetDlBurstProfiles, METH_NOARGS, "GetDlBurstProfiles()\n\n" },
    {(char *) "GetConfigurationChangeCount", (PyCFunction) _wrap_PyNs3Dcd_GetConfigurationChangeCount, METH_NOARGS, "GetConfigurationChangeCount()\n\n" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3Dcd_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3Dcd_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetChannelEncodings", (PyCFunction) _wrap_PyNs3Dcd_GetChannelEncodings, METH_NOARGS, "GetChannelEncodings()\n\n" },
    {(char *) "GetNrDlBurstProfiles", (PyCFunction) _wrap_PyNs3Dcd_GetNrDlBurstProfiles, METH_NOARGS, "GetNrDlBurstProfiles()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3Dcd_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3Dcd_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetChannelEncodings", (PyCFunction) _wrap_PyNs3Dcd_SetChannelEncodings, METH_KEYWORDS|METH_VARARGS, "SetChannelEncodings(channelEncodings)\n\ntype: channelEncodings: ns3::OfdmDcdChannelEncodings" },
    {(char *) "SetConfigurationChangeCount", (PyCFunction) _wrap_PyNs3Dcd_SetConfigurationChangeCount, METH_KEYWORDS|METH_VARARGS, "SetConfigurationChangeCount(configurationChangeCount)\n\ntype: configurationChangeCount: uint8_t" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3Dcd_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Dcd__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3Dcd__tp_clear(PyNs3Dcd *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::Dcd *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3Dcd__tp_traverse(PyNs3Dcd *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3Dcd__tp_dealloc(PyNs3Dcd *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3Dcd__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dcd__tp_richcompare (PyNs3Dcd *PYBINDGEN_UNUSED(self), PyNs3Dcd *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dcd_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dcd_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Dcd",            /* tp_name */
    sizeof(PyNs3Dcd),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dcd__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "Dcd(arg0)\nDcd()",                        /* Documentation string */
    (traverseproc)PyNs3Dcd__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3Dcd__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dcd__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dcd_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3Dcd, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dcd__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DlMap__tp_init__0(PyNs3DlMap *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DlMap *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DlMap_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DlMap(*((PyNs3DlMap *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DlMap__tp_init__1(PyNs3DlMap *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DlMap();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DlMap__tp_init(PyNs3DlMap *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DlMap__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DlMap__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DlMap_Deserialize(PyNs3DlMap *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DlMap_GetBaseStationId(PyNs3DlMap *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetBaseStationId();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DlMap_GetName(PyNs3DlMap *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3DlMap_Serialize(PyNs3DlMap *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DlMap_GetDlMapElements(PyNs3DlMap *self)
{
    PyObject *py_retval;
    std::list< ns3::OfdmDlMapIe > retval;
    Pystd__list__lt___ns3__OfdmDlMapIe___gt__ *py_std__list__lt___ns3__OfdmDlMapIe___gt__;
    
    retval = self->obj->GetDlMapElements();
    py_std__list__lt___ns3__OfdmDlMapIe___gt__ = PyObject_New(Pystd__list__lt___ns3__OfdmDlMapIe___gt__, &Pystd__list__lt___ns3__OfdmDlMapIe___gt___Type);
    py_std__list__lt___ns3__OfdmDlMapIe___gt__->obj = new std::list< ns3::OfdmDlMapIe >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__list__lt___ns3__OfdmDlMapIe___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3DlMap_AddDlMapElement(PyNs3DlMap *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3OfdmDlMapIe *dlMapElement;
    const char *keywords[] = {"dlMapElement", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OfdmDlMapIe_Type, &dlMapElement)) {
        return NULL;
    }
    self->obj->AddDlMapElement(*((PyNs3OfdmDlMapIe *) dlMapElement)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DlMap_SetDcdCount(PyNs3DlMap *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int dcdCount;
    const char *keywords[] = {"dcdCount", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &dcdCount)) {
        return NULL;
    }
    if (dcdCount > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetDcdCount(dcdCount);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DlMap_GetInstanceTypeId(PyNs3DlMap *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DlMap_GetSerializedSize(PyNs3DlMap *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DlMap_GetDcdCount(PyNs3DlMap *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetDcdCount();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DlMap_SetBaseStationId(PyNs3DlMap *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *baseStationID;
    const char *keywords[] = {"baseStationID", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &baseStationID)) {
        return NULL;
    }
    self->obj->SetBaseStationId(*((PyNs3Mac48Address *) baseStationID)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DlMap_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::DlMap::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DlMap__copy__(PyNs3DlMap *self)
{

    PyNs3DlMap *py_copy;
    py_copy = PyObject_GC_New(PyNs3DlMap, &PyNs3DlMap_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::DlMap(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DlMap_methods[] = {
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DlMap_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetBaseStationId", (PyCFunction) _wrap_PyNs3DlMap_GetBaseStationId, METH_NOARGS, "GetBaseStationId()\n\n" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3DlMap_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DlMap_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetDlMapElements", (PyCFunction) _wrap_PyNs3DlMap_GetDlMapElements, METH_NOARGS, "GetDlMapElements()\n\n" },
    {(char *) "AddDlMapElement", (PyCFunction) _wrap_PyNs3DlMap_AddDlMapElement, METH_KEYWORDS|METH_VARARGS, "AddDlMapElement(dlMapElement)\n\ntype: dlMapElement: ns3::OfdmDlMapIe" },
    {(char *) "SetDcdCount", (PyCFunction) _wrap_PyNs3DlMap_SetDcdCount, METH_KEYWORDS|METH_VARARGS, "SetDcdCount(dcdCount)\n\ntype: dcdCount: uint8_t" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DlMap_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DlMap_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetDcdCount", (PyCFunction) _wrap_PyNs3DlMap_GetDcdCount, METH_NOARGS, "GetDcdCount()\n\n" },
    {(char *) "SetBaseStationId", (PyCFunction) _wrap_PyNs3DlMap_SetBaseStationId, METH_KEYWORDS|METH_VARARGS, "SetBaseStationId(baseStationID)\n\ntype: baseStationID: ns3::Mac48Address" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DlMap_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DlMap__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DlMap__tp_clear(PyNs3DlMap *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::DlMap *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DlMap__tp_traverse(PyNs3DlMap *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DlMap__tp_dealloc(PyNs3DlMap *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DlMap__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DlMap__tp_richcompare (PyNs3DlMap *PYBINDGEN_UNUSED(self), PyNs3DlMap *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DlMap_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DlMap_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.DlMap",            /* tp_name */
    sizeof(PyNs3DlMap),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DlMap__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DlMap(arg0)\nDlMap()",                        /* Documentation string */
    (traverseproc)PyNs3DlMap__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DlMap__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DlMap__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DlMap_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DlMap, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DlMap__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsaAck__tp_init__0(PyNs3DsaAck *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsaAck *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsaAck_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsaAck(*((PyNs3DsaAck *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsaAck__tp_init__1(PyNs3DsaAck *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsaAck();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsaAck__tp_init(PyNs3DsaAck *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsaAck__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsaAck__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsaAck_Deserialize(PyNs3DsaAck *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaAck_SetTransactionId(PyNs3DsaAck *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int transactionId;
    const char *keywords[] = {"transactionId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &transactionId)) {
        return NULL;
    }
    if (transactionId > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTransactionId(transactionId);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaAck_GetName(PyNs3DsaAck *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaAck_Serialize(PyNs3DsaAck *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaAck_GetTransactionId(PyNs3DsaAck *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetTransactionId();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaAck_GetInstanceTypeId(PyNs3DsaAck *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaAck_GetSerializedSize(PyNs3DsaAck *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaAck_GetConfirmationCode(PyNs3DsaAck *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetConfirmationCode();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaAck_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::DsaAck::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaAck_SetConfirmationCode(PyNs3DsaAck *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int confirmationCode;
    const char *keywords[] = {"confirmationCode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &confirmationCode)) {
        return NULL;
    }
    if (confirmationCode > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetConfirmationCode(confirmationCode);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsaAck__copy__(PyNs3DsaAck *self)
{

    PyNs3DsaAck *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsaAck, &PyNs3DsaAck_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::DsaAck(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsaAck_methods[] = {
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsaAck_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetTransactionId", (PyCFunction) _wrap_PyNs3DsaAck_SetTransactionId, METH_KEYWORDS|METH_VARARGS, "SetTransactionId(transactionId)\n\ntype: transactionId: uint16_t" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3DsaAck_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsaAck_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetTransactionId", (PyCFunction) _wrap_PyNs3DsaAck_GetTransactionId, METH_NOARGS, "GetTransactionId()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsaAck_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsaAck_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetConfirmationCode", (PyCFunction) _wrap_PyNs3DsaAck_GetConfirmationCode, METH_NOARGS, "GetConfirmationCode()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsaAck_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetConfirmationCode", (PyCFunction) _wrap_PyNs3DsaAck_SetConfirmationCode, METH_KEYWORDS|METH_VARARGS, "SetConfirmationCode(confirmationCode)\n\ntype: confirmationCode: uint16_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsaAck__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsaAck__tp_clear(PyNs3DsaAck *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::DsaAck *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DsaAck__tp_traverse(PyNs3DsaAck *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsaAck__tp_dealloc(PyNs3DsaAck *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsaAck__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsaAck__tp_richcompare (PyNs3DsaAck *PYBINDGEN_UNUSED(self), PyNs3DsaAck *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsaAck_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsaAck_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.DsaAck",            /* tp_name */
    sizeof(PyNs3DsaAck),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsaAck__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsaAck(arg0)\nDsaAck()",                        /* Documentation string */
    (traverseproc)PyNs3DsaAck__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsaAck__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsaAck__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsaAck_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsaAck, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsaAck__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsaReq__tp_init__0(PyNs3DsaReq *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsaReq *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsaReq_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsaReq(*((PyNs3DsaReq *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsaReq__tp_init__1(PyNs3DsaReq *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsaReq();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsaReq__tp_init__2(PyNs3DsaReq *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ServiceFlow *sf;
    const char *keywords[] = {"sf", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ServiceFlow_Type, &sf)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsaReq(*((PyNs3ServiceFlow *) sf)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsaReq__tp_init(PyNs3DsaReq *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3DsaReq__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsaReq__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3DsaReq__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsaReq_SetCid(PyNs3DsaReq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Cid *cid;
    const char *keywords[] = {"cid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &cid)) {
        return NULL;
    }
    self->obj->SetCid(*((PyNs3Cid *) cid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaReq_Serialize(PyNs3DsaReq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaReq_Deserialize(PyNs3DsaReq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaReq_GetServiceFlow(PyNs3DsaReq *self)
{
    PyObject *py_retval;
    PyNs3ServiceFlow *py_ServiceFlow;
    
    ns3::ServiceFlow retval = self->obj->GetServiceFlow();
    py_ServiceFlow = PyObject_New(PyNs3ServiceFlow, &PyNs3ServiceFlow_Type);
    py_ServiceFlow->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ServiceFlow->obj = new ns3::ServiceFlow(retval);
    PyNs3ServiceFlow_wrapper_registry[(void *) py_ServiceFlow->obj] = (PyObject *) py_ServiceFlow;
    py_retval = Py_BuildValue((char *) "N", py_ServiceFlow);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaReq_GetName(PyNs3DsaReq *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaReq_GetSfid(PyNs3DsaReq *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSfid();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaReq_SetServiceFlow(PyNs3DsaReq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ServiceFlow *sf;
    const char *keywords[] = {"sf", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ServiceFlow_Type, &sf)) {
        return NULL;
    }
    self->obj->SetServiceFlow(*((PyNs3ServiceFlow *) sf)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaReq_GetCid(PyNs3DsaReq *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->GetCid();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaReq_GetTransactionId(PyNs3DsaReq *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetTransactionId();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaReq_SetTransactionId(PyNs3DsaReq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int transactionId;
    const char *keywords[] = {"transactionId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &transactionId)) {
        return NULL;
    }
    if (transactionId > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTransactionId(transactionId);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaReq_GetInstanceTypeId(PyNs3DsaReq *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaReq_GetSerializedSize(PyNs3DsaReq *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaReq_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::DsaReq::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaReq_SetSfid(PyNs3DsaReq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int sfid;
    const char *keywords[] = {"sfid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &sfid)) {
        return NULL;
    }
    self->obj->SetSfid(sfid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsaReq__copy__(PyNs3DsaReq *self)
{

    PyNs3DsaReq *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsaReq, &PyNs3DsaReq_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::DsaReq(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsaReq_methods[] = {
    {(char *) "SetCid", (PyCFunction) _wrap_PyNs3DsaReq_SetCid, METH_KEYWORDS|METH_VARARGS, "SetCid(cid)\n\ntype: cid: ns3::Cid" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsaReq_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsaReq_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetServiceFlow", (PyCFunction) _wrap_PyNs3DsaReq_GetServiceFlow, METH_NOARGS, "GetServiceFlow()\n\n" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3DsaReq_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "GetSfid", (PyCFunction) _wrap_PyNs3DsaReq_GetSfid, METH_NOARGS, "GetSfid()\n\n" },
    {(char *) "SetServiceFlow", (PyCFunction) _wrap_PyNs3DsaReq_SetServiceFlow, METH_KEYWORDS|METH_VARARGS, "SetServiceFlow(sf)\n\ntype: sf: ns3::ServiceFlow" },
    {(char *) "GetCid", (PyCFunction) _wrap_PyNs3DsaReq_GetCid, METH_NOARGS, "GetCid()\n\n" },
    {(char *) "GetTransactionId", (PyCFunction) _wrap_PyNs3DsaReq_GetTransactionId, METH_NOARGS, "GetTransactionId()\n\n" },
    {(char *) "SetTransactionId", (PyCFunction) _wrap_PyNs3DsaReq_SetTransactionId, METH_KEYWORDS|METH_VARARGS, "SetTransactionId(transactionId)\n\ntype: transactionId: uint16_t" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsaReq_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsaReq_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsaReq_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetSfid", (PyCFunction) _wrap_PyNs3DsaReq_SetSfid, METH_KEYWORDS|METH_VARARGS, "SetSfid(sfid)\n\ntype: sfid: uint32_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsaReq__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsaReq__tp_clear(PyNs3DsaReq *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::DsaReq *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DsaReq__tp_traverse(PyNs3DsaReq *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsaReq__tp_dealloc(PyNs3DsaReq *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsaReq__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsaReq__tp_richcompare (PyNs3DsaReq *PYBINDGEN_UNUSED(self), PyNs3DsaReq *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsaReq_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsaReq_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.DsaReq",            /* tp_name */
    sizeof(PyNs3DsaReq),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsaReq__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsaReq(arg0)\nDsaReq(sf)\nDsaReq()",                        /* Documentation string */
    (traverseproc)PyNs3DsaReq__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsaReq__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsaReq__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsaReq_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsaReq, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsaReq__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsaRsp__tp_init__0(PyNs3DsaRsp *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsaRsp *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsaRsp_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsaRsp(*((PyNs3DsaRsp *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsaRsp__tp_init__1(PyNs3DsaRsp *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsaRsp();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsaRsp__tp_init(PyNs3DsaRsp *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsaRsp__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsaRsp__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsaRsp_SetCid(PyNs3DsaRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Cid *cid;
    const char *keywords[] = {"cid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &cid)) {
        return NULL;
    }
    self->obj->SetCid(*((PyNs3Cid *) cid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaRsp_Serialize(PyNs3DsaRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaRsp_Deserialize(PyNs3DsaRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaRsp_GetServiceFlow(PyNs3DsaRsp *self)
{
    PyObject *py_retval;
    PyNs3ServiceFlow *py_ServiceFlow;
    
    ns3::ServiceFlow retval = self->obj->GetServiceFlow();
    py_ServiceFlow = PyObject_New(PyNs3ServiceFlow, &PyNs3ServiceFlow_Type);
    py_ServiceFlow->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ServiceFlow->obj = new ns3::ServiceFlow(retval);
    PyNs3ServiceFlow_wrapper_registry[(void *) py_ServiceFlow->obj] = (PyObject *) py_ServiceFlow;
    py_retval = Py_BuildValue((char *) "N", py_ServiceFlow);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaRsp_GetName(PyNs3DsaRsp *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaRsp_GetSfid(PyNs3DsaRsp *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSfid();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaRsp_SetServiceFlow(PyNs3DsaRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ServiceFlow *sf;
    const char *keywords[] = {"sf", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ServiceFlow_Type, &sf)) {
        return NULL;
    }
    self->obj->SetServiceFlow(*((PyNs3ServiceFlow *) sf)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaRsp_GetCid(PyNs3DsaRsp *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->GetCid();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaRsp_GetTransactionId(PyNs3DsaRsp *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetTransactionId();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaRsp_SetTransactionId(PyNs3DsaRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int transactionId;
    const char *keywords[] = {"transactionId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &transactionId)) {
        return NULL;
    }
    if (transactionId > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTransactionId(transactionId);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaRsp_GetInstanceTypeId(PyNs3DsaRsp *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaRsp_GetSerializedSize(PyNs3DsaRsp *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaRsp_GetConfirmationCode(PyNs3DsaRsp *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetConfirmationCode();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaRsp_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::DsaRsp::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaRsp_SetConfirmationCode(PyNs3DsaRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int confirmationCode;
    const char *keywords[] = {"confirmationCode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &confirmationCode)) {
        return NULL;
    }
    if (confirmationCode > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetConfirmationCode(confirmationCode);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsaRsp_SetSfid(PyNs3DsaRsp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int sfid;
    const char *keywords[] = {"sfid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &sfid)) {
        return NULL;
    }
    self->obj->SetSfid(sfid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsaRsp__copy__(PyNs3DsaRsp *self)
{

    PyNs3DsaRsp *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsaRsp, &PyNs3DsaRsp_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::DsaRsp(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsaRsp_methods[] = {
    {(char *) "SetCid", (PyCFunction) _wrap_PyNs3DsaRsp_SetCid, METH_KEYWORDS|METH_VARARGS, "SetCid(cid)\n\ntype: cid: ns3::Cid" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsaRsp_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsaRsp_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetServiceFlow", (PyCFunction) _wrap_PyNs3DsaRsp_GetServiceFlow, METH_NOARGS, "GetServiceFlow()\n\n" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3DsaRsp_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "GetSfid", (PyCFunction) _wrap_PyNs3DsaRsp_GetSfid, METH_NOARGS, "GetSfid()\n\n" },
    {(char *) "SetServiceFlow", (PyCFunction) _wrap_PyNs3DsaRsp_SetServiceFlow, METH_KEYWORDS|METH_VARARGS, "SetServiceFlow(sf)\n\ntype: sf: ns3::ServiceFlow" },
    {(char *) "GetCid", (PyCFunction) _wrap_PyNs3DsaRsp_GetCid, METH_NOARGS, "GetCid()\n\n" },
    {(char *) "GetTransactionId", (PyCFunction) _wrap_PyNs3DsaRsp_GetTransactionId, METH_NOARGS, "GetTransactionId()\n\n" },
    {(char *) "SetTransactionId", (PyCFunction) _wrap_PyNs3DsaRsp_SetTransactionId, METH_KEYWORDS|METH_VARARGS, "SetTransactionId(transactionId)\n\ntype: transactionId: uint16_t" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsaRsp_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsaRsp_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetConfirmationCode", (PyCFunction) _wrap_PyNs3DsaRsp_GetConfirmationCode, METH_NOARGS, "GetConfirmationCode()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsaRsp_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetConfirmationCode", (PyCFunction) _wrap_PyNs3DsaRsp_SetConfirmationCode, METH_KEYWORDS|METH_VARARGS, "SetConfirmationCode(confirmationCode)\n\ntype: confirmationCode: uint16_t" },
    {(char *) "SetSfid", (PyCFunction) _wrap_PyNs3DsaRsp_SetSfid, METH_KEYWORDS|METH_VARARGS, "SetSfid(sfid)\n\ntype: sfid: uint32_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsaRsp__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsaRsp__tp_clear(PyNs3DsaRsp *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::DsaRsp *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DsaRsp__tp_traverse(PyNs3DsaRsp *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsaRsp__tp_dealloc(PyNs3DsaRsp *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsaRsp__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsaRsp__tp_richcompare (PyNs3DsaRsp *PYBINDGEN_UNUSED(self), PyNs3DsaRsp *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsaRsp_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsaRsp_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.DsaRsp",            /* tp_name */
    sizeof(PyNs3DsaRsp),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsaRsp__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsaRsp(arg0)\nDsaRsp()",                        /* Documentation string */
    (traverseproc)PyNs3DsaRsp__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsaRsp__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsaRsp__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsaRsp_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsaRsp, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsaRsp__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3FragmentationSubheader__tp_init__0(PyNs3FragmentationSubheader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3FragmentationSubheader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3FragmentationSubheader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::FragmentationSubheader(*((PyNs3FragmentationSubheader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3FragmentationSubheader__tp_init__1(PyNs3FragmentationSubheader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::FragmentationSubheader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3FragmentationSubheader__tp_init(PyNs3FragmentationSubheader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3FragmentationSubheader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3FragmentationSubheader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3FragmentationSubheader_SetFsn(PyNs3FragmentationSubheader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int fsn;
    const char *keywords[] = {"fsn", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &fsn)) {
        return NULL;
    }
    if (fsn > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFsn(fsn);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3FragmentationSubheader_Deserialize(PyNs3FragmentationSubheader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3FragmentationSubheader_GetName(PyNs3FragmentationSubheader *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3FragmentationSubheader_Serialize(PyNs3FragmentationSubheader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3FragmentationSubheader_GetFsn(PyNs3FragmentationSubheader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetFsn();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3FragmentationSubheader_GetSerializedSize(PyNs3FragmentationSubheader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3FragmentationSubheader_SetFc(PyNs3FragmentationSubheader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int fc;
    const char *keywords[] = {"fc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &fc)) {
        return NULL;
    }
    if (fc > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFc(fc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3FragmentationSubheader_GetInstanceTypeId(PyNs3FragmentationSubheader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3FragmentationSubheader_GetFc(PyNs3FragmentationSubheader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetFc();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3FragmentationSubheader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::FragmentationSubheader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3FragmentationSubheader__copy__(PyNs3FragmentationSubheader *self)
{

    PyNs3FragmentationSubheader *py_copy;
    py_copy = PyObject_GC_New(PyNs3FragmentationSubheader, &PyNs3FragmentationSubheader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::FragmentationSubheader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3FragmentationSubheader_methods[] = {
    {(char *) "SetFsn", (PyCFunction) _wrap_PyNs3FragmentationSubheader_SetFsn, METH_KEYWORDS|METH_VARARGS, "SetFsn(fsn)\n\ntype: fsn: uint8_t" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3FragmentationSubheader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3FragmentationSubheader_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3FragmentationSubheader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetFsn", (PyCFunction) _wrap_PyNs3FragmentationSubheader_GetFsn, METH_NOARGS, "GetFsn()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3FragmentationSubheader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetFc", (PyCFunction) _wrap_PyNs3FragmentationSubheader_SetFc, METH_KEYWORDS|METH_VARARGS, "SetFc(fc)\n\ntype: fc: uint8_t" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3FragmentationSubheader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetFc", (PyCFunction) _wrap_PyNs3FragmentationSubheader_GetFc, METH_NOARGS, "GetFc()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3FragmentationSubheader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3FragmentationSubheader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3FragmentationSubheader__tp_clear(PyNs3FragmentationSubheader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::FragmentationSubheader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3FragmentationSubheader__tp_traverse(PyNs3FragmentationSubheader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3FragmentationSubheader__tp_dealloc(PyNs3FragmentationSubheader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3FragmentationSubheader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3FragmentationSubheader__tp_richcompare (PyNs3FragmentationSubheader *PYBINDGEN_UNUSED(self), PyNs3FragmentationSubheader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3FragmentationSubheader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3FragmentationSubheader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.FragmentationSubheader",            /* tp_name */
    sizeof(PyNs3FragmentationSubheader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3FragmentationSubheader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "FragmentationSubheader(arg0)\nFragmentationSubheader()",                        /* Documentation string */
    (traverseproc)PyNs3FragmentationSubheader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3FragmentationSubheader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3FragmentationSubheader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3FragmentationSubheader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3FragmentationSubheader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3FragmentationSubheader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3GenericMacHeader__tp_init__0(PyNs3GenericMacHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3GenericMacHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3GenericMacHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::GenericMacHeader(*((PyNs3GenericMacHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3GenericMacHeader__tp_init__1(PyNs3GenericMacHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::GenericMacHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3GenericMacHeader__tp_init(PyNs3GenericMacHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3GenericMacHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3GenericMacHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3GenericMacHeader_GetType(PyNs3GenericMacHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_GetEks(PyNs3GenericMacHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetEks();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_SetEc(PyNs3GenericMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ec;
    const char *keywords[] = {"ec", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ec)) {
        return NULL;
    }
    if (ec > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetEc(ec);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::GenericMacHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_GetCid(PyNs3GenericMacHeader *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->GetCid();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_GetHcs(PyNs3GenericMacHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetHcs();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_GetHt(PyNs3GenericMacHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetHt();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_SetCi(PyNs3GenericMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ci;
    const char *keywords[] = {"ci", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ci)) {
        return NULL;
    }
    if (ci > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetCi(ci);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_GetCi(PyNs3GenericMacHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetCi();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_SetHcs(PyNs3GenericMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int hcs;
    const char *keywords[] = {"hcs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &hcs)) {
        return NULL;
    }
    if (hcs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHcs(hcs);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_GetLen(PyNs3GenericMacHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetLen();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_SetType(PyNs3GenericMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    if (type > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetType(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_Deserialize(PyNs3GenericMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_SetHt(PyNs3GenericMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int HT;
    const char *keywords[] = {"HT", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &HT)) {
        return NULL;
    }
    if (HT > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetHt(HT);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_GetName(PyNs3GenericMacHeader *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_SetLen(PyNs3GenericMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int len;
    const char *keywords[] = {"len", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &len)) {
        return NULL;
    }
    if (len > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetLen(len);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_check_hcs(PyNs3GenericMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->check_hcs();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_GetInstanceTypeId(PyNs3GenericMacHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_GetSerializedSize(PyNs3GenericMacHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_GetEc(PyNs3GenericMacHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetEc();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_SetCid(PyNs3GenericMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Cid *cid;
    const char *keywords[] = {"cid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &cid)) {
        return NULL;
    }
    self->obj->SetCid(*((PyNs3Cid *) cid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_Serialize(PyNs3GenericMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3GenericMacHeader_SetEks(PyNs3GenericMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int eks;
    const char *keywords[] = {"eks", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &eks)) {
        return NULL;
    }
    if (eks > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetEks(eks);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3GenericMacHeader__copy__(PyNs3GenericMacHeader *self)
{

    PyNs3GenericMacHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3GenericMacHeader, &PyNs3GenericMacHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::GenericMacHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3GenericMacHeader_methods[] = {
    {(char *) "GetType", (PyCFunction) _wrap_PyNs3GenericMacHeader_GetType, METH_NOARGS, "GetType()\n\n" },
    {(char *) "GetEks", (PyCFunction) _wrap_PyNs3GenericMacHeader_GetEks, METH_NOARGS, "GetEks()\n\n" },
    {(char *) "SetEc", (PyCFunction) _wrap_PyNs3GenericMacHeader_SetEc, METH_KEYWORDS|METH_VARARGS, "SetEc(ec)\n\ntype: ec: uint8_t" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3GenericMacHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetCid", (PyCFunction) _wrap_PyNs3GenericMacHeader_GetCid, METH_NOARGS, "GetCid()\n\n" },
    {(char *) "GetHcs", (PyCFunction) _wrap_PyNs3GenericMacHeader_GetHcs, METH_NOARGS, "GetHcs()\n\n" },
    {(char *) "GetHt", (PyCFunction) _wrap_PyNs3GenericMacHeader_GetHt, METH_NOARGS, "GetHt()\n\n" },
    {(char *) "SetCi", (PyCFunction) _wrap_PyNs3GenericMacHeader_SetCi, METH_KEYWORDS|METH_VARARGS, "SetCi(ci)\n\ntype: ci: uint8_t" },
    {(char *) "GetCi", (PyCFunction) _wrap_PyNs3GenericMacHeader_GetCi, METH_NOARGS, "GetCi()\n\n" },
    {(char *) "SetHcs", (PyCFunction) _wrap_PyNs3GenericMacHeader_SetHcs, METH_KEYWORDS|METH_VARARGS, "SetHcs(hcs)\n\ntype: hcs: uint8_t" },
    {(char *) "GetLen", (PyCFunction) _wrap_PyNs3GenericMacHeader_GetLen, METH_NOARGS, "GetLen()\n\n" },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3GenericMacHeader_SetType, METH_KEYWORDS|METH_VARARGS, "SetType(type)\n\ntype: type: uint8_t" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3GenericMacHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetHt", (PyCFunction) _wrap_PyNs3GenericMacHeader_SetHt, METH_KEYWORDS|METH_VARARGS, "SetHt(HT)\n\ntype: HT: uint8_t" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3GenericMacHeader_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "SetLen", (PyCFunction) _wrap_PyNs3GenericMacHeader_SetLen, METH_KEYWORDS|METH_VARARGS, "SetLen(len)\n\ntype: len: uint16_t" },
    {(char *) "check_hcs", (PyCFunction) _wrap_PyNs3GenericMacHeader_check_hcs, METH_NOARGS, "check_hcs()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3GenericMacHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3GenericMacHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetEc", (PyCFunction) _wrap_PyNs3GenericMacHeader_GetEc, METH_NOARGS, "GetEc()\n\n" },
    {(char *) "SetCid", (PyCFunction) _wrap_PyNs3GenericMacHeader_SetCid, METH_KEYWORDS|METH_VARARGS, "SetCid(cid)\n\ntype: cid: ns3::Cid" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3GenericMacHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetEks", (PyCFunction) _wrap_PyNs3GenericMacHeader_SetEks, METH_KEYWORDS|METH_VARARGS, "SetEks(eks)\n\ntype: eks: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3GenericMacHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3GenericMacHeader__tp_clear(PyNs3GenericMacHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::GenericMacHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3GenericMacHeader__tp_traverse(PyNs3GenericMacHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3GenericMacHeader__tp_dealloc(PyNs3GenericMacHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3GenericMacHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3GenericMacHeader__tp_richcompare (PyNs3GenericMacHeader *PYBINDGEN_UNUSED(self), PyNs3GenericMacHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3GenericMacHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3GenericMacHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.GenericMacHeader",            /* tp_name */
    sizeof(PyNs3GenericMacHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3GenericMacHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "GenericMacHeader(arg0)\nGenericMacHeader()",                        /* Documentation string */
    (traverseproc)PyNs3GenericMacHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3GenericMacHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3GenericMacHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3GenericMacHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3GenericMacHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3GenericMacHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3GrantManagementSubheader__tp_init__0(PyNs3GrantManagementSubheader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3GrantManagementSubheader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3GrantManagementSubheader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::GrantManagementSubheader(*((PyNs3GrantManagementSubheader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3GrantManagementSubheader__tp_init__1(PyNs3GrantManagementSubheader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::GrantManagementSubheader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3GrantManagementSubheader__tp_init(PyNs3GrantManagementSubheader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3GrantManagementSubheader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3GrantManagementSubheader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3GrantManagementSubheader_SetPbr(PyNs3GrantManagementSubheader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int pbr;
    const char *keywords[] = {"pbr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &pbr)) {
        return NULL;
    }
    if (pbr > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPbr(pbr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3GrantManagementSubheader_Deserialize(PyNs3GrantManagementSubheader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3GrantManagementSubheader_GetName(PyNs3GrantManagementSubheader *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3GrantManagementSubheader_Serialize(PyNs3GrantManagementSubheader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3GrantManagementSubheader_SetPm(PyNs3GrantManagementSubheader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int pm;
    const char *keywords[] = {"pm", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &pm)) {
        return NULL;
    }
    if (pm > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPm(pm);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3GrantManagementSubheader_GetSi(PyNs3GrantManagementSubheader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSi();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3GrantManagementSubheader_SetSi(PyNs3GrantManagementSubheader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int si;
    const char *keywords[] = {"si", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &si)) {
        return NULL;
    }
    if (si > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSi(si);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3GrantManagementSubheader_GetPbr(PyNs3GrantManagementSubheader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetPbr();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3GrantManagementSubheader_GetInstanceTypeId(PyNs3GrantManagementSubheader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3GrantManagementSubheader_GetSerializedSize(PyNs3GrantManagementSubheader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3GrantManagementSubheader_GetPm(PyNs3GrantManagementSubheader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetPm();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3GrantManagementSubheader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::GrantManagementSubheader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3GrantManagementSubheader__copy__(PyNs3GrantManagementSubheader *self)
{

    PyNs3GrantManagementSubheader *py_copy;
    py_copy = PyObject_GC_New(PyNs3GrantManagementSubheader, &PyNs3GrantManagementSubheader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::GrantManagementSubheader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3GrantManagementSubheader_methods[] = {
    {(char *) "SetPbr", (PyCFunction) _wrap_PyNs3GrantManagementSubheader_SetPbr, METH_KEYWORDS|METH_VARARGS, "SetPbr(pbr)\n\ntype: pbr: uint16_t" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3GrantManagementSubheader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3GrantManagementSubheader_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3GrantManagementSubheader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetPm", (PyCFunction) _wrap_PyNs3GrantManagementSubheader_SetPm, METH_KEYWORDS|METH_VARARGS, "SetPm(pm)\n\ntype: pm: uint8_t" },
    {(char *) "GetSi", (PyCFunction) _wrap_PyNs3GrantManagementSubheader_GetSi, METH_NOARGS, "GetSi()\n\n" },
    {(char *) "SetSi", (PyCFunction) _wrap_PyNs3GrantManagementSubheader_SetSi, METH_KEYWORDS|METH_VARARGS, "SetSi(si)\n\ntype: si: uint8_t" },
    {(char *) "GetPbr", (PyCFunction) _wrap_PyNs3GrantManagementSubheader_GetPbr, METH_NOARGS, "GetPbr()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3GrantManagementSubheader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3GrantManagementSubheader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetPm", (PyCFunction) _wrap_PyNs3GrantManagementSubheader_GetPm, METH_NOARGS, "GetPm()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3GrantManagementSubheader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3GrantManagementSubheader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3GrantManagementSubheader__tp_clear(PyNs3GrantManagementSubheader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::GrantManagementSubheader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3GrantManagementSubheader__tp_traverse(PyNs3GrantManagementSubheader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3GrantManagementSubheader__tp_dealloc(PyNs3GrantManagementSubheader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3GrantManagementSubheader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3GrantManagementSubheader__tp_richcompare (PyNs3GrantManagementSubheader *PYBINDGEN_UNUSED(self), PyNs3GrantManagementSubheader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3GrantManagementSubheader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3GrantManagementSubheader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.GrantManagementSubheader",            /* tp_name */
    sizeof(PyNs3GrantManagementSubheader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3GrantManagementSubheader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "GrantManagementSubheader(arg0)\nGrantManagementSubheader()",                        /* Documentation string */
    (traverseproc)PyNs3GrantManagementSubheader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3GrantManagementSubheader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3GrantManagementSubheader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3GrantManagementSubheader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3GrantManagementSubheader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3GrantManagementSubheader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3IpcsClassifier__tp_init__0(PyNs3IpcsClassifier *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3IpcsClassifier *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3IpcsClassifier_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::IpcsClassifier(*((PyNs3IpcsClassifier *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3IpcsClassifier__tp_init__1(PyNs3IpcsClassifier *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::IpcsClassifier();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3IpcsClassifier__tp_init(PyNs3IpcsClassifier *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3IpcsClassifier__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3IpcsClassifier__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3IpcsClassifier_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::IpcsClassifier::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3IpcsClassifier__copy__(PyNs3IpcsClassifier *self)
{

    PyNs3IpcsClassifier *py_copy;
    py_copy = PyObject_GC_New(PyNs3IpcsClassifier, &PyNs3IpcsClassifier_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::IpcsClassifier(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3IpcsClassifier_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3IpcsClassifier_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3IpcsClassifier__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3IpcsClassifier__tp_clear(PyNs3IpcsClassifier *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::IpcsClassifier *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3IpcsClassifier__tp_traverse(PyNs3IpcsClassifier *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3IpcsClassifier__tp_dealloc(PyNs3IpcsClassifier *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3IpcsClassifier__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3IpcsClassifier__tp_richcompare (PyNs3IpcsClassifier *PYBINDGEN_UNUSED(self), PyNs3IpcsClassifier *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3IpcsClassifier_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3IpcsClassifier_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.IpcsClassifier",            /* tp_name */
    sizeof(PyNs3IpcsClassifier),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3IpcsClassifier__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "IpcsClassifier(arg0)\nIpcsClassifier()",                        /* Documentation string */
    (traverseproc)PyNs3IpcsClassifier__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3IpcsClassifier__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3IpcsClassifier__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3IpcsClassifier_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3IpcsClassifier, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3IpcsClassifier__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3SimpleOfdmWimaxPhy__tp_init__0(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleOfdmWimaxPhy *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleOfdmWimaxPhy_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleOfdmWimaxPhy(*((PyNs3SimpleOfdmWimaxPhy *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleOfdmWimaxPhy__tp_init__1(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleOfdmWimaxPhy();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleOfdmWimaxPhy__tp_init__2(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    char *tracesPath;
    const char *keywords[] = {"tracesPath", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s", (char **) keywords, &tracesPath)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleOfdmWimaxPhy(tracesPath);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleOfdmWimaxPhy__tp_init(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3SimpleOfdmWimaxPhy__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleOfdmWimaxPhy__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3SimpleOfdmWimaxPhy__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_GetNoiseFigure(PyNs3SimpleOfdmWimaxPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetNoiseFigure();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_NotifyTxDrop(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3PacketBurst *burst;
    ns3::PacketBurst *burst_ptr;
    const char *keywords[] = {"burst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3PacketBurst_Type, &burst)) {
        return NULL;
    }
    burst_ptr = (burst ? burst->obj : NULL);
    self->obj->NotifyTxDrop(ns3::Ptr< ns3::PacketBurst  > (burst_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_NotifyRxEnd(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3PacketBurst *burst;
    ns3::PacketBurst *burst_ptr;
    const char *keywords[] = {"burst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3PacketBurst_Type, &burst)) {
        return NULL;
    }
    burst_ptr = (burst ? burst->obj : NULL);
    self->obj->NotifyRxEnd(ns3::Ptr< ns3::PacketBurst  > (burst_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_SetNoiseFigure(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double nf;
    const char *keywords[] = {"nf", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &nf)) {
        return NULL;
    }
    self->obj->SetNoiseFigure(nf);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_StartReceive(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int burstSize;
    bool isFirstBlock;
    PyObject *py_isFirstBlock;
    uint64_t frequency;
    ns3::WimaxPhy::ModulationType modulationType;
    int direction;
    double rxPower;
    PyNs3PacketBurst *burst;
    ns3::PacketBurst *burst_ptr;
    const char *keywords[] = {"burstSize", "isFirstBlock", "frequency", "modulationType", "direction", "rxPower", "burst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IOKiidO!", (char **) keywords, &burstSize, &py_isFirstBlock, &frequency, &modulationType, &direction, &rxPower, &PyNs3PacketBurst_Type, &burst)) {
        return NULL;
    }
    isFirstBlock = (bool) PyObject_IsTrue(py_isFirstBlock);
    if (direction > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    burst_ptr = (burst ? burst->obj : NULL);
    self->obj->StartReceive(burstSize, isFirstBlock, frequency, modulationType, direction, rxPower, ns3::Ptr< ns3::PacketBurst  > (burst_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::SimpleOfdmWimaxPhy::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_SetBandwidth(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int BW;
    const char *keywords[] = {"BW", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &BW)) {
        return NULL;
    }
    self->obj->SetBandwidth(BW);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_Send(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3PacketBurst *burst;
    ns3::PacketBurst *burst_ptr;
    ns3::WimaxPhy::ModulationType modulationType;
    int direction;
    const char *keywords[] = {"burst", "modulationType", "direction", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!ii", (char **) keywords, &PyNs3PacketBurst_Type, &burst, &modulationType, &direction)) {
        return NULL;
    }
    burst_ptr = (burst ? burst->obj : NULL);
    if (direction > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->Send(ns3::Ptr< ns3::PacketBurst  > (burst_ptr), modulationType, direction);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_NotifyTxBegin(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3PacketBurst *burst;
    ns3::PacketBurst *burst_ptr;
    const char *keywords[] = {"burst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3PacketBurst_Type, &burst)) {
        return NULL;
    }
    burst_ptr = (burst ? burst->obj : NULL);
    self->obj->NotifyTxBegin(ns3::Ptr< ns3::PacketBurst  > (burst_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_DoAttach(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WimaxChannel *channel;
    ns3::WimaxChannel *channel_ptr;
    const char *keywords[] = {"channel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WimaxChannel_Type, &channel)) {
        return NULL;
    }
    channel_ptr = (channel ? channel->obj : NULL);
    self->obj->DoAttach(ns3::Ptr< ns3::WimaxChannel  > (channel_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_GetBandwidth(PyNs3SimpleOfdmWimaxPhy *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetBandwidth();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_NotifyTxEnd(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3PacketBurst *burst;
    ns3::PacketBurst *burst_ptr;
    const char *keywords[] = {"burst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3PacketBurst_Type, &burst)) {
        return NULL;
    }
    burst_ptr = (burst ? burst->obj : NULL);
    self->obj->NotifyTxEnd(ns3::Ptr< ns3::PacketBurst  > (burst_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_SetSNRToBlockErrorRateTracesPath(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char *tracesPath;
    const char *keywords[] = {"tracesPath", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s", (char **) keywords, &tracesPath)) {
        return NULL;
    }
    self->obj->SetSNRToBlockErrorRateTracesPath(tracesPath);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_AssignStreams(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_GetTxPower(PyNs3SimpleOfdmWimaxPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTxPower();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_NotifyRxBegin(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3PacketBurst *burst;
    ns3::PacketBurst *burst_ptr;
    const char *keywords[] = {"burst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3PacketBurst_Type, &burst)) {
        return NULL;
    }
    burst_ptr = (burst ? burst->obj : NULL);
    self->obj->NotifyRxBegin(ns3::Ptr< ns3::PacketBurst  > (burst_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_SetTxPower(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double txPower;
    const char *keywords[] = {"txPower", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &txPower)) {
        return NULL;
    }
    self->obj->SetTxPower(txPower);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_NotifyRxDrop(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3PacketBurst *burst;
    ns3::PacketBurst *burst_ptr;
    const char *keywords[] = {"burst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3PacketBurst_Type, &burst)) {
        return NULL;
    }
    burst_ptr = (burst ? burst->obj : NULL);
    self->obj->NotifyRxDrop(ns3::Ptr< ns3::PacketBurst  > (burst_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_ActivateLoss(PyNs3SimpleOfdmWimaxPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool loss;
    PyObject *py_loss;
    const char *keywords[] = {"loss", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_loss)) {
        return NULL;
    }
    loss = (bool) PyObject_IsTrue(py_loss);
    self->obj->ActivateLoss(loss);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxPhy_GetPhyType(PyNs3SimpleOfdmWimaxPhy *self)
{
    PyObject *py_retval;
    ns3::WimaxPhy::PhyType retval;
    
    retval = self->obj->GetPhyType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleOfdmWimaxPhy__copy__(PyNs3SimpleOfdmWimaxPhy *self)
{

    PyNs3SimpleOfdmWimaxPhy *py_copy;
    py_copy = PyObject_GC_New(PyNs3SimpleOfdmWimaxPhy, &PyNs3SimpleOfdmWimaxPhy_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::SimpleOfdmWimaxPhy(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleOfdmWimaxPhy_methods[] = {
    {(char *) "GetNoiseFigure", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_GetNoiseFigure, METH_NOARGS, "GetNoiseFigure()\n\n" },
    {(char *) "NotifyTxDrop", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_NotifyTxDrop, METH_KEYWORDS|METH_VARARGS, "NotifyTxDrop(burst)\n\ntype: burst: ns3::Ptr< ns3::PacketBurst >" },
    {(char *) "NotifyRxEnd", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_NotifyRxEnd, METH_KEYWORDS|METH_VARARGS, "NotifyRxEnd(burst)\n\ntype: burst: ns3::Ptr< ns3::PacketBurst >" },
    {(char *) "SetNoiseFigure", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_SetNoiseFigure, METH_KEYWORDS|METH_VARARGS, "SetNoiseFigure(nf)\n\ntype: nf: double" },
    {(char *) "StartReceive", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_StartReceive, METH_KEYWORDS|METH_VARARGS, "StartReceive(burstSize, isFirstBlock, frequency, modulationType, direction, rxPower, burst)\n\ntype: burstSize: uint32_t\ntype: isFirstBlock: bool\ntype: frequency: uint64_t\ntype: modulationType: ns3::WimaxPhy::ModulationType\ntype: direction: uint8_t\ntype: rxPower: double\ntype: burst: ns3::Ptr< ns3::PacketBurst >" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetBandwidth", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_SetBandwidth, METH_KEYWORDS|METH_VARARGS, "SetBandwidth(BW)\n\ntype: BW: uint32_t" },
    {(char *) "Send", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_Send, METH_KEYWORDS|METH_VARARGS, "Send(burst, modulationType, direction)\n\ntype: burst: ns3::Ptr< ns3::PacketBurst >\ntype: modulationType: ns3::WimaxPhy::ModulationType\ntype: direction: uint8_t" },
    {(char *) "NotifyTxBegin", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_NotifyTxBegin, METH_KEYWORDS|METH_VARARGS, "NotifyTxBegin(burst)\n\ntype: burst: ns3::Ptr< ns3::PacketBurst >" },
    {(char *) "DoAttach", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_DoAttach, METH_KEYWORDS|METH_VARARGS, "DoAttach(channel)\n\ntype: channel: ns3::Ptr< ns3::WimaxChannel >" },
    {(char *) "GetBandwidth", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_GetBandwidth, METH_NOARGS, "GetBandwidth()\n\n" },
    {(char *) "NotifyTxEnd", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_NotifyTxEnd, METH_KEYWORDS|METH_VARARGS, "NotifyTxEnd(burst)\n\ntype: burst: ns3::Ptr< ns3::PacketBurst >" },
    {(char *) "SetSNRToBlockErrorRateTracesPath", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_SetSNRToBlockErrorRateTracesPath, METH_KEYWORDS|METH_VARARGS, "SetSNRToBlockErrorRateTracesPath(tracesPath)\n\ntype: tracesPath: char *" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {(char *) "GetTxPower", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_GetTxPower, METH_NOARGS, "GetTxPower()\n\n" },
    {(char *) "NotifyRxBegin", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_NotifyRxBegin, METH_KEYWORDS|METH_VARARGS, "NotifyRxBegin(burst)\n\ntype: burst: ns3::Ptr< ns3::PacketBurst >" },
    {(char *) "SetTxPower", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_SetTxPower, METH_KEYWORDS|METH_VARARGS, "SetTxPower(txPower)\n\ntype: txPower: double" },
    {(char *) "NotifyRxDrop", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_NotifyRxDrop, METH_KEYWORDS|METH_VARARGS, "NotifyRxDrop(burst)\n\ntype: burst: ns3::Ptr< ns3::PacketBurst >" },
    {(char *) "ActivateLoss", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_ActivateLoss, METH_KEYWORDS|METH_VARARGS, "ActivateLoss(loss)\n\ntype: loss: bool" },
    {(char *) "GetPhyType", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy_GetPhyType, METH_NOARGS, "GetPhyType()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxPhy__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3SimpleOfdmWimaxPhy__tp_clear(PyNs3SimpleOfdmWimaxPhy *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::SimpleOfdmWimaxPhy *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3SimpleOfdmWimaxPhy__tp_traverse(PyNs3SimpleOfdmWimaxPhy *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3SimpleOfdmWimaxPhy__tp_dealloc(PyNs3SimpleOfdmWimaxPhy *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3SimpleOfdmWimaxPhy__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleOfdmWimaxPhy__tp_richcompare (PyNs3SimpleOfdmWimaxPhy *PYBINDGEN_UNUSED(self), PyNs3SimpleOfdmWimaxPhy *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleOfdmWimaxPhy_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleOfdmWimaxPhy_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.SimpleOfdmWimaxPhy",            /* tp_name */
    sizeof(PyNs3SimpleOfdmWimaxPhy),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleOfdmWimaxPhy__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "SimpleOfdmWimaxPhy(tracesPath)\nSimpleOfdmWimaxPhy(arg0)\nSimpleOfdmWimaxPhy()",                        /* Documentation string */
    (traverseproc)PyNs3SimpleOfdmWimaxPhy__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3SimpleOfdmWimaxPhy__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleOfdmWimaxPhy__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleOfdmWimaxPhy_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3SimpleOfdmWimaxPhy, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleOfdmWimaxPhy__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3WimaxChannel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3WimaxChannel *self)
{
    PyObject *py_retval;
    PyNs3WimaxChannel__PythonHelper *helper = dynamic_cast< PyNs3WimaxChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WimaxChannel__PythonHelper::_wrap_DoInitialize(PyNs3WimaxChannel *self)
{
    PyObject *py_retval;
    PyNs3WimaxChannel__PythonHelper *helper = dynamic_cast< PyNs3WimaxChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WimaxChannel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3WimaxChannel *self)
{
    PyObject *py_retval;
    PyNs3WimaxChannel__PythonHelper *helper = dynamic_cast< PyNs3WimaxChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WimaxChannel__PythonHelper::_wrap_DoDispose(PyNs3WimaxChannel *self)
{
    PyObject *py_retval;
    PyNs3WimaxChannel__PythonHelper *helper = dynamic_cast< PyNs3WimaxChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

int64_t
PyNs3WimaxChannel__PythonHelper::AssignStreams(int64_t stream)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxChannel *self_obj_before;
    PyObject *py_retval;
    int64_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "AssignStreams"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = (ns3::WimaxChannel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "AssignStreams", (char *) "L", stream);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "L", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::NetDevice >
PyNs3WimaxChannel__PythonHelper::GetDevice(uint32_t i) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxChannel *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    PyNs3NetDevice *tmp_NetDevice;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetDevice"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxChannel::GetDevice(i);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = const_cast< ns3::WimaxChannel* >((const ns3::WimaxChannel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetDevice", (char *) "N", PyLong_FromUnsignedLong(i));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxChannel::GetDevice(i);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NetDevice_Type, &tmp_NetDevice)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxChannel::GetDevice(i);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::NetDevice  > (tmp_NetDevice->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3WimaxChannel__PythonHelper::GetNDevices() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxChannel *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNDevices"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxChannel::GetNDevices();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = const_cast< ns3::WimaxChannel* >((const ns3::WimaxChannel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNDevices", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxChannel::GetNDevices();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxChannel::GetNDevices();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WimaxChannel__PythonHelper::DoAttach(ns3::Ptr< ns3::WimaxPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxChannel *self_obj_before;
    PyObject *py_retval;
    PyNs3WimaxPhy *py_WimaxPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoAttach"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = (ns3::WimaxChannel*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (phy)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WimaxPhy = NULL;
    } else {
        py_WimaxPhy = (PyNs3WimaxPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_WimaxPhy);
    }
    
    if (py_WimaxPhy == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (phy))), &PyNs3WimaxPhy_Type);
        py_WimaxPhy = PyObject_GC_New(PyNs3WimaxPhy, wrapper_type);
        py_WimaxPhy->inst_dict = NULL;
    
        py_WimaxPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (phy))->Ref();
        py_WimaxPhy->obj = const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (phy));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxPhy->obj] = (PyObject *) py_WimaxPhy;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoAttach", (char *) "N", py_WimaxPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::NetDevice >
PyNs3WimaxChannel__PythonHelper::DoGetDevice(uint32_t i) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxChannel *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    PyNs3NetDevice *tmp_NetDevice;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoGetDevice"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = const_cast< ns3::WimaxChannel* >((const ns3::WimaxChannel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoGetDevice", (char *) "N", PyLong_FromUnsignedLong(i));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NetDevice_Type, &tmp_NetDevice)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::NetDevice  > (tmp_NetDevice->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3WimaxChannel__PythonHelper::DoGetNDevices() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxChannel *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoGetNDevices"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = const_cast< ns3::WimaxChannel* >((const ns3::WimaxChannel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoGetNDevices", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3WimaxChannel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WimaxChannel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WimaxChannel__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WimaxChannel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WimaxChannel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WimaxChannel__tp_init__0(PyNs3WimaxChannel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WimaxChannel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WimaxChannel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WimaxChannel_Type)
    {
        self->obj = new PyNs3WimaxChannel__PythonHelper(*((PyNs3WimaxChannel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WimaxChannel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WimaxChannel' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3WimaxChannel__tp_init__1(PyNs3WimaxChannel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WimaxChannel_Type)
    {
        self->obj = new PyNs3WimaxChannel__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WimaxChannel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WimaxChannel' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3WimaxChannel__tp_init(PyNs3WimaxChannel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WimaxChannel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxChannel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WimaxChannel_GetNDevices(PyNs3WimaxChannel *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3WimaxChannel__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxChannel__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetNDevices()) : (self->obj->ns3::WimaxChannel::GetNDevices());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxChannel_Attach(PyNs3WimaxChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WimaxPhy *phy;
    ns3::WimaxPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WimaxPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->Attach(ns3::Ptr< ns3::WimaxPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxChannel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WimaxChannel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxChannel_GetDevice(PyNs3WimaxChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    unsigned int i;
    PyNs3WimaxChannel__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxChannel__PythonHelper*> (self->obj);
    const char *keywords[] = {"i", NULL};
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &i)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->GetDevice(i)) : (self->obj->ns3::WimaxChannel::GetDevice(i));
    if (!(const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
    {
        py_NetDevice = reinterpret_cast< PyNs3NetDevice* >(reinterpret_cast< PyNs3NetDevice__PythonHelper* >(const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))->m_pyself);
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval));
        Py_INCREF(py_NetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }
    
        if (py_NetDevice == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
    
            py_NetDevice->inst_dict = NULL;
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_NetDevice);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxChannel_AssignStreams(PyNs3WimaxChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}

static PyMethodDef PyNs3WimaxChannel_methods[] = {
    {(char *) "GetNDevices", (PyCFunction) _wrap_PyNs3WimaxChannel_GetNDevices, METH_NOARGS, "GetNDevices()\n\n" },
    {(char *) "Attach", (PyCFunction) _wrap_PyNs3WimaxChannel_Attach, METH_KEYWORDS|METH_VARARGS, "Attach(phy)\n\ntype: phy: ns3::Ptr< ns3::WimaxPhy >" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WimaxChannel_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetDevice", (PyCFunction) _wrap_PyNs3WimaxChannel_GetDevice, METH_KEYWORDS|METH_VARARGS, "GetDevice(i)\n\ntype: i: uint32_t" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3WimaxChannel_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3WimaxChannel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3WimaxChannel__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3WimaxChannel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3WimaxChannel__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WimaxChannel__tp_clear(PyNs3WimaxChannel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WimaxChannel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WimaxChannel__tp_traverse(PyNs3WimaxChannel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3WimaxChannel__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WimaxChannel__tp_dealloc(PyNs3WimaxChannel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WimaxChannel__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WimaxChannel__tp_richcompare (PyNs3WimaxChannel *PYBINDGEN_UNUSED(self), PyNs3WimaxChannel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WimaxChannel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WimaxChannel_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.WimaxChannel",            /* tp_name */
    sizeof(PyNs3WimaxChannel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WimaxChannel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WimaxChannel(arg0)\nWimaxChannel()",                        /* Documentation string */
    (traverseproc)PyNs3WimaxChannel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WimaxChannel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WimaxChannel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WimaxChannel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WimaxChannel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WimaxChannel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3WimaxNetDevice__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    PyNs3WimaxNetDevice__PythonHelper *helper = dynamic_cast< PyNs3WimaxNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WimaxNetDevice__PythonHelper::_wrap_DoInitialize(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    PyNs3WimaxNetDevice__PythonHelper *helper = dynamic_cast< PyNs3WimaxNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WimaxNetDevice__PythonHelper::_wrap_NotifyNewAggregate(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    PyNs3WimaxNetDevice__PythonHelper *helper = dynamic_cast< PyNs3WimaxNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3WimaxNetDevice__PythonHelper::SetConnectionManager(ns3::Ptr< ns3::ConnectionManager > connectionManager)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3ConnectionManager *py_ConnectionManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetConnectionManager"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WimaxNetDevice::SetConnectionManager(connectionManager);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    if (typeid(*(const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager)))).name() == typeid(PyNs3ConnectionManager__PythonHelper).name())
    {
        py_ConnectionManager = (PyNs3ConnectionManager*) (((PyNs3ConnectionManager__PythonHelper*) const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager)))->m_pyself);
        py_ConnectionManager->obj = const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager));
        Py_INCREF(py_ConnectionManager);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_ConnectionManager = NULL;
        } else {
            py_ConnectionManager = (PyNs3ConnectionManager *) wrapper_lookup_iter->second;
            Py_INCREF(py_ConnectionManager);
        }
    
        if (py_ConnectionManager == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager))), &PyNs3ConnectionManager_Type);
            py_ConnectionManager = PyObject_GC_New(PyNs3ConnectionManager, wrapper_type);
            py_ConnectionManager->inst_dict = NULL;
    
            py_ConnectionManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager))->Ref();
            py_ConnectionManager->obj = const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager));
            PyNs3ObjectBase_wrapper_registry[(void *) py_ConnectionManager->obj] = (PyObject *) py_ConnectionManager;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetConnectionManager", (char *) "N", py_ConnectionManager);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WimaxNetDevice__PythonHelper::Start()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Start"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Start", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WimaxNetDevice__PythonHelper::Stop()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Stop"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Stop", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3WimaxNetDevice__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::MacHeaderType const & hdrType, ns3::Ptr< ns3::WimaxConnection > connection)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3MacHeaderType *py_MacHeaderType;
    PyNs3WimaxConnection *py_WimaxConnection;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_MacHeaderType = PyObject_GC_New(PyNs3MacHeaderType, &PyNs3MacHeaderType_Type);
    py_MacHeaderType->inst_dict = NULL;
    py_MacHeaderType->inst_dict = NULL;
    py_MacHeaderType->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MacHeaderType->obj = new ns3::MacHeaderType(hdrType);
    PyNs3ObjectBase_wrapper_registry[(void *) py_MacHeaderType->obj] = (PyObject *) py_MacHeaderType;
    if (typeid(*(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection)))).name() == typeid(PyNs3WimaxConnection__PythonHelper).name())
    {
        py_WimaxConnection = (PyNs3WimaxConnection*) (((PyNs3WimaxConnection__PythonHelper*) const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection)))->m_pyself);
        py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection));
        Py_INCREF(py_WimaxConnection);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WimaxConnection = NULL;
        } else {
            py_WimaxConnection = (PyNs3WimaxConnection *) wrapper_lookup_iter2->second;
            Py_INCREF(py_WimaxConnection);
        }
    
        if (py_WimaxConnection == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection))), &PyNs3WimaxConnection_Type);
            py_WimaxConnection = PyObject_GC_New(PyNs3WimaxConnection, wrapper_type2);
            py_WimaxConnection->inst_dict = NULL;
    
            py_WimaxConnection->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection))->Ref();
            py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxConnection->obj] = (PyObject *) py_WimaxConnection;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNN", py_Packet, py_MacHeaderType, py_WimaxConnection);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WimaxNetDevice__PythonHelper::SetName(std::string const name)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    const char *name_ptr;
    Py_ssize_t name_len;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetName"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WimaxNetDevice::SetName(name);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    name_ptr = (name).c_str();
    name_len = (name).size();
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetName", (char *) "s#", name_ptr, name_len);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

std::string
PyNs3WimaxNetDevice__PythonHelper::GetName() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    std::string retval;
    const char *retval_ptr;
    Py_ssize_t retval_len;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetName"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetName();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetName", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetName();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &retval_ptr, &retval_len)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetName();
    }
    retval = std::string(retval_ptr, retval_len);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WimaxNetDevice__PythonHelper::SetIfIndex(uint32_t const index)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetIfIndex"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WimaxNetDevice::SetIfIndex(index);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetIfIndex", (char *) "N", PyLong_FromUnsignedLong(index));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

uint32_t
PyNs3WimaxNetDevice__PythonHelper::GetIfIndex() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetIfIndex"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetIfIndex();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetIfIndex", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetIfIndex();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetIfIndex();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Channel >
PyNs3WimaxNetDevice__PythonHelper::GetPhyChannel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3Channel *tmp_Channel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPhyChannel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetPhyChannel();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPhyChannel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetPhyChannel();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Channel_Type, &tmp_Channel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetPhyChannel();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Channel  > (tmp_Channel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Channel >
PyNs3WimaxNetDevice__PythonHelper::GetChannel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3Channel *tmp_Channel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetChannel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetChannel();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetChannel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetChannel();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Channel_Type, &tmp_Channel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetChannel();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Channel  > (tmp_Channel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WimaxNetDevice__PythonHelper::SetAddress(ns3::Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *py_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WimaxNetDevice::SetAddress(address);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(address);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Address
PyNs3WimaxNetDevice__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetAddress();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WimaxNetDevice__PythonHelper::SetMtu(uint16_t const mtu)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMtu"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SetMtu(mtu);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMtu", (char *) "i", (int) mtu);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SetMtu(mtu);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SetMtu(mtu);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint16_t
PyNs3WimaxNetDevice__PythonHelper::GetMtu() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    uint16_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMtu"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMtu();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMtu", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMtu();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMtu();
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMtu();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WimaxNetDevice__PythonHelper::IsLinkUp() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsLinkUp"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsLinkUp();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsLinkUp", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsLinkUp();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsLinkUp();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


bool
PyNs3WimaxNetDevice__PythonHelper::IsBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsBroadcast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBroadcast();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3WimaxNetDevice__PythonHelper::GetBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBroadcast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetBroadcast();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WimaxNetDevice__PythonHelper::IsMulticast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsMulticast();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsMulticast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsMulticast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsMulticast();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3WimaxNetDevice__PythonHelper::GetMulticast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3WimaxNetDevice__PythonHelper::MakeMulticastAddress(ns3::Ipv4Address multicastGroup) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "MakeMulticastAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::MakeMulticastAddress(multicastGroup);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(multicastGroup);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "MakeMulticastAddress", (char *) "N", py_Ipv4Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::MakeMulticastAddress(multicastGroup);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::MakeMulticastAddress(multicastGroup);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WimaxNetDevice__PythonHelper::IsPointToPoint() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsPointToPoint"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsPointToPoint();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsPointToPoint", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsPointToPoint();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsPointToPoint();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WimaxNetDevice__PythonHelper::Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Send"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::Send(packet, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Send", (char *) "NNi", py_Packet, py_Address, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::Send(packet, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::Send(packet, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WimaxNetDevice__PythonHelper::SetNode(ns3::Ptr< ns3::Node > node)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetNode"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WimaxNetDevice::SetNode(node);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    if (typeid(*(const_cast<ns3::Node *> (ns3::PeekPointer (node)))).name() == typeid(PyNs3Node__PythonHelper).name())
    {
        py_Node = (PyNs3Node*) (((PyNs3Node__PythonHelper*) const_cast<ns3::Node *> (ns3::PeekPointer (node)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (node)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Node *> (ns3::PeekPointer (node))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
    
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (node))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetNode", (char *) "N", py_Node);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::Node >
PyNs3WimaxNetDevice__PythonHelper::GetNode() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3Node *tmp_Node;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNode"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetNode();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNode", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetNode();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Node_Type, &tmp_Node)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetNode();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Node  > (tmp_Node->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WimaxNetDevice__PythonHelper::NeedsArp() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NeedsArp"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::NeedsArp();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NeedsArp", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::NeedsArp();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::NeedsArp();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}



bool
PyNs3WimaxNetDevice__PythonHelper::SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyNs3Address *py_Address2;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SendFrom"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(source);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address2->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SendFrom", (char *) "NNNi", py_Packet, py_Address, py_Address2, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


bool
PyNs3WimaxNetDevice__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WimaxNetDevice__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WimaxNetDevice::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Address
PyNs3WimaxNetDevice__PythonHelper::GetMulticast(ns3::Ipv6Address addr) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv6Address *py_Ipv6Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(addr);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_Ipv6Address = PyObject_New(PyNs3Ipv6Address, &PyNs3Ipv6Address_Type);
    py_Ipv6Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv6Address->obj = new ns3::Ipv6Address(addr);
    PyNs3Ipv6Address_wrapper_registry[(void *) py_Ipv6Address->obj] = (PyObject *) py_Ipv6Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "N", py_Ipv6Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(addr);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(addr);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3WimaxNetDevice__PythonHelper::GetMulticast(ns3::Ipv4Address multicastGroup) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(multicastGroup);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(multicastGroup);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "N", py_Ipv4Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(multicastGroup);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(multicastGroup);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WimaxNetDevice__PythonHelper::IsBridge() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsBridge"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBridge();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsBridge", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBridge();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBridge();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WimaxNetDevice__PythonHelper::DoSend(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address const & source, ns3::Mac48Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoSend"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(source);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(dest);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoSend", (char *) "NNNi", py_Packet, py_Mac48Address, py_Mac48Address2, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WimaxNetDevice__PythonHelper::DoReceive(ns3::Ptr< ns3::Packet > packet)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoReceive"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoReceive", (char *) "N", py_Packet);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::WimaxChannel >
PyNs3WimaxNetDevice__PythonHelper::DoGetChannel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxChannel > retval;
    PyNs3WimaxChannel *tmp_WimaxChannel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoGetChannel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoGetChannel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WimaxChannel_Type, &tmp_WimaxChannel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WimaxChannel  > (tmp_WimaxChannel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3WimaxNetDevice__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WimaxNetDevice__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WimaxNetDevice__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WimaxNetDevice__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}
static PyObject* _wrap_PyNs3WimaxNetDevice__get_m_direction(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)ns3::WimaxNetDevice::m_direction);
    return py_retval;
}
static int _wrap_PyNs3WimaxNetDevice__set_m_direction(PyNs3WimaxNetDevice * PYBINDGEN_UNUSED(dummy), PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    ns3::WimaxNetDevice::m_direction = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WimaxNetDevice__get_m_frameStartTime(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ns3::WimaxNetDevice::m_frameStartTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}
static int _wrap_PyNs3WimaxNetDevice__set_m_frameStartTime(PyNs3WimaxNetDevice * PYBINDGEN_UNUSED(dummy), PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        Py_DECREF(py_retval);
        return -1;
    }
    ns3::WimaxNetDevice::m_frameStartTime = *tmp_Time->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef Ns3WimaxNetDeviceMeta__getsets[] = {
    {
        (char*) "m_direction", /* attribute name */
        (getter) _wrap_PyNs3WimaxNetDevice__get_m_direction, /* C function to get the attribute */
        (setter) _wrap_PyNs3WimaxNetDevice__set_m_direction, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_frameStartTime", /* attribute name */
        (getter) _wrap_PyNs3WimaxNetDevice__get_m_frameStartTime, /* C function to get the attribute */
        (setter) _wrap_PyNs3WimaxNetDevice__set_m_frameStartTime, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyNs3WimaxNetDeviceMeta_Type = {
        PyVarObject_HEAD_INIT(NULL, 0)
	(char *) "Ns3WimaxNetDeviceMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	Ns3WimaxNetDeviceMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};


static int
_wrap_PyNs3WimaxNetDevice__tp_init(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3WimaxNetDevice_Type)
    {
        self->obj = new PyNs3WimaxNetDevice__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3WimaxNetDevice__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WimaxNetDevice' cannot be constructed");
        return -1;
    }
    return 0;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetMacAddress(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetMacAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_IsMulticast(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsMulticast()) : (self->obj->ns3::WimaxNetDevice::IsMulticast());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetLinkChangeCallback(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl2> callback_cb_impl;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl2> (callback);
    (helper_class == NULL)? (self->obj->SetLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl))) : (self->obj->ns3::WimaxNetDevice::SetLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetCurrentDcd(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Dcd *py_Dcd;
    
    ns3::Dcd retval = self->obj->GetCurrentDcd();
    py_Dcd = PyObject_GC_New(PyNs3Dcd, &PyNs3Dcd_Type);
    py_Dcd->inst_dict = NULL;
    py_Dcd->inst_dict = NULL;
    py_Dcd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Dcd->obj = new ns3::Dcd(retval);
    PyNs3ObjectBase_wrapper_registry[(void *) py_Dcd->obj] = (PyObject *) py_Dcd;
    py_retval = Py_BuildValue((char *) "N", py_Dcd);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetMacAddress(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->SetMacAddress(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetRtg(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rtg;
    const char *keywords[] = {"rtg", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rtg)) {
        return NULL;
    }
    if (rtg > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRtg(rtg);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_Stop(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    
    self->obj->Stop();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WimaxNetDevice::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetRtg(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetRtg();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}



PyObject *
_wrap_PyNs3WimaxNetDevice_GetMulticast__0(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {NULL};
    PyNs3Address *py_Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetMulticast()) : (self->obj->ns3::WimaxNetDevice::GetMulticast());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxNetDevice_GetMulticast__1(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Ipv6Address *addr;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"addr", NULL};
    PyNs3Address *py_Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv6Address_Type, &addr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetMulticast(*((PyNs3Ipv6Address *) addr)->obj)) : (self->obj->ns3::WimaxNetDevice::GetMulticast(*((PyNs3Ipv6Address *) addr)->obj));
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxNetDevice_GetMulticast__2(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *multicastGroup;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"multicastGroup", NULL};
    PyNs3Address *py_Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &multicastGroup)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetMulticast(*((PyNs3Ipv4Address *) multicastGroup)->obj)) : (self->obj->ns3::WimaxNetDevice::GetMulticast(*((PyNs3Ipv4Address *) multicastGroup)->obj));
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}

PyObject * _wrap_PyNs3WimaxNetDevice_GetMulticast(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3WimaxNetDevice_GetMulticast__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxNetDevice_GetMulticast__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WimaxNetDevice_GetMulticast__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_Send(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyObject *dest;
    ns3::Address dest2;
    int protocolNumber;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "dest", "protocolNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!Oi", (char **) keywords, &PyNs3Packet_Type, &packet, &dest, &protocolNumber)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Address_Type)) {
        dest2 = *((PyNs3Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv4Address_Type)) {
        dest2 = *((PyNs3Ipv4Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv6Address_Type)) {
        dest2 = *((PyNs3Ipv6Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac48Address_Type)) {
        dest2 = *((PyNs3Mac48Address *) dest)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Ipv4Address, Ipv6Address, Mac48Address), not %s", Py_TYPE(dest)->tp_name);
        return NULL;
    }
    if (protocolNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Send(ns3::Ptr< ns3::Packet  > (packet_ptr), dest2, protocolNumber)) : (self->obj->ns3::WimaxNetDevice::Send(ns3::Ptr< ns3::Packet  > (packet_ptr), dest2, protocolNumber));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_NotifyPromiscTrace(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *p;
    ns3::Packet *p_ptr;
    const char *keywords[] = {"p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &p)) {
        return NULL;
    }
    p_ptr = (p ? p->obj : NULL);
    self->obj->NotifyPromiscTrace(ns3::Ptr< ns3::Packet  > (p_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_Attach(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WimaxChannel *channel;
    ns3::WimaxChannel *channel_ptr;
    const char *keywords[] = {"channel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WimaxChannel_Type, &channel)) {
        return NULL;
    }
    channel_ptr = (channel ? channel->obj : NULL);
    self->obj->Attach(ns3::Ptr< ns3::WimaxChannel  > (channel_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_NeedsArp(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->NeedsArp()) : (self->obj->ns3::WimaxNetDevice::NeedsArp());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetTtg(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ttg;
    const char *keywords[] = {"ttg", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ttg)) {
        return NULL;
    }
    if (ttg > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTtg(ttg);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetPromiscReceiveCallback(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl3> cb_cb_impl;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl3> (cb);
    (helper_class == NULL)? (self->obj->SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl))) : (self->obj->ns3::WimaxNetDevice::SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetNode(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetNode()) : (self->obj->ns3::WimaxNetDevice::GetNode());
    if (!(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Node__PythonHelper).name())
    {
        py_Node = reinterpret_cast< PyNs3Node* >(reinterpret_cast< PyNs3Node__PythonHelper* >(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
    
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (retval))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_ForwardUp(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *source;
    PyNs3Mac48Address *dest;
    const char *keywords[] = {"packet", "source", "dest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &source, &PyNs3Mac48Address_Type, &dest)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->ForwardUp(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) source)->obj, *((PyNs3Mac48Address *) dest)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetInitialRangingConnection(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxConnection > retval;
    PyNs3WimaxConnection *py_WimaxConnection;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetInitialRangingConnection();
    if (!(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3WimaxConnection__PythonHelper).name())
    {
        py_WimaxConnection = reinterpret_cast< PyNs3WimaxConnection* >(reinterpret_cast< PyNs3WimaxConnection__PythonHelper* >(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))->m_pyself);
        py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval));
        Py_INCREF(py_WimaxConnection);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WimaxConnection = NULL;
        } else {
            py_WimaxConnection = (PyNs3WimaxConnection *) wrapper_lookup_iter->second;
            Py_INCREF(py_WimaxConnection);
        }
    
        if (py_WimaxConnection == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))), &PyNs3WimaxConnection_Type);
            py_WimaxConnection = PyObject_GC_New(PyNs3WimaxConnection, wrapper_type);
            py_WimaxConnection->inst_dict = NULL;
    
            py_WimaxConnection->inst_dict = NULL;
            py_WimaxConnection->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval))->Ref();
            py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxConnection->obj] = (PyObject *) py_WimaxConnection;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxConnection);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SendFrom(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyObject *source;
    ns3::Address source2;
    PyObject *dest;
    ns3::Address dest2;
    int protocolNumber;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "source", "dest", "protocolNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!OOi", (char **) keywords, &PyNs3Packet_Type, &packet, &source, &dest, &protocolNumber)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (PyObject_IsInstance(source, (PyObject*) &PyNs3Address_Type)) {
        source2 = *((PyNs3Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Ipv4Address_Type)) {
        source2 = *((PyNs3Ipv4Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Ipv6Address_Type)) {
        source2 = *((PyNs3Ipv6Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Mac48Address_Type)) {
        source2 = *((PyNs3Mac48Address *) source)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Ipv4Address, Ipv6Address, Mac48Address), not %s", Py_TYPE(source)->tp_name);
        return NULL;
    }
    if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Address_Type)) {
        dest2 = *((PyNs3Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv4Address_Type)) {
        dest2 = *((PyNs3Ipv4Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv6Address_Type)) {
        dest2 = *((PyNs3Ipv6Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac48Address_Type)) {
        dest2 = *((PyNs3Mac48Address *) dest)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Ipv4Address, Ipv6Address, Mac48Address), not %s", Py_TYPE(dest)->tp_name);
        return NULL;
    }
    if (protocolNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->SendFrom(ns3::Ptr< ns3::Packet  > (packet_ptr), source2, dest2, protocolNumber)) : (self->obj->ns3::WimaxNetDevice::SendFrom(ns3::Ptr< ns3::Packet  > (packet_ptr), source2, dest2, protocolNumber));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetCurrentDcd(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Dcd *dcd;
    const char *keywords[] = {"dcd", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dcd_Type, &dcd)) {
        return NULL;
    }
    self->obj->SetCurrentDcd(*((PyNs3Dcd *) dcd)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_IsBroadcast(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsBroadcast()) : (self->obj->ns3::WimaxNetDevice::IsBroadcast());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_IsPointToPoint(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsPointToPoint()) : (self->obj->ns3::WimaxNetDevice::IsPointToPoint());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetCurrentUcd(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Ucd *py_Ucd;
    
    ns3::Ucd retval = self->obj->GetCurrentUcd();
    py_Ucd = PyObject_GC_New(PyNs3Ucd, &PyNs3Ucd_Type);
    py_Ucd->inst_dict = NULL;
    py_Ucd->inst_dict = NULL;
    py_Ucd->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ucd->obj = new ns3::Ucd(retval);
    PyNs3ObjectBase_wrapper_registry[(void *) py_Ucd->obj] = (PyObject *) py_Ucd;
    py_retval = Py_BuildValue((char *) "N", py_Ucd);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetNrFrames(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int nrFrames;
    const char *keywords[] = {"nrFrames", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &nrFrames)) {
        return NULL;
    }
    self->obj->SetNrFrames(nrFrames);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_Enqueue(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3MacHeaderType *hdrType;
    PyNs3WimaxConnection *connection;
    ns3::WimaxConnection *connection_ptr;
    const char *keywords[] = {"packet", "hdrType", "connection", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3MacHeaderType_Type, &hdrType, &PyNs3WimaxConnection_Type, &connection)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    connection_ptr = (connection ? connection->obj : NULL);
    retval = self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3MacHeaderType *) hdrType)->obj, ns3::Ptr< ns3::WimaxConnection  > (connection_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetBroadcastConnection(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxConnection > retval;
    PyNs3WimaxConnection *py_WimaxConnection;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetBroadcastConnection();
    if (!(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3WimaxConnection__PythonHelper).name())
    {
        py_WimaxConnection = reinterpret_cast< PyNs3WimaxConnection* >(reinterpret_cast< PyNs3WimaxConnection__PythonHelper* >(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))->m_pyself);
        py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval));
        Py_INCREF(py_WimaxConnection);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WimaxConnection = NULL;
        } else {
            py_WimaxConnection = (PyNs3WimaxConnection *) wrapper_lookup_iter->second;
            Py_INCREF(py_WimaxConnection);
        }
    
        if (py_WimaxConnection == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))), &PyNs3WimaxConnection_Type);
            py_WimaxConnection = PyObject_GC_New(PyNs3WimaxConnection, wrapper_type);
            py_WimaxConnection->inst_dict = NULL;
    
            py_WimaxConnection->inst_dict = NULL;
            py_WimaxConnection->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval))->Ref();
            py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxConnection->obj] = (PyObject *) py_WimaxConnection;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxConnection);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_IsPromisc(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsPromisc();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetMtu(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    uint16_t retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetMtu()) : (self->obj->ns3::WimaxNetDevice::GetMtu());
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_DoDispose(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::WimaxNetDevice::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_MakeMulticastAddress(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *multicastGroup;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"multicastGroup", NULL};
    PyNs3Address *py_Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &multicastGroup)) {
        return NULL;
    }
    ns3::Address retval = (helper_class == NULL)? (self->obj->MakeMulticastAddress(*((PyNs3Ipv4Address *) multicastGroup)->obj)) : (self->obj->ns3::WimaxNetDevice::MakeMulticastAddress(*((PyNs3Ipv4Address *) multicastGroup)->obj));
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetState(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int state;
    const char *keywords[] = {"state", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &state)) {
        return NULL;
    }
    if (state > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetState(state);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetNode(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    (helper_class == NULL)? (self->obj->SetNode(ns3::Ptr< ns3::Node  > (node_ptr))) : (self->obj->ns3::WimaxNetDevice::SetNode(ns3::Ptr< ns3::Node  > (node_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetConnectionManager(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ConnectionManager > retval;
    PyNs3ConnectionManager *py_ConnectionManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetConnectionManager();
    if (!(const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3ConnectionManager__PythonHelper).name())
    {
        py_ConnectionManager = reinterpret_cast< PyNs3ConnectionManager* >(reinterpret_cast< PyNs3ConnectionManager__PythonHelper* >(const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (retval)))->m_pyself);
        py_ConnectionManager->obj = const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (retval));
        Py_INCREF(py_ConnectionManager);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_ConnectionManager = NULL;
        } else {
            py_ConnectionManager = (PyNs3ConnectionManager *) wrapper_lookup_iter->second;
            Py_INCREF(py_ConnectionManager);
        }
    
        if (py_ConnectionManager == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (retval)))), &PyNs3ConnectionManager_Type);
            py_ConnectionManager = PyObject_GC_New(PyNs3ConnectionManager, wrapper_type);
            py_ConnectionManager->inst_dict = NULL;
    
            py_ConnectionManager->inst_dict = NULL;
            py_ConnectionManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (retval))->Ref();
            py_ConnectionManager->obj = const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_ConnectionManager->obj] = (PyObject *) py_ConnectionManager;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_ConnectionManager);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetBroadcast(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetBroadcast()) : (self->obj->ns3::WimaxNetDevice::GetBroadcast());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetName(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    std::string retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetName()) : (self->obj->ns3::WimaxNetDevice::GetName());
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_IsBridge(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsBridge()) : (self->obj->ns3::WimaxNetDevice::IsBridge());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetAddress(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetAddress()) : (self->obj->ns3::WimaxNetDevice::GetAddress());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetPhyChannel(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    PyNs3Channel *py_Channel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetPhyChannel()) : (self->obj->ns3::WimaxNetDevice::GetPhyChannel());
    if (!(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Channel__PythonHelper).name())
    {
        py_Channel = reinterpret_cast< PyNs3Channel* >(reinterpret_cast< PyNs3Channel__PythonHelper* >(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Channel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Channel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Channel = NULL;
        } else {
            py_Channel = (PyNs3Channel *) wrapper_lookup_iter->second;
            Py_INCREF(py_Channel);
        }
    
        if (py_Channel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))), &PyNs3Channel_Type);
            py_Channel = PyObject_GC_New(PyNs3Channel, wrapper_type);
            py_Channel->inst_dict = NULL;
    
            py_Channel->inst_dict = NULL;
            py_Channel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Channel *> (ns3::PeekPointer (retval))->Ref();
            py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Channel->obj] = (PyObject *) py_Channel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Channel);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetIfIndex(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int index;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"index", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &index)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetIfIndex(index)) : (self->obj->ns3::WimaxNetDevice::SetIfIndex(index));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetPhy(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WimaxPhy *phy;
    ns3::WimaxPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WimaxPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->SetPhy(ns3::Ptr< ns3::WimaxPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetAddress(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *address;
    ns3::Address address2;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &address)) {
        return NULL;
    }
    if (PyObject_IsInstance(address, (PyObject*) &PyNs3Address_Type)) {
        address2 = *((PyNs3Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Ipv4Address_Type)) {
        address2 = *((PyNs3Ipv4Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Ipv6Address_Type)) {
        address2 = *((PyNs3Ipv6Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Mac48Address_Type)) {
        address2 = *((PyNs3Mac48Address *) address)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Ipv4Address, Ipv6Address, Mac48Address), not %s", Py_TYPE(address)->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(address2)) : (self->obj->ns3::WimaxNetDevice::SetAddress(address2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_IsLinkUp(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsLinkUp()) : (self->obj->ns3::WimaxNetDevice::IsLinkUp());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_CreateDefaultConnections(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    
    self->obj->CreateDefaultConnections();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_AddLinkChangeCallback(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl2> callback_cb_impl;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl2> (callback);
    (helper_class == NULL)? (self->obj->AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl))) : (self->obj->ns3::WimaxNetDevice::AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetNrFrames(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNrFrames();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetState(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetState();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetName(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"name", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &name, &name_len)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetName(std::string(name, name_len))) : (self->obj->ns3::WimaxNetDevice::SetName(std::string(name, name_len)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_Start(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    
    self->obj->Start();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3WimaxNetDevice_SetReceiveCallback__0(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->SetReceiveCallback();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxNetDevice_SetReceiveCallback__1(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl4> cb_cb_impl;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl4> (cb);
    (helper_class == NULL)? (self->obj->SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl))) : (self->obj->ns3::WimaxNetDevice::SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3WimaxNetDevice_SetReceiveCallback(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WimaxNetDevice_SetReceiveCallback__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxNetDevice_SetReceiveCallback__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetChannel(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WimaxChannel *wimaxChannel;
    ns3::WimaxChannel *wimaxChannel_ptr;
    const char *keywords[] = {"wimaxChannel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WimaxChannel_Type, &wimaxChannel)) {
        return NULL;
    }
    wimaxChannel_ptr = (wimaxChannel ? wimaxChannel->obj : NULL);
    self->obj->SetChannel(ns3::Ptr< ns3::WimaxChannel  > (wimaxChannel_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetMtu(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int mtu;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"mtu", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &mtu)) {
        return NULL;
    }
    if (mtu > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->SetMtu(mtu)) : (self->obj->ns3::WimaxNetDevice::SetMtu(mtu));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetPhy(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxPhy > retval;
    PyNs3WimaxPhy *py_WimaxPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPhy();
    if (!(const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WimaxPhy = NULL;
    } else {
        py_WimaxPhy = (PyNs3WimaxPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_WimaxPhy);
    }
    
    if (py_WimaxPhy == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval)))), &PyNs3WimaxPhy_Type);
        py_WimaxPhy = PyObject_GC_New(PyNs3WimaxPhy, wrapper_type);
        py_WimaxPhy->inst_dict = NULL;
    
        py_WimaxPhy->inst_dict = NULL;
        py_WimaxPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval))->Ref();
        py_WimaxPhy->obj = const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxPhy->obj] = (PyObject *) py_WimaxPhy;
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxPhy);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SupportsSendFrom(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->SupportsSendFrom()) : (self->obj->ns3::WimaxNetDevice::SupportsSendFrom());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}



PyObject *
_wrap_PyNs3WimaxNetDevice_GetChannel__0(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    uint64_t retval;
    int index;
    const char *keywords[] = {"index", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &index)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    if (index > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->GetChannel(index);
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}

PyObject *
_wrap_PyNs3WimaxNetDevice_GetChannel__1(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {NULL};
    PyNs3Channel *py_Channel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->GetChannel()) : (self->obj->ns3::WimaxNetDevice::GetChannel());
    if (!(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Channel__PythonHelper).name())
    {
        py_Channel = reinterpret_cast< PyNs3Channel* >(reinterpret_cast< PyNs3Channel__PythonHelper* >(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Channel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Channel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Channel = NULL;
        } else {
            py_Channel = (PyNs3Channel *) wrapper_lookup_iter->second;
            Py_INCREF(py_Channel);
        }
    
        if (py_Channel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))), &PyNs3Channel_Type);
            py_Channel = PyObject_GC_New(PyNs3Channel, wrapper_type);
            py_Channel->inst_dict = NULL;
    
            py_Channel->inst_dict = NULL;
            py_Channel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Channel *> (ns3::PeekPointer (retval))->Ref();
            py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Channel->obj] = (PyObject *) py_Channel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Channel);
    return py_retval;
}

PyObject * _wrap_PyNs3WimaxNetDevice_GetChannel(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WimaxNetDevice_GetChannel__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WimaxNetDevice_GetChannel__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetCurrentUcd(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ucd *ucd;
    const char *keywords[] = {"ucd", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ucd_Type, &ucd)) {
        return NULL;
    }
    self->obj->SetCurrentUcd(*((PyNs3Ucd *) ucd)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_ForwardDown(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3PacketBurst *burst;
    ns3::PacketBurst *burst_ptr;
    ns3::WimaxPhy::ModulationType modulationType;
    const char *keywords[] = {"burst", "modulationType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3PacketBurst_Type, &burst, &modulationType)) {
        return NULL;
    }
    burst_ptr = (burst ? burst->obj : NULL);
    self->obj->ForwardDown(ns3::Ptr< ns3::PacketBurst  > (burst_ptr), modulationType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetTtg(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetTtg();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_SetConnectionManager(PyNs3WimaxNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ConnectionManager *connectionManager;
    ns3::ConnectionManager *connectionManager_ptr;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"connectionManager", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ConnectionManager_Type, &connectionManager)) {
        return NULL;
    }
    connectionManager_ptr = (connectionManager ? connectionManager->obj : NULL);
    (helper_class == NULL)? (self->obj->SetConnectionManager(ns3::Ptr< ns3::ConnectionManager  > (connectionManager_ptr))) : (self->obj->ns3::WimaxNetDevice::SetConnectionManager(ns3::Ptr< ns3::ConnectionManager  > (connectionManager_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WimaxNetDevice_GetIfIndex(PyNs3WimaxNetDevice *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3WimaxNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WimaxNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetIfIndex()) : (self->obj->ns3::WimaxNetDevice::GetIfIndex());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

static PyMethodDef PyNs3WimaxNetDevice_methods[] = {
    {(char *) "GetMacAddress", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetMacAddress, METH_NOARGS, "GetMacAddress()\n\n" },
    {(char *) "IsMulticast", (PyCFunction) _wrap_PyNs3WimaxNetDevice_IsMulticast, METH_NOARGS, "IsMulticast()\n\n" },
    {(char *) "SetLinkChangeCallback", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetLinkChangeCallback, METH_KEYWORDS|METH_VARARGS, "SetLinkChangeCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetCurrentDcd", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetCurrentDcd, METH_NOARGS, "GetCurrentDcd()\n\n" },
    {(char *) "SetMacAddress", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetMacAddress, METH_KEYWORDS|METH_VARARGS, "SetMacAddress(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "SetRtg", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetRtg, METH_KEYWORDS|METH_VARARGS, "SetRtg(rtg)\n\ntype: rtg: uint16_t" },
    {(char *) "Stop", (PyCFunction) _wrap_PyNs3WimaxNetDevice_Stop, METH_NOARGS, "Stop()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetRtg", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetRtg, METH_NOARGS, "GetRtg()\n\n" },
    {(char *) "GetMulticast", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetMulticast, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Send", (PyCFunction) _wrap_PyNs3WimaxNetDevice_Send, METH_KEYWORDS|METH_VARARGS, "Send(packet, dest, protocolNumber)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: dest: ns3::Address const &\ntype: protocolNumber: uint16_t" },
    {(char *) "NotifyPromiscTrace", (PyCFunction) _wrap_PyNs3WimaxNetDevice_NotifyPromiscTrace, METH_KEYWORDS|METH_VARARGS, "NotifyPromiscTrace(p)\n\ntype: p: ns3::Ptr< ns3::Packet >" },
    {(char *) "Attach", (PyCFunction) _wrap_PyNs3WimaxNetDevice_Attach, METH_KEYWORDS|METH_VARARGS, "Attach(channel)\n\ntype: channel: ns3::Ptr< ns3::WimaxChannel >" },
    {(char *) "NeedsArp", (PyCFunction) _wrap_PyNs3WimaxNetDevice_NeedsArp, METH_NOARGS, "NeedsArp()\n\n" },
    {(char *) "SetTtg", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetTtg, METH_KEYWORDS|METH_VARARGS, "SetTtg(ttg)\n\ntype: ttg: uint16_t" },
    {(char *) "SetPromiscReceiveCallback", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetPromiscReceiveCallback, METH_KEYWORDS|METH_VARARGS, "SetPromiscReceiveCallback(cb)\n\ntype: cb: ns3::Callback< bool, ns3::Ptr< ns3::NetDevice >, ns3::Ptr< ns3::Packet const >, unsigned short, ns3::Address const &, ns3::Address const &, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetNode", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetNode, METH_NOARGS, "GetNode()\n\n" },
    {(char *) "ForwardUp", (PyCFunction) _wrap_PyNs3WimaxNetDevice_ForwardUp, METH_KEYWORDS|METH_VARARGS, "ForwardUp(packet, source, dest)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: source: ns3::Mac48Address const &\ntype: dest: ns3::Mac48Address const &" },
    {(char *) "GetInitialRangingConnection", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetInitialRangingConnection, METH_NOARGS, "GetInitialRangingConnection()\n\n" },
    {(char *) "SendFrom", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SendFrom, METH_KEYWORDS|METH_VARARGS, "SendFrom(packet, source, dest, protocolNumber)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: source: ns3::Address const &\ntype: dest: ns3::Address const &\ntype: protocolNumber: uint16_t" },
    {(char *) "SetCurrentDcd", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetCurrentDcd, METH_KEYWORDS|METH_VARARGS, "SetCurrentDcd(dcd)\n\ntype: dcd: ns3::Dcd" },
    {(char *) "IsBroadcast", (PyCFunction) _wrap_PyNs3WimaxNetDevice_IsBroadcast, METH_NOARGS, "IsBroadcast()\n\n" },
    {(char *) "IsPointToPoint", (PyCFunction) _wrap_PyNs3WimaxNetDevice_IsPointToPoint, METH_NOARGS, "IsPointToPoint()\n\n" },
    {(char *) "GetCurrentUcd", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetCurrentUcd, METH_NOARGS, "GetCurrentUcd()\n\n" },
    {(char *) "SetNrFrames", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetNrFrames, METH_KEYWORDS|METH_VARARGS, "SetNrFrames(nrFrames)\n\ntype: nrFrames: uint32_t" },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3WimaxNetDevice_Enqueue, METH_KEYWORDS|METH_VARARGS, "Enqueue(packet, hdrType, connection)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: hdrType: ns3::MacHeaderType const &\ntype: connection: ns3::Ptr< ns3::WimaxConnection >" },
    {(char *) "GetBroadcastConnection", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetBroadcastConnection, METH_NOARGS, "GetBroadcastConnection()\n\n" },
    {(char *) "IsPromisc", (PyCFunction) _wrap_PyNs3WimaxNetDevice_IsPromisc, METH_NOARGS, "IsPromisc()\n\n" },
    {(char *) "GetMtu", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetMtu, METH_NOARGS, "GetMtu()\n\n" },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3WimaxNetDevice_DoDispose, METH_NOARGS, "DoDispose()\n\n" },
    {(char *) "MakeMulticastAddress", (PyCFunction) _wrap_PyNs3WimaxNetDevice_MakeMulticastAddress, METH_KEYWORDS|METH_VARARGS, "MakeMulticastAddress(multicastGroup)\n\ntype: multicastGroup: ns3::Ipv4Address" },
    {(char *) "SetState", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetState, METH_KEYWORDS|METH_VARARGS, "SetState(state)\n\ntype: state: uint8_t" },
    {(char *) "SetNode", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetNode, METH_KEYWORDS|METH_VARARGS, "SetNode(node)\n\ntype: node: ns3::Ptr< ns3::Node >" },
    {(char *) "GetConnectionManager", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetConnectionManager, METH_NOARGS, "GetConnectionManager()\n\n" },
    {(char *) "GetBroadcast", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetBroadcast, METH_NOARGS, "GetBroadcast()\n\n" },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetName, METH_NOARGS, "GetName()\n\n" },
    {(char *) "IsBridge", (PyCFunction) _wrap_PyNs3WimaxNetDevice_IsBridge, METH_NOARGS, "IsBridge()\n\n" },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetAddress, METH_NOARGS, "GetAddress()\n\n" },
    {(char *) "GetPhyChannel", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetPhyChannel, METH_NOARGS, "GetPhyChannel()\n\n" },
    {(char *) "SetIfIndex", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetIfIndex, METH_KEYWORDS|METH_VARARGS, "SetIfIndex(index)\n\ntype: index: uint32_t const" },
    {(char *) "SetPhy", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetPhy, METH_KEYWORDS|METH_VARARGS, "SetPhy(phy)\n\ntype: phy: ns3::Ptr< ns3::WimaxPhy >" },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetAddress, METH_KEYWORDS|METH_VARARGS, "SetAddress(address)\n\ntype: address: ns3::Address" },
    {(char *) "IsLinkUp", (PyCFunction) _wrap_PyNs3WimaxNetDevice_IsLinkUp, METH_NOARGS, "IsLinkUp()\n\n" },
    {(char *) "CreateDefaultConnections", (PyCFunction) _wrap_PyNs3WimaxNetDevice_CreateDefaultConnections, METH_NOARGS, "CreateDefaultConnections()\n\n" },
    {(char *) "AddLinkChangeCallback", (PyCFunction) _wrap_PyNs3WimaxNetDevice_AddLinkChangeCallback, METH_KEYWORDS|METH_VARARGS, "AddLinkChangeCallback(callback)\n\ntype: callback: ns3::Callback< void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetNrFrames", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetNrFrames, METH_NOARGS, "GetNrFrames()\n\n" },
    {(char *) "GetState", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetState, METH_NOARGS, "GetState()\n\n" },
    {(char *) "SetName", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetName, METH_KEYWORDS|METH_VARARGS, "SetName(name)\n\ntype: name: std::string const" },
    {(char *) "Start", (PyCFunction) _wrap_PyNs3WimaxNetDevice_Start, METH_NOARGS, "Start()\n\n" },
    {(char *) "SetReceiveCallback", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetReceiveCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetChannel", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetChannel, METH_KEYWORDS|METH_VARARGS, "SetChannel(wimaxChannel)\n\ntype: wimaxChannel: ns3::Ptr< ns3::WimaxChannel >" },
    {(char *) "SetMtu", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetMtu, METH_KEYWORDS|METH_VARARGS, "SetMtu(mtu)\n\ntype: mtu: uint16_t const" },
    {(char *) "GetPhy", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetPhy, METH_NOARGS, "GetPhy()\n\n" },
    {(char *) "SupportsSendFrom", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SupportsSendFrom, METH_NOARGS, "SupportsSendFrom()\n\n" },
    {(char *) "GetChannel", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetChannel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCurrentUcd", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetCurrentUcd, METH_KEYWORDS|METH_VARARGS, "SetCurrentUcd(ucd)\n\ntype: ucd: ns3::Ucd" },
    {(char *) "ForwardDown", (PyCFunction) _wrap_PyNs3WimaxNetDevice_ForwardDown, METH_KEYWORDS|METH_VARARGS, "ForwardDown(burst, modulationType)\n\ntype: burst: ns3::Ptr< ns3::PacketBurst >\ntype: modulationType: ns3::WimaxPhy::ModulationType" },
    {(char *) "GetTtg", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetTtg, METH_NOARGS, "GetTtg()\n\n" },
    {(char *) "SetConnectionManager", (PyCFunction) _wrap_PyNs3WimaxNetDevice_SetConnectionManager, METH_KEYWORDS|METH_VARARGS, "SetConnectionManager(connectionManager)\n\ntype: connectionManager: ns3::Ptr< ns3::ConnectionManager >" },
    {(char *) "GetIfIndex", (PyCFunction) _wrap_PyNs3WimaxNetDevice_GetIfIndex, METH_NOARGS, "GetIfIndex()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3WimaxNetDevice__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3WimaxNetDevice__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3WimaxNetDevice__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WimaxNetDevice__tp_clear(PyNs3WimaxNetDevice *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WimaxNetDevice *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WimaxNetDevice__tp_traverse(PyNs3WimaxNetDevice *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3WimaxNetDevice__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WimaxNetDevice__tp_dealloc(PyNs3WimaxNetDevice *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WimaxNetDevice__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WimaxNetDevice__tp_richcompare (PyNs3WimaxNetDevice *PYBINDGEN_UNUSED(self), PyNs3WimaxNetDevice *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WimaxNetDevice_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WimaxNetDevice_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.WimaxNetDevice",            /* tp_name */
    sizeof(PyNs3WimaxNetDevice),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WimaxNetDevice__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "WimaxNetDevice()",                        /* Documentation string */
    (traverseproc)PyNs3WimaxNetDevice__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WimaxNetDevice__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WimaxNetDevice__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WimaxNetDevice_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WimaxNetDevice, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WimaxNetDevice__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3BaseStationNetDevice__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3BaseStationNetDevice__PythonHelper *helper = dynamic_cast< PyNs3BaseStationNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3BaseStationNetDevice__PythonHelper::_wrap_DoInitialize(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3BaseStationNetDevice__PythonHelper *helper = dynamic_cast< PyNs3BaseStationNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3BaseStationNetDevice__PythonHelper::_wrap_NotifyNewAggregate(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3BaseStationNetDevice__PythonHelper *helper = dynamic_cast< PyNs3BaseStationNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3BaseStationNetDevice__PythonHelper::Start()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BaseStationNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Start"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::BaseStationNetDevice::Start();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = (ns3::BaseStationNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Start", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3BaseStationNetDevice__PythonHelper::Stop()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BaseStationNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Stop"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::BaseStationNetDevice::Stop();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = (ns3::BaseStationNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Stop", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3BaseStationNetDevice__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::MacHeaderType const & hdrType, ns3::Ptr< ns3::WimaxConnection > connection)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BaseStationNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3MacHeaderType *py_MacHeaderType;
    PyNs3WimaxConnection *py_WimaxConnection;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::BaseStationNetDevice::Enqueue(packet, hdrType, connection);
    }
    self_obj_before = reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = (ns3::BaseStationNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_MacHeaderType = PyObject_GC_New(PyNs3MacHeaderType, &PyNs3MacHeaderType_Type);
    py_MacHeaderType->inst_dict = NULL;
    py_MacHeaderType->inst_dict = NULL;
    py_MacHeaderType->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MacHeaderType->obj = new ns3::MacHeaderType(hdrType);
    PyNs3ObjectBase_wrapper_registry[(void *) py_MacHeaderType->obj] = (PyObject *) py_MacHeaderType;
    if (typeid(*(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection)))).name() == typeid(PyNs3WimaxConnection__PythonHelper).name())
    {
        py_WimaxConnection = (PyNs3WimaxConnection*) (((PyNs3WimaxConnection__PythonHelper*) const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection)))->m_pyself);
        py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection));
        Py_INCREF(py_WimaxConnection);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WimaxConnection = NULL;
        } else {
            py_WimaxConnection = (PyNs3WimaxConnection *) wrapper_lookup_iter2->second;
            Py_INCREF(py_WimaxConnection);
        }
    
        if (py_WimaxConnection == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection))), &PyNs3WimaxConnection_Type);
            py_WimaxConnection = PyObject_GC_New(PyNs3WimaxConnection, wrapper_type2);
            py_WimaxConnection->inst_dict = NULL;
    
            py_WimaxConnection->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection))->Ref();
            py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxConnection->obj] = (PyObject *) py_WimaxConnection;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNN", py_Packet, py_MacHeaderType, py_WimaxConnection);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::BaseStationNetDevice::Enqueue(packet, hdrType, connection);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::BaseStationNetDevice::Enqueue(packet, hdrType, connection);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3BaseStationNetDevice__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BaseStationNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = (ns3::BaseStationNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3BaseStationNetDevice__PythonHelper::DoSend(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address const & source, ns3::Mac48Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BaseStationNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoSend"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = (ns3::BaseStationNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(source);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(dest);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoSend", (char *) "NNNi", py_Packet, py_Mac48Address, py_Mac48Address2, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3BaseStationNetDevice__PythonHelper::DoReceive(ns3::Ptr< ns3::Packet > packet)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BaseStationNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoReceive"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = (ns3::BaseStationNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoReceive", (char *) "N", py_Packet);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BaseStationNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3BaseStationNetDevice__PythonHelper::IsMulticast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsMulticast();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsMulticast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsMulticast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsMulticast();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


ns3::Address
PyNs3BaseStationNetDevice__PythonHelper::GetMulticast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3BaseStationNetDevice__PythonHelper::GetMulticast(ns3::Ipv6Address addr) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv6Address *py_Ipv6Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(addr);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_Ipv6Address = PyObject_New(PyNs3Ipv6Address, &PyNs3Ipv6Address_Type);
    py_Ipv6Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv6Address->obj = new ns3::Ipv6Address(addr);
    PyNs3Ipv6Address_wrapper_registry[(void *) py_Ipv6Address->obj] = (PyObject *) py_Ipv6Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "N", py_Ipv6Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(addr);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(addr);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3BaseStationNetDevice__PythonHelper::GetMulticast(ns3::Ipv4Address multicastGroup) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(multicastGroup);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(multicastGroup);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "N", py_Ipv4Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(multicastGroup);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(multicastGroup);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3BaseStationNetDevice__PythonHelper::Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Send"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::Send(packet, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Send", (char *) "NNi", py_Packet, py_Address, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::Send(packet, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::Send(packet, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3BaseStationNetDevice__PythonHelper::NeedsArp() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NeedsArp"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::NeedsArp();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NeedsArp", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::NeedsArp();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::NeedsArp();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


ns3::Ptr< ns3::Node >
PyNs3BaseStationNetDevice__PythonHelper::GetNode() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3Node *tmp_Node;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNode"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetNode();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNode", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetNode();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Node_Type, &tmp_Node)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetNode();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Node  > (tmp_Node->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3BaseStationNetDevice__PythonHelper::SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyNs3Address *py_Address2;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SendFrom"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(source);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address2->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SendFrom", (char *) "NNNi", py_Packet, py_Address, py_Address2, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3BaseStationNetDevice__PythonHelper::IsBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsBroadcast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBroadcast();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3BaseStationNetDevice__PythonHelper::IsPointToPoint() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsPointToPoint"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsPointToPoint();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsPointToPoint", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsPointToPoint();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsPointToPoint();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint16_t
PyNs3BaseStationNetDevice__PythonHelper::GetMtu() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    uint16_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMtu"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMtu();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMtu", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMtu();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMtu();
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMtu();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3BaseStationNetDevice__PythonHelper::MakeMulticastAddress(ns3::Ipv4Address multicastGroup) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "MakeMulticastAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::MakeMulticastAddress(multicastGroup);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(multicastGroup);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "MakeMulticastAddress", (char *) "N", py_Ipv4Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::MakeMulticastAddress(multicastGroup);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::MakeMulticastAddress(multicastGroup);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3BaseStationNetDevice__PythonHelper::SetNode(ns3::Ptr< ns3::Node > node)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetNode"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WimaxNetDevice::SetNode(node);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    if (typeid(*(const_cast<ns3::Node *> (ns3::PeekPointer (node)))).name() == typeid(PyNs3Node__PythonHelper).name())
    {
        py_Node = (PyNs3Node*) (((PyNs3Node__PythonHelper*) const_cast<ns3::Node *> (ns3::PeekPointer (node)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (node)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Node *> (ns3::PeekPointer (node))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
    
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (node))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetNode", (char *) "N", py_Node);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Address
PyNs3BaseStationNetDevice__PythonHelper::GetBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBroadcast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetBroadcast();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

std::string
PyNs3BaseStationNetDevice__PythonHelper::GetName() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    std::string retval;
    const char *retval_ptr;
    Py_ssize_t retval_len;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetName"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetName();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetName", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetName();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &retval_ptr, &retval_len)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetName();
    }
    retval = std::string(retval_ptr, retval_len);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3BaseStationNetDevice__PythonHelper::IsBridge() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsBridge"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBridge();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsBridge", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBridge();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBridge();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3BaseStationNetDevice__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetAddress();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Channel >
PyNs3BaseStationNetDevice__PythonHelper::GetPhyChannel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3Channel *tmp_Channel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPhyChannel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetPhyChannel();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPhyChannel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetPhyChannel();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Channel_Type, &tmp_Channel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetPhyChannel();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Channel  > (tmp_Channel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3BaseStationNetDevice__PythonHelper::SetIfIndex(uint32_t const index)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetIfIndex"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WimaxNetDevice::SetIfIndex(index);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetIfIndex", (char *) "N", PyLong_FromUnsignedLong(index));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3BaseStationNetDevice__PythonHelper::SetAddress(ns3::Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *py_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WimaxNetDevice::SetAddress(address);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(address);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3BaseStationNetDevice__PythonHelper::IsLinkUp() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsLinkUp"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsLinkUp();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsLinkUp", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsLinkUp();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsLinkUp();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3BaseStationNetDevice__PythonHelper::SetName(std::string const name)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    const char *name_ptr;
    Py_ssize_t name_len;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetName"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WimaxNetDevice::SetName(name);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    name_ptr = (name).c_str();
    name_len = (name).size();
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetName", (char *) "s#", name_ptr, name_len);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


bool
PyNs3BaseStationNetDevice__PythonHelper::SetMtu(uint16_t const mtu)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMtu"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SetMtu(mtu);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMtu", (char *) "i", (int) mtu);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SetMtu(mtu);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SetMtu(mtu);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3BaseStationNetDevice__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Channel >
PyNs3BaseStationNetDevice__PythonHelper::GetChannel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3Channel *tmp_Channel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetChannel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetChannel();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetChannel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetChannel();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Channel_Type, &tmp_Channel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetChannel();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Channel  > (tmp_Channel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3BaseStationNetDevice__PythonHelper::SetConnectionManager(ns3::Ptr< ns3::ConnectionManager > connectionManager)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3ConnectionManager *py_ConnectionManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetConnectionManager"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WimaxNetDevice::SetConnectionManager(connectionManager);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    if (typeid(*(const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager)))).name() == typeid(PyNs3ConnectionManager__PythonHelper).name())
    {
        py_ConnectionManager = (PyNs3ConnectionManager*) (((PyNs3ConnectionManager__PythonHelper*) const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager)))->m_pyself);
        py_ConnectionManager->obj = const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager));
        Py_INCREF(py_ConnectionManager);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_ConnectionManager = NULL;
        } else {
            py_ConnectionManager = (PyNs3ConnectionManager *) wrapper_lookup_iter->second;
            Py_INCREF(py_ConnectionManager);
        }
    
        if (py_ConnectionManager == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager))), &PyNs3ConnectionManager_Type);
            py_ConnectionManager = PyObject_GC_New(PyNs3ConnectionManager, wrapper_type);
            py_ConnectionManager->inst_dict = NULL;
    
            py_ConnectionManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager))->Ref();
            py_ConnectionManager->obj = const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager));
            PyNs3ObjectBase_wrapper_registry[(void *) py_ConnectionManager->obj] = (PyObject *) py_ConnectionManager;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetConnectionManager", (char *) "N", py_ConnectionManager);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

uint32_t
PyNs3BaseStationNetDevice__PythonHelper::GetIfIndex() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetIfIndex"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetIfIndex();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetIfIndex", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetIfIndex();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetIfIndex();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::WimaxChannel >
PyNs3BaseStationNetDevice__PythonHelper::DoGetChannel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxChannel > retval;
    PyNs3WimaxChannel *tmp_WimaxChannel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoGetChannel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoGetChannel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WimaxChannel_Type, &tmp_WimaxChannel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WimaxChannel  > (tmp_WimaxChannel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3BaseStationNetDevice__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3BaseStationNetDevice__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3BaseStationNetDevice__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3BaseStationNetDevice__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3BaseStationNetDevice__tp_init__0(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3BaseStationNetDevice_Type)
    {
        self->obj = new PyNs3BaseStationNetDevice__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3BaseStationNetDevice__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::BaseStationNetDevice();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3BaseStationNetDevice__tp_init__1(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Node *node;
    ns3::Node *node_ptr;
    PyNs3WimaxPhy *phy;
    ns3::WimaxPhy *phy_ptr;
    const char *keywords[] = {"node", "phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Node_Type, &node, &PyNs3WimaxPhy_Type, &phy)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    node_ptr = (node ? node->obj : NULL);
    phy_ptr = (phy ? phy->obj : NULL);
    if (Py_TYPE(self) != &PyNs3BaseStationNetDevice_Type)
    {
        self->obj = new PyNs3BaseStationNetDevice__PythonHelper(ns3::Ptr< ns3::Node  > (node_ptr), ns3::Ptr< ns3::WimaxPhy  > (phy_ptr));
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3BaseStationNetDevice__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::BaseStationNetDevice(ns3::Ptr< ns3::Node  > (node_ptr), ns3::Ptr< ns3::WimaxPhy  > (phy_ptr));
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3BaseStationNetDevice__tp_init__2(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Node *node;
    ns3::Node *node_ptr;
    PyNs3WimaxPhy *phy;
    ns3::WimaxPhy *phy_ptr;
    PyNs3UplinkScheduler *uplinkScheduler;
    ns3::UplinkScheduler *uplinkScheduler_ptr;
    PyNs3BSScheduler *bsScheduler;
    ns3::BSScheduler *bsScheduler_ptr;
    const char *keywords[] = {"node", "phy", "uplinkScheduler", "bsScheduler", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!", (char **) keywords, &PyNs3Node_Type, &node, &PyNs3WimaxPhy_Type, &phy, &PyNs3UplinkScheduler_Type, &uplinkScheduler, &PyNs3BSScheduler_Type, &bsScheduler)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    node_ptr = (node ? node->obj : NULL);
    phy_ptr = (phy ? phy->obj : NULL);
    uplinkScheduler_ptr = (uplinkScheduler ? uplinkScheduler->obj : NULL);
    bsScheduler_ptr = (bsScheduler ? bsScheduler->obj : NULL);
    if (Py_TYPE(self) != &PyNs3BaseStationNetDevice_Type)
    {
        self->obj = new PyNs3BaseStationNetDevice__PythonHelper(ns3::Ptr< ns3::Node  > (node_ptr), ns3::Ptr< ns3::WimaxPhy  > (phy_ptr), ns3::Ptr< ns3::UplinkScheduler  > (uplinkScheduler_ptr), ns3::Ptr< ns3::BSScheduler  > (bsScheduler_ptr));
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3BaseStationNetDevice__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::BaseStationNetDevice(ns3::Ptr< ns3::Node  > (node_ptr), ns3::Ptr< ns3::WimaxPhy  > (phy_ptr), ns3::Ptr< ns3::UplinkScheduler  > (uplinkScheduler_ptr), ns3::Ptr< ns3::BSScheduler  > (bsScheduler_ptr));
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3BaseStationNetDevice__tp_init(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3BaseStationNetDevice__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3BaseStationNetDevice__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3BaseStationNetDevice__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_SetNrDlSymbols(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int dlSymbols;
    const char *keywords[] = {"dlSymbols", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &dlSymbols)) {
        return NULL;
    }
    self->obj->SetNrDlSymbols(dlSymbols);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_SetSSManager(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3SSManager *ssManager;
    ns3::SSManager *ssManager_ptr;
    const char *keywords[] = {"ssManager", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SSManager_Type, &ssManager)) {
        return NULL;
    }
    ssManager_ptr = (ssManager ? ssManager->obj : NULL);
    self->obj->SetSSManager(ns3::Ptr< ns3::SSManager  > (ssManager_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_SetInitialRangingInterval(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *initialRangInterval;
    const char *keywords[] = {"initialRangInterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &initialRangInterval)) {
        return NULL;
    }
    self->obj->SetInitialRangingInterval(*((PyNs3Time *) initialRangInterval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::BaseStationNetDevice::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_SetRangReqOppSize(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rangReqOppSize;
    const char *keywords[] = {"rangReqOppSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rangReqOppSize)) {
        return NULL;
    }
    if (rangReqOppSize > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRangReqOppSize(rangReqOppSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetUplinkScheduler(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UplinkScheduler > retval;
    PyNs3UplinkScheduler *py_UplinkScheduler;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetUplinkScheduler();
    if (!(const_cast<ns3::UplinkScheduler *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UplinkScheduler *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_UplinkScheduler = NULL;
    } else {
        py_UplinkScheduler = (PyNs3UplinkScheduler *) wrapper_lookup_iter->second;
        Py_INCREF(py_UplinkScheduler);
    }
    
    if (py_UplinkScheduler == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UplinkScheduler *> (ns3::PeekPointer (retval)))), &PyNs3UplinkScheduler_Type);
        py_UplinkScheduler = PyObject_GC_New(PyNs3UplinkScheduler, wrapper_type);
        py_UplinkScheduler->inst_dict = NULL;
    
        py_UplinkScheduler->inst_dict = NULL;
        py_UplinkScheduler->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::UplinkScheduler *> (ns3::PeekPointer (retval))->Ref();
        py_UplinkScheduler->obj = const_cast<ns3::UplinkScheduler *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_UplinkScheduler->obj] = (PyObject *) py_UplinkScheduler;
    }
    py_retval = Py_BuildValue((char *) "N", py_UplinkScheduler);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetPsDuration(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetPsDuration();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetBSScheduler(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::BSScheduler > retval;
    PyNs3BSScheduler *py_BSScheduler;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetBSScheduler();
    if (!(const_cast<ns3::BSScheduler *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::BSScheduler *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_BSScheduler = NULL;
    } else {
        py_BSScheduler = (PyNs3BSScheduler *) wrapper_lookup_iter->second;
        Py_INCREF(py_BSScheduler);
    }
    
    if (py_BSScheduler == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::BSScheduler *> (ns3::PeekPointer (retval)))), &PyNs3BSScheduler_Type);
        py_BSScheduler = PyObject_GC_New(PyNs3BSScheduler, wrapper_type);
        py_BSScheduler->inst_dict = NULL;
    
        py_BSScheduler->inst_dict = NULL;
        py_BSScheduler->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::BSScheduler *> (ns3::PeekPointer (retval))->Ref();
        py_BSScheduler->obj = const_cast<ns3::BSScheduler *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_BSScheduler->obj] = (PyObject *) py_BSScheduler;
    }
    py_retval = Py_BuildValue((char *) "N", py_BSScheduler);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetNrDcdSent(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNrDcdSent();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_Start(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3BaseStationNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3BaseStationNetDevice__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->Start()) : (self->obj->ns3::BaseStationNetDevice::Start());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetBwReqOppSize(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetBwReqOppSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_MarkUplinkAllocations(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    
    self->obj->MarkUplinkAllocations();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_SetBwReqOppSize(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int bwReqOppSize;
    const char *keywords[] = {"bwReqOppSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &bwReqOppSize)) {
        return NULL;
    }
    if (bwReqOppSize > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBwReqOppSize(bwReqOppSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetRangReqOppSize(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRangReqOppSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_SetDcdInterval(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *dcdInterval;
    const char *keywords[] = {"dcdInterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &dcdInterval)) {
        return NULL;
    }
    self->obj->SetDcdInterval(*((PyNs3Time *) dcdInterval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetNrUlSymbols(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNrUlSymbols();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_MarkRangingOppStart(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *rangingOppStartTime;
    const char *keywords[] = {"rangingOppStartTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &rangingOppStartTime)) {
        return NULL;
    }
    self->obj->MarkRangingOppStart(*((PyNs3Time *) rangingOppStartTime)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_SetUplinkScheduler(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UplinkScheduler *ulScheduler;
    ns3::UplinkScheduler *ulScheduler_ptr;
    const char *keywords[] = {"ulScheduler", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UplinkScheduler_Type, &ulScheduler)) {
        return NULL;
    }
    ulScheduler_ptr = (ulScheduler ? ulScheduler->obj : NULL);
    self->obj->SetUplinkScheduler(ns3::Ptr< ns3::UplinkScheduler  > (ulScheduler_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_SetBSScheduler(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BSScheduler *bsSchedule;
    ns3::BSScheduler *bsSchedule_ptr;
    const char *keywords[] = {"bsSchedule", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BSScheduler_Type, &bsSchedule)) {
        return NULL;
    }
    bsSchedule_ptr = (bsSchedule ? bsSchedule->obj : NULL);
    self->obj->SetBSScheduler(ns3::Ptr< ns3::BSScheduler  > (bsSchedule_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetMaxInvitedRangRetries(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetMaxInvitedRangRetries();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_Stop(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3BaseStationNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3BaseStationNetDevice__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->Stop()) : (self->obj->ns3::BaseStationNetDevice::Stop());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_Enqueue(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3MacHeaderType *hdrType;
    PyNs3WimaxConnection *connection;
    ns3::WimaxConnection *connection_ptr;
    PyNs3BaseStationNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3BaseStationNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "hdrType", "connection", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3MacHeaderType_Type, &hdrType, &PyNs3WimaxConnection_Type, &connection)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    connection_ptr = (connection ? connection->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3MacHeaderType *) hdrType)->obj, ns3::Ptr< ns3::WimaxConnection  > (connection_ptr))) : (self->obj->ns3::BaseStationNetDevice::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3MacHeaderType *) hdrType)->obj, ns3::Ptr< ns3::WimaxConnection  > (connection_ptr)));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetUlSubframeStartTime(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetUlSubframeStartTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetDcdInterval(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetDcdInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetSymbolDuration(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetSymbolDuration();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_SetIntervalT8(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *interval;
    const char *keywords[] = {"interval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &interval)) {
        return NULL;
    }
    self->obj->SetIntervalT8(*((PyNs3Time *) interval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_SetMaxInvitedRangRetries(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int maxInvitedRangRetries;
    const char *keywords[] = {"maxInvitedRangRetries", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &maxInvitedRangRetries)) {
        return NULL;
    }
    if (maxInvitedRangRetries > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxInvitedRangRetries(maxInvitedRangRetries);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_InitBaseStationNetDevice(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    
    self->obj->InitBaseStationNetDevice();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_SetNrUlSymbols(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int ulSymbols;
    const char *keywords[] = {"ulSymbols", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &ulSymbols)) {
        return NULL;
    }
    self->obj->SetNrUlSymbols(ulSymbols);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_SetBsClassifier(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3IpcsClassifier *classifier;
    ns3::IpcsClassifier *classifier_ptr;
    const char *keywords[] = {"classifier", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3IpcsClassifier_Type, &classifier)) {
        return NULL;
    }
    classifier_ptr = (classifier ? classifier->obj : NULL);
    self->obj->SetBsClassifier(ns3::Ptr< ns3::IpcsClassifier  > (classifier_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetInitialRangingInterval(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetInitialRangingInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetConnection(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxConnection > retval;
    PyNs3Cid *cid;
    const char *keywords[] = {"cid", NULL};
    PyNs3WimaxConnection *py_WimaxConnection;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Cid_Type, &cid)) {
        return NULL;
    }
    retval = self->obj->GetConnection(*((PyNs3Cid *) cid)->obj);
    if (!(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3WimaxConnection__PythonHelper).name())
    {
        py_WimaxConnection = reinterpret_cast< PyNs3WimaxConnection* >(reinterpret_cast< PyNs3WimaxConnection__PythonHelper* >(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))->m_pyself);
        py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval));
        Py_INCREF(py_WimaxConnection);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WimaxConnection = NULL;
        } else {
            py_WimaxConnection = (PyNs3WimaxConnection *) wrapper_lookup_iter->second;
            Py_INCREF(py_WimaxConnection);
        }
    
        if (py_WimaxConnection == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))), &PyNs3WimaxConnection_Type);
            py_WimaxConnection = PyObject_GC_New(PyNs3WimaxConnection, wrapper_type);
            py_WimaxConnection->inst_dict = NULL;
    
            py_WimaxConnection->inst_dict = NULL;
            py_WimaxConnection->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval))->Ref();
            py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxConnection->obj] = (PyObject *) py_WimaxConnection;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxConnection);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetNrUcdSent(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNrUcdSent();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetSSManager(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::SSManager > retval;
    PyNs3SSManager *py_SSManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetSSManager();
    if (!(const_cast<ns3::SSManager *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::SSManager *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_SSManager = NULL;
    } else {
        py_SSManager = (PyNs3SSManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_SSManager);
    }
    
    if (py_SSManager == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::SSManager *> (ns3::PeekPointer (retval)))), &PyNs3SSManager_Type);
        py_SSManager = PyObject_GC_New(PyNs3SSManager, wrapper_type);
        py_SSManager->inst_dict = NULL;
    
        py_SSManager->inst_dict = NULL;
        py_SSManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::SSManager *> (ns3::PeekPointer (retval))->Ref();
        py_SSManager->obj = const_cast<ns3::SSManager *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_SSManager->obj] = (PyObject *) py_SSManager;
    }
    py_retval = Py_BuildValue((char *) "N", py_SSManager);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetUcdInterval(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetUcdInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetServiceFlowManager(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::BsServiceFlowManager > retval;
    PyNs3BsServiceFlowManager *py_BsServiceFlowManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetServiceFlowManager();
    if (!(const_cast<ns3::BsServiceFlowManager *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::BsServiceFlowManager *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3BsServiceFlowManager__PythonHelper).name())
    {
        py_BsServiceFlowManager = reinterpret_cast< PyNs3BsServiceFlowManager* >(reinterpret_cast< PyNs3BsServiceFlowManager__PythonHelper* >(const_cast<ns3::BsServiceFlowManager *> (ns3::PeekPointer (retval)))->m_pyself);
        py_BsServiceFlowManager->obj = const_cast<ns3::BsServiceFlowManager *> (ns3::PeekPointer (retval));
        Py_INCREF(py_BsServiceFlowManager);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::BsServiceFlowManager *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_BsServiceFlowManager = NULL;
        } else {
            py_BsServiceFlowManager = (PyNs3BsServiceFlowManager *) wrapper_lookup_iter->second;
            Py_INCREF(py_BsServiceFlowManager);
        }
    
        if (py_BsServiceFlowManager == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::BsServiceFlowManager *> (ns3::PeekPointer (retval)))), &PyNs3BsServiceFlowManager_Type);
            py_BsServiceFlowManager = PyObject_GC_New(PyNs3BsServiceFlowManager, wrapper_type);
            py_BsServiceFlowManager->inst_dict = NULL;
    
            py_BsServiceFlowManager->inst_dict = NULL;
            py_BsServiceFlowManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::BsServiceFlowManager *> (ns3::PeekPointer (retval))->Ref();
            py_BsServiceFlowManager->obj = const_cast<ns3::BsServiceFlowManager *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_BsServiceFlowManager->obj] = (PyObject *) py_BsServiceFlowManager;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_BsServiceFlowManager);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetNrDlSymbols(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNrDlSymbols();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_SetServiceFlowManager(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BsServiceFlowManager *arg0;
    ns3::BsServiceFlowManager *arg0_ptr;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BsServiceFlowManager_Type, &arg0)) {
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    self->obj->SetServiceFlowManager(ns3::Ptr< ns3::BsServiceFlowManager  > (arg0_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetMaxRangingCorrectionRetries(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetMaxRangingCorrectionRetries();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetDlSubframeStartTime(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetDlSubframeStartTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_SetMaxRangingCorrectionRetries(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int maxRangCorrectionRetries;
    const char *keywords[] = {"maxRangCorrectionRetries", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &maxRangCorrectionRetries)) {
        return NULL;
    }
    if (maxRangCorrectionRetries > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxRangingCorrectionRetries(maxRangCorrectionRetries);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetBsClassifier(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::IpcsClassifier > retval;
    PyNs3IpcsClassifier *py_IpcsClassifier;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetBsClassifier();
    if (!(const_cast<ns3::IpcsClassifier *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::IpcsClassifier *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_IpcsClassifier = NULL;
    } else {
        py_IpcsClassifier = (PyNs3IpcsClassifier *) wrapper_lookup_iter->second;
        Py_INCREF(py_IpcsClassifier);
    }
    
    if (py_IpcsClassifier == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::IpcsClassifier *> (ns3::PeekPointer (retval)))), &PyNs3IpcsClassifier_Type);
        py_IpcsClassifier = PyObject_GC_New(PyNs3IpcsClassifier, wrapper_type);
        py_IpcsClassifier->inst_dict = NULL;
    
        py_IpcsClassifier->inst_dict = NULL;
        py_IpcsClassifier->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::IpcsClassifier *> (ns3::PeekPointer (retval))->Ref();
        py_IpcsClassifier->obj = const_cast<ns3::IpcsClassifier *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_IpcsClassifier->obj] = (PyObject *) py_IpcsClassifier;
    }
    py_retval = Py_BuildValue((char *) "N", py_IpcsClassifier);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetRangingOppNumber(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRangingOppNumber();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_SetUcdInterval(PyNs3BaseStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *ucdInterval;
    const char *keywords[] = {"ucdInterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &ucdInterval)) {
        return NULL;
    }
    self->obj->SetUcdInterval(*((PyNs3Time *) ucdInterval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BaseStationNetDevice_GetIntervalT8(PyNs3BaseStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetIntervalT8();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}

static PyMethodDef PyNs3BaseStationNetDevice_methods[] = {
    {(char *) "SetNrDlSymbols", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_SetNrDlSymbols, METH_KEYWORDS|METH_VARARGS, "SetNrDlSymbols(dlSymbols)\n\ntype: dlSymbols: uint32_t" },
    {(char *) "SetSSManager", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_SetSSManager, METH_KEYWORDS|METH_VARARGS, "SetSSManager(ssManager)\n\ntype: ssManager: ns3::Ptr< ns3::SSManager >" },
    {(char *) "SetInitialRangingInterval", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_SetInitialRangingInterval, METH_KEYWORDS|METH_VARARGS, "SetInitialRangingInterval(initialRangInterval)\n\ntype: initialRangInterval: ns3::Time" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetRangReqOppSize", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_SetRangReqOppSize, METH_KEYWORDS|METH_VARARGS, "SetRangReqOppSize(rangReqOppSize)\n\ntype: rangReqOppSize: uint8_t" },
    {(char *) "GetUplinkScheduler", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetUplinkScheduler, METH_NOARGS, "GetUplinkScheduler()\n\n" },
    {(char *) "GetPsDuration", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetPsDuration, METH_NOARGS, "GetPsDuration()\n\n" },
    {(char *) "GetBSScheduler", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetBSScheduler, METH_NOARGS, "GetBSScheduler()\n\n" },
    {(char *) "GetNrDcdSent", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetNrDcdSent, METH_NOARGS, "GetNrDcdSent()\n\n" },
    {(char *) "Start", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_Start, METH_NOARGS, "Start()\n\n" },
    {(char *) "GetBwReqOppSize", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetBwReqOppSize, METH_NOARGS, "GetBwReqOppSize()\n\n" },
    {(char *) "MarkUplinkAllocations", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_MarkUplinkAllocations, METH_NOARGS, "MarkUplinkAllocations()\n\n" },
    {(char *) "SetBwReqOppSize", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_SetBwReqOppSize, METH_KEYWORDS|METH_VARARGS, "SetBwReqOppSize(bwReqOppSize)\n\ntype: bwReqOppSize: uint8_t" },
    {(char *) "GetRangReqOppSize", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetRangReqOppSize, METH_NOARGS, "GetRangReqOppSize()\n\n" },
    {(char *) "SetDcdInterval", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_SetDcdInterval, METH_KEYWORDS|METH_VARARGS, "SetDcdInterval(dcdInterval)\n\ntype: dcdInterval: ns3::Time" },
    {(char *) "GetNrUlSymbols", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetNrUlSymbols, METH_NOARGS, "GetNrUlSymbols()\n\n" },
    {(char *) "MarkRangingOppStart", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_MarkRangingOppStart, METH_KEYWORDS|METH_VARARGS, "MarkRangingOppStart(rangingOppStartTime)\n\ntype: rangingOppStartTime: ns3::Time" },
    {(char *) "SetUplinkScheduler", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_SetUplinkScheduler, METH_KEYWORDS|METH_VARARGS, "SetUplinkScheduler(ulScheduler)\n\ntype: ulScheduler: ns3::Ptr< ns3::UplinkScheduler >" },
    {(char *) "SetBSScheduler", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_SetBSScheduler, METH_KEYWORDS|METH_VARARGS, "SetBSScheduler(bsSchedule)\n\ntype: bsSchedule: ns3::Ptr< ns3::BSScheduler >" },
    {(char *) "GetMaxInvitedRangRetries", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetMaxInvitedRangRetries, METH_NOARGS, "GetMaxInvitedRangRetries()\n\n" },
    {(char *) "Stop", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_Stop, METH_NOARGS, "Stop()\n\n" },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_Enqueue, METH_KEYWORDS|METH_VARARGS, "Enqueue(packet, hdrType, connection)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: hdrType: ns3::MacHeaderType const &\ntype: connection: ns3::Ptr< ns3::WimaxConnection >" },
    {(char *) "GetUlSubframeStartTime", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetUlSubframeStartTime, METH_NOARGS, "GetUlSubframeStartTime()\n\n" },
    {(char *) "GetDcdInterval", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetDcdInterval, METH_NOARGS, "GetDcdInterval()\n\n" },
    {(char *) "GetSymbolDuration", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetSymbolDuration, METH_NOARGS, "GetSymbolDuration()\n\n" },
    {(char *) "SetIntervalT8", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_SetIntervalT8, METH_KEYWORDS|METH_VARARGS, "SetIntervalT8(interval)\n\ntype: interval: ns3::Time" },
    {(char *) "SetMaxInvitedRangRetries", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_SetMaxInvitedRangRetries, METH_KEYWORDS|METH_VARARGS, "SetMaxInvitedRangRetries(maxInvitedRangRetries)\n\ntype: maxInvitedRangRetries: uint8_t" },
    {(char *) "InitBaseStationNetDevice", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_InitBaseStationNetDevice, METH_NOARGS, "InitBaseStationNetDevice()\n\n" },
    {(char *) "SetNrUlSymbols", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_SetNrUlSymbols, METH_KEYWORDS|METH_VARARGS, "SetNrUlSymbols(ulSymbols)\n\ntype: ulSymbols: uint32_t" },
    {(char *) "SetBsClassifier", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_SetBsClassifier, METH_KEYWORDS|METH_VARARGS, "SetBsClassifier(classifier)\n\ntype: classifier: ns3::Ptr< ns3::IpcsClassifier >" },
    {(char *) "GetInitialRangingInterval", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetInitialRangingInterval, METH_NOARGS, "GetInitialRangingInterval()\n\n" },
    {(char *) "GetConnection", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetConnection, METH_KEYWORDS|METH_VARARGS, "GetConnection(cid)\n\ntype: cid: ns3::Cid" },
    {(char *) "GetNrUcdSent", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetNrUcdSent, METH_NOARGS, "GetNrUcdSent()\n\n" },
    {(char *) "GetSSManager", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetSSManager, METH_NOARGS, "GetSSManager()\n\n" },
    {(char *) "GetUcdInterval", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetUcdInterval, METH_NOARGS, "GetUcdInterval()\n\n" },
    {(char *) "GetServiceFlowManager", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetServiceFlowManager, METH_NOARGS, "GetServiceFlowManager()\n\n" },
    {(char *) "GetNrDlSymbols", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetNrDlSymbols, METH_NOARGS, "GetNrDlSymbols()\n\n" },
    {(char *) "SetServiceFlowManager", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_SetServiceFlowManager, METH_KEYWORDS|METH_VARARGS, "SetServiceFlowManager(arg0)\n\ntype: arg0: ns3::Ptr< ns3::BsServiceFlowManager >" },
    {(char *) "GetMaxRangingCorrectionRetries", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetMaxRangingCorrectionRetries, METH_NOARGS, "GetMaxRangingCorrectionRetries()\n\n" },
    {(char *) "GetDlSubframeStartTime", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetDlSubframeStartTime, METH_NOARGS, "GetDlSubframeStartTime()\n\n" },
    {(char *) "SetMaxRangingCorrectionRetries", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_SetMaxRangingCorrectionRetries, METH_KEYWORDS|METH_VARARGS, "SetMaxRangingCorrectionRetries(maxRangCorrectionRetries)\n\ntype: maxRangCorrectionRetries: uint8_t" },
    {(char *) "GetBsClassifier", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetBsClassifier, METH_NOARGS, "GetBsClassifier()\n\n" },
    {(char *) "GetRangingOppNumber", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetRangingOppNumber, METH_NOARGS, "GetRangingOppNumber()\n\n" },
    {(char *) "SetUcdInterval", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_SetUcdInterval, METH_KEYWORDS|METH_VARARGS, "SetUcdInterval(ucdInterval)\n\ntype: ucdInterval: ns3::Time" },
    {(char *) "GetIntervalT8", (PyCFunction) _wrap_PyNs3BaseStationNetDevice_GetIntervalT8, METH_NOARGS, "GetIntervalT8()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3BaseStationNetDevice__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3BaseStationNetDevice__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3BaseStationNetDevice__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3BaseStationNetDevice__tp_clear(PyNs3BaseStationNetDevice *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::BaseStationNetDevice *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3BaseStationNetDevice__tp_traverse(PyNs3BaseStationNetDevice *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3BaseStationNetDevice__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3BaseStationNetDevice__tp_dealloc(PyNs3BaseStationNetDevice *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3BaseStationNetDevice__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3BaseStationNetDevice__tp_richcompare (PyNs3BaseStationNetDevice *PYBINDGEN_UNUSED(self), PyNs3BaseStationNetDevice *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3BaseStationNetDevice_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3BaseStationNetDevice_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.BaseStationNetDevice",            /* tp_name */
    sizeof(PyNs3BaseStationNetDevice),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3BaseStationNetDevice__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "BaseStationNetDevice(node, phy, uplinkScheduler, bsScheduler)\nBaseStationNetDevice(node, phy)\nBaseStationNetDevice()",                        /* Documentation string */
    (traverseproc)PyNs3BaseStationNetDevice__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3BaseStationNetDevice__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3BaseStationNetDevice__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3BaseStationNetDevice_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3BaseStationNetDevice, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3BaseStationNetDevice__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3SimpleOfdmWimaxChannel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3SimpleOfdmWimaxChannel *self)
{
    PyObject *py_retval;
    PyNs3SimpleOfdmWimaxChannel__PythonHelper *helper = dynamic_cast< PyNs3SimpleOfdmWimaxChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3SimpleOfdmWimaxChannel__PythonHelper::_wrap_DoInitialize(PyNs3SimpleOfdmWimaxChannel *self)
{
    PyObject *py_retval;
    PyNs3SimpleOfdmWimaxChannel__PythonHelper *helper = dynamic_cast< PyNs3SimpleOfdmWimaxChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3SimpleOfdmWimaxChannel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3SimpleOfdmWimaxChannel *self)
{
    PyObject *py_retval;
    PyNs3SimpleOfdmWimaxChannel__PythonHelper *helper = dynamic_cast< PyNs3SimpleOfdmWimaxChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3SimpleOfdmWimaxChannel__PythonHelper::_wrap_DoDispose(PyNs3SimpleOfdmWimaxChannel *self)
{
    PyObject *py_retval;
    PyNs3SimpleOfdmWimaxChannel__PythonHelper *helper = dynamic_cast< PyNs3SimpleOfdmWimaxChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

int64_t
PyNs3SimpleOfdmWimaxChannel__PythonHelper::AssignStreams(int64_t stream)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SimpleOfdmWimaxChannel *self_obj_before;
    PyObject *py_retval;
    int64_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "AssignStreams"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::SimpleOfdmWimaxChannel::AssignStreams(stream);
    }
    self_obj_before = reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj = (ns3::SimpleOfdmWimaxChannel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "AssignStreams", (char *) "L", stream);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::SimpleOfdmWimaxChannel::AssignStreams(stream);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "L", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::SimpleOfdmWimaxChannel::AssignStreams(stream);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3SimpleOfdmWimaxChannel__PythonHelper::DoAttach(ns3::Ptr< ns3::WimaxPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SimpleOfdmWimaxChannel *self_obj_before;
    PyObject *py_retval;
    PyNs3WimaxPhy *py_WimaxPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoAttach"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj = (ns3::SimpleOfdmWimaxChannel*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (phy)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WimaxPhy = NULL;
    } else {
        py_WimaxPhy = (PyNs3WimaxPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_WimaxPhy);
    }
    
    if (py_WimaxPhy == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (phy))), &PyNs3WimaxPhy_Type);
        py_WimaxPhy = PyObject_GC_New(PyNs3WimaxPhy, wrapper_type);
        py_WimaxPhy->inst_dict = NULL;
    
        py_WimaxPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (phy))->Ref();
        py_WimaxPhy->obj = const_cast<ns3::WimaxPhy *> (ns3::PeekPointer (phy));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxPhy->obj] = (PyObject *) py_WimaxPhy;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoAttach", (char *) "N", py_WimaxPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::NetDevice >
PyNs3SimpleOfdmWimaxChannel__PythonHelper::DoGetDevice(uint32_t i) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SimpleOfdmWimaxChannel *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    PyNs3NetDevice *tmp_NetDevice;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoGetDevice"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj = const_cast< ns3::SimpleOfdmWimaxChannel* >((const ns3::SimpleOfdmWimaxChannel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoGetDevice", (char *) "N", PyLong_FromUnsignedLong(i));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NetDevice_Type, &tmp_NetDevice)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::NetDevice  > (tmp_NetDevice->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3SimpleOfdmWimaxChannel__PythonHelper::DoGetNDevices() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SimpleOfdmWimaxChannel *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoGetNDevices"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj = const_cast< ns3::SimpleOfdmWimaxChannel* >((const ns3::SimpleOfdmWimaxChannel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoGetNDevices", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SimpleOfdmWimaxChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3SimpleOfdmWimaxChannel__PythonHelper::GetNDevices() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxChannel *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNDevices"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxChannel::GetNDevices();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = const_cast< ns3::WimaxChannel* >((const ns3::WimaxChannel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNDevices", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxChannel::GetNDevices();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxChannel::GetNDevices();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::NetDevice >
PyNs3SimpleOfdmWimaxChannel__PythonHelper::GetDevice(uint32_t i) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxChannel *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    PyNs3NetDevice *tmp_NetDevice;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetDevice"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxChannel::GetDevice(i);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = const_cast< ns3::WimaxChannel* >((const ns3::WimaxChannel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetDevice", (char *) "N", PyLong_FromUnsignedLong(i));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxChannel::GetDevice(i);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NetDevice_Type, &tmp_NetDevice)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxChannel::GetDevice(i);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::NetDevice  > (tmp_NetDevice->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3SimpleOfdmWimaxChannel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3SimpleOfdmWimaxChannel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SimpleOfdmWimaxChannel__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SimpleOfdmWimaxChannel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SimpleOfdmWimaxChannel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3SimpleOfdmWimaxChannel__tp_init__0(PyNs3SimpleOfdmWimaxChannel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleOfdmWimaxChannel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleOfdmWimaxChannel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3SimpleOfdmWimaxChannel_Type)
    {
        self->obj = new PyNs3SimpleOfdmWimaxChannel__PythonHelper(*((PyNs3SimpleOfdmWimaxChannel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3SimpleOfdmWimaxChannel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::SimpleOfdmWimaxChannel(*((PyNs3SimpleOfdmWimaxChannel *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3SimpleOfdmWimaxChannel__tp_init__1(PyNs3SimpleOfdmWimaxChannel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3SimpleOfdmWimaxChannel_Type)
    {
        self->obj = new PyNs3SimpleOfdmWimaxChannel__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3SimpleOfdmWimaxChannel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::SimpleOfdmWimaxChannel();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3SimpleOfdmWimaxChannel__tp_init__2(PyNs3SimpleOfdmWimaxChannel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    ns3::SimpleOfdmWimaxChannel::PropModel propModel;
    const char *keywords[] = {"propModel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &propModel)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3SimpleOfdmWimaxChannel_Type)
    {
        self->obj = new PyNs3SimpleOfdmWimaxChannel__PythonHelper(propModel);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3SimpleOfdmWimaxChannel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::SimpleOfdmWimaxChannel(propModel);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3SimpleOfdmWimaxChannel__tp_init(PyNs3SimpleOfdmWimaxChannel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3SimpleOfdmWimaxChannel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleOfdmWimaxChannel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3SimpleOfdmWimaxChannel__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxChannel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::SimpleOfdmWimaxChannel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxChannel_SetPropagationModel(PyNs3SimpleOfdmWimaxChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::SimpleOfdmWimaxChannel::PropModel propModel;
    const char *keywords[] = {"propModel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &propModel)) {
        return NULL;
    }
    self->obj->SetPropagationModel(propModel);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxChannel_Send(PyNs3SimpleOfdmWimaxChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *BlockTime;
    unsigned int burstSize;
    PyNs3WimaxPhy *phy;
    ns3::WimaxPhy *phy_ptr;
    bool isFirstBlock;
    PyObject *py_isFirstBlock;
    bool isLastBlock;
    PyObject *py_isLastBlock;
    uint64_t frequency;
    ns3::WimaxPhy::ModulationType modulationType;
    int direction;
    double txPowerDbm;
    PyNs3PacketBurst *burst;
    ns3::PacketBurst *burst_ptr;
    const char *keywords[] = {"BlockTime", "burstSize", "phy", "isFirstBlock", "isLastBlock", "frequency", "modulationType", "direction", "txPowerDbm", "burst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!IO!OOKiidO!", (char **) keywords, &PyNs3Time_Type, &BlockTime, &burstSize, &PyNs3WimaxPhy_Type, &phy, &py_isFirstBlock, &py_isLastBlock, &frequency, &modulationType, &direction, &txPowerDbm, &PyNs3PacketBurst_Type, &burst)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    isFirstBlock = (bool) PyObject_IsTrue(py_isFirstBlock);
    isLastBlock = (bool) PyObject_IsTrue(py_isLastBlock);
    if (direction > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    burst_ptr = (burst ? burst->obj : NULL);
    self->obj->Send(*((PyNs3Time *) BlockTime)->obj, burstSize, ns3::Ptr< ns3::WimaxPhy  > (phy_ptr), isFirstBlock, isLastBlock, frequency, modulationType, direction, txPowerDbm, ns3::Ptr< ns3::PacketBurst  > (burst_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SimpleOfdmWimaxChannel_AssignStreams(PyNs3SimpleOfdmWimaxChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    PyNs3SimpleOfdmWimaxChannel__PythonHelper *helper_class = dynamic_cast<PyNs3SimpleOfdmWimaxChannel__PythonHelper*> (self->obj);
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->AssignStreams(stream)) : (self->obj->ns3::SimpleOfdmWimaxChannel::AssignStreams(stream));
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleOfdmWimaxChannel__copy__(PyNs3SimpleOfdmWimaxChannel *self)
{

    PyNs3SimpleOfdmWimaxChannel *py_copy;
    py_copy = PyObject_GC_New(PyNs3SimpleOfdmWimaxChannel, &PyNs3SimpleOfdmWimaxChannel_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::SimpleOfdmWimaxChannel(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleOfdmWimaxChannel_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxChannel_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetPropagationModel", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxChannel_SetPropagationModel, METH_KEYWORDS|METH_VARARGS, "SetPropagationModel(propModel)\n\ntype: propModel: ns3::SimpleOfdmWimaxChannel::PropModel" },
    {(char *) "Send", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxChannel_Send, METH_KEYWORDS|METH_VARARGS, "Send(BlockTime, burstSize, phy, isFirstBlock, isLastBlock, frequency, modulationType, direction, txPowerDbm, burst)\n\ntype: BlockTime: ns3::Time\ntype: burstSize: uint32_t\ntype: phy: ns3::Ptr< ns3::WimaxPhy >\ntype: isFirstBlock: bool\ntype: isLastBlock: bool\ntype: frequency: uint64_t\ntype: modulationType: ns3::WimaxPhy::ModulationType\ntype: direction: uint8_t\ntype: txPowerDbm: double\ntype: burst: ns3::Ptr< ns3::PacketBurst >" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxChannel_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3SimpleOfdmWimaxChannel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3SimpleOfdmWimaxChannel__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3SimpleOfdmWimaxChannel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3SimpleOfdmWimaxChannel__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleOfdmWimaxChannel__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3SimpleOfdmWimaxChannel__tp_clear(PyNs3SimpleOfdmWimaxChannel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::SimpleOfdmWimaxChannel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3SimpleOfdmWimaxChannel__tp_traverse(PyNs3SimpleOfdmWimaxChannel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3SimpleOfdmWimaxChannel__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3SimpleOfdmWimaxChannel__tp_dealloc(PyNs3SimpleOfdmWimaxChannel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3SimpleOfdmWimaxChannel__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleOfdmWimaxChannel__tp_richcompare (PyNs3SimpleOfdmWimaxChannel *PYBINDGEN_UNUSED(self), PyNs3SimpleOfdmWimaxChannel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleOfdmWimaxChannel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleOfdmWimaxChannel_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.SimpleOfdmWimaxChannel",            /* tp_name */
    sizeof(PyNs3SimpleOfdmWimaxChannel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleOfdmWimaxChannel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "SimpleOfdmWimaxChannel(propModel)\nSimpleOfdmWimaxChannel(arg0)\nSimpleOfdmWimaxChannel()",                        /* Documentation string */
    (traverseproc)PyNs3SimpleOfdmWimaxChannel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3SimpleOfdmWimaxChannel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleOfdmWimaxChannel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleOfdmWimaxChannel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3SimpleOfdmWimaxChannel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleOfdmWimaxChannel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3SubscriberStationNetDevice__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3SubscriberStationNetDevice__PythonHelper *helper = dynamic_cast< PyNs3SubscriberStationNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3SubscriberStationNetDevice__PythonHelper::_wrap_DoInitialize(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3SubscriberStationNetDevice__PythonHelper *helper = dynamic_cast< PyNs3SubscriberStationNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3SubscriberStationNetDevice__PythonHelper::_wrap_NotifyNewAggregate(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3SubscriberStationNetDevice__PythonHelper *helper = dynamic_cast< PyNs3SubscriberStationNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

bool
PyNs3SubscriberStationNetDevice__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::MacHeaderType const & hdrType, ns3::Ptr< ns3::WimaxConnection > connection)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SubscriberStationNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3MacHeaderType *py_MacHeaderType;
    PyNs3WimaxConnection *py_WimaxConnection;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::SubscriberStationNetDevice::Enqueue(packet, hdrType, connection);
    }
    self_obj_before = reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = (ns3::SubscriberStationNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_MacHeaderType = PyObject_GC_New(PyNs3MacHeaderType, &PyNs3MacHeaderType_Type);
    py_MacHeaderType->inst_dict = NULL;
    py_MacHeaderType->inst_dict = NULL;
    py_MacHeaderType->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_MacHeaderType->obj = new ns3::MacHeaderType(hdrType);
    PyNs3ObjectBase_wrapper_registry[(void *) py_MacHeaderType->obj] = (PyObject *) py_MacHeaderType;
    if (typeid(*(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection)))).name() == typeid(PyNs3WimaxConnection__PythonHelper).name())
    {
        py_WimaxConnection = (PyNs3WimaxConnection*) (((PyNs3WimaxConnection__PythonHelper*) const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection)))->m_pyself);
        py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection));
        Py_INCREF(py_WimaxConnection);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WimaxConnection = NULL;
        } else {
            py_WimaxConnection = (PyNs3WimaxConnection *) wrapper_lookup_iter2->second;
            Py_INCREF(py_WimaxConnection);
        }
    
        if (py_WimaxConnection == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection))), &PyNs3WimaxConnection_Type);
            py_WimaxConnection = PyObject_GC_New(PyNs3WimaxConnection, wrapper_type2);
            py_WimaxConnection->inst_dict = NULL;
    
            py_WimaxConnection->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection))->Ref();
            py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (connection));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxConnection->obj] = (PyObject *) py_WimaxConnection;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNN", py_Packet, py_MacHeaderType, py_WimaxConnection);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::SubscriberStationNetDevice::Enqueue(packet, hdrType, connection);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::SubscriberStationNetDevice::Enqueue(packet, hdrType, connection);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3SubscriberStationNetDevice__PythonHelper::Start()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SubscriberStationNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Start"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::SubscriberStationNetDevice::Start();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = (ns3::SubscriberStationNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Start", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SubscriberStationNetDevice__PythonHelper::Stop()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SubscriberStationNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Stop"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::SubscriberStationNetDevice::Stop();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = (ns3::SubscriberStationNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Stop", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SubscriberStationNetDevice__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SubscriberStationNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = (ns3::SubscriberStationNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3SubscriberStationNetDevice__PythonHelper::DoSend(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address const & source, ns3::Mac48Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SubscriberStationNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoSend"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = (ns3::SubscriberStationNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(source);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(dest);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoSend", (char *) "NNNi", py_Packet, py_Mac48Address, py_Mac48Address2, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3SubscriberStationNetDevice__PythonHelper::DoReceive(ns3::Ptr< ns3::Packet > packet)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::SubscriberStationNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoReceive"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = (ns3::SubscriberStationNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoReceive", (char *) "N", py_Packet);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3SubscriberStationNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3SubscriberStationNetDevice__PythonHelper::IsMulticast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsMulticast();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsMulticast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsMulticast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsMulticast();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


ns3::Address
PyNs3SubscriberStationNetDevice__PythonHelper::GetMulticast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3SubscriberStationNetDevice__PythonHelper::GetMulticast(ns3::Ipv6Address addr) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv6Address *py_Ipv6Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(addr);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_Ipv6Address = PyObject_New(PyNs3Ipv6Address, &PyNs3Ipv6Address_Type);
    py_Ipv6Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv6Address->obj = new ns3::Ipv6Address(addr);
    PyNs3Ipv6Address_wrapper_registry[(void *) py_Ipv6Address->obj] = (PyObject *) py_Ipv6Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "N", py_Ipv6Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(addr);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(addr);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3SubscriberStationNetDevice__PythonHelper::GetMulticast(ns3::Ipv4Address multicastGroup) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(multicastGroup);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(multicastGroup);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "N", py_Ipv4Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(multicastGroup);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMulticast(multicastGroup);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3SubscriberStationNetDevice__PythonHelper::Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Send"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::Send(packet, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Send", (char *) "NNi", py_Packet, py_Address, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::Send(packet, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::Send(packet, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3SubscriberStationNetDevice__PythonHelper::NeedsArp() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NeedsArp"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::NeedsArp();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NeedsArp", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::NeedsArp();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::NeedsArp();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


ns3::Ptr< ns3::Node >
PyNs3SubscriberStationNetDevice__PythonHelper::GetNode() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3Node *tmp_Node;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNode"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetNode();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNode", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetNode();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Node_Type, &tmp_Node)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetNode();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Node  > (tmp_Node->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3SubscriberStationNetDevice__PythonHelper::SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyNs3Address *py_Address2;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SendFrom"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(source);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address2->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SendFrom", (char *) "NNNi", py_Packet, py_Address, py_Address2, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3SubscriberStationNetDevice__PythonHelper::IsBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsBroadcast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBroadcast();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3SubscriberStationNetDevice__PythonHelper::IsPointToPoint() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsPointToPoint"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsPointToPoint();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsPointToPoint", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsPointToPoint();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsPointToPoint();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint16_t
PyNs3SubscriberStationNetDevice__PythonHelper::GetMtu() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    uint16_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMtu"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMtu();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMtu", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMtu();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMtu();
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetMtu();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3SubscriberStationNetDevice__PythonHelper::MakeMulticastAddress(ns3::Ipv4Address multicastGroup) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "MakeMulticastAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::MakeMulticastAddress(multicastGroup);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(multicastGroup);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "MakeMulticastAddress", (char *) "N", py_Ipv4Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::MakeMulticastAddress(multicastGroup);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::MakeMulticastAddress(multicastGroup);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3SubscriberStationNetDevice__PythonHelper::SetNode(ns3::Ptr< ns3::Node > node)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetNode"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WimaxNetDevice::SetNode(node);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    if (typeid(*(const_cast<ns3::Node *> (ns3::PeekPointer (node)))).name() == typeid(PyNs3Node__PythonHelper).name())
    {
        py_Node = (PyNs3Node*) (((PyNs3Node__PythonHelper*) const_cast<ns3::Node *> (ns3::PeekPointer (node)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (node)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Node *> (ns3::PeekPointer (node))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
    
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (node))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetNode", (char *) "N", py_Node);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Address
PyNs3SubscriberStationNetDevice__PythonHelper::GetBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBroadcast"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetBroadcast();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

std::string
PyNs3SubscriberStationNetDevice__PythonHelper::GetName() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    std::string retval;
    const char *retval_ptr;
    Py_ssize_t retval_len;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetName"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetName();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetName", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetName();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &retval_ptr, &retval_len)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetName();
    }
    retval = std::string(retval_ptr, retval_len);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3SubscriberStationNetDevice__PythonHelper::IsBridge() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsBridge"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBridge();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsBridge", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBridge();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsBridge();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3SubscriberStationNetDevice__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetAddress();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Channel >
PyNs3SubscriberStationNetDevice__PythonHelper::GetPhyChannel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3Channel *tmp_Channel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPhyChannel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetPhyChannel();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPhyChannel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetPhyChannel();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Channel_Type, &tmp_Channel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetPhyChannel();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Channel  > (tmp_Channel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3SubscriberStationNetDevice__PythonHelper::SetIfIndex(uint32_t const index)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetIfIndex"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WimaxNetDevice::SetIfIndex(index);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetIfIndex", (char *) "N", PyLong_FromUnsignedLong(index));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SubscriberStationNetDevice__PythonHelper::SetAddress(ns3::Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *py_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WimaxNetDevice::SetAddress(address);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(address);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3SubscriberStationNetDevice__PythonHelper::IsLinkUp() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsLinkUp"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsLinkUp();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsLinkUp", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsLinkUp();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::IsLinkUp();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3SubscriberStationNetDevice__PythonHelper::SetName(std::string const name)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    const char *name_ptr;
    Py_ssize_t name_len;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetName"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WimaxNetDevice::SetName(name);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    name_ptr = (name).c_str();
    name_len = (name).size();
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetName", (char *) "s#", name_ptr, name_len);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


bool
PyNs3SubscriberStationNetDevice__PythonHelper::SetMtu(uint16_t const mtu)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMtu"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SetMtu(mtu);
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMtu", (char *) "i", (int) mtu);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SetMtu(mtu);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SetMtu(mtu);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3SubscriberStationNetDevice__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Channel >
PyNs3SubscriberStationNetDevice__PythonHelper::GetChannel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3Channel *tmp_Channel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetChannel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetChannel();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetChannel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetChannel();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Channel_Type, &tmp_Channel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetChannel();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Channel  > (tmp_Channel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3SubscriberStationNetDevice__PythonHelper::SetConnectionManager(ns3::Ptr< ns3::ConnectionManager > connectionManager)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3ConnectionManager *py_ConnectionManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetConnectionManager"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::WimaxNetDevice::SetConnectionManager(connectionManager);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = (ns3::WimaxNetDevice*) this;
    if (typeid(*(const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager)))).name() == typeid(PyNs3ConnectionManager__PythonHelper).name())
    {
        py_ConnectionManager = (PyNs3ConnectionManager*) (((PyNs3ConnectionManager__PythonHelper*) const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager)))->m_pyself);
        py_ConnectionManager->obj = const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager));
        Py_INCREF(py_ConnectionManager);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_ConnectionManager = NULL;
        } else {
            py_ConnectionManager = (PyNs3ConnectionManager *) wrapper_lookup_iter->second;
            Py_INCREF(py_ConnectionManager);
        }
    
        if (py_ConnectionManager == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager))), &PyNs3ConnectionManager_Type);
            py_ConnectionManager = PyObject_GC_New(PyNs3ConnectionManager, wrapper_type);
            py_ConnectionManager->inst_dict = NULL;
    
            py_ConnectionManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager))->Ref();
            py_ConnectionManager->obj = const_cast<ns3::ConnectionManager *> (ns3::PeekPointer (connectionManager));
            PyNs3ObjectBase_wrapper_registry[(void *) py_ConnectionManager->obj] = (PyObject *) py_ConnectionManager;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetConnectionManager", (char *) "N", py_ConnectionManager);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

uint32_t
PyNs3SubscriberStationNetDevice__PythonHelper::GetIfIndex() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetIfIndex"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetIfIndex();
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetIfIndex", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetIfIndex();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WimaxNetDevice::GetIfIndex();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::WimaxChannel >
PyNs3SubscriberStationNetDevice__PythonHelper::DoGetChannel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WimaxNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxChannel > retval;
    PyNs3WimaxChannel *tmp_WimaxChannel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoGetChannel"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = const_cast< ns3::WimaxNetDevice* >((const ns3::WimaxNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoGetChannel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WimaxChannel_Type, &tmp_WimaxChannel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::WimaxChannel  > (tmp_WimaxChannel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WimaxNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3SubscriberStationNetDevice__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3SubscriberStationNetDevice__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SubscriberStationNetDevice__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3SubscriberStationNetDevice__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3SubscriberStationNetDevice__tp_init__0(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3SubscriberStationNetDevice_Type)
    {
        self->obj = new PyNs3SubscriberStationNetDevice__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3SubscriberStationNetDevice__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::SubscriberStationNetDevice();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3SubscriberStationNetDevice__tp_init__1(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Node *arg0;
    ns3::Node *arg0_ptr;
    PyNs3WimaxPhy *arg1;
    ns3::WimaxPhy *arg1_ptr;
    const char *keywords[] = {"arg0", "arg1", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Node_Type, &arg0, &PyNs3WimaxPhy_Type, &arg1)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    arg1_ptr = (arg1 ? arg1->obj : NULL);
    if (Py_TYPE(self) != &PyNs3SubscriberStationNetDevice_Type)
    {
        self->obj = new PyNs3SubscriberStationNetDevice__PythonHelper(ns3::Ptr< ns3::Node  > (arg0_ptr), ns3::Ptr< ns3::WimaxPhy  > (arg1_ptr));
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3SubscriberStationNetDevice__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::SubscriberStationNetDevice(ns3::Ptr< ns3::Node  > (arg0_ptr), ns3::Ptr< ns3::WimaxPhy  > (arg1_ptr));
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3SubscriberStationNetDevice__tp_init(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SubscriberStationNetDevice__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SubscriberStationNetDevice__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetAreServiceFlowsAllocated(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool areServiceFlowsAllocated;
    PyObject *py_areServiceFlowsAllocated;
    const char *keywords[] = {"areServiceFlowsAllocated", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_areServiceFlowsAllocated)) {
        return NULL;
    }
    areServiceFlowsAllocated = (bool) PyObject_IsTrue(py_areServiceFlowsAllocated);
    self->obj->SetAreServiceFlowsAllocated(areServiceFlowsAllocated);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetIpcsClassifier(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::IpcsClassifier > retval;
    PyNs3IpcsClassifier *py_IpcsClassifier;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetIpcsClassifier();
    if (!(const_cast<ns3::IpcsClassifier *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::IpcsClassifier *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_IpcsClassifier = NULL;
    } else {
        py_IpcsClassifier = (PyNs3IpcsClassifier *) wrapper_lookup_iter->second;
        Py_INCREF(py_IpcsClassifier);
    }
    
    if (py_IpcsClassifier == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::IpcsClassifier *> (ns3::PeekPointer (retval)))), &PyNs3IpcsClassifier_Type);
        py_IpcsClassifier = PyObject_GC_New(PyNs3IpcsClassifier, wrapper_type);
        py_IpcsClassifier->inst_dict = NULL;
    
        py_IpcsClassifier->inst_dict = NULL;
        py_IpcsClassifier->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::IpcsClassifier *> (ns3::PeekPointer (retval))->Ref();
        py_IpcsClassifier->obj = const_cast<ns3::IpcsClassifier *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_IpcsClassifier->obj] = (PyObject *) py_IpcsClassifier;
    }
    py_retval = Py_BuildValue((char *) "N", py_IpcsClassifier);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetAreServiceFlowsAllocated(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetAreServiceFlowsAllocated();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetModulationType(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    ns3::WimaxPhy::ModulationType retval;
    
    retval = self->obj->GetModulationType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::SubscriberStationNetDevice::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetPrimaryConnection(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxConnection > retval;
    PyNs3WimaxConnection *py_WimaxConnection;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPrimaryConnection();
    if (!(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3WimaxConnection__PythonHelper).name())
    {
        py_WimaxConnection = reinterpret_cast< PyNs3WimaxConnection* >(reinterpret_cast< PyNs3WimaxConnection__PythonHelper* >(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))->m_pyself);
        py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval));
        Py_INCREF(py_WimaxConnection);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WimaxConnection = NULL;
        } else {
            py_WimaxConnection = (PyNs3WimaxConnection *) wrapper_lookup_iter->second;
            Py_INCREF(py_WimaxConnection);
        }
    
        if (py_WimaxConnection == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))), &PyNs3WimaxConnection_Type);
            py_WimaxConnection = PyObject_GC_New(PyNs3WimaxConnection, wrapper_type);
            py_WimaxConnection->inst_dict = NULL;
    
            py_WimaxConnection->inst_dict = NULL;
            py_WimaxConnection->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval))->Ref();
            py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxConnection->obj] = (PyObject *) py_WimaxConnection;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxConnection);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetMaxDcdInterval(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetMaxDcdInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetIntervalT21(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetIntervalT21();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetIntervalT20(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetIntervalT20();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetIntervalT21(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *interval21;
    const char *keywords[] = {"interval21", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &interval21)) {
        return NULL;
    }
    self->obj->SetIntervalT21(*((PyNs3Time *) interval21)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetModulationType(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WimaxPhy::ModulationType modulationType;
    const char *keywords[] = {"modulationType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &modulationType)) {
        return NULL;
    }
    self->obj->SetModulationType(modulationType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetIpcsPacketClassifier(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3IpcsClassifier *arg0;
    ns3::IpcsClassifier *arg0_ptr;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3IpcsClassifier_Type, &arg0)) {
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    self->obj->SetIpcsPacketClassifier(ns3::Ptr< ns3::IpcsClassifier  > (arg0_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_Enqueue(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3MacHeaderType *hdrType;
    PyNs3WimaxConnection *connection;
    ns3::WimaxConnection *connection_ptr;
    PyNs3SubscriberStationNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3SubscriberStationNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "hdrType", "connection", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3MacHeaderType_Type, &hdrType, &PyNs3WimaxConnection_Type, &connection)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    connection_ptr = (connection ? connection->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3MacHeaderType *) hdrType)->obj, ns3::Ptr< ns3::WimaxConnection  > (connection_ptr))) : (self->obj->ns3::SubscriberStationNetDevice::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3MacHeaderType *) hdrType)->obj, ns3::Ptr< ns3::WimaxConnection  > (connection_ptr)));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetBasicConnection(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WimaxConnection > retval;
    PyNs3WimaxConnection *py_WimaxConnection;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetBasicConnection();
    if (!(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3WimaxConnection__PythonHelper).name())
    {
        py_WimaxConnection = reinterpret_cast< PyNs3WimaxConnection* >(reinterpret_cast< PyNs3WimaxConnection__PythonHelper* >(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))->m_pyself);
        py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval));
        Py_INCREF(py_WimaxConnection);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WimaxConnection = NULL;
        } else {
            py_WimaxConnection = (PyNs3WimaxConnection *) wrapper_lookup_iter->second;
            Py_INCREF(py_WimaxConnection);
        }
    
        if (py_WimaxConnection == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval)))), &PyNs3WimaxConnection_Type);
            py_WimaxConnection = PyObject_GC_New(PyNs3WimaxConnection, wrapper_type);
            py_WimaxConnection->inst_dict = NULL;
    
            py_WimaxConnection->inst_dict = NULL;
            py_WimaxConnection->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval))->Ref();
            py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxConnection->obj] = (PyObject *) py_WimaxConnection;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxConnection);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetAreManagementConnectionsAllocated(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool areManagementConnectionsAllocated;
    PyObject *py_areManagementConnectionsAllocated;
    const char *keywords[] = {"areManagementConnectionsAllocated", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_areManagementConnectionsAllocated)) {
        return NULL;
    }
    areManagementConnectionsAllocated = (bool) PyObject_IsTrue(py_areManagementConnectionsAllocated);
    self->obj->SetAreManagementConnectionsAllocated(areManagementConnectionsAllocated);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetLostUlMapInterval(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetLostUlMapInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_Stop(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3SubscriberStationNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3SubscriberStationNetDevice__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->Stop()) : (self->obj->ns3::SubscriberStationNetDevice::Stop());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetMaxDcdInterval(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *maxDcdInterval;
    const char *keywords[] = {"maxDcdInterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &maxDcdInterval)) {
        return NULL;
    }
    self->obj->SetMaxDcdInterval(*((PyNs3Time *) maxDcdInterval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetLostUlMapInterval(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *lostUlMapInterval;
    const char *keywords[] = {"lostUlMapInterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &lostUlMapInterval)) {
        return NULL;
    }
    self->obj->SetLostUlMapInterval(*((PyNs3Time *) lostUlMapInterval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetPrimaryCid(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->GetPrimaryCid();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetMaxUcdInterval(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *maxUcdInterval;
    const char *keywords[] = {"maxUcdInterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &maxUcdInterval)) {
        return NULL;
    }
    self->obj->SetMaxUcdInterval(*((PyNs3Time *) maxUcdInterval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetIntervalT20(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *interval20;
    const char *keywords[] = {"interval20", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &interval20)) {
        return NULL;
    }
    self->obj->SetIntervalT20(*((PyNs3Time *) interval20)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetServiceFlowManager(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::SsServiceFlowManager > retval;
    PyNs3SsServiceFlowManager *py_SsServiceFlowManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetServiceFlowManager();
    if (!(const_cast<ns3::SsServiceFlowManager *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::SsServiceFlowManager *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3SsServiceFlowManager__PythonHelper).name())
    {
        py_SsServiceFlowManager = reinterpret_cast< PyNs3SsServiceFlowManager* >(reinterpret_cast< PyNs3SsServiceFlowManager__PythonHelper* >(const_cast<ns3::SsServiceFlowManager *> (ns3::PeekPointer (retval)))->m_pyself);
        py_SsServiceFlowManager->obj = const_cast<ns3::SsServiceFlowManager *> (ns3::PeekPointer (retval));
        Py_INCREF(py_SsServiceFlowManager);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::SsServiceFlowManager *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_SsServiceFlowManager = NULL;
        } else {
            py_SsServiceFlowManager = (PyNs3SsServiceFlowManager *) wrapper_lookup_iter->second;
            Py_INCREF(py_SsServiceFlowManager);
        }
    
        if (py_SsServiceFlowManager == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::SsServiceFlowManager *> (ns3::PeekPointer (retval)))), &PyNs3SsServiceFlowManager_Type);
            py_SsServiceFlowManager = PyObject_GC_New(PyNs3SsServiceFlowManager, wrapper_type);
            py_SsServiceFlowManager->inst_dict = NULL;
    
            py_SsServiceFlowManager->inst_dict = NULL;
            py_SsServiceFlowManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::SsServiceFlowManager *> (ns3::PeekPointer (retval))->Ref();
            py_SsServiceFlowManager->obj = const_cast<ns3::SsServiceFlowManager *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_SsServiceFlowManager->obj] = (PyObject *) py_SsServiceFlowManager;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_SsServiceFlowManager);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetMaxContentionRangingRetries(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetMaxContentionRangingRetries();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetMaxUcdInterval(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetMaxUcdInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetBasicCid(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Cid *py_Cid;
    
    ns3::Cid retval = self->obj->GetBasicCid();
    py_Cid = PyObject_New(PyNs3Cid, &PyNs3Cid_Type);
    py_Cid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Cid->obj = new ns3::Cid(retval);
    PyNs3Cid_wrapper_registry[(void *) py_Cid->obj] = (PyObject *) py_Cid;
    py_retval = Py_BuildValue((char *) "N", py_Cid);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_AddServiceFlow(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ServiceFlow *sf;
    const char *keywords[] = {"sf", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ServiceFlow_Type, &sf)) {
        return NULL;
    }
    self->obj->AddServiceFlow(*((PyNs3ServiceFlow *) sf)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_IsRegistered(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsRegistered();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetAreManagementConnectionsAllocated(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetAreManagementConnectionsAllocated();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_HasServiceFlows(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->HasServiceFlows();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetBasicConnection(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WimaxConnection *basicConnection;
    ns3::WimaxConnection *basicConnection_ptr;
    const char *keywords[] = {"basicConnection", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WimaxConnection_Type, &basicConnection)) {
        return NULL;
    }
    basicConnection_ptr = (basicConnection ? basicConnection->obj : NULL);
    self->obj->SetBasicConnection(ns3::Ptr< ns3::WimaxConnection  > (basicConnection_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetIntervalT2(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *interval2;
    const char *keywords[] = {"interval2", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &interval2)) {
        return NULL;
    }
    self->obj->SetIntervalT2(*((PyNs3Time *) interval2)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetIntervalT3(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *interval3;
    const char *keywords[] = {"interval3", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &interval3)) {
        return NULL;
    }
    self->obj->SetIntervalT3(*((PyNs3Time *) interval3)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetIntervalT1(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *interval1;
    const char *keywords[] = {"interval1", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &interval1)) {
        return NULL;
    }
    self->obj->SetIntervalT1(*((PyNs3Time *) interval1)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_InitSubscriberStationNetDevice(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    
    self->obj->InitSubscriberStationNetDevice();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetIntervalT7(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *interval7;
    const char *keywords[] = {"interval7", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &interval7)) {
        return NULL;
    }
    self->obj->SetIntervalT7(*((PyNs3Time *) interval7)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetIntervalT12(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetIntervalT12();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetLostDlMapInterval(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetLostDlMapInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetTimeToAllocation(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *defferTime;
    const char *keywords[] = {"defferTime", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &defferTime)) {
        return NULL;
    }
    ns3::Time retval = self->obj->GetTimeToAllocation(*((PyNs3Time *) defferTime)->obj);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetTimer(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3EventId *eventId;
    PyNs3EventId *event;
    const char *keywords[] = {"eventId", "event", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3EventId_Type, &eventId, &PyNs3EventId_Type, &event)) {
        return NULL;
    }
    self->obj->SetTimer(*((PyNs3EventId *) eventId)->obj, *((PyNs3EventId *) event)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_Start(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3SubscriberStationNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3SubscriberStationNetDevice__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->Start()) : (self->obj->ns3::SubscriberStationNetDevice::Start());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetServiceFlowManager(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3SsServiceFlowManager *arg0;
    ns3::SsServiceFlowManager *arg0_ptr;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SsServiceFlowManager_Type, &arg0)) {
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    self->obj->SetServiceFlowManager(ns3::Ptr< ns3::SsServiceFlowManager  > (arg0_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetIntervalT12(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *interval12;
    const char *keywords[] = {"interval12", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &interval12)) {
        return NULL;
    }
    self->obj->SetIntervalT12(*((PyNs3Time *) interval12)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetIntervalT7(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetIntervalT7();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetIntervalT2(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetIntervalT2();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetIntervalT3(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetIntervalT3();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_GetIntervalT1(PyNs3SubscriberStationNetDevice *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetIntervalT1();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetPrimaryConnection(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WimaxConnection *primaryConnection;
    ns3::WimaxConnection *primaryConnection_ptr;
    const char *keywords[] = {"primaryConnection", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WimaxConnection_Type, &primaryConnection)) {
        return NULL;
    }
    primaryConnection_ptr = (primaryConnection ? primaryConnection->obj : NULL);
    self->obj->SetPrimaryConnection(ns3::Ptr< ns3::WimaxConnection  > (primaryConnection_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetMaxContentionRangingRetries(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int maxContentionRangingRetries;
    const char *keywords[] = {"maxContentionRangingRetries", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &maxContentionRangingRetries)) {
        return NULL;
    }
    if (maxContentionRangingRetries > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxContentionRangingRetries(maxContentionRangingRetries);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SendBurst(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int uiuc;
    int nrSymbols;
    PyNs3WimaxConnection *connection;
    ns3::WimaxConnection *connection_ptr;
    ns3::MacHeaderType::HeaderType packetType = ::ns3::MacHeaderType::HEADER_TYPE_GENERIC;
    const char *keywords[] = {"uiuc", "nrSymbols", "connection", "packetType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iiO!|i", (char **) keywords, &uiuc, &nrSymbols, &PyNs3WimaxConnection_Type, &connection, &packetType)) {
        return NULL;
    }
    if (uiuc > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (nrSymbols > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    connection_ptr = (connection ? connection->obj : NULL);
    self->obj->SendBurst(uiuc, nrSymbols, ns3::Ptr< ns3::WimaxConnection  > (connection_ptr), packetType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SubscriberStationNetDevice_SetLostDlMapInterval(PyNs3SubscriberStationNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *lostDlMapInterval;
    const char *keywords[] = {"lostDlMapInterval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &lostDlMapInterval)) {
        return NULL;
    }
    self->obj->SetLostDlMapInterval(*((PyNs3Time *) lostDlMapInterval)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3SubscriberStationNetDevice_methods[] = {
    {(char *) "SetAreServiceFlowsAllocated", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetAreServiceFlowsAllocated, METH_KEYWORDS|METH_VARARGS, "SetAreServiceFlowsAllocated(areServiceFlowsAllocated)\n\ntype: areServiceFlowsAllocated: bool" },
    {(char *) "GetIpcsClassifier", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetIpcsClassifier, METH_NOARGS, "GetIpcsClassifier()\n\n" },
    {(char *) "GetAreServiceFlowsAllocated", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetAreServiceFlowsAllocated, METH_NOARGS, "GetAreServiceFlowsAllocated()\n\n" },
    {(char *) "GetModulationType", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetModulationType, METH_NOARGS, "GetModulationType()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetPrimaryConnection", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetPrimaryConnection, METH_NOARGS, "GetPrimaryConnection()\n\n" },
    {(char *) "GetMaxDcdInterval", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetMaxDcdInterval, METH_NOARGS, "GetMaxDcdInterval()\n\n" },
    {(char *) "GetIntervalT21", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetIntervalT21, METH_NOARGS, "GetIntervalT21()\n\n" },
    {(char *) "GetIntervalT20", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetIntervalT20, METH_NOARGS, "GetIntervalT20()\n\n" },
    {(char *) "SetIntervalT21", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetIntervalT21, METH_KEYWORDS|METH_VARARGS, "SetIntervalT21(interval21)\n\ntype: interval21: ns3::Time" },
    {(char *) "SetModulationType", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetModulationType, METH_KEYWORDS|METH_VARARGS, "SetModulationType(modulationType)\n\ntype: modulationType: ns3::WimaxPhy::ModulationType" },
    {(char *) "SetIpcsPacketClassifier", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetIpcsPacketClassifier, METH_KEYWORDS|METH_VARARGS, "SetIpcsPacketClassifier(arg0)\n\ntype: arg0: ns3::Ptr< ns3::IpcsClassifier >" },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_Enqueue, METH_KEYWORDS|METH_VARARGS, "Enqueue(packet, hdrType, connection)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: hdrType: ns3::MacHeaderType const &\ntype: connection: ns3::Ptr< ns3::WimaxConnection >" },
    {(char *) "GetBasicConnection", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetBasicConnection, METH_NOARGS, "GetBasicConnection()\n\n" },
    {(char *) "SetAreManagementConnectionsAllocated", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetAreManagementConnectionsAllocated, METH_KEYWORDS|METH_VARARGS, "SetAreManagementConnectionsAllocated(areManagementConnectionsAllocated)\n\ntype: areManagementConnectionsAllocated: bool" },
    {(char *) "GetLostUlMapInterval", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetLostUlMapInterval, METH_NOARGS, "GetLostUlMapInterval()\n\n" },
    {(char *) "Stop", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_Stop, METH_NOARGS, "Stop()\n\n" },
    {(char *) "SetMaxDcdInterval", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetMaxDcdInterval, METH_KEYWORDS|METH_VARARGS, "SetMaxDcdInterval(maxDcdInterval)\n\ntype: maxDcdInterval: ns3::Time" },
    {(char *) "SetLostUlMapInterval", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetLostUlMapInterval, METH_KEYWORDS|METH_VARARGS, "SetLostUlMapInterval(lostUlMapInterval)\n\ntype: lostUlMapInterval: ns3::Time" },
    {(char *) "GetPrimaryCid", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetPrimaryCid, METH_NOARGS, "GetPrimaryCid()\n\n" },
    {(char *) "SetMaxUcdInterval", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetMaxUcdInterval, METH_KEYWORDS|METH_VARARGS, "SetMaxUcdInterval(maxUcdInterval)\n\ntype: maxUcdInterval: ns3::Time" },
    {(char *) "SetIntervalT20", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetIntervalT20, METH_KEYWORDS|METH_VARARGS, "SetIntervalT20(interval20)\n\ntype: interval20: ns3::Time" },
    {(char *) "GetServiceFlowManager", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetServiceFlowManager, METH_NOARGS, "GetServiceFlowManager()\n\n" },
    {(char *) "GetMaxContentionRangingRetries", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetMaxContentionRangingRetries, METH_NOARGS, "GetMaxContentionRangingRetries()\n\n" },
    {(char *) "GetMaxUcdInterval", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetMaxUcdInterval, METH_NOARGS, "GetMaxUcdInterval()\n\n" },
    {(char *) "GetBasicCid", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetBasicCid, METH_NOARGS, "GetBasicCid()\n\n" },
    {(char *) "AddServiceFlow", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_AddServiceFlow, METH_KEYWORDS|METH_VARARGS, "AddServiceFlow(sf)\n\ntype: sf: ns3::ServiceFlow" },
    {(char *) "IsRegistered", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_IsRegistered, METH_NOARGS, "IsRegistered()\n\n" },
    {(char *) "GetAreManagementConnectionsAllocated", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetAreManagementConnectionsAllocated, METH_NOARGS, "GetAreManagementConnectionsAllocated()\n\n" },
    {(char *) "HasServiceFlows", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_HasServiceFlows, METH_NOARGS, "HasServiceFlows()\n\n" },
    {(char *) "SetBasicConnection", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetBasicConnection, METH_KEYWORDS|METH_VARARGS, "SetBasicConnection(basicConnection)\n\ntype: basicConnection: ns3::Ptr< ns3::WimaxConnection >" },
    {(char *) "SetIntervalT2", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetIntervalT2, METH_KEYWORDS|METH_VARARGS, "SetIntervalT2(interval2)\n\ntype: interval2: ns3::Time" },
    {(char *) "SetIntervalT3", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetIntervalT3, METH_KEYWORDS|METH_VARARGS, "SetIntervalT3(interval3)\n\ntype: interval3: ns3::Time" },
    {(char *) "SetIntervalT1", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetIntervalT1, METH_KEYWORDS|METH_VARARGS, "SetIntervalT1(interval1)\n\ntype: interval1: ns3::Time" },
    {(char *) "InitSubscriberStationNetDevice", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_InitSubscriberStationNetDevice, METH_NOARGS, "InitSubscriberStationNetDevice()\n\n" },
    {(char *) "SetIntervalT7", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetIntervalT7, METH_KEYWORDS|METH_VARARGS, "SetIntervalT7(interval7)\n\ntype: interval7: ns3::Time" },
    {(char *) "GetIntervalT12", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetIntervalT12, METH_NOARGS, "GetIntervalT12()\n\n" },
    {(char *) "GetLostDlMapInterval", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetLostDlMapInterval, METH_NOARGS, "GetLostDlMapInterval()\n\n" },
    {(char *) "GetTimeToAllocation", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetTimeToAllocation, METH_KEYWORDS|METH_VARARGS, "GetTimeToAllocation(defferTime)\n\ntype: defferTime: ns3::Time" },
    {(char *) "SetTimer", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetTimer, METH_KEYWORDS|METH_VARARGS, "SetTimer(eventId, event)\n\ntype: eventId: ns3::EventId\ntype: event: ns3::EventId &" },
    {(char *) "Start", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_Start, METH_NOARGS, "Start()\n\n" },
    {(char *) "SetServiceFlowManager", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetServiceFlowManager, METH_KEYWORDS|METH_VARARGS, "SetServiceFlowManager(arg0)\n\ntype: arg0: ns3::Ptr< ns3::SsServiceFlowManager >" },
    {(char *) "SetIntervalT12", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetIntervalT12, METH_KEYWORDS|METH_VARARGS, "SetIntervalT12(interval12)\n\ntype: interval12: ns3::Time" },
    {(char *) "GetIntervalT7", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetIntervalT7, METH_NOARGS, "GetIntervalT7()\n\n" },
    {(char *) "GetIntervalT2", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetIntervalT2, METH_NOARGS, "GetIntervalT2()\n\n" },
    {(char *) "GetIntervalT3", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetIntervalT3, METH_NOARGS, "GetIntervalT3()\n\n" },
    {(char *) "GetIntervalT1", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_GetIntervalT1, METH_NOARGS, "GetIntervalT1()\n\n" },
    {(char *) "SetPrimaryConnection", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetPrimaryConnection, METH_KEYWORDS|METH_VARARGS, "SetPrimaryConnection(primaryConnection)\n\ntype: primaryConnection: ns3::Ptr< ns3::WimaxConnection >" },
    {(char *) "SetMaxContentionRangingRetries", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetMaxContentionRangingRetries, METH_KEYWORDS|METH_VARARGS, "SetMaxContentionRangingRetries(maxContentionRangingRetries)\n\ntype: maxContentionRangingRetries: uint8_t" },
    {(char *) "SendBurst", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SendBurst, METH_KEYWORDS|METH_VARARGS, "SendBurst(uiuc, nrSymbols, connection, packetType)\n\ntype: uiuc: uint8_t\ntype: nrSymbols: uint16_t\ntype: connection: ns3::Ptr< ns3::WimaxConnection >\ntype: packetType: ns3::MacHeaderType::HeaderType" },
    {(char *) "SetLostDlMapInterval", (PyCFunction) _wrap_PyNs3SubscriberStationNetDevice_SetLostDlMapInterval, METH_KEYWORDS|METH_VARARGS, "SetLostDlMapInterval(lostDlMapInterval)\n\ntype: lostDlMapInterval: ns3::Time" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3SubscriberStationNetDevice__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3SubscriberStationNetDevice__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3SubscriberStationNetDevice__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3SubscriberStationNetDevice__tp_clear(PyNs3SubscriberStationNetDevice *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::SubscriberStationNetDevice *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3SubscriberStationNetDevice__tp_traverse(PyNs3SubscriberStationNetDevice *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3SubscriberStationNetDevice__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3SubscriberStationNetDevice__tp_dealloc(PyNs3SubscriberStationNetDevice *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3SubscriberStationNetDevice__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SubscriberStationNetDevice__tp_richcompare (PyNs3SubscriberStationNetDevice *PYBINDGEN_UNUSED(self), PyNs3SubscriberStationNetDevice *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SubscriberStationNetDevice_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SubscriberStationNetDevice_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.SubscriberStationNetDevice",            /* tp_name */
    sizeof(PyNs3SubscriberStationNetDevice),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SubscriberStationNetDevice__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "SubscriberStationNetDevice(arg0, arg1)\nSubscriberStationNetDevice()",                        /* Documentation string */
    (traverseproc)PyNs3SubscriberStationNetDevice__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3SubscriberStationNetDevice__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SubscriberStationNetDevice__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SubscriberStationNetDevice_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3SubscriberStationNetDevice, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SubscriberStationNetDevice__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- containers --- */



static void
Pystd__vector__lt___bool___gt__Iter__tp_clear(Pystd__vector__lt___bool___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___bool___gt__Iter__tp_traverse(Pystd__vector__lt___bool___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___bool___gt____tp_dealloc(Pystd__vector__lt___bool___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___bool___gt__Iter__tp_dealloc(Pystd__vector__lt___bool___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___bool___gt____tp_iter(Pystd__vector__lt___bool___gt__ *self)
{
    Pystd__vector__lt___bool___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___bool___gt__Iter, &Pystd__vector__lt___bool___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< bool >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___bool___gt__Iter__tp_iter(Pystd__vector__lt___bool___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___bool___gt__Iter__tp_iternext(Pystd__vector__lt___bool___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< bool >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong((*iter)));
    return py_retval;
}

int _wrap_convert_py2c__bool(PyObject *value, bool *address)
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___bool___gt__(PyObject *arg, std::vector< bool > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___bool___gt___Type)) {
        *container = *((Pystd__vector__lt___bool___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            bool item;
            if (!_wrap_convert_py2c__bool(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___bool___gt__ instance, or a list of bool");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___bool___gt____tp_init(Pystd__vector__lt___bool___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< bool >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___bool___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___bool___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__vector__lt___bool___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___bool___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___bool___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___bool___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___bool___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___bool___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__vector__lt___bool___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___bool___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___bool___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___bool___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___bool___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___bool___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___bool___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pyns3__bvecIter__tp_clear(Pyns3__bvecIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pyns3__bvecIter__tp_traverse(Pyns3__bvecIter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pyns3__bvec__tp_dealloc(Pyns3__bvec *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pyns3__bvecIter__tp_dealloc(Pyns3__bvecIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pyns3__bvec__tp_iter(Pyns3__bvec *self)
{
    Pyns3__bvecIter *iter = PyObject_GC_New(Pyns3__bvecIter, &Pyns3__bvecIter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new ns3::bvec::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pyns3__bvecIter__tp_iter(Pyns3__bvecIter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pyns3__bvecIter__tp_iternext(Pyns3__bvecIter *self)
{
    PyObject *py_retval;
    ns3::bvec::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong((*iter)));
    return py_retval;
}

int _wrap_convert_py2c__ns3__bvec(PyObject *arg, ns3::bvec *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pyns3__bvec_Type)) {
        *container = *((Pyns3__bvec*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            bool item;
            if (!_wrap_convert_py2c__bool(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Ns3__bvec instance, or a list of bool");
        return 0;
    }
    return 1;
}


static int
_wrap_Pyns3__bvec__tp_init(Pyns3__bvec *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new ns3::bvec;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__ns3__bvec(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pyns3__bvec_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Ns3__bvec",            /* tp_name */
    sizeof(Pyns3__bvec),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__bvec__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__bvec__tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pyns3__bvec__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pyns3__bvecIter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Ns3__bvecIter",            /* tp_name */
    sizeof(Pyns3__bvecIter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__bvecIter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pyns3__bvecIter__tp_traverse,     /* tp_traverse */
    (inquiry)Pyns3__bvecIter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__bvecIter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pyns3__bvecIter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter__tp_clear(Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter__tp_traverse(Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__DlFramePrefixIe___gt____tp_dealloc(Pystd__vector__lt___ns3__DlFramePrefixIe___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__DlFramePrefixIe___gt____tp_iter(Pystd__vector__lt___ns3__DlFramePrefixIe___gt__ *self)
{
    Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter, &Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::DlFramePrefixIe >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter__tp_iter(Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter__tp_iternext(Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::DlFramePrefixIe >::iterator iter;
    PyNs3DlFramePrefixIe *py_DlFramePrefixIe;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_DlFramePrefixIe = PyObject_New(PyNs3DlFramePrefixIe, &PyNs3DlFramePrefixIe_Type);
    py_DlFramePrefixIe->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_DlFramePrefixIe->obj = new ns3::DlFramePrefixIe((*iter));
    PyNs3DlFramePrefixIe_wrapper_registry[(void *) py_DlFramePrefixIe->obj] = (PyObject *) py_DlFramePrefixIe;
    py_retval = Py_BuildValue((char *) "N", py_DlFramePrefixIe);
    return py_retval;
}

int _wrap_convert_py2c__ns3__DlFramePrefixIe(PyObject *value, ns3::DlFramePrefixIe *address)
{
    PyObject *py_retval;
    PyNs3DlFramePrefixIe *tmp_DlFramePrefixIe;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3DlFramePrefixIe_Type, &tmp_DlFramePrefixIe)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_DlFramePrefixIe->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__DlFramePrefixIe___gt__(PyObject *arg, std::vector< ns3::DlFramePrefixIe > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__DlFramePrefixIe___gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__DlFramePrefixIe___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::DlFramePrefixIe item;
            if (!_wrap_convert_py2c__ns3__DlFramePrefixIe(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__DlFramePrefixIe___gt__ instance, or a list of ns3::DlFramePrefixIe");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__DlFramePrefixIe___gt____tp_init(Pystd__vector__lt___ns3__DlFramePrefixIe___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::DlFramePrefixIe >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__DlFramePrefixIe___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__DlFramePrefixIe___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__vector__lt___ns3__DlFramePrefixIe___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__DlFramePrefixIe___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__DlFramePrefixIe___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__DlFramePrefixIe___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__DlFramePrefixIe___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__vector__lt___ns3__DlFramePrefixIe___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter__tp_clear(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter__tp_traverse(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt____tp_dealloc(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter__tp_dealloc(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt____tp_iter(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__ *self)
{
    Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter *iter = PyObject_GC_New(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter, &Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::list< ns3::Ptr< ns3::Packet > >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter__tp_iter(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter__tp_iternext(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter *self)
{
    PyObject *py_retval;
    std::list< ns3::Ptr< ns3::Packet > >::iterator iter;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer ((*iter))))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer ((*iter))));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer ((*iter))))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer ((*iter)))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer ((*iter)));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}

int _wrap_convert_py2c__ns3__Ptr__lt___ns3__Packet___gt__(PyObject *value, ns3::Ptr< ns3::Packet > *address)
{
    PyObject *py_retval;
    PyNs3Packet *tmp_Packet;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Packet_Type, &tmp_Packet)) {
        Py_DECREF(py_retval);
        return 0;
    }
    // dangerous!
    *address = ns3::Ptr< ns3::Packet  > (tmp_Packet->obj);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__(PyObject *arg, std::list< ns3::Ptr< ns3::Packet > > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt___Type)) {
        *container = *((Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::Ptr< ns3::Packet > item;
            if (!_wrap_convert_py2c__ns3__Ptr__lt___ns3__Packet___gt__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__ instance, or a list of ns3::Ptr< ns3::Packet >");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt____tp_init(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::list< ns3::Ptr< ns3::Packet > >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__",            /* tp_name */
    sizeof(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter",            /* tp_name */
    sizeof(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter__tp_clear(Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter__tp_traverse(Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt____tp_dealloc(Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt____tp_iter(Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__ *self)
{
    Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter, &Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::OfdmUlBurstProfile >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter__tp_iter(Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter__tp_iternext(Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::OfdmUlBurstProfile >::iterator iter;
    PyNs3OfdmUlBurstProfile *py_OfdmUlBurstProfile;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_OfdmUlBurstProfile = PyObject_New(PyNs3OfdmUlBurstProfile, &PyNs3OfdmUlBurstProfile_Type);
    py_OfdmUlBurstProfile->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_OfdmUlBurstProfile->obj = new ns3::OfdmUlBurstProfile((*iter));
    PyNs3OfdmUlBurstProfile_wrapper_registry[(void *) py_OfdmUlBurstProfile->obj] = (PyObject *) py_OfdmUlBurstProfile;
    py_retval = Py_BuildValue((char *) "N", py_OfdmUlBurstProfile);
    return py_retval;
}

int _wrap_convert_py2c__ns3__OfdmUlBurstProfile(PyObject *value, ns3::OfdmUlBurstProfile *address)
{
    PyObject *py_retval;
    PyNs3OfdmUlBurstProfile *tmp_OfdmUlBurstProfile;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3OfdmUlBurstProfile_Type, &tmp_OfdmUlBurstProfile)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_OfdmUlBurstProfile->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__OfdmUlBurstProfile___gt__(PyObject *arg, std::vector< ns3::OfdmUlBurstProfile > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::OfdmUlBurstProfile item;
            if (!_wrap_convert_py2c__ns3__OfdmUlBurstProfile(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__OfdmUlBurstProfile___gt__ instance, or a list of ns3::OfdmUlBurstProfile");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt____tp_init(Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::OfdmUlBurstProfile >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__OfdmUlBurstProfile___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__vector__lt___ns3__OfdmUlBurstProfile___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter__tp_clear(Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter__tp_traverse(Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__list__lt___ns3__OfdmUlMapIe___gt____tp_dealloc(Pystd__list__lt___ns3__OfdmUlMapIe___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter__tp_dealloc(Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__list__lt___ns3__OfdmUlMapIe___gt____tp_iter(Pystd__list__lt___ns3__OfdmUlMapIe___gt__ *self)
{
    Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter *iter = PyObject_GC_New(Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter, &Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::list< ns3::OfdmUlMapIe >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter__tp_iter(Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter__tp_iternext(Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter *self)
{
    PyObject *py_retval;
    std::list< ns3::OfdmUlMapIe >::iterator iter;
    PyNs3OfdmUlMapIe *py_OfdmUlMapIe;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_OfdmUlMapIe = PyObject_New(PyNs3OfdmUlMapIe, &PyNs3OfdmUlMapIe_Type);
    py_OfdmUlMapIe->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_OfdmUlMapIe->obj = new ns3::OfdmUlMapIe((*iter));
    PyNs3OfdmUlMapIe_wrapper_registry[(void *) py_OfdmUlMapIe->obj] = (PyObject *) py_OfdmUlMapIe;
    py_retval = Py_BuildValue((char *) "N", py_OfdmUlMapIe);
    return py_retval;
}

int _wrap_convert_py2c__ns3__OfdmUlMapIe(PyObject *value, ns3::OfdmUlMapIe *address)
{
    PyObject *py_retval;
    PyNs3OfdmUlMapIe *tmp_OfdmUlMapIe;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3OfdmUlMapIe_Type, &tmp_OfdmUlMapIe)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_OfdmUlMapIe->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__list__lt___ns3__OfdmUlMapIe___gt__(PyObject *arg, std::list< ns3::OfdmUlMapIe > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__list__lt___ns3__OfdmUlMapIe___gt___Type)) {
        *container = *((Pystd__list__lt___ns3__OfdmUlMapIe___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::OfdmUlMapIe item;
            if (!_wrap_convert_py2c__ns3__OfdmUlMapIe(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__list__lt___ns3__OfdmUlMapIe___gt__ instance, or a list of ns3::OfdmUlMapIe");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__list__lt___ns3__OfdmUlMapIe___gt____tp_init(Pystd__list__lt___ns3__OfdmUlMapIe___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::list< ns3::OfdmUlMapIe >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__list__lt___ns3__OfdmUlMapIe___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__list__lt___ns3__OfdmUlMapIe___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__list__lt___ns3__OfdmUlMapIe___gt__",            /* tp_name */
    sizeof(Pystd__list__lt___ns3__OfdmUlMapIe___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___ns3__OfdmUlMapIe___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___ns3__OfdmUlMapIe___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__list__lt___ns3__OfdmUlMapIe___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__list__lt___ns3__OfdmUlMapIe___gt__Iter",            /* tp_name */
    sizeof(Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter__tp_clear(Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter__tp_traverse(Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt____tp_dealloc(Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter__tp_dealloc(Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt____tp_iter(Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__ *self)
{
    Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter *iter = PyObject_GC_New(Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter, &Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::list< ns3::Ptr< ns3::UlJob > >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter__tp_iter(Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter__tp_iternext(Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter *self)
{
    PyObject *py_retval;
    std::list< ns3::Ptr< ns3::UlJob > >::iterator iter;
    PyNs3UlJob *py_UlJob;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    if (!(const_cast<ns3::UlJob *> (ns3::PeekPointer ((*iter))))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UlJob *> (ns3::PeekPointer ((*iter))));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_UlJob = NULL;
    } else {
        py_UlJob = (PyNs3UlJob *) wrapper_lookup_iter->second;
        Py_INCREF(py_UlJob);
    }
    
    if (py_UlJob == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UlJob *> (ns3::PeekPointer ((*iter))))), &PyNs3UlJob_Type);
        py_UlJob = PyObject_GC_New(PyNs3UlJob, wrapper_type);
        py_UlJob->inst_dict = NULL;
    
        py_UlJob->inst_dict = NULL;
        py_UlJob->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::UlJob *> (ns3::PeekPointer ((*iter)))->Ref();
        py_UlJob->obj = const_cast<ns3::UlJob *> (ns3::PeekPointer ((*iter)));
        PyNs3ObjectBase_wrapper_registry[(void *) py_UlJob->obj] = (PyObject *) py_UlJob;
    }
    py_retval = Py_BuildValue((char *) "N", py_UlJob);
    return py_retval;
}

int _wrap_convert_py2c__ns3__Ptr__lt___ns3__UlJob___gt__(PyObject *value, ns3::Ptr< ns3::UlJob > *address)
{
    PyObject *py_retval;
    PyNs3UlJob *tmp_UlJob;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3UlJob_Type, &tmp_UlJob)) {
        Py_DECREF(py_retval);
        return 0;
    }
    // dangerous!
    *address = ns3::Ptr< ns3::UlJob  > (tmp_UlJob->obj);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__(PyObject *arg, std::list< ns3::Ptr< ns3::UlJob > > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt___Type)) {
        *container = *((Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::Ptr< ns3::UlJob > item;
            if (!_wrap_convert_py2c__ns3__Ptr__lt___ns3__UlJob___gt__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__ instance, or a list of ns3::Ptr< ns3::UlJob >");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt____tp_init(Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::list< ns3::Ptr< ns3::UlJob > >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__",            /* tp_name */
    sizeof(Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter",            /* tp_name */
    sizeof(Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter__tp_clear(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter__tp_traverse(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt____tp_dealloc(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter__tp_dealloc(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt____tp_iter(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__ *self)
{
    Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter *iter = PyObject_GC_New(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter, &Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::list< ns3::Ptr< ns3::Packet const > >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter__tp_iter(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter__tp_iternext(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter *self)
{
    PyObject *py_retval;
    std::list< ns3::Ptr< ns3::Packet const > >::iterator iter;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer ((*iter))))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer ((*iter))));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer ((*iter))))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer ((*iter)))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer ((*iter)));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}

int _wrap_convert_py2c__ns3__Ptr__lt___ns3__Packet_const___gt__(PyObject *value, ns3::Ptr< ns3::Packet const > *address)
{
    PyObject *py_retval;
    PyNs3Packet *tmp_Packet;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Packet_Type, &tmp_Packet)) {
        Py_DECREF(py_retval);
        return 0;
    }
    // dangerous!
    *address = ns3::Ptr< ns3::Packet  > (tmp_Packet->obj);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__(PyObject *arg, std::list< ns3::Ptr< ns3::Packet const > > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt___Type)) {
        *container = *((Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::Ptr< ns3::Packet const > item;
            if (!_wrap_convert_py2c__ns3__Ptr__lt___ns3__Packet_const___gt__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__ instance, or a list of ns3::Ptr< ns3::Packet const >");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt____tp_init(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::list< ns3::Ptr< ns3::Packet const > >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__",            /* tp_name */
    sizeof(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter",            /* tp_name */
    sizeof(Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter__tp_clear(Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter__tp_traverse(Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt____tp_dealloc(Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter__tp_dealloc(Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt____tp_iter(Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__ *self)
{
    Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter *iter = PyObject_GC_New(Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter, &Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::deque< ns3::WimaxMacQueue::QueueElement >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter__tp_iter(Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter__tp_iternext(Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter *self)
{
    PyObject *py_retval;
    std::deque< ns3::WimaxMacQueue::QueueElement >::iterator iter;
    PyNs3WimaxMacQueueQueueElement *py_QueueElement;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_QueueElement = PyObject_New(PyNs3WimaxMacQueueQueueElement, &PyNs3WimaxMacQueueQueueElement_Type);
    py_QueueElement->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_QueueElement->obj = new ns3::WimaxMacQueue::QueueElement((*iter));
    PyNs3WimaxMacQueueQueueElement_wrapper_registry[(void *) py_QueueElement->obj] = (PyObject *) py_QueueElement;
    py_retval = Py_BuildValue((char *) "N", py_QueueElement);
    return py_retval;
}

int _wrap_convert_py2c__ns3__WimaxMacQueue__QueueElement(PyObject *value, ns3::WimaxMacQueue::QueueElement *address)
{
    PyObject *py_retval;
    PyNs3WimaxMacQueueQueueElement *tmp_QueueElement;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WimaxMacQueueQueueElement_Type, &tmp_QueueElement)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_QueueElement->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__(PyObject *arg, std::deque< ns3::WimaxMacQueue::QueueElement > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt___Type)) {
        *container = *((Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::WimaxMacQueue::QueueElement item;
            if (!_wrap_convert_py2c__ns3__WimaxMacQueue__QueueElement(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__ instance, or a list of ns3::WimaxMacQueue::QueueElement");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt____tp_init(Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::deque< ns3::WimaxMacQueue::QueueElement >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__",            /* tp_name */
    sizeof(Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter",            /* tp_name */
    sizeof(Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter__tp_clear(Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter__tp_traverse(Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt____tp_dealloc(Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt____tp_iter(Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__ *self)
{
    Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter, &Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::Ptr< ns3::WimaxConnection > >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter__tp_iter(Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter__tp_iternext(Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ptr< ns3::WimaxConnection > >::iterator iter;
    PyNs3WimaxConnection *py_WimaxConnection;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    if (!(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer ((*iter))))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer ((*iter))))).name() == typeid(PyNs3WimaxConnection__PythonHelper).name())
    {
        py_WimaxConnection = reinterpret_cast< PyNs3WimaxConnection* >(reinterpret_cast< PyNs3WimaxConnection__PythonHelper* >(const_cast<ns3::WimaxConnection *> (ns3::PeekPointer ((*iter))))->m_pyself);
        py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer ((*iter)));
        Py_INCREF(py_WimaxConnection);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WimaxConnection *> (ns3::PeekPointer ((*iter))));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WimaxConnection = NULL;
        } else {
            py_WimaxConnection = (PyNs3WimaxConnection *) wrapper_lookup_iter->second;
            Py_INCREF(py_WimaxConnection);
        }
    
        if (py_WimaxConnection == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WimaxConnection *> (ns3::PeekPointer ((*iter))))), &PyNs3WimaxConnection_Type);
            py_WimaxConnection = PyObject_GC_New(PyNs3WimaxConnection, wrapper_type);
            py_WimaxConnection->inst_dict = NULL;
    
            py_WimaxConnection->inst_dict = NULL;
            py_WimaxConnection->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::WimaxConnection *> (ns3::PeekPointer ((*iter)))->Ref();
            py_WimaxConnection->obj = const_cast<ns3::WimaxConnection *> (ns3::PeekPointer ((*iter)));
            PyNs3ObjectBase_wrapper_registry[(void *) py_WimaxConnection->obj] = (PyObject *) py_WimaxConnection;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_WimaxConnection);
    return py_retval;
}

int _wrap_convert_py2c__ns3__Ptr__lt___ns3__WimaxConnection___gt__(PyObject *value, ns3::Ptr< ns3::WimaxConnection > *address)
{
    PyObject *py_retval;
    PyNs3WimaxConnection *tmp_WimaxConnection;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WimaxConnection_Type, &tmp_WimaxConnection)) {
        Py_DECREF(py_retval);
        return 0;
    }
    // dangerous!
    *address = ns3::Ptr< ns3::WimaxConnection  > (tmp_WimaxConnection->obj);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::WimaxConnection > > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::Ptr< ns3::WimaxConnection > item;
            if (!_wrap_convert_py2c__ns3__Ptr__lt___ns3__WimaxConnection___gt__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__ instance, or a list of ns3::Ptr< ns3::WimaxConnection >");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt____tp_init(Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::Ptr< ns3::WimaxConnection > >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter__tp_clear(Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter__tp_traverse(Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt____tp_dealloc(Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt____tp_iter(Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__ *self)
{
    Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter, &Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::OfdmDlBurstProfile >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter__tp_iter(Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter__tp_iternext(Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::OfdmDlBurstProfile >::iterator iter;
    PyNs3OfdmDlBurstProfile *py_OfdmDlBurstProfile;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_OfdmDlBurstProfile = PyObject_New(PyNs3OfdmDlBurstProfile, &PyNs3OfdmDlBurstProfile_Type);
    py_OfdmDlBurstProfile->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_OfdmDlBurstProfile->obj = new ns3::OfdmDlBurstProfile((*iter));
    PyNs3OfdmDlBurstProfile_wrapper_registry[(void *) py_OfdmDlBurstProfile->obj] = (PyObject *) py_OfdmDlBurstProfile;
    py_retval = Py_BuildValue((char *) "N", py_OfdmDlBurstProfile);
    return py_retval;
}

int _wrap_convert_py2c__ns3__OfdmDlBurstProfile(PyObject *value, ns3::OfdmDlBurstProfile *address)
{
    PyObject *py_retval;
    PyNs3OfdmDlBurstProfile *tmp_OfdmDlBurstProfile;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3OfdmDlBurstProfile_Type, &tmp_OfdmDlBurstProfile)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_OfdmDlBurstProfile->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__OfdmDlBurstProfile___gt__(PyObject *arg, std::vector< ns3::OfdmDlBurstProfile > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::OfdmDlBurstProfile item;
            if (!_wrap_convert_py2c__ns3__OfdmDlBurstProfile(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__OfdmDlBurstProfile___gt__ instance, or a list of ns3::OfdmDlBurstProfile");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt____tp_init(Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::OfdmDlBurstProfile >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__OfdmDlBurstProfile___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__vector__lt___ns3__OfdmDlBurstProfile___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter__tp_clear(Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter__tp_traverse(Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__list__lt___ns3__OfdmDlMapIe___gt____tp_dealloc(Pystd__list__lt___ns3__OfdmDlMapIe___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter__tp_dealloc(Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__list__lt___ns3__OfdmDlMapIe___gt____tp_iter(Pystd__list__lt___ns3__OfdmDlMapIe___gt__ *self)
{
    Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter *iter = PyObject_GC_New(Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter, &Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::list< ns3::OfdmDlMapIe >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter__tp_iter(Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter__tp_iternext(Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter *self)
{
    PyObject *py_retval;
    std::list< ns3::OfdmDlMapIe >::iterator iter;
    PyNs3OfdmDlMapIe *py_OfdmDlMapIe;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_OfdmDlMapIe = PyObject_New(PyNs3OfdmDlMapIe, &PyNs3OfdmDlMapIe_Type);
    py_OfdmDlMapIe->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_OfdmDlMapIe->obj = new ns3::OfdmDlMapIe((*iter));
    PyNs3OfdmDlMapIe_wrapper_registry[(void *) py_OfdmDlMapIe->obj] = (PyObject *) py_OfdmDlMapIe;
    py_retval = Py_BuildValue((char *) "N", py_OfdmDlMapIe);
    return py_retval;
}

int _wrap_convert_py2c__ns3__OfdmDlMapIe(PyObject *value, ns3::OfdmDlMapIe *address)
{
    PyObject *py_retval;
    PyNs3OfdmDlMapIe *tmp_OfdmDlMapIe;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3OfdmDlMapIe_Type, &tmp_OfdmDlMapIe)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_OfdmDlMapIe->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__list__lt___ns3__OfdmDlMapIe___gt__(PyObject *arg, std::list< ns3::OfdmDlMapIe > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__list__lt___ns3__OfdmDlMapIe___gt___Type)) {
        *container = *((Pystd__list__lt___ns3__OfdmDlMapIe___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::OfdmDlMapIe item;
            if (!_wrap_convert_py2c__ns3__OfdmDlMapIe(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__list__lt___ns3__OfdmDlMapIe___gt__ instance, or a list of ns3::OfdmDlMapIe");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__list__lt___ns3__OfdmDlMapIe___gt____tp_init(Pystd__list__lt___ns3__OfdmDlMapIe___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::list< ns3::OfdmDlMapIe >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__list__lt___ns3__OfdmDlMapIe___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__list__lt___ns3__OfdmDlMapIe___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__list__lt___ns3__OfdmDlMapIe___gt__",            /* tp_name */
    sizeof(Pystd__list__lt___ns3__OfdmDlMapIe___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___ns3__OfdmDlMapIe___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___ns3__OfdmDlMapIe___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__list__lt___ns3__OfdmDlMapIe___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "wimax.Std__list__lt___ns3__OfdmDlMapIe___gt__Iter",            /* tp_name */
    sizeof(Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- enumerations --- */































































































#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef wimax_moduledef = {
    PyModuleDef_HEAD_INIT,
    "wimax",
    NULL,
    -1,
    wimax_functions,
};
#endif


#if PY_VERSION_HEX >= 0x03000000
    #define MOD_ERROR NULL
    #define MOD_INIT(name) PyObject* PyInit_##name(void)
    #define MOD_RETURN(val) val
#else
    #define MOD_ERROR
    #define MOD_INIT(name) void init##name(void)
    #define MOD_RETURN(val)
#endif
#if defined(__cplusplus)
extern "C"
#endif
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif


MOD_INIT(wimax)
{
    PyObject *m;
    PyObject *submodule;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&wimax_moduledef);
    #else
    m = Py_InitModule3((char *) "wimax", wimax_functions, NULL);
    #endif
    if (m == NULL) {
        return MOD_ERROR;
    }
    PyModule_AddIntConstant(m, (char *) "STD_IOS_IN", std::ios::in);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_OUT", std::ios::out);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_ATE", std::ios::ate);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_APP", std::ios::app);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_TRUNC", std::ios::trunc);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_BINARY", std::ios::binary);
    /* Import the 'ns3::Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AsciiTraceHelper' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AsciiTraceHelper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AsciiTraceHelper");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3AsciiTraceHelper_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3AsciiTraceHelper_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3AsciiTraceHelper_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AsciiTraceHelperForDevice' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AsciiTraceHelperForDevice_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AsciiTraceHelperForDevice");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3AsciiTraceHelperForDevice_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3AsciiTraceHelperForDevice_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3AsciiTraceHelperForDevice_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AttributeConstructionList' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeConstructionList_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeConstructionList");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3AttributeConstructionList_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3AttributeConstructionList_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3AttributeConstructionList_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AttributeConstructionList::Item' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeConstructionListItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3AttributeConstructionListItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3AttributeConstructionListItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3AttributeConstructionListItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Buffer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Buffer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Buffer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Buffer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Buffer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Buffer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Buffer::Iterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BufferIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Iterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3BufferIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3BufferIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3BufferIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagIterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ByteTagIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagIterator::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagIteratorItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagIteratorItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagIteratorItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagIteratorItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagList' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagList_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ByteTagList");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagList_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagList_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagList_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagList::Iterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagListIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Iterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagListIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagListIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagListIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagList::Iterator::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagListIteratorItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagListIteratorItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagListIteratorItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagListIteratorItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::CallbackBase' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3CallbackBase_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3CallbackBase_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3CallbackBase_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::EventId' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EventId_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EventId");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3EventId_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3EventId_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3EventId_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Hasher' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Hasher_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Hasher");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Hasher_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Hasher_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Hasher_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv4Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv4Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv4Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv4Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv4Mask' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4Mask_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4Mask");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv4Mask_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv4Mask_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv4Mask_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv6Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv6Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv6Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv6Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv6Prefix' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6Prefix_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6Prefix");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv6Prefix_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv6Prefix_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv6Prefix_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::LogComponent' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3LogComponent_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "LogComponent");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3LogComponent_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3LogComponent_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3LogComponent_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Mac48Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Mac48Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Mac48Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Mac48Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Mac48Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Mac48Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::NetDeviceContainer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NetDeviceContainer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NetDeviceContainer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3NetDeviceContainer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3NetDeviceContainer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3NetDeviceContainer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::NodeContainer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NodeContainer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NodeContainer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3NodeContainer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3NodeContainer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3NodeContainer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ObjectBase' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectBase_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectBase_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectBase_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ObjectDeleter' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectDeleter_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectDeleter");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectDeleter_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectDeleter_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectDeleter_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ObjectFactory' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectFactory_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectFactory");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectFactory_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectFactory_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectFactory_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketMetadata' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketMetadata_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketMetadata");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketMetadata_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketMetadata_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketMetadata_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketMetadata::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketMetadataItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketMetadataItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketMetadataItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketMetadataItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketMetadata::ItemIterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketMetadataItemIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ItemIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketMetadataItemIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketMetadataItemIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketMetadataItemIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagIterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketTagIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagIterator::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagIteratorItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagIteratorItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagIteratorItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagIteratorItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagList' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagList_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketTagList");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagList_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagList_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagList_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagList::TagData' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagListTagData_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TagData");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagListTagData_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagListTagData_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagListTagData_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ParameterLogger' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ParameterLogger_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ParameterLogger");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ParameterLogger_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ParameterLogger_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ParameterLogger_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PcapFile' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PcapFile_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PcapFile");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PcapFile_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PcapFile_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PcapFile_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PcapHelper' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PcapHelper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PcapHelper");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PcapHelper_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PcapHelper_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PcapHelper_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PcapHelperForDevice' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PcapHelperForDevice_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PcapHelperForDevice");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PcapHelperForDevice_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PcapHelperForDevice_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PcapHelperForDevice_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Simulator' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Simulator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Simulator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Simulator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Simulator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Simulator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Tag' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Tag_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Tag");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TagBuffer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TagBuffer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TagBuffer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TagBuffer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TagBuffer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TagBuffer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TimeWithUnit' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TimeWithUnit_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TimeWithUnit");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TimeWithUnit_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TimeWithUnit_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TimeWithUnit_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TypeId' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeId_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TypeId");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TypeId_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TypeId_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TypeId_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TypeId::AttributeInformation' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdAttributeInformation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeInformation");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TypeIdAttributeInformation_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TypeIdAttributeInformation_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TypeIdAttributeInformation_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TypeId::TraceSourceInformation' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdTraceSourceInformation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TraceSourceInformation");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TypeIdTraceSourceInformation_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TypeIdTraceSourceInformation_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TypeIdTraceSourceInformation_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::empty' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Empty_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Empty_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Empty_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::int64x64_t' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Int64x64_t_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "int64x64_t");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Int64x64_t_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Int64x64_t_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Int64x64_t_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Chunk' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Chunk_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Chunk");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Header' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Header_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Header");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Object' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Object_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Object");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Object::AggregateIterator' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectAggregateIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AggregateIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectAggregateIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectAggregateIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectAggregateIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketBurst' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketBurst_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketBurst");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::PcapFileWrapper' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PcapFileWrapper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PcapFileWrapper");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::PropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::RandomPropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3RandomPropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "RandomPropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::RandomVariableStream' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3RandomVariableStream_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "RandomVariableStream");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::RangePropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3RangePropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "RangePropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SequentialRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SequentialRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SequentialRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ThreeLogDistancePropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ThreeLogDistancePropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ThreeLogDistancePropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Time' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Time_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Time");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Time_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Time_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Time_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TraceSourceAccessor' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TraceSourceAccessor_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TraceSourceAccessor");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Trailer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Trailer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Trailer");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TriangularRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TriangularRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TriangularRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TwoRayGroundPropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TwoRayGroundPropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TwoRayGroundPropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::UniformRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3UniformRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "UniformRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WeibullRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WeibullRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WeibullRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ZetaRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ZetaRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ZetaRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ZipfRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ZipfRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ZipfRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AttributeAccessor' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeAccessor_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeAccessor");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AttributeChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AttributeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImplBase' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImplBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImplBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Channel' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Channel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Channel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ConstantRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ConstantRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ConstantRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::DeterministicRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DeterministicRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DeterministicRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmpiricalRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmpiricalRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmpiricalRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmptyAttributeAccessor' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmptyAttributeAccessor_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmptyAttributeAccessor");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmptyAttributeChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmptyAttributeChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmptyAttributeChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmptyAttributeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmptyAttributeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmptyAttributeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ErlangRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ErlangRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ErlangRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EventImpl' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EventImpl_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EventImpl");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ExponentialRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ExponentialRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ExponentialRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::FixedRssLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3FixedRssLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "FixedRssLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::FriisPropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3FriisPropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "FriisPropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::GammaRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3GammaRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "GammaRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4MaskChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4MaskChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4MaskChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4MaskValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4MaskValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4MaskValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6PrefixChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6PrefixChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6PrefixChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6PrefixValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6PrefixValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6PrefixValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::LogDistancePropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3LogDistancePropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "LogDistancePropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::LogNormalRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3LogNormalRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "LogNormalRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Mac48AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Mac48AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Mac48AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Mac48AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Mac48AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Mac48AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::MatrixPropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3MatrixPropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MatrixPropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NakagamiPropagationLossModel' class from module 'ns.propagation' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.propagation");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NakagamiPropagationLossModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NakagamiPropagationLossModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NetDevice' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NetDevice_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NetDevice");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NetDeviceQueue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NetDeviceQueue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NetDeviceQueue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NetDeviceQueueInterface' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NetDeviceQueueInterface_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NetDeviceQueueInterface");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NixVector' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NixVector_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NixVector");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Node' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Node_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Node");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NormalRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NormalRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NormalRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ObjectFactoryChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectFactoryChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectFactoryChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ObjectFactoryValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectFactoryValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectFactoryValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::OutputStreamWrapper' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3OutputStreamWrapper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "OutputStreamWrapper");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Packet' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Packet_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Packet");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ParetoRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ParetoRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ParetoRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::QueueItem' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3QueueItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "QueueItem");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TimeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TimeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TimeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TypeIdChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TypeIdChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TypeIdValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TypeIdValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::UintegerValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3UintegerValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "UintegerValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    PyModule_AddObject(m, (char *) "_PyNs3Cid_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3Cid_wrapper_registry, NULL));
    /* Register the 'ns3::Cid' class */
    if (PyType_Ready(&PyNs3Cid_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Cid", (PyObject *) &PyNs3Cid_Type);
    PyModule_AddObject(m, (char *) "_PyNs3CidFactory_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3CidFactory_wrapper_registry, NULL));
    /* Register the 'ns3::CidFactory' class */
    if (PyType_Ready(&PyNs3CidFactory_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "CidFactory", (PyObject *) &PyNs3CidFactory_Type);
    PyModule_AddObject(m, (char *) "_PyNs3CsParameters_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3CsParameters_wrapper_registry, NULL));
    /* Register the 'ns3::CsParameters' class */
    if (PyType_Ready(&PyNs3CsParameters_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "CsParameters", (PyObject *) &PyNs3CsParameters_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DcdChannelEncodings_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DcdChannelEncodings_wrapper_registry, NULL));
    /* Register the 'ns3::DcdChannelEncodings' class */
    if (PyType_Ready(&PyNs3DcdChannelEncodings_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DcdChannelEncodings", (PyObject *) &PyNs3DcdChannelEncodings_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DlFramePrefixIe_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DlFramePrefixIe_wrapper_registry, NULL));
    /* Register the 'ns3::DlFramePrefixIe' class */
    if (PyType_Ready(&PyNs3DlFramePrefixIe_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DlFramePrefixIe", (PyObject *) &PyNs3DlFramePrefixIe_Type);
    PyModule_AddObject(m, (char *) "_PyNs3IpcsClassifierRecord_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3IpcsClassifierRecord_wrapper_registry, NULL));
    /* Register the 'ns3::IpcsClassifierRecord' class */
    if (PyType_Ready(&PyNs3IpcsClassifierRecord_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "IpcsClassifierRecord", (PyObject *) &PyNs3IpcsClassifierRecord_Type);
    /* Register the 'ns3::OfdmDcdChannelEncodings' class */
    PyNs3OfdmDcdChannelEncodings_Type.tp_base = &PyNs3DcdChannelEncodings_Type;
    if (PyType_Ready(&PyNs3OfdmDcdChannelEncodings_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "OfdmDcdChannelEncodings", (PyObject *) &PyNs3OfdmDcdChannelEncodings_Type);
    PyModule_AddObject(m, (char *) "_PyNs3OfdmDlBurstProfile_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3OfdmDlBurstProfile_wrapper_registry, NULL));
    /* Register the 'ns3::OfdmDlBurstProfile' class */
    if (PyType_Ready(&PyNs3OfdmDlBurstProfile_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "OfdmDlBurstProfile", (PyObject *) &PyNs3OfdmDlBurstProfile_Type);
    PyModule_AddObject(m, (char *) "_PyNs3OfdmDlMapIe_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3OfdmDlMapIe_wrapper_registry, NULL));
    /* Register the 'ns3::OfdmDlMapIe' class */
    if (PyType_Ready(&PyNs3OfdmDlMapIe_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "OfdmDlMapIe", (PyObject *) &PyNs3OfdmDlMapIe_Type);
    PyModule_AddObject(m, (char *) "_PyNs3OfdmUlBurstProfile_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3OfdmUlBurstProfile_wrapper_registry, NULL));
    /* Register the 'ns3::OfdmUlBurstProfile' class */
    if (PyType_Ready(&PyNs3OfdmUlBurstProfile_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "OfdmUlBurstProfile", (PyObject *) &PyNs3OfdmUlBurstProfile_Type);
    PyModule_AddObject(m, (char *) "_PyNs3OfdmUlMapIe_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3OfdmUlMapIe_wrapper_registry, NULL));
    /* Register the 'ns3::OfdmUlMapIe' class */
    if (PyType_Ready(&PyNs3OfdmUlMapIe_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "OfdmUlMapIe", (PyObject *) &PyNs3OfdmUlMapIe_Type);
    PyModule_AddObject(m, (char *) "_PyNs3SNRToBlockErrorRateManager_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3SNRToBlockErrorRateManager_wrapper_registry, NULL));
    /* Register the 'ns3::SNRToBlockErrorRateManager' class */
    if (PyType_Ready(&PyNs3SNRToBlockErrorRateManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SNRToBlockErrorRateManager", (PyObject *) &PyNs3SNRToBlockErrorRateManager_Type);
    PyModule_AddObject(m, (char *) "_PyNs3SNRToBlockErrorRateRecord_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3SNRToBlockErrorRateRecord_wrapper_registry, NULL));
    /* Register the 'ns3::SNRToBlockErrorRateRecord' class */
    if (PyType_Ready(&PyNs3SNRToBlockErrorRateRecord_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SNRToBlockErrorRateRecord", (PyObject *) &PyNs3SNRToBlockErrorRateRecord_Type);
    PyModule_AddObject(m, (char *) "_PyNs3SSRecord_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3SSRecord_wrapper_registry, NULL));
    /* Register the 'ns3::SSRecord' class */
    if (PyType_Ready(&PyNs3SSRecord_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SSRecord", (PyObject *) &PyNs3SSRecord_Type);
    PyModule_AddObject(m, (char *) "_PyNs3SendParams_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3SendParams_wrapper_registry, NULL));
    /* Register the 'ns3::SendParams' class */
    if (PyType_Ready(&PyNs3SendParams_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SendParams", (PyObject *) &PyNs3SendParams_Type);
    PyModule_AddObject(m, (char *) "_PyNs3ServiceFlow_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3ServiceFlow_wrapper_registry, NULL));
    /* Register the 'ns3::ServiceFlow' class */
    if (PyType_Ready(&PyNs3ServiceFlow_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ServiceFlow", (PyObject *) &PyNs3ServiceFlow_Type);
    PyModule_AddObject(m, (char *) "_PyNs3ServiceFlowRecord_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3ServiceFlowRecord_wrapper_registry, NULL));
    /* Register the 'ns3::ServiceFlowRecord' class */
    if (PyType_Ready(&PyNs3ServiceFlowRecord_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ServiceFlowRecord", (PyObject *) &PyNs3ServiceFlowRecord_Type);
    PyModule_AddObject(m, (char *) "_PyNs3TlvValue_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3TlvValue_wrapper_registry, NULL));
    /* Register the 'ns3::TlvValue' class */
    if (PyType_Ready(&PyNs3TlvValue_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "TlvValue", (PyObject *) &PyNs3TlvValue_Type);
    /* Register the 'ns3::TosTlvValue' class */
    PyNs3TosTlvValue_Type.tp_base = &PyNs3TlvValue_Type;
    if (PyType_Ready(&PyNs3TosTlvValue_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "TosTlvValue", (PyObject *) &PyNs3TosTlvValue_Type);
    /* Register the 'ns3::U16TlvValue' class */
    PyNs3U16TlvValue_Type.tp_base = &PyNs3TlvValue_Type;
    if (PyType_Ready(&PyNs3U16TlvValue_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "U16TlvValue", (PyObject *) &PyNs3U16TlvValue_Type);
    /* Register the 'ns3::U32TlvValue' class */
    PyNs3U32TlvValue_Type.tp_base = &PyNs3TlvValue_Type;
    if (PyType_Ready(&PyNs3U32TlvValue_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "U32TlvValue", (PyObject *) &PyNs3U32TlvValue_Type);
    /* Register the 'ns3::U8TlvValue' class */
    PyNs3U8TlvValue_Type.tp_base = &PyNs3TlvValue_Type;
    if (PyType_Ready(&PyNs3U8TlvValue_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "U8TlvValue", (PyObject *) &PyNs3U8TlvValue_Type);
    PyModule_AddObject(m, (char *) "_PyNs3UcdChannelEncodings_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3UcdChannelEncodings_wrapper_registry, NULL));
    /* Register the 'ns3::UcdChannelEncodings' class */
    if (PyType_Ready(&PyNs3UcdChannelEncodings_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "UcdChannelEncodings", (PyObject *) &PyNs3UcdChannelEncodings_Type);
    /* Register the 'ns3::VectorTlvValue' class */
    PyNs3VectorTlvValue_Type.tp_base = &PyNs3TlvValue_Type;
    if (PyType_Ready(&PyNs3VectorTlvValue_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "VectorTlvValue", (PyObject *) &PyNs3VectorTlvValue_Type);
    /* Register the 'ns3::WimaxHelper' class */
    PyNs3WimaxHelper_Type.tp_base = &PyNs3PcapHelperForDevice_Type;
    PyNs3WimaxHelper_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyNs3PcapHelperForDevice_Type);
        PyTuple_SET_ITEM(PyNs3WimaxHelper_Type.tp_bases, 0, (PyObject *) &PyNs3PcapHelperForDevice_Type);
        Py_INCREF((PyObject *) &PyNs3AsciiTraceHelperForDevice_Type);
        PyTuple_SET_ITEM(PyNs3WimaxHelper_Type.tp_bases, 1, (PyObject *) &PyNs3AsciiTraceHelperForDevice_Type);
    if (PyType_Ready(&PyNs3WimaxHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WimaxHelper", (PyObject *) &PyNs3WimaxHelper_Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleOfdmSendParam_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3SimpleOfdmSendParam_wrapper_registry, NULL));
    /* Register the 'ns3::simpleOfdmSendParam' class */
    if (PyType_Ready(&PyNs3SimpleOfdmSendParam_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "simpleOfdmSendParam", (PyObject *) &PyNs3SimpleOfdmSendParam_Type);
    /* Register the 'ns3::ClassificationRuleVectorTlvValue' class */
    PyNs3ClassificationRuleVectorTlvValue_Type.tp_base = &PyNs3VectorTlvValue_Type;
    if (PyType_Ready(&PyNs3ClassificationRuleVectorTlvValue_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ClassificationRuleVectorTlvValue", (PyObject *) &PyNs3ClassificationRuleVectorTlvValue_Type);
    /* Register the 'ns3::CsParamVectorTlvValue' class */
    PyNs3CsParamVectorTlvValue_Type.tp_base = &PyNs3VectorTlvValue_Type;
    if (PyType_Ready(&PyNs3CsParamVectorTlvValue_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "CsParamVectorTlvValue", (PyObject *) &PyNs3CsParamVectorTlvValue_Type);
    /* Register the 'ns3::Ipv4AddressTlvValue' class */
    PyNs3Ipv4AddressTlvValue_Type.tp_base = &PyNs3TlvValue_Type;
    if (PyType_Ready(&PyNs3Ipv4AddressTlvValue_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Ipv4AddressTlvValue", (PyObject *) &PyNs3Ipv4AddressTlvValue_Type);
    PyModule_AddObject(m, (char *) "_PyNs3Ipv4AddressTlvValueIpv4Addr_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3Ipv4AddressTlvValueIpv4Addr_wrapper_registry, NULL));
    /* Register the 'ns3::Ipv4AddressTlvValue::ipv4Addr' class */
    if (PyType_Ready(&PyNs3Ipv4AddressTlvValueIpv4Addr_Type)) {
        return MOD_ERROR;
    }
    PyDict_SetItemString((PyObject*) PyNs3Ipv4AddressTlvValue_Type.tp_dict, (char *) "ipv4Addr", (PyObject *) &PyNs3Ipv4AddressTlvValueIpv4Addr_Type);
    /* Register the 'ns3::MacHeaderType' class */
    PyNs3MacHeaderType_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MacHeaderType_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "MacHeaderType", (PyObject *) &PyNs3MacHeaderType_Type);
    /* Register the 'ns3::ManagementMessageType' class */
    PyNs3ManagementMessageType_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3ManagementMessageType_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ManagementMessageType", (PyObject *) &PyNs3ManagementMessageType_Type);
    /* Register the 'ns3::OfdmDownlinkFramePrefix' class */
    PyNs3OfdmDownlinkFramePrefix_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3OfdmDownlinkFramePrefix_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "OfdmDownlinkFramePrefix", (PyObject *) &PyNs3OfdmDownlinkFramePrefix_Type);
    /* Register the 'ns3::OfdmSendParams' class */
    PyNs3OfdmSendParams_Type.tp_base = &PyNs3SendParams_Type;
    if (PyType_Ready(&PyNs3OfdmSendParams_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "OfdmSendParams", (PyObject *) &PyNs3OfdmSendParams_Type);
    /* Register the 'ns3::OfdmUcdChannelEncodings' class */
    PyNs3OfdmUcdChannelEncodings_Type.tp_base = &PyNs3UcdChannelEncodings_Type;
    if (PyType_Ready(&PyNs3OfdmUcdChannelEncodings_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "OfdmUcdChannelEncodings", (PyObject *) &PyNs3OfdmUcdChannelEncodings_Type);
    /* Register the 'ns3::PortRangeTlvValue' class */
    PyNs3PortRangeTlvValue_Type.tp_base = &PyNs3TlvValue_Type;
    if (PyType_Ready(&PyNs3PortRangeTlvValue_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "PortRangeTlvValue", (PyObject *) &PyNs3PortRangeTlvValue_Type);
    PyModule_AddObject(m, (char *) "_PyNs3PortRangeTlvValuePortRange_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3PortRangeTlvValuePortRange_wrapper_registry, NULL));
    /* Register the 'ns3::PortRangeTlvValue::PortRange' class */
    if (PyType_Ready(&PyNs3PortRangeTlvValuePortRange_Type)) {
        return MOD_ERROR;
    }
    PyDict_SetItemString((PyObject*) PyNs3PortRangeTlvValue_Type.tp_dict, (char *) "PortRange", (PyObject *) &PyNs3PortRangeTlvValuePortRange_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::PriorityUlJob), &PyNs3PriorityUlJob_Type);
    /* Register the 'ns3::PriorityUlJob' class */
    PyNs3PriorityUlJob_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3PriorityUlJob_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "PriorityUlJob", (PyObject *) &PyNs3PriorityUlJob_Type);
    /* Register the 'ns3::ProtocolTlvValue' class */
    PyNs3ProtocolTlvValue_Type.tp_base = &PyNs3TlvValue_Type;
    if (PyType_Ready(&PyNs3ProtocolTlvValue_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ProtocolTlvValue", (PyObject *) &PyNs3ProtocolTlvValue_Type);
    /* Register the 'ns3::RngReq' class */
    PyNs3RngReq_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3RngReq_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "RngReq", (PyObject *) &PyNs3RngReq_Type);
    /* Register the 'ns3::RngRsp' class */
    PyNs3RngRsp_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3RngRsp_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "RngRsp", (PyObject *) &PyNs3RngRsp_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SSManager), &PyNs3SSManager_Type);
    /* Register the 'ns3::SSManager' class */
    PyNs3SSManager_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3SSManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SSManager", (PyObject *) &PyNs3SSManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ServiceFlowManager), &PyNs3ServiceFlowManager_Type);
    /* Register the 'ns3::ServiceFlowManager' class */
    PyNs3ServiceFlowManager_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3ServiceFlowManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ServiceFlowManager", (PyObject *) &PyNs3ServiceFlowManager_Type);
    /* Register the 'ns3::SfVectorTlvValue' class */
    PyNs3SfVectorTlvValue_Type.tp_base = &PyNs3VectorTlvValue_Type;
    if (PyType_Ready(&PyNs3SfVectorTlvValue_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SfVectorTlvValue", (PyObject *) &PyNs3SfVectorTlvValue_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SsServiceFlowManager), &PyNs3SsServiceFlowManager_Type);
    /* Register the 'ns3::SsServiceFlowManager' class */
    PyNs3SsServiceFlowManager_Type.tp_base = &PyNs3ServiceFlowManager_Type;
    if (PyType_Ready(&PyNs3SsServiceFlowManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SsServiceFlowManager", (PyObject *) &PyNs3SsServiceFlowManager_Type);
    /* Register the 'ns3::Tlv' class */
    PyNs3Tlv_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Tlv_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Tlv", (PyObject *) &PyNs3Tlv_Type);
    /* Register the 'ns3::Ucd' class */
    PyNs3Ucd_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Ucd_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Ucd", (PyObject *) &PyNs3Ucd_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UlJob), &PyNs3UlJob_Type);
    /* Register the 'ns3::UlJob' class */
    PyNs3UlJob_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3UlJob_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "UlJob", (PyObject *) &PyNs3UlJob_Type);
    /* Register the 'ns3::UlMap' class */
    PyNs3UlMap_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3UlMap_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "UlMap", (PyObject *) &PyNs3UlMap_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UplinkScheduler), &PyNs3UplinkScheduler_Type);
    /* Register the 'ns3::UplinkScheduler' class */
    PyNs3UplinkScheduler_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3UplinkScheduler_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "UplinkScheduler", (PyObject *) &PyNs3UplinkScheduler_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UplinkSchedulerMBQoS), &PyNs3UplinkSchedulerMBQoS_Type);
    /* Register the 'ns3::UplinkSchedulerMBQoS' class */
    PyNs3UplinkSchedulerMBQoS_Type.tp_base = &PyNs3UplinkScheduler_Type;
    if (PyType_Ready(&PyNs3UplinkSchedulerMBQoS_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "UplinkSchedulerMBQoS", (PyObject *) &PyNs3UplinkSchedulerMBQoS_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UplinkSchedulerRtps), &PyNs3UplinkSchedulerRtps_Type);
    /* Register the 'ns3::UplinkSchedulerRtps' class */
    PyNs3UplinkSchedulerRtps_Type.tp_base = &PyNs3UplinkScheduler_Type;
    if (PyType_Ready(&PyNs3UplinkSchedulerRtps_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "UplinkSchedulerRtps", (PyObject *) &PyNs3UplinkSchedulerRtps_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UplinkSchedulerSimple), &PyNs3UplinkSchedulerSimple_Type);
    /* Register the 'ns3::UplinkSchedulerSimple' class */
    PyNs3UplinkSchedulerSimple_Type.tp_base = &PyNs3UplinkScheduler_Type;
    if (PyType_Ready(&PyNs3UplinkSchedulerSimple_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "UplinkSchedulerSimple", (PyObject *) &PyNs3UplinkSchedulerSimple_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WimaxConnection), &PyNs3WimaxConnection_Type);
    /* Register the 'ns3::WimaxConnection' class */
    PyNs3WimaxConnection_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3WimaxConnection_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WimaxConnection", (PyObject *) &PyNs3WimaxConnection_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WimaxMacQueue), &PyNs3WimaxMacQueue_Type);
    /* Register the 'ns3::WimaxMacQueue' class */
    PyNs3WimaxMacQueue_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3WimaxMacQueue_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WimaxMacQueue", (PyObject *) &PyNs3WimaxMacQueue_Type);
    PyModule_AddObject(m, (char *) "_PyNs3WimaxMacQueueQueueElement_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3WimaxMacQueueQueueElement_wrapper_registry, NULL));
    /* Register the 'ns3::WimaxMacQueue::QueueElement' class */
    if (PyType_Ready(&PyNs3WimaxMacQueueQueueElement_Type)) {
        return MOD_ERROR;
    }
    PyDict_SetItemString((PyObject*) PyNs3WimaxMacQueue_Type.tp_dict, (char *) "QueueElement", (PyObject *) &PyNs3WimaxMacQueueQueueElement_Type);
    /* Register the 'ns3::WimaxMacToMacHeader' class */
    PyNs3WimaxMacToMacHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3WimaxMacToMacHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WimaxMacToMacHeader", (PyObject *) &PyNs3WimaxMacToMacHeader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WimaxPhy), &PyNs3WimaxPhy_Type);
    /* Register the 'ns3::WimaxPhy' class */
    PyNs3WimaxPhy_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3WimaxPhy_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WimaxPhy", (PyObject *) &PyNs3WimaxPhy_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::BSScheduler), &PyNs3BSScheduler_Type);
    /* Register the 'ns3::BSScheduler' class */
    PyNs3BSScheduler_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3BSScheduler_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "BSScheduler", (PyObject *) &PyNs3BSScheduler_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::BSSchedulerRtps), &PyNs3BSSchedulerRtps_Type);
    /* Register the 'ns3::BSSchedulerRtps' class */
    PyNs3BSSchedulerRtps_Type.tp_base = &PyNs3BSScheduler_Type;
    if (PyType_Ready(&PyNs3BSSchedulerRtps_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "BSSchedulerRtps", (PyObject *) &PyNs3BSSchedulerRtps_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::BSSchedulerSimple), &PyNs3BSSchedulerSimple_Type);
    /* Register the 'ns3::BSSchedulerSimple' class */
    PyNs3BSSchedulerSimple_Type.tp_base = &PyNs3BSScheduler_Type;
    if (PyType_Ready(&PyNs3BSSchedulerSimple_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "BSSchedulerSimple", (PyObject *) &PyNs3BSSchedulerSimple_Type);
    /* Register the 'ns3::BandwidthRequestHeader' class */
    PyNs3BandwidthRequestHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3BandwidthRequestHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "BandwidthRequestHeader", (PyObject *) &PyNs3BandwidthRequestHeader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::BsServiceFlowManager), &PyNs3BsServiceFlowManager_Type);
    /* Register the 'ns3::BsServiceFlowManager' class */
    PyNs3BsServiceFlowManager_Type.tp_base = &PyNs3ServiceFlowManager_Type;
    if (PyType_Ready(&PyNs3BsServiceFlowManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "BsServiceFlowManager", (PyObject *) &PyNs3BsServiceFlowManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ConnectionManager), &PyNs3ConnectionManager_Type);
    /* Register the 'ns3::ConnectionManager' class */
    PyNs3ConnectionManager_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3ConnectionManager_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "ConnectionManager", (PyObject *) &PyNs3ConnectionManager_Type);
    /* Register the 'ns3::Dcd' class */
    PyNs3Dcd_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Dcd_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Dcd", (PyObject *) &PyNs3Dcd_Type);
    /* Register the 'ns3::DlMap' class */
    PyNs3DlMap_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3DlMap_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DlMap", (PyObject *) &PyNs3DlMap_Type);
    /* Register the 'ns3::DsaAck' class */
    PyNs3DsaAck_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3DsaAck_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DsaAck", (PyObject *) &PyNs3DsaAck_Type);
    /* Register the 'ns3::DsaReq' class */
    PyNs3DsaReq_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3DsaReq_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DsaReq", (PyObject *) &PyNs3DsaReq_Type);
    /* Register the 'ns3::DsaRsp' class */
    PyNs3DsaRsp_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3DsaRsp_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DsaRsp", (PyObject *) &PyNs3DsaRsp_Type);
    /* Register the 'ns3::FragmentationSubheader' class */
    PyNs3FragmentationSubheader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3FragmentationSubheader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "FragmentationSubheader", (PyObject *) &PyNs3FragmentationSubheader_Type);
    /* Register the 'ns3::GenericMacHeader' class */
    PyNs3GenericMacHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3GenericMacHeader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "GenericMacHeader", (PyObject *) &PyNs3GenericMacHeader_Type);
    /* Register the 'ns3::GrantManagementSubheader' class */
    PyNs3GrantManagementSubheader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3GrantManagementSubheader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "GrantManagementSubheader", (PyObject *) &PyNs3GrantManagementSubheader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::IpcsClassifier), &PyNs3IpcsClassifier_Type);
    /* Register the 'ns3::IpcsClassifier' class */
    PyNs3IpcsClassifier_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3IpcsClassifier_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "IpcsClassifier", (PyObject *) &PyNs3IpcsClassifier_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SimpleOfdmWimaxPhy), &PyNs3SimpleOfdmWimaxPhy_Type);
    /* Register the 'ns3::SimpleOfdmWimaxPhy' class */
    PyNs3SimpleOfdmWimaxPhy_Type.tp_base = &PyNs3WimaxPhy_Type;
    if (PyType_Ready(&PyNs3SimpleOfdmWimaxPhy_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleOfdmWimaxPhy", (PyObject *) &PyNs3SimpleOfdmWimaxPhy_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WimaxChannel), &PyNs3WimaxChannel_Type);
    /* Register the 'ns3::WimaxChannel' class */
    PyNs3WimaxChannel_Type.tp_base = &PyNs3Channel_Type;
    if (PyType_Ready(&PyNs3WimaxChannel_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WimaxChannel", (PyObject *) &PyNs3WimaxChannel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WimaxNetDevice), &PyNs3WimaxNetDevice_Type);
    /* Register the 'ns3::WimaxNetDevice' class */
    
    PyNs3WimaxNetDeviceMeta_Type.tp_base = Py_TYPE(&PyNs3NetDevice_Type);
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3WimaxNetDeviceMeta_Type.tp_traverse = Py_TYPE(&PyNs3NetDevice_Type)->tp_traverse;
    PyNs3WimaxNetDeviceMeta_Type.tp_clear = Py_TYPE(&PyNs3NetDevice_Type)->tp_clear;
    PyNs3WimaxNetDeviceMeta_Type.tp_is_gc = Py_TYPE(&PyNs3NetDevice_Type)->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3WimaxNetDeviceMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3WimaxNetDeviceMeta_Type);
    
    PyNs3WimaxNetDevice_Type.tp_base = &PyNs3NetDevice_Type;
    Py_TYPE(&PyNs3WimaxNetDevice_Type) = &PyNs3WimaxNetDeviceMeta_Type;
    if (PyType_Ready(&PyNs3WimaxNetDevice_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "WimaxNetDevice", (PyObject *) &PyNs3WimaxNetDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::BaseStationNetDevice), &PyNs3BaseStationNetDevice_Type);
    /* Register the 'ns3::BaseStationNetDevice' class */
    PyNs3BaseStationNetDevice_Type.tp_base = &PyNs3WimaxNetDevice_Type;
    if (PyType_Ready(&PyNs3BaseStationNetDevice_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "BaseStationNetDevice", (PyObject *) &PyNs3BaseStationNetDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SimpleOfdmWimaxChannel), &PyNs3SimpleOfdmWimaxChannel_Type);
    /* Register the 'ns3::SimpleOfdmWimaxChannel' class */
    PyNs3SimpleOfdmWimaxChannel_Type.tp_base = &PyNs3WimaxChannel_Type;
    if (PyType_Ready(&PyNs3SimpleOfdmWimaxChannel_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleOfdmWimaxChannel", (PyObject *) &PyNs3SimpleOfdmWimaxChannel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SubscriberStationNetDevice), &PyNs3SubscriberStationNetDevice_Type);
    /* Register the 'ns3::SubscriberStationNetDevice' class */
    PyNs3SubscriberStationNetDevice_Type.tp_base = &PyNs3WimaxNetDevice_Type;
    if (PyType_Ready(&PyNs3SubscriberStationNetDevice_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SubscriberStationNetDevice", (PyObject *) &PyNs3SubscriberStationNetDevice_Type);
    /* Register the 'std::vector< bool >' class */
    if (PyType_Ready(&Pystd__vector__lt___bool___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt___bool___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___bool___gt__", (PyObject *) &Pystd__vector__lt___bool___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___bool___gt__Iter", (PyObject *) &Pystd__vector__lt___bool___gt__Iter_Type);
    /* Register the 'ns3::bvec' class */
    if (PyType_Ready(&Pyns3__bvec_Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pyns3__bvecIter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Ns3__bvec", (PyObject *) &Pyns3__bvec_Type);
    PyModule_AddObject(m, (char *) "Ns3__bvecIter", (PyObject *) &Pyns3__bvecIter_Type);
    /* Register the 'std::vector< ns3::DlFramePrefixIe >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__DlFramePrefixIe___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__DlFramePrefixIe___gt__", (PyObject *) &Pystd__vector__lt___ns3__DlFramePrefixIe___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__DlFramePrefixIe___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter_Type);
    /* Register the 'std::list< ns3::Ptr< ns3::Packet > >' class */
    if (PyType_Ready(&Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__", (PyObject *) &Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt___Type);
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter", (PyObject *) &Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter_Type);
    /* Register the 'std::vector< ns3::OfdmUlBurstProfile >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__OfdmUlBurstProfile___gt__", (PyObject *) &Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter_Type);
    /* Register the 'std::list< ns3::OfdmUlMapIe >' class */
    if (PyType_Ready(&Pystd__list__lt___ns3__OfdmUlMapIe___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__OfdmUlMapIe___gt__", (PyObject *) &Pystd__list__lt___ns3__OfdmUlMapIe___gt___Type);
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__OfdmUlMapIe___gt__Iter", (PyObject *) &Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter_Type);
    /* Register the 'std::list< ns3::Ptr< ns3::UlJob > >' class */
    if (PyType_Ready(&Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__", (PyObject *) &Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt___Type);
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter", (PyObject *) &Pystd__list__lt___ns3__Ptr__lt___ns3__UlJob___gt_____gt__Iter_Type);
    /* Register the 'std::list< ns3::Ptr< ns3::Packet const > >' class */
    if (PyType_Ready(&Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__", (PyObject *) &Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt___Type);
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter", (PyObject *) &Pystd__list__lt___ns3__Ptr__lt___ns3__Packet_const___gt_____gt__Iter_Type);
    /* Register the 'std::deque< ns3::WimaxMacQueue::QueueElement >' class */
    if (PyType_Ready(&Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__", (PyObject *) &Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt___Type);
    PyModule_AddObject(m, (char *) "Std__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter", (PyObject *) &Pystd__deque__lt___ns3__WimaxMacQueue__QueueElement___gt__Iter_Type);
    /* Register the 'std::vector< ns3::Ptr< ns3::WimaxConnection > >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__WimaxConnection___gt_____gt__Iter_Type);
    /* Register the 'std::vector< ns3::OfdmDlBurstProfile >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__OfdmDlBurstProfile___gt__", (PyObject *) &Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter_Type);
    /* Register the 'std::list< ns3::OfdmDlMapIe >' class */
    if (PyType_Ready(&Pystd__list__lt___ns3__OfdmDlMapIe___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__OfdmDlMapIe___gt__", (PyObject *) &Pystd__list__lt___ns3__OfdmDlMapIe___gt___Type);
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__OfdmDlMapIe___gt__Iter", (PyObject *) &Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter_Type);
    PyModule_AddIntConstant(m, (char *) "DATA", ns3::DATA);
    PyModule_AddIntConstant(m, (char *) "UNICAST_POLLING", ns3::UNICAST_POLLING);
    {
        PyObject *tmp_value;
         // ns3::Cid::BROADCAST
        tmp_value = PyLong_FromLong(ns3::Cid::BROADCAST);
        PyDict_SetItemString((PyObject*) PyNs3Cid_Type.tp_dict, "BROADCAST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Cid::INITIAL_RANGING
        tmp_value = PyLong_FromLong(ns3::Cid::INITIAL_RANGING);
        PyDict_SetItemString((PyObject*) PyNs3Cid_Type.tp_dict, "INITIAL_RANGING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Cid::BASIC
        tmp_value = PyLong_FromLong(ns3::Cid::BASIC);
        PyDict_SetItemString((PyObject*) PyNs3Cid_Type.tp_dict, "BASIC", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Cid::PRIMARY
        tmp_value = PyLong_FromLong(ns3::Cid::PRIMARY);
        PyDict_SetItemString((PyObject*) PyNs3Cid_Type.tp_dict, "PRIMARY", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Cid::TRANSPORT
        tmp_value = PyLong_FromLong(ns3::Cid::TRANSPORT);
        PyDict_SetItemString((PyObject*) PyNs3Cid_Type.tp_dict, "TRANSPORT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Cid::MULTICAST
        tmp_value = PyLong_FromLong(ns3::Cid::MULTICAST);
        PyDict_SetItemString((PyObject*) PyNs3Cid_Type.tp_dict, "MULTICAST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Cid::PADDING
        tmp_value = PyLong_FromLong(ns3::Cid::PADDING);
        PyDict_SetItemString((PyObject*) PyNs3Cid_Type.tp_dict, "PADDING", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::CsParameters::ADD
        tmp_value = PyLong_FromLong(ns3::CsParameters::ADD);
        PyDict_SetItemString((PyObject*) PyNs3CsParameters_Type.tp_dict, "ADD", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::CsParameters::REPLACE
        tmp_value = PyLong_FromLong(ns3::CsParameters::REPLACE);
        PyDict_SetItemString((PyObject*) PyNs3CsParameters_Type.tp_dict, "REPLACE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::CsParameters::DELETE
        tmp_value = PyLong_FromLong(ns3::CsParameters::DELETE);
        PyDict_SetItemString((PyObject*) PyNs3CsParameters_Type.tp_dict, "DELETE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::OfdmDlBurstProfile::DIUC_STC_ZONE
        tmp_value = PyLong_FromLong(ns3::OfdmDlBurstProfile::DIUC_STC_ZONE);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_STC_ZONE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_1
        tmp_value = PyLong_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_1);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_1", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_2
        tmp_value = PyLong_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_2);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_2", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_3
        tmp_value = PyLong_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_3);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_3", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_4
        tmp_value = PyLong_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_4);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_4", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_5
        tmp_value = PyLong_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_5);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_5", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_6
        tmp_value = PyLong_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_6);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_6", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_7
        tmp_value = PyLong_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_7);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_7", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_8
        tmp_value = PyLong_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_8);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_8", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_9
        tmp_value = PyLong_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_9);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_9", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_10
        tmp_value = PyLong_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_10);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_10", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_11
        tmp_value = PyLong_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_11);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_11", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_GAP
        tmp_value = PyLong_FromLong(ns3::OfdmDlBurstProfile::DIUC_GAP);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_GAP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_END_OF_MAP
        tmp_value = PyLong_FromLong(ns3::OfdmDlBurstProfile::DIUC_END_OF_MAP);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_END_OF_MAP", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::OfdmUlBurstProfile::UIUC_INITIAL_RANGING
        tmp_value = PyLong_FromLong(ns3::OfdmUlBurstProfile::UIUC_INITIAL_RANGING);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_INITIAL_RANGING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_REQ_REGION_FULL
        tmp_value = PyLong_FromLong(ns3::OfdmUlBurstProfile::UIUC_REQ_REGION_FULL);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_REQ_REGION_FULL", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_REQ_REGION_FOCUSED
        tmp_value = PyLong_FromLong(ns3::OfdmUlBurstProfile::UIUC_REQ_REGION_FOCUSED);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_REQ_REGION_FOCUSED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_FOCUSED_CONTENTION_IE
        tmp_value = PyLong_FromLong(ns3::OfdmUlBurstProfile::UIUC_FOCUSED_CONTENTION_IE);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_FOCUSED_CONTENTION_IE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_5
        tmp_value = PyLong_FromLong(ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_5);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_BURST_PROFILE_5", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_6
        tmp_value = PyLong_FromLong(ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_6);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_BURST_PROFILE_6", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_7
        tmp_value = PyLong_FromLong(ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_7);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_BURST_PROFILE_7", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_8
        tmp_value = PyLong_FromLong(ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_8);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_BURST_PROFILE_8", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_9
        tmp_value = PyLong_FromLong(ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_9);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_BURST_PROFILE_9", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_10
        tmp_value = PyLong_FromLong(ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_10);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_BURST_PROFILE_10", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_11
        tmp_value = PyLong_FromLong(ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_11);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_BURST_PROFILE_11", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_12
        tmp_value = PyLong_FromLong(ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_12);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_BURST_PROFILE_12", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_SUBCH_NETWORK_ENTRY
        tmp_value = PyLong_FromLong(ns3::OfdmUlBurstProfile::UIUC_SUBCH_NETWORK_ENTRY);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_SUBCH_NETWORK_ENTRY", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_END_OF_MAP
        tmp_value = PyLong_FromLong(ns3::OfdmUlBurstProfile::UIUC_END_OF_MAP);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_END_OF_MAP", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ServiceFlow::SF_DIRECTION_DOWN
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::SF_DIRECTION_DOWN);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_DIRECTION_DOWN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_DIRECTION_UP
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::SF_DIRECTION_UP);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_DIRECTION_UP", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ServiceFlow::SF_TYPE_PROVISIONED
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::SF_TYPE_PROVISIONED);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_PROVISIONED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_TYPE_ADMITTED
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::SF_TYPE_ADMITTED);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_ADMITTED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_TYPE_ACTIVE
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::SF_TYPE_ACTIVE);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_ACTIVE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ServiceFlow::SF_TYPE_NONE
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::SF_TYPE_NONE);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_NONE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_TYPE_UNDEF
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::SF_TYPE_UNDEF);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_UNDEF", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_TYPE_BE
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::SF_TYPE_BE);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_BE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_TYPE_NRTPS
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::SF_TYPE_NRTPS);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_NRTPS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_TYPE_RTPS
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::SF_TYPE_RTPS);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_RTPS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_TYPE_UGS
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::SF_TYPE_UGS);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_UGS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_TYPE_ALL
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::SF_TYPE_ALL);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_ALL", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ServiceFlow::ATM
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::ATM);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "ATM", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::IPV4
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::IPV4);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "IPV4", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::IPV6
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::IPV6);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "IPV6", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::ETHERNET
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::ETHERNET);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "ETHERNET", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::VLAN
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::VLAN);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "VLAN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::IPV4_OVER_ETHERNET
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::IPV4_OVER_ETHERNET);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "IPV4_OVER_ETHERNET", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::IPV6_OVER_ETHERNET
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::IPV6_OVER_ETHERNET);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "IPV6_OVER_ETHERNET", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::IPV4_OVER_VLAN
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::IPV4_OVER_VLAN);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "IPV4_OVER_VLAN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::IPV6_OVER_VLAN
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::IPV6_OVER_VLAN);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "IPV6_OVER_VLAN", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ServiceFlow::MODULATION_TYPE_BPSK_12
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::MODULATION_TYPE_BPSK_12);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "MODULATION_TYPE_BPSK_12", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::MODULATION_TYPE_QPSK_12
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::MODULATION_TYPE_QPSK_12);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "MODULATION_TYPE_QPSK_12", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::MODULATION_TYPE_QPSK_34
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::MODULATION_TYPE_QPSK_34);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "MODULATION_TYPE_QPSK_34", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::MODULATION_TYPE_QAM16_12
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::MODULATION_TYPE_QAM16_12);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "MODULATION_TYPE_QAM16_12", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::MODULATION_TYPE_QAM16_34
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::MODULATION_TYPE_QAM16_34);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "MODULATION_TYPE_QAM16_34", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::MODULATION_TYPE_QAM64_23
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::MODULATION_TYPE_QAM64_23);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "MODULATION_TYPE_QAM64_23", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::MODULATION_TYPE_QAM64_34
        tmp_value = PyLong_FromLong(ns3::ServiceFlow::MODULATION_TYPE_QAM64_34);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "MODULATION_TYPE_QAM64_34", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WimaxHelper::DEVICE_TYPE_SUBSCRIBER_STATION
        tmp_value = PyLong_FromLong(ns3::WimaxHelper::DEVICE_TYPE_SUBSCRIBER_STATION);
        PyDict_SetItemString((PyObject*) PyNs3WimaxHelper_Type.tp_dict, "DEVICE_TYPE_SUBSCRIBER_STATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxHelper::DEVICE_TYPE_BASE_STATION
        tmp_value = PyLong_FromLong(ns3::WimaxHelper::DEVICE_TYPE_BASE_STATION);
        PyDict_SetItemString((PyObject*) PyNs3WimaxHelper_Type.tp_dict, "DEVICE_TYPE_BASE_STATION", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WimaxHelper::SIMPLE_PHY_TYPE_OFDM
        tmp_value = PyLong_FromLong(ns3::WimaxHelper::SIMPLE_PHY_TYPE_OFDM);
        PyDict_SetItemString((PyObject*) PyNs3WimaxHelper_Type.tp_dict, "SIMPLE_PHY_TYPE_OFDM", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WimaxHelper::SCHED_TYPE_SIMPLE
        tmp_value = PyLong_FromLong(ns3::WimaxHelper::SCHED_TYPE_SIMPLE);
        PyDict_SetItemString((PyObject*) PyNs3WimaxHelper_Type.tp_dict, "SCHED_TYPE_SIMPLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxHelper::SCHED_TYPE_RTPS
        tmp_value = PyLong_FromLong(ns3::WimaxHelper::SCHED_TYPE_RTPS);
        PyDict_SetItemString((PyObject*) PyNs3WimaxHelper_Type.tp_dict, "SCHED_TYPE_RTPS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxHelper::SCHED_TYPE_MBQOS
        tmp_value = PyLong_FromLong(ns3::WimaxHelper::SCHED_TYPE_MBQOS);
        PyDict_SetItemString((PyObject*) PyNs3WimaxHelper_Type.tp_dict, "SCHED_TYPE_MBQOS", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ClassificationRuleVectorTlvValue::Priority
        tmp_value = PyLong_FromLong(ns3::ClassificationRuleVectorTlvValue::Priority);
        PyDict_SetItemString((PyObject*) PyNs3ClassificationRuleVectorTlvValue_Type.tp_dict, "Priority", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ClassificationRuleVectorTlvValue::ToS
        tmp_value = PyLong_FromLong(ns3::ClassificationRuleVectorTlvValue::ToS);
        PyDict_SetItemString((PyObject*) PyNs3ClassificationRuleVectorTlvValue_Type.tp_dict, "ToS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ClassificationRuleVectorTlvValue::Protocol
        tmp_value = PyLong_FromLong(ns3::ClassificationRuleVectorTlvValue::Protocol);
        PyDict_SetItemString((PyObject*) PyNs3ClassificationRuleVectorTlvValue_Type.tp_dict, "Protocol", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ClassificationRuleVectorTlvValue::IP_src
        tmp_value = PyLong_FromLong(ns3::ClassificationRuleVectorTlvValue::IP_src);
        PyDict_SetItemString((PyObject*) PyNs3ClassificationRuleVectorTlvValue_Type.tp_dict, "IP_src", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ClassificationRuleVectorTlvValue::IP_dst
        tmp_value = PyLong_FromLong(ns3::ClassificationRuleVectorTlvValue::IP_dst);
        PyDict_SetItemString((PyObject*) PyNs3ClassificationRuleVectorTlvValue_Type.tp_dict, "IP_dst", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ClassificationRuleVectorTlvValue::Port_src
        tmp_value = PyLong_FromLong(ns3::ClassificationRuleVectorTlvValue::Port_src);
        PyDict_SetItemString((PyObject*) PyNs3ClassificationRuleVectorTlvValue_Type.tp_dict, "Port_src", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ClassificationRuleVectorTlvValue::Port_dst
        tmp_value = PyLong_FromLong(ns3::ClassificationRuleVectorTlvValue::Port_dst);
        PyDict_SetItemString((PyObject*) PyNs3ClassificationRuleVectorTlvValue_Type.tp_dict, "Port_dst", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ClassificationRuleVectorTlvValue::Index
        tmp_value = PyLong_FromLong(ns3::ClassificationRuleVectorTlvValue::Index);
        PyDict_SetItemString((PyObject*) PyNs3ClassificationRuleVectorTlvValue_Type.tp_dict, "Index", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::CsParamVectorTlvValue::Classifier_DSC_Action
        tmp_value = PyLong_FromLong(ns3::CsParamVectorTlvValue::Classifier_DSC_Action);
        PyDict_SetItemString((PyObject*) PyNs3CsParamVectorTlvValue_Type.tp_dict, "Classifier_DSC_Action", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::CsParamVectorTlvValue::Packet_Classification_Rule
        tmp_value = PyLong_FromLong(ns3::CsParamVectorTlvValue::Packet_Classification_Rule);
        PyDict_SetItemString((PyObject*) PyNs3CsParamVectorTlvValue_Type.tp_dict, "Packet_Classification_Rule", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::MacHeaderType::HEADER_TYPE_GENERIC
        tmp_value = PyLong_FromLong(ns3::MacHeaderType::HEADER_TYPE_GENERIC);
        PyDict_SetItemString((PyObject*) PyNs3MacHeaderType_Type.tp_dict, "HEADER_TYPE_GENERIC", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::MacHeaderType::HEADER_TYPE_BANDWIDTH
        tmp_value = PyLong_FromLong(ns3::MacHeaderType::HEADER_TYPE_BANDWIDTH);
        PyDict_SetItemString((PyObject*) PyNs3MacHeaderType_Type.tp_dict, "HEADER_TYPE_BANDWIDTH", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ManagementMessageType::MESSAGE_TYPE_UCD
        tmp_value = PyLong_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_UCD);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_UCD", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_DCD
        tmp_value = PyLong_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_DCD);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_DCD", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_DL_MAP
        tmp_value = PyLong_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_DL_MAP);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_DL_MAP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_UL_MAP
        tmp_value = PyLong_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_UL_MAP);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_UL_MAP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_RNG_REQ
        tmp_value = PyLong_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_RNG_REQ);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_RNG_REQ", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_RNG_RSP
        tmp_value = PyLong_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_RNG_RSP);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_RNG_RSP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_REG_REQ
        tmp_value = PyLong_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_REG_REQ);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_REG_REQ", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_REG_RSP
        tmp_value = PyLong_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_REG_RSP);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_REG_RSP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_DSA_REQ
        tmp_value = PyLong_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_DSA_REQ);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_DSA_REQ", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_DSA_RSP
        tmp_value = PyLong_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_DSA_RSP);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_DSA_RSP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_DSA_ACK
        tmp_value = PyLong_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_DSA_ACK);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_DSA_ACK", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ServiceFlowManager::CONFIRMATION_CODE_SUCCESS
        tmp_value = PyLong_FromLong(ns3::ServiceFlowManager::CONFIRMATION_CODE_SUCCESS);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlowManager_Type.tp_dict, "CONFIRMATION_CODE_SUCCESS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlowManager::CONFIRMATION_CODE_REJECT
        tmp_value = PyLong_FromLong(ns3::ServiceFlowManager::CONFIRMATION_CODE_REJECT);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlowManager_Type.tp_dict, "CONFIRMATION_CODE_REJECT", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::SfVectorTlvValue::SFID
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::SFID);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "SFID", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::CID
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::CID);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "CID", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Service_Class_Name
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::Service_Class_Name);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Service_Class_Name", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::reserved1
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::reserved1);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "reserved1", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::QoS_Parameter_Set_Type
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::QoS_Parameter_Set_Type);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "QoS_Parameter_Set_Type", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Traffic_Priority
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::Traffic_Priority);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Traffic_Priority", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Maximum_Sustained_Traffic_Rate
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::Maximum_Sustained_Traffic_Rate);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Maximum_Sustained_Traffic_Rate", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Maximum_Traffic_Burst
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::Maximum_Traffic_Burst);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Maximum_Traffic_Burst", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Minimum_Reserved_Traffic_Rate
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::Minimum_Reserved_Traffic_Rate);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Minimum_Reserved_Traffic_Rate", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Minimum_Tolerable_Traffic_Rate
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::Minimum_Tolerable_Traffic_Rate);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Minimum_Tolerable_Traffic_Rate", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Service_Flow_Scheduling_Type
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::Service_Flow_Scheduling_Type);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Service_Flow_Scheduling_Type", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Request_Transmission_Policy
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::Request_Transmission_Policy);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Request_Transmission_Policy", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Tolerated_Jitter
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::Tolerated_Jitter);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Tolerated_Jitter", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Maximum_Latency
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::Maximum_Latency);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Maximum_Latency", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Fixed_length_versus_Variable_length_SDU_Indicator
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::Fixed_length_versus_Variable_length_SDU_Indicator);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Fixed_length_versus_Variable_length_SDU_Indicator", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::SDU_Size
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::SDU_Size);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "SDU_Size", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Target_SAID
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::Target_SAID);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Target_SAID", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_Enable
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::ARQ_Enable);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_Enable", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_WINDOW_SIZE
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::ARQ_WINDOW_SIZE);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_WINDOW_SIZE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_RETRY_TIMEOUT_Transmitter_Delay
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::ARQ_RETRY_TIMEOUT_Transmitter_Delay);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_RETRY_TIMEOUT_Transmitter_Delay", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_RETRY_TIMEOUT_Receiver_Delay
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::ARQ_RETRY_TIMEOUT_Receiver_Delay);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_RETRY_TIMEOUT_Receiver_Delay", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_BLOCK_LIFETIME
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::ARQ_BLOCK_LIFETIME);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_BLOCK_LIFETIME", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_SYNC_LOSS
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::ARQ_SYNC_LOSS);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_SYNC_LOSS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_DELIVER_IN_ORDER
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::ARQ_DELIVER_IN_ORDER);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_DELIVER_IN_ORDER", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_PURGE_TIMEOUT
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::ARQ_PURGE_TIMEOUT);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_PURGE_TIMEOUT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_BLOCK_SIZE
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::ARQ_BLOCK_SIZE);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_BLOCK_SIZE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::reserved2
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::reserved2);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "reserved2", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::CS_Specification
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::CS_Specification);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "CS_Specification", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::IPV4_CS_Parameters
        tmp_value = PyLong_FromLong(ns3::SfVectorTlvValue::IPV4_CS_Parameters);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "IPV4_CS_Parameters", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::SsServiceFlowManager::CONFIRMATION_CODE_SUCCESS
        tmp_value = PyLong_FromLong(ns3::SsServiceFlowManager::CONFIRMATION_CODE_SUCCESS);
        PyDict_SetItemString((PyObject*) PyNs3SsServiceFlowManager_Type.tp_dict, "CONFIRMATION_CODE_SUCCESS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SsServiceFlowManager::CONFIRMATION_CODE_REJECT
        tmp_value = PyLong_FromLong(ns3::SsServiceFlowManager::CONFIRMATION_CODE_REJECT);
        PyDict_SetItemString((PyObject*) PyNs3SsServiceFlowManager_Type.tp_dict, "CONFIRMATION_CODE_REJECT", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Tlv::HMAC_TUPLE
        tmp_value = PyLong_FromLong(ns3::Tlv::HMAC_TUPLE);
        PyDict_SetItemString((PyObject*) PyNs3Tlv_Type.tp_dict, "HMAC_TUPLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Tlv::MAC_VERSION_ENCODING
        tmp_value = PyLong_FromLong(ns3::Tlv::MAC_VERSION_ENCODING);
        PyDict_SetItemString((PyObject*) PyNs3Tlv_Type.tp_dict, "MAC_VERSION_ENCODING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Tlv::CURRENT_TRANSMIT_POWER
        tmp_value = PyLong_FromLong(ns3::Tlv::CURRENT_TRANSMIT_POWER);
        PyDict_SetItemString((PyObject*) PyNs3Tlv_Type.tp_dict, "CURRENT_TRANSMIT_POWER", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Tlv::DOWNLINK_SERVICE_FLOW
        tmp_value = PyLong_FromLong(ns3::Tlv::DOWNLINK_SERVICE_FLOW);
        PyDict_SetItemString((PyObject*) PyNs3Tlv_Type.tp_dict, "DOWNLINK_SERVICE_FLOW", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Tlv::UPLINK_SERVICE_FLOW
        tmp_value = PyLong_FromLong(ns3::Tlv::UPLINK_SERVICE_FLOW);
        PyDict_SetItemString((PyObject*) PyNs3Tlv_Type.tp_dict, "UPLINK_SERVICE_FLOW", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Tlv::VENDOR_ID_EMCODING
        tmp_value = PyLong_FromLong(ns3::Tlv::VENDOR_ID_EMCODING);
        PyDict_SetItemString((PyObject*) PyNs3Tlv_Type.tp_dict, "VENDOR_ID_EMCODING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Tlv::VENDOR_SPECIFIC_INFORMATION
        tmp_value = PyLong_FromLong(ns3::Tlv::VENDOR_SPECIFIC_INFORMATION);
        PyDict_SetItemString((PyObject*) PyNs3Tlv_Type.tp_dict, "VENDOR_SPECIFIC_INFORMATION", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::UlJob::LOW
        tmp_value = PyLong_FromLong(ns3::UlJob::LOW);
        PyDict_SetItemString((PyObject*) PyNs3UlJob_Type.tp_dict, "LOW", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::UlJob::INTERMEDIATE
        tmp_value = PyLong_FromLong(ns3::UlJob::INTERMEDIATE);
        PyDict_SetItemString((PyObject*) PyNs3UlJob_Type.tp_dict, "INTERMEDIATE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::UlJob::HIGH
        tmp_value = PyLong_FromLong(ns3::UlJob::HIGH);
        PyDict_SetItemString((PyObject*) PyNs3UlJob_Type.tp_dict, "HIGH", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WimaxPhy::MODULATION_TYPE_BPSK_12
        tmp_value = PyLong_FromLong(ns3::WimaxPhy::MODULATION_TYPE_BPSK_12);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "MODULATION_TYPE_BPSK_12", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::MODULATION_TYPE_QPSK_12
        tmp_value = PyLong_FromLong(ns3::WimaxPhy::MODULATION_TYPE_QPSK_12);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "MODULATION_TYPE_QPSK_12", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::MODULATION_TYPE_QPSK_34
        tmp_value = PyLong_FromLong(ns3::WimaxPhy::MODULATION_TYPE_QPSK_34);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "MODULATION_TYPE_QPSK_34", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::MODULATION_TYPE_QAM16_12
        tmp_value = PyLong_FromLong(ns3::WimaxPhy::MODULATION_TYPE_QAM16_12);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "MODULATION_TYPE_QAM16_12", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::MODULATION_TYPE_QAM16_34
        tmp_value = PyLong_FromLong(ns3::WimaxPhy::MODULATION_TYPE_QAM16_34);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "MODULATION_TYPE_QAM16_34", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::MODULATION_TYPE_QAM64_23
        tmp_value = PyLong_FromLong(ns3::WimaxPhy::MODULATION_TYPE_QAM64_23);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "MODULATION_TYPE_QAM64_23", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::MODULATION_TYPE_QAM64_34
        tmp_value = PyLong_FromLong(ns3::WimaxPhy::MODULATION_TYPE_QAM64_34);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "MODULATION_TYPE_QAM64_34", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WimaxPhy::PHY_STATE_IDLE
        tmp_value = PyLong_FromLong(ns3::WimaxPhy::PHY_STATE_IDLE);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "PHY_STATE_IDLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::PHY_STATE_SCANNING
        tmp_value = PyLong_FromLong(ns3::WimaxPhy::PHY_STATE_SCANNING);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "PHY_STATE_SCANNING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::PHY_STATE_TX
        tmp_value = PyLong_FromLong(ns3::WimaxPhy::PHY_STATE_TX);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "PHY_STATE_TX", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::PHY_STATE_RX
        tmp_value = PyLong_FromLong(ns3::WimaxPhy::PHY_STATE_RX);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "PHY_STATE_RX", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WimaxPhy::SimpleWimaxPhy
        tmp_value = PyLong_FromLong(ns3::WimaxPhy::SimpleWimaxPhy);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "SimpleWimaxPhy", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::simpleOfdmWimaxPhy
        tmp_value = PyLong_FromLong(ns3::WimaxPhy::simpleOfdmWimaxPhy);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "simpleOfdmWimaxPhy", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::BandwidthRequestHeader::HEADER_TYPE_INCREMENTAL
        tmp_value = PyLong_FromLong(ns3::BandwidthRequestHeader::HEADER_TYPE_INCREMENTAL);
        PyDict_SetItemString((PyObject*) PyNs3BandwidthRequestHeader_Type.tp_dict, "HEADER_TYPE_INCREMENTAL", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::BandwidthRequestHeader::HEADER_TYPE_AGGREGATE
        tmp_value = PyLong_FromLong(ns3::BandwidthRequestHeader::HEADER_TYPE_AGGREGATE);
        PyDict_SetItemString((PyObject*) PyNs3BandwidthRequestHeader_Type.tp_dict, "HEADER_TYPE_AGGREGATE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::BsServiceFlowManager::CONFIRMATION_CODE_SUCCESS
        tmp_value = PyLong_FromLong(ns3::BsServiceFlowManager::CONFIRMATION_CODE_SUCCESS);
        PyDict_SetItemString((PyObject*) PyNs3BsServiceFlowManager_Type.tp_dict, "CONFIRMATION_CODE_SUCCESS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::BsServiceFlowManager::CONFIRMATION_CODE_REJECT
        tmp_value = PyLong_FromLong(ns3::BsServiceFlowManager::CONFIRMATION_CODE_REJECT);
        PyDict_SetItemString((PyObject*) PyNs3BsServiceFlowManager_Type.tp_dict, "CONFIRMATION_CODE_REJECT", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_2_POINT_5_MS
        tmp_value = PyLong_FromLong(ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_2_POINT_5_MS);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxPhy_Type.tp_dict, "FRAME_DURATION_2_POINT_5_MS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_4_MS
        tmp_value = PyLong_FromLong(ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_4_MS);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxPhy_Type.tp_dict, "FRAME_DURATION_4_MS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_5_MS
        tmp_value = PyLong_FromLong(ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_5_MS);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxPhy_Type.tp_dict, "FRAME_DURATION_5_MS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_8_MS
        tmp_value = PyLong_FromLong(ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_8_MS);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxPhy_Type.tp_dict, "FRAME_DURATION_8_MS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_10_MS
        tmp_value = PyLong_FromLong(ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_10_MS);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxPhy_Type.tp_dict, "FRAME_DURATION_10_MS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_12_POINT_5_MS
        tmp_value = PyLong_FromLong(ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_12_POINT_5_MS);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxPhy_Type.tp_dict, "FRAME_DURATION_12_POINT_5_MS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_20_MS
        tmp_value = PyLong_FromLong(ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_20_MS);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxPhy_Type.tp_dict, "FRAME_DURATION_20_MS", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WimaxNetDevice::DIRECTION_DOWNLINK
        tmp_value = PyLong_FromLong(ns3::WimaxNetDevice::DIRECTION_DOWNLINK);
        PyDict_SetItemString((PyObject*) PyNs3WimaxNetDevice_Type.tp_dict, "DIRECTION_DOWNLINK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxNetDevice::DIRECTION_UPLINK
        tmp_value = PyLong_FromLong(ns3::WimaxNetDevice::DIRECTION_UPLINK);
        PyDict_SetItemString((PyObject*) PyNs3WimaxNetDevice_Type.tp_dict, "DIRECTION_UPLINK", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WimaxNetDevice::RANGING_STATUS_EXPIRED
        tmp_value = PyLong_FromLong(ns3::WimaxNetDevice::RANGING_STATUS_EXPIRED);
        PyDict_SetItemString((PyObject*) PyNs3WimaxNetDevice_Type.tp_dict, "RANGING_STATUS_EXPIRED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxNetDevice::RANGING_STATUS_CONTINUE
        tmp_value = PyLong_FromLong(ns3::WimaxNetDevice::RANGING_STATUS_CONTINUE);
        PyDict_SetItemString((PyObject*) PyNs3WimaxNetDevice_Type.tp_dict, "RANGING_STATUS_CONTINUE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxNetDevice::RANGING_STATUS_ABORT
        tmp_value = PyLong_FromLong(ns3::WimaxNetDevice::RANGING_STATUS_ABORT);
        PyDict_SetItemString((PyObject*) PyNs3WimaxNetDevice_Type.tp_dict, "RANGING_STATUS_ABORT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxNetDevice::RANGING_STATUS_SUCCESS
        tmp_value = PyLong_FromLong(ns3::WimaxNetDevice::RANGING_STATUS_SUCCESS);
        PyDict_SetItemString((PyObject*) PyNs3WimaxNetDevice_Type.tp_dict, "RANGING_STATUS_SUCCESS", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::BaseStationNetDevice::BS_STATE_DL_SUB_FRAME
        tmp_value = PyLong_FromLong(ns3::BaseStationNetDevice::BS_STATE_DL_SUB_FRAME);
        PyDict_SetItemString((PyObject*) PyNs3BaseStationNetDevice_Type.tp_dict, "BS_STATE_DL_SUB_FRAME", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::BaseStationNetDevice::BS_STATE_UL_SUB_FRAME
        tmp_value = PyLong_FromLong(ns3::BaseStationNetDevice::BS_STATE_UL_SUB_FRAME);
        PyDict_SetItemString((PyObject*) PyNs3BaseStationNetDevice_Type.tp_dict, "BS_STATE_UL_SUB_FRAME", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::BaseStationNetDevice::BS_STATE_TTG
        tmp_value = PyLong_FromLong(ns3::BaseStationNetDevice::BS_STATE_TTG);
        PyDict_SetItemString((PyObject*) PyNs3BaseStationNetDevice_Type.tp_dict, "BS_STATE_TTG", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::BaseStationNetDevice::BS_STATE_RTG
        tmp_value = PyLong_FromLong(ns3::BaseStationNetDevice::BS_STATE_RTG);
        PyDict_SetItemString((PyObject*) PyNs3BaseStationNetDevice_Type.tp_dict, "BS_STATE_RTG", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::BaseStationNetDevice::SHORT_PREAMBLE
        tmp_value = PyLong_FromLong(ns3::BaseStationNetDevice::SHORT_PREAMBLE);
        PyDict_SetItemString((PyObject*) PyNs3BaseStationNetDevice_Type.tp_dict, "SHORT_PREAMBLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::BaseStationNetDevice::LONG_PREAMBLE
        tmp_value = PyLong_FromLong(ns3::BaseStationNetDevice::LONG_PREAMBLE);
        PyDict_SetItemString((PyObject*) PyNs3BaseStationNetDevice_Type.tp_dict, "LONG_PREAMBLE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::SimpleOfdmWimaxChannel::RANDOM_PROPAGATION
        tmp_value = PyLong_FromLong(ns3::SimpleOfdmWimaxChannel::RANDOM_PROPAGATION);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxChannel_Type.tp_dict, "RANDOM_PROPAGATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxChannel::FRIIS_PROPAGATION
        tmp_value = PyLong_FromLong(ns3::SimpleOfdmWimaxChannel::FRIIS_PROPAGATION);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxChannel_Type.tp_dict, "FRIIS_PROPAGATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxChannel::LOG_DISTANCE_PROPAGATION
        tmp_value = PyLong_FromLong(ns3::SimpleOfdmWimaxChannel::LOG_DISTANCE_PROPAGATION);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxChannel_Type.tp_dict, "LOG_DISTANCE_PROPAGATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxChannel::COST231_PROPAGATION
        tmp_value = PyLong_FromLong(ns3::SimpleOfdmWimaxChannel::COST231_PROPAGATION);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxChannel_Type.tp_dict, "COST231_PROPAGATION", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::SubscriberStationNetDevice::SS_STATE_IDLE
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_IDLE);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_IDLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_SCANNING
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_SCANNING);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_SCANNING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_SYNCHRONIZING
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_SYNCHRONIZING);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_SYNCHRONIZING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_ACQUIRING_PARAMETERS
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_ACQUIRING_PARAMETERS);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_ACQUIRING_PARAMETERS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_WAITING_REG_RANG_INTRVL
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_WAITING_REG_RANG_INTRVL);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_WAITING_REG_RANG_INTRVL", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_WAITING_INV_RANG_INTRVL
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_WAITING_INV_RANG_INTRVL);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_WAITING_INV_RANG_INTRVL", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_WAITING_RNG_RSP
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_WAITING_RNG_RSP);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_WAITING_RNG_RSP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_ADJUSTING_PARAMETERS
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_ADJUSTING_PARAMETERS);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_ADJUSTING_PARAMETERS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_REGISTERED
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_REGISTERED);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_REGISTERED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_TRANSMITTING
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_TRANSMITTING);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_TRANSMITTING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_STOPPED
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_STOPPED);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_STOPPED", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::SubscriberStationNetDevice::EVENT_NONE
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::EVENT_NONE);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "EVENT_NONE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::EVENT_WAIT_FOR_RNG_RSP
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::EVENT_WAIT_FOR_RNG_RSP);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "EVENT_WAIT_FOR_RNG_RSP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::EVENT_DL_MAP_SYNC_TIMEOUT
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::EVENT_DL_MAP_SYNC_TIMEOUT);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "EVENT_DL_MAP_SYNC_TIMEOUT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::EVENT_LOST_DL_MAP
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::EVENT_LOST_DL_MAP);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "EVENT_LOST_DL_MAP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::EVENT_LOST_UL_MAP
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::EVENT_LOST_UL_MAP);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "EVENT_LOST_UL_MAP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::EVENT_DCD_WAIT_TIMEOUT
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::EVENT_DCD_WAIT_TIMEOUT);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "EVENT_DCD_WAIT_TIMEOUT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::EVENT_UCD_WAIT_TIMEOUT
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::EVENT_UCD_WAIT_TIMEOUT);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "EVENT_UCD_WAIT_TIMEOUT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::EVENT_RANG_OPP_WAIT_TIMEOUT
        tmp_value = PyLong_FromLong(ns3::SubscriberStationNetDevice::EVENT_RANG_OPP_WAIT_TIMEOUT);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "EVENT_RANG_OPP_WAIT_TIMEOUT", tmp_value);
        Py_DECREF(tmp_value);
    }
    submodule = initwimax_FatalImpl();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "FatalImpl", submodule);
    submodule = initwimax_Hash();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "Hash", submodule);
    submodule = initwimax_TracedValueCallback();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "TracedValueCallback", submodule);
    submodule = initwimax_internal();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "internal", submodule);
    return MOD_RETURN(m);
}
