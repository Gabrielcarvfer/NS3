/* This file was generated by PyBindGen 0.0.0.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#ifndef PyVarObject_HEAD_INIT
#define PyVarObject_HEAD_INIT(type, size) \
        PyObject_HEAD_INIT(type) size,
#endif


#if PY_VERSION_HEX >= 0x03000000
typedef void* cmpfunc;
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif


#include "ns3/stats-module.h"
#include <typeinfo>
#include <ostream>
#include <sstream>
#include <map>
#include <iostream>
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionList;


extern PyTypeObject *_PyNs3AttributeConstructionList_Type;
#define PyNs3AttributeConstructionList_Type (*_PyNs3AttributeConstructionList_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionList_wrapper_registry;
#define PyNs3AttributeConstructionList_wrapper_registry (*_PyNs3AttributeConstructionList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionListItem;


extern PyTypeObject *_PyNs3AttributeConstructionListItem_Type;
#define PyNs3AttributeConstructionListItem_Type (*_PyNs3AttributeConstructionListItem_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionListItem_wrapper_registry;
#define PyNs3AttributeConstructionListItem_wrapper_registry (*_PyNs3AttributeConstructionListItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::CallbackBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackBase;


extern PyTypeObject *_PyNs3CallbackBase_Type;
#define PyNs3CallbackBase_Type (*_PyNs3CallbackBase_Type)

extern std::map<void*, PyObject*> *_PyNs3CallbackBase_wrapper_registry;
#define PyNs3CallbackBase_wrapper_registry (*_PyNs3CallbackBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EventId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventId;


extern PyTypeObject *_PyNs3EventId_Type;
#define PyNs3EventId_Type (*_PyNs3EventId_Type)

extern std::map<void*, PyObject*> *_PyNs3EventId_wrapper_registry;
#define PyNs3EventId_wrapper_registry (*_PyNs3EventId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Hasher *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Hasher;


extern PyTypeObject *_PyNs3Hasher_Type;
#define PyNs3Hasher_Type (*_PyNs3Hasher_Type)

extern std::map<void*, PyObject*> *_PyNs3Hasher_wrapper_registry;
#define PyNs3Hasher_wrapper_registry (*_PyNs3Hasher_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectBase;


extern PyTypeObject *_PyNs3ObjectBase_Type;
#define PyNs3ObjectBase_Type (*_PyNs3ObjectBase_Type)

class PyNs3ObjectBase__PythonHelper : public ns3::ObjectBase
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ObjectBase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3ObjectBase_wrapper_registry;
#define PyNs3ObjectBase_wrapper_registry (*_PyNs3ObjectBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectDeleter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectDeleter;


extern PyTypeObject *_PyNs3ObjectDeleter_Type;
#define PyNs3ObjectDeleter_Type (*_PyNs3ObjectDeleter_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectDeleter_wrapper_registry;
#define PyNs3ObjectDeleter_wrapper_registry (*_PyNs3ObjectDeleter_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactory;


extern PyTypeObject *_PyNs3ObjectFactory_Type;
#define PyNs3ObjectFactory_Type (*_PyNs3ObjectFactory_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectFactory_wrapper_registry;
#define PyNs3ObjectFactory_wrapper_registry (*_PyNs3ObjectFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type)



#include <map>
#include <string>
#include <typeinfo>
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)
# include <cxxabi.h>
#endif

#define PBG_TYPEMAP_DEBUG 0

namespace pybindgen {

class TypeMap
{
   std::map<std::string, PyTypeObject *> m_map;

public:

   TypeMap() {}

   void register_wrapper(const std::type_info &cpp_type_info, PyTypeObject *python_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "register_wrapper(this=" << this << ", type_name=" << cpp_type_info.name()
             << ", python_wrapper=" << python_wrapper->tp_name << ")" << std::endl;
#endif

       m_map[std::string(cpp_type_info.name())] = python_wrapper;
   }



   PyTypeObject * lookup_wrapper(const std::type_info &cpp_type_info, PyTypeObject *fallback_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "lookup_wrapper(this=" << this << ", type_name=" << cpp_type_info.name() << ")" << std::endl;
#endif

       PyTypeObject *python_wrapper = m_map[cpp_type_info.name()];
       if (python_wrapper)
           return python_wrapper;
       else {
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)

           // Get closest (in the single inheritance tree provided by cxxabi.h)
           // registered python wrapper.
           const abi::__si_class_type_info *_typeinfo =
               dynamic_cast<const abi::__si_class_type_info*> (&cpp_type_info);
#if PBG_TYPEMAP_DEBUG
          std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           while (_typeinfo && (python_wrapper = m_map[std::string(_typeinfo->name())]) == 0) {
               _typeinfo = dynamic_cast<const abi::__si_class_type_info*> (_typeinfo->__base_type);
#if PBG_TYPEMAP_DEBUG
               std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           }

#if PBG_TYPEMAP_DEBUG
          if (python_wrapper) {
              std::cerr << "  -> found match " << std::endl;
          } else {
              std::cerr << "  -> return fallback wrapper" << std::endl;
          }
#endif

           return python_wrapper? python_wrapper : fallback_wrapper;

#else // non gcc 3+ compilers can only match against explicitly registered classes, not hidden subclasses
           return fallback_wrapper;
#endif
       }
   }
};

}


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;

#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Simulator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Simulator;


extern PyTypeObject *_PyNs3Simulator_Type;
#define PyNs3Simulator_Type (*_PyNs3Simulator_Type)

extern std::map<void*, PyObject*> *_PyNs3Simulator_wrapper_registry;
#define PyNs3Simulator_wrapper_registry (*_PyNs3Simulator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TimeWithUnit *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeWithUnit;


extern PyTypeObject *_PyNs3TimeWithUnit_Type;
#define PyNs3TimeWithUnit_Type (*_PyNs3TimeWithUnit_Type)

extern std::map<void*, PyObject*> *_PyNs3TimeWithUnit_wrapper_registry;
#define PyNs3TimeWithUnit_wrapper_registry (*_PyNs3TimeWithUnit_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< bool > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Bool;


extern PyTypeObject *_PyNs3TracedValue__Bool_Type;
#define PyNs3TracedValue__Bool_Type (*_PyNs3TracedValue__Bool_Type)

extern std::map<void*, PyObject*> *_PyNs3TracedValue__Bool_wrapper_registry;
#define PyNs3TracedValue__Bool_wrapper_registry (*_PyNs3TracedValue__Bool_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< double > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Double;


extern PyTypeObject *_PyNs3TracedValue__Double_Type;
#define PyNs3TracedValue__Double_Type (*_PyNs3TracedValue__Double_Type)

extern std::map<void*, PyObject*> *_PyNs3TracedValue__Double_wrapper_registry;
#define PyNs3TracedValue__Double_wrapper_registry (*_PyNs3TracedValue__Double_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< unsigned char > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Unsigned_char;


extern PyTypeObject *_PyNs3TracedValue__Unsigned_char_Type;
#define PyNs3TracedValue__Unsigned_char_Type (*_PyNs3TracedValue__Unsigned_char_Type)

extern std::map<void*, PyObject*> *_PyNs3TracedValue__Unsigned_char_wrapper_registry;
#define PyNs3TracedValue__Unsigned_char_wrapper_registry (*_PyNs3TracedValue__Unsigned_char_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< unsigned int > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Unsigned_int;


extern PyTypeObject *_PyNs3TracedValue__Unsigned_int_Type;
#define PyNs3TracedValue__Unsigned_int_Type (*_PyNs3TracedValue__Unsigned_int_Type)

extern std::map<void*, PyObject*> *_PyNs3TracedValue__Unsigned_int_wrapper_registry;
#define PyNs3TracedValue__Unsigned_int_wrapper_registry (*_PyNs3TracedValue__Unsigned_int_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< unsigned short > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Unsigned_short;


extern PyTypeObject *_PyNs3TracedValue__Unsigned_short_Type;
#define PyNs3TracedValue__Unsigned_short_Type (*_PyNs3TracedValue__Unsigned_short_Type)

extern std::map<void*, PyObject*> *_PyNs3TracedValue__Unsigned_short_wrapper_registry;
#define PyNs3TracedValue__Unsigned_short_wrapper_registry (*_PyNs3TracedValue__Unsigned_short_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeId;


extern PyTypeObject *_PyNs3TypeId_Type;
#define PyNs3TypeId_Type (*_PyNs3TypeId_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeId_wrapper_registry;
#define PyNs3TypeId_wrapper_registry (*_PyNs3TypeId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::AttributeInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdAttributeInformation;


extern PyTypeObject *_PyNs3TypeIdAttributeInformation_Type;
#define PyNs3TypeIdAttributeInformation_Type (*_PyNs3TypeIdAttributeInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdAttributeInformation_wrapper_registry;
#define PyNs3TypeIdAttributeInformation_wrapper_registry (*_PyNs3TypeIdAttributeInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::TraceSourceInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdTraceSourceInformation;


extern PyTypeObject *_PyNs3TypeIdTraceSourceInformation_Type;
#define PyNs3TypeIdTraceSourceInformation_Type (*_PyNs3TypeIdTraceSourceInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdTraceSourceInformation_wrapper_registry;
#define PyNs3TypeIdTraceSourceInformation_wrapper_registry (*_PyNs3TypeIdTraceSourceInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::empty *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Empty;


extern PyTypeObject *_PyNs3Empty_Type;
#define PyNs3Empty_Type (*_PyNs3Empty_Type)

extern std::map<void*, PyObject*> *_PyNs3Empty_wrapper_registry;
#define PyNs3Empty_wrapper_registry (*_PyNs3Empty_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::int64x64_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Int64x64_t;


extern PyTypeObject *_PyNs3Int64x64_t_Type;
#define PyNs3Int64x64_t_Type (*_PyNs3Int64x64_t_Type)

extern std::map<void*, PyObject*> *_PyNs3Int64x64_t_wrapper_registry;
#define PyNs3Int64x64_t_wrapper_registry (*_PyNs3Int64x64_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Object *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Object;


extern PyTypeObject *_PyNs3Object_Type;
#define PyNs3Object_Type (*_PyNs3Object_Type)

class PyNs3Object__PythonHelper : public ns3::Object
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Object__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Object::AggregateIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectAggregateIterator;


extern PyTypeObject *_PyNs3ObjectAggregateIterator_Type;
#define PyNs3ObjectAggregateIterator_Type (*_PyNs3ObjectAggregateIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectAggregateIterator_wrapper_registry;
#define PyNs3ObjectAggregateIterator_wrapper_registry (*_PyNs3ObjectAggregateIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;
#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;
#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type;
#define PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type (*_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Time *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Time;


extern PyTypeObject *_PyNs3Time_Type;
#define PyNs3Time_Type (*_PyNs3Time_Type)

extern std::map<void*, PyObject*> *_PyNs3Time_wrapper_registry;
#define PyNs3Time_wrapper_registry (*_PyNs3Time_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TraceSourceAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TraceSourceAccessor;


extern PyTypeObject *_PyNs3TraceSourceAccessor_Type;
#define PyNs3TraceSourceAccessor_Type (*_PyNs3TraceSourceAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeAccessor;


extern PyTypeObject *_PyNs3AttributeAccessor_Type;
#define PyNs3AttributeAccessor_Type (*_PyNs3AttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeChecker;


extern PyTypeObject *_PyNs3AttributeChecker_Type;
#define PyNs3AttributeChecker_Type (*_PyNs3AttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeValue;


extern PyTypeObject *_PyNs3AttributeValue_Type;
#define PyNs3AttributeValue_Type (*_PyNs3AttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::BooleanChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanChecker;


extern PyTypeObject *_PyNs3BooleanChecker_Type;
#define PyNs3BooleanChecker_Type (*_PyNs3BooleanChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::BooleanValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanValue;


extern PyTypeObject *_PyNs3BooleanValue_Type;
#define PyNs3BooleanValue_Type (*_PyNs3BooleanValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackChecker;


extern PyTypeObject *_PyNs3CallbackChecker_Type;
#define PyNs3CallbackChecker_Type (*_PyNs3CallbackChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImplBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImplBase;


extern PyTypeObject *_PyNs3CallbackImplBase_Type;
#define PyNs3CallbackImplBase_Type (*_PyNs3CallbackImplBase_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackValue;


extern PyTypeObject *_PyNs3CallbackValue_Type;
#define PyNs3CallbackValue_Type (*_PyNs3CallbackValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::DoubleValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DoubleValue;


extern PyTypeObject *_PyNs3DoubleValue_Type;
#define PyNs3DoubleValue_Type (*_PyNs3DoubleValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeAccessor;


extern PyTypeObject *_PyNs3EmptyAttributeAccessor_Type;
#define PyNs3EmptyAttributeAccessor_Type (*_PyNs3EmptyAttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeChecker;


extern PyTypeObject *_PyNs3EmptyAttributeChecker_Type;
#define PyNs3EmptyAttributeChecker_Type (*_PyNs3EmptyAttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeValue;


extern PyTypeObject *_PyNs3EmptyAttributeValue_Type;
#define PyNs3EmptyAttributeValue_Type (*_PyNs3EmptyAttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EnumChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumChecker;


extern PyTypeObject *_PyNs3EnumChecker_Type;
#define PyNs3EnumChecker_Type (*_PyNs3EnumChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::EnumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumValue;


extern PyTypeObject *_PyNs3EnumValue_Type;
#define PyNs3EnumValue_Type (*_PyNs3EnumValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EventImpl *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventImpl;


extern PyTypeObject *_PyNs3EventImpl_Type;
#define PyNs3EventImpl_Type (*_PyNs3EventImpl_Type)


typedef struct {
    PyObject_HEAD
    ns3::IntegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntegerValue;


extern PyTypeObject *_PyNs3IntegerValue_Type;
#define PyNs3IntegerValue_Type (*_PyNs3IntegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryChecker;


extern PyTypeObject *_PyNs3ObjectFactoryChecker_Type;
#define PyNs3ObjectFactoryChecker_Type (*_PyNs3ObjectFactoryChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryValue;


extern PyTypeObject *_PyNs3ObjectFactoryValue_Type;
#define PyNs3ObjectFactoryValue_Type (*_PyNs3ObjectFactoryValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TimeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeValue;


extern PyTypeObject *_PyNs3TimeValue_Type;
#define PyNs3TimeValue_Type (*_PyNs3TimeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdChecker;


extern PyTypeObject *_PyNs3TypeIdChecker_Type;
#define PyNs3TypeIdChecker_Type (*_PyNs3TypeIdChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdValue;


extern PyTypeObject *_PyNs3TypeIdValue_Type;
#define PyNs3TypeIdValue_Type (*_PyNs3TypeIdValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::UintegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UintegerValue;


extern PyTypeObject *_PyNs3UintegerValue_Type;
#define PyNs3UintegerValue_Type (*_PyNs3UintegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::DataOutputCallback *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataOutputCallback;


extern PyTypeObject PyNs3DataOutputCallback_Type;

extern std::map<void*, PyObject*> PyNs3DataOutputCallback_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FileHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FileHelper;


extern PyTypeObject PyNs3FileHelper_Type;

extern std::map<void*, PyObject*> PyNs3FileHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Gnuplot *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Gnuplot;


extern PyTypeObject PyNs3Gnuplot_Type;

extern std::map<void*, PyObject*> PyNs3Gnuplot_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GnuplotCollection *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GnuplotCollection;


extern PyTypeObject PyNs3GnuplotCollection_Type;

extern std::map<void*, PyObject*> PyNs3GnuplotCollection_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GnuplotDataset *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GnuplotDataset;


extern PyTypeObject PyNs3GnuplotDataset_Type;

extern std::map<void*, PyObject*> PyNs3GnuplotDataset_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GnuplotHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GnuplotHelper;


extern PyTypeObject PyNs3GnuplotHelper_Type;

extern std::map<void*, PyObject*> PyNs3GnuplotHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::StatisticalSummary *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3StatisticalSummary;


extern PyTypeObject PyNs3StatisticalSummary_Type;

class PyNs3StatisticalSummary__PythonHelper : public ns3::StatisticalSummary
{
public:
    PyObject *m_pyself;
    PyNs3StatisticalSummary__PythonHelper()
        : ns3::StatisticalSummary(), m_pyself(NULL)
        {}

    PyNs3StatisticalSummary__PythonHelper(ns3::StatisticalSummary const & arg0)
        : ns3::StatisticalSummary(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3StatisticalSummary__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual long int getCount() const;

    virtual double getMax() const;

    virtual double getMean() const;

    virtual double getMin() const;

    virtual double getSqrSum() const;

    virtual double getStddev() const;

    virtual double getSum() const;

    virtual double getVariance() const;
};

extern std::map<void*, PyObject*> PyNs3StatisticalSummary_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Gnuplot2dDataset *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Gnuplot2dDataset;


extern PyTypeObject PyNs3Gnuplot2dDataset_Type;


typedef struct {
    PyObject_HEAD
    ns3::Gnuplot2dFunction *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Gnuplot2dFunction;


extern PyTypeObject PyNs3Gnuplot2dFunction_Type;


typedef struct {
    PyObject_HEAD
    ns3::Gnuplot3dDataset *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Gnuplot3dDataset;


extern PyTypeObject PyNs3Gnuplot3dDataset_Type;


typedef struct {
    PyObject_HEAD
    ns3::Gnuplot3dFunction *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Gnuplot3dFunction;


extern PyTypeObject PyNs3Gnuplot3dFunction_Type;


typedef struct {
    PyObject_HEAD
    ns3::DataCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataCalculator;


extern PyTypeObject PyNs3DataCalculator_Type;


typedef struct {
    PyObject_HEAD
    ns3::DataCollectionObject *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataCollectionObject;


extern PyTypeObject PyNs3DataCollectionObject_Type;

class PyNs3DataCollectionObject__PythonHelper : public ns3::DataCollectionObject
{
public:
    PyObject *m_pyself;
    PyNs3DataCollectionObject__PythonHelper(ns3::DataCollectionObject const & arg0)
        : ns3::DataCollectionObject(arg0), m_pyself(NULL)
        {}

    PyNs3DataCollectionObject__PythonHelper()
        : ns3::DataCollectionObject(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DataCollectionObject__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3DataCollectionObject *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3DataCollectionObject *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3DataCollectionObject *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3DataCollectionObject *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool IsEnabled() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3DataCollectionObject__PythonHelper")
        .SetParent< ns3::DataCollectionObject > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3DataCollectionObject__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::DataCollector *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataCollector;


extern PyTypeObject PyNs3DataCollector_Type;

class PyNs3DataCollector__PythonHelper : public ns3::DataCollector
{
public:
    PyObject *m_pyself;
    PyNs3DataCollector__PythonHelper(ns3::DataCollector const & arg0)
        : ns3::DataCollector(arg0), m_pyself(NULL)
        {}

    PyNs3DataCollector__PythonHelper()
        : ns3::DataCollector(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DataCollector__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3DataCollector *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3DataCollector *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3DataCollector *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3DataCollector *self);
    inline void DoDispose__parent_caller()
    { ns3::DataCollector::DoDispose(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3DataCollector__PythonHelper")
        .SetParent< ns3::DataCollector > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3DataCollector__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::DataOutputInterface *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataOutputInterface;


extern PyTypeObject PyNs3DataOutputInterface_Type;

class PyNs3DataOutputInterface__PythonHelper : public ns3::DataOutputInterface
{
public:
    PyObject *m_pyself;
    PyNs3DataOutputInterface__PythonHelper(ns3::DataOutputInterface const & arg0)
        : ns3::DataOutputInterface(arg0), m_pyself(NULL)
        {}

    PyNs3DataOutputInterface__PythonHelper()
        : ns3::DataOutputInterface(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DataOutputInterface__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3DataOutputInterface *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3DataOutputInterface *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3DataOutputInterface *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3DataOutputInterface *self);
    inline void DoDispose__parent_caller()
    { ns3::DataOutputInterface::DoDispose(); }

    virtual void Output(ns3::DataCollector & dc);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3DataOutputInterface__PythonHelper")
        .SetParent< ns3::DataOutputInterface > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3DataOutputInterface__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::FileAggregator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FileAggregator;


extern PyTypeObject PyNs3FileAggregator_Type;


typedef struct {
    PyObject_HEAD
    ns3::GnuplotAggregator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3GnuplotAggregator;


extern PyTypeObject PyNs3GnuplotAggregator_Type;


typedef struct {
    PyObject_HEAD
    ns3::MinMaxAvgTotalCalculator< double > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MinMaxAvgTotalCalculator__Double;


extern PyTypeObject PyNs3MinMaxAvgTotalCalculator__Double_Type;

class PyNs3MinMaxAvgTotalCalculator__Double__PythonHelper : public ns3::MinMaxAvgTotalCalculator< double >
{
public:
    PyObject *m_pyself;
    PyNs3MinMaxAvgTotalCalculator__Double__PythonHelper(ns3::MinMaxAvgTotalCalculator< double > const & arg0)
        : ns3::MinMaxAvgTotalCalculator< double >(arg0), m_pyself(NULL)
        {}

    PyNs3MinMaxAvgTotalCalculator__Double__PythonHelper()
        : ns3::MinMaxAvgTotalCalculator< double >(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MinMaxAvgTotalCalculator__Double__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MinMaxAvgTotalCalculator__Double *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3MinMaxAvgTotalCalculator__Double *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MinMaxAvgTotalCalculator__Double *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3MinMaxAvgTotalCalculator__Double *self);
    inline void DoDispose__parent_caller()
    { ns3::MinMaxAvgTotalCalculator< double >::DoDispose(); }

    virtual long int getCount() const;

    virtual double getMax() const;

    virtual double getMean() const;

    virtual double getMin() const;

    virtual double getSqrSum() const;

    virtual double getStddev() const;

    virtual double getSum() const;

    virtual double getVariance() const;

    virtual void DoDispose();

    virtual void Stop(ns3::Time const & stopTime);

    virtual void Start(ns3::Time const & startTime);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MinMaxAvgTotalCalculator__Double__PythonHelper")
        .SetParent< ns3::MinMaxAvgTotalCalculator< double > > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MinMaxAvgTotalCalculator__Double__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::OmnetDataOutput *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OmnetDataOutput;


extern PyTypeObject PyNs3OmnetDataOutput_Type;

class PyNs3OmnetDataOutput__PythonHelper : public ns3::OmnetDataOutput
{
public:
    PyObject *m_pyself;
    PyNs3OmnetDataOutput__PythonHelper(ns3::OmnetDataOutput const & arg0)
        : ns3::OmnetDataOutput(arg0), m_pyself(NULL)
        {}

    PyNs3OmnetDataOutput__PythonHelper()
        : ns3::OmnetDataOutput(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3OmnetDataOutput__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3OmnetDataOutput *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3OmnetDataOutput *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3OmnetDataOutput *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3OmnetDataOutput *self);
    inline void DoDispose__parent_caller()
    { ns3::OmnetDataOutput::DoDispose(); }

    virtual void Output(ns3::DataCollector & dc);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3OmnetDataOutput__PythonHelper")
        .SetParent< ns3::OmnetDataOutput > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3OmnetDataOutput__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Probe *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Probe;


extern PyTypeObject PyNs3Probe_Type;

class PyNs3Probe__PythonHelper : public ns3::Probe
{
public:
    PyObject *m_pyself;
    PyNs3Probe__PythonHelper(ns3::Probe const & arg0)
        : ns3::Probe(arg0), m_pyself(NULL)
        {}

    PyNs3Probe__PythonHelper()
        : ns3::Probe(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Probe__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Probe *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Probe *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Probe *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Probe *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool ConnectByObject(std::string traceSource, ns3::Ptr< ns3::Object > obj);

    virtual void ConnectByPath(std::string path);

    virtual bool IsEnabled() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Probe__PythonHelper")
        .SetParent< ns3::Probe > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Probe__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SqliteDataOutput *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SqliteDataOutput;


extern PyTypeObject PyNs3SqliteDataOutput_Type;

class PyNs3SqliteDataOutput__PythonHelper : public ns3::SqliteDataOutput
{
public:
    PyObject *m_pyself;
    PyNs3SqliteDataOutput__PythonHelper(ns3::SqliteDataOutput const & arg0)
        : ns3::SqliteDataOutput(arg0), m_pyself(NULL)
        {}

    PyNs3SqliteDataOutput__PythonHelper()
        : ns3::SqliteDataOutput(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SqliteDataOutput__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SqliteDataOutput *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3SqliteDataOutput *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SqliteDataOutput *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3SqliteDataOutput *self);
    inline void DoDispose__parent_caller()
    { ns3::SqliteDataOutput::DoDispose(); }

    virtual void Output(ns3::DataCollector & dc);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SqliteDataOutput__PythonHelper")
        .SetParent< ns3::SqliteDataOutput > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SqliteDataOutput__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TimeMinMaxAvgTotalCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeMinMaxAvgTotalCalculator;


extern PyTypeObject PyNs3TimeMinMaxAvgTotalCalculator_Type;

class PyNs3TimeMinMaxAvgTotalCalculator__PythonHelper : public ns3::TimeMinMaxAvgTotalCalculator
{
public:
    PyObject *m_pyself;
    PyNs3TimeMinMaxAvgTotalCalculator__PythonHelper(ns3::TimeMinMaxAvgTotalCalculator const & arg0)
        : ns3::TimeMinMaxAvgTotalCalculator(arg0), m_pyself(NULL)
        {}

    PyNs3TimeMinMaxAvgTotalCalculator__PythonHelper()
        : ns3::TimeMinMaxAvgTotalCalculator(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TimeMinMaxAvgTotalCalculator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TimeMinMaxAvgTotalCalculator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3TimeMinMaxAvgTotalCalculator *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TimeMinMaxAvgTotalCalculator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3TimeMinMaxAvgTotalCalculator *self);
    inline void DoDispose__parent_caller()
    { ns3::TimeMinMaxAvgTotalCalculator::DoDispose(); }

    virtual void DoDispose();

    virtual void Stop(ns3::Time const & stopTime);

    virtual void Start(ns3::Time const & startTime);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TimeMinMaxAvgTotalCalculator__PythonHelper")
        .SetParent< ns3::TimeMinMaxAvgTotalCalculator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TimeMinMaxAvgTotalCalculator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TimeProbe *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeProbe;


extern PyTypeObject PyNs3TimeProbe_Type;

class PyNs3TimeProbe__PythonHelper : public ns3::TimeProbe
{
public:
    PyObject *m_pyself;
    PyNs3TimeProbe__PythonHelper(ns3::TimeProbe const & arg0)
        : ns3::TimeProbe(arg0), m_pyself(NULL)
        {}

    PyNs3TimeProbe__PythonHelper()
        : ns3::TimeProbe(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TimeProbe__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TimeProbe *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3TimeProbe *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TimeProbe *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3TimeProbe *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool ConnectByObject(std::string traceSource, ns3::Ptr< ns3::Object > obj);

    virtual void ConnectByPath(std::string path);

    virtual bool IsEnabled() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TimeProbe__PythonHelper")
        .SetParent< ns3::TimeProbe > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TimeProbe__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TimeSeriesAdaptor *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeSeriesAdaptor;


extern PyTypeObject PyNs3TimeSeriesAdaptor_Type;


typedef struct {
    PyObject_HEAD
    ns3::Uinteger16Probe *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Uinteger16Probe;


extern PyTypeObject PyNs3Uinteger16Probe_Type;

class PyNs3Uinteger16Probe__PythonHelper : public ns3::Uinteger16Probe
{
public:
    PyObject *m_pyself;
    PyNs3Uinteger16Probe__PythonHelper(ns3::Uinteger16Probe const & arg0)
        : ns3::Uinteger16Probe(arg0), m_pyself(NULL)
        {}

    PyNs3Uinteger16Probe__PythonHelper()
        : ns3::Uinteger16Probe(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Uinteger16Probe__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Uinteger16Probe *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Uinteger16Probe *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Uinteger16Probe *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Uinteger16Probe *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool ConnectByObject(std::string traceSource, ns3::Ptr< ns3::Object > obj);

    virtual void ConnectByPath(std::string path);

    virtual bool IsEnabled() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Uinteger16Probe__PythonHelper")
        .SetParent< ns3::Uinteger16Probe > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Uinteger16Probe__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Uinteger32Probe *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Uinteger32Probe;


extern PyTypeObject PyNs3Uinteger32Probe_Type;

class PyNs3Uinteger32Probe__PythonHelper : public ns3::Uinteger32Probe
{
public:
    PyObject *m_pyself;
    PyNs3Uinteger32Probe__PythonHelper(ns3::Uinteger32Probe const & arg0)
        : ns3::Uinteger32Probe(arg0), m_pyself(NULL)
        {}

    PyNs3Uinteger32Probe__PythonHelper()
        : ns3::Uinteger32Probe(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Uinteger32Probe__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Uinteger32Probe *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Uinteger32Probe *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Uinteger32Probe *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Uinteger32Probe *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool ConnectByObject(std::string traceSource, ns3::Ptr< ns3::Object > obj);

    virtual void ConnectByPath(std::string path);

    virtual bool IsEnabled() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Uinteger32Probe__PythonHelper")
        .SetParent< ns3::Uinteger32Probe > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Uinteger32Probe__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Uinteger8Probe *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Uinteger8Probe;


extern PyTypeObject PyNs3Uinteger8Probe_Type;

class PyNs3Uinteger8Probe__PythonHelper : public ns3::Uinteger8Probe
{
public:
    PyObject *m_pyself;
    PyNs3Uinteger8Probe__PythonHelper(ns3::Uinteger8Probe const & arg0)
        : ns3::Uinteger8Probe(arg0), m_pyself(NULL)
        {}

    PyNs3Uinteger8Probe__PythonHelper()
        : ns3::Uinteger8Probe(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Uinteger8Probe__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Uinteger8Probe *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Uinteger8Probe *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Uinteger8Probe *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Uinteger8Probe *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool ConnectByObject(std::string traceSource, ns3::Ptr< ns3::Object > obj);

    virtual void ConnectByPath(std::string path);

    virtual bool IsEnabled() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Uinteger8Probe__PythonHelper")
        .SetParent< ns3::Uinteger8Probe > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Uinteger8Probe__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::BooleanProbe *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanProbe;


extern PyTypeObject PyNs3BooleanProbe_Type;

class PyNs3BooleanProbe__PythonHelper : public ns3::BooleanProbe
{
public:
    PyObject *m_pyself;
    PyNs3BooleanProbe__PythonHelper(ns3::BooleanProbe const & arg0)
        : ns3::BooleanProbe(arg0), m_pyself(NULL)
        {}

    PyNs3BooleanProbe__PythonHelper()
        : ns3::BooleanProbe(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BooleanProbe__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3BooleanProbe *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3BooleanProbe *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3BooleanProbe *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3BooleanProbe *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool ConnectByObject(std::string traceSource, ns3::Ptr< ns3::Object > obj);

    virtual void ConnectByPath(std::string path);

    virtual bool IsEnabled() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3BooleanProbe__PythonHelper")
        .SetParent< ns3::BooleanProbe > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3BooleanProbe__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::DoubleProbe *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DoubleProbe;


extern PyTypeObject PyNs3DoubleProbe_Type;

class PyNs3DoubleProbe__PythonHelper : public ns3::DoubleProbe
{
public:
    PyObject *m_pyself;
    PyNs3DoubleProbe__PythonHelper(ns3::DoubleProbe const & arg0)
        : ns3::DoubleProbe(arg0), m_pyself(NULL)
        {}

    PyNs3DoubleProbe__PythonHelper()
        : ns3::DoubleProbe(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DoubleProbe__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3DoubleProbe *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3DoubleProbe *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3DoubleProbe *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3DoubleProbe *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool ConnectByObject(std::string traceSource, ns3::Ptr< ns3::Object > obj);

    virtual void ConnectByPath(std::string path);

    virtual bool IsEnabled() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3DoubleProbe__PythonHelper")
        .SetParent< ns3::DoubleProbe > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3DoubleProbe__PythonHelper);

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Implementation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashImplementation;


extern PyTypeObject *_PyNs3HashImplementation_Type;
#define PyNs3HashImplementation_Type (*_PyNs3HashImplementation_Type)

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Fnv1a *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionFnv1a;


extern PyTypeObject *_PyNs3HashFunctionFnv1a_Type;
#define PyNs3HashFunctionFnv1a_Type (*_PyNs3HashFunctionFnv1a_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash32 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash32;


extern PyTypeObject *_PyNs3HashFunctionHash32_Type;
#define PyNs3HashFunctionHash32_Type (*_PyNs3HashFunctionHash32_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash64 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash64;


extern PyTypeObject *_PyNs3HashFunctionHash64_Type;
#define PyNs3HashFunctionHash64_Type (*_PyNs3HashFunctionHash64_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Murmur3 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionMurmur3;


extern PyTypeObject *_PyNs3HashFunctionMurmur3_Type;
#define PyNs3HashFunctionMurmur3_Type (*_PyNs3HashFunctionMurmur3_Type)

