/* This file was generated by PyBindGen 0.0.0.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#ifndef PyVarObject_HEAD_INIT
#define PyVarObject_HEAD_INIT(type, size) \
        PyObject_HEAD_INIT(type) size,
#endif


#if PY_VERSION_HEX >= 0x03000000
typedef void* cmpfunc;
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif


#include "ns3/internet-module.h"
#include <ostream>
#include <sstream>
#include <typeinfo>
#include <map>
#include <iostream>
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Address;


extern PyTypeObject *_PyNs3Address_Type;
#define PyNs3Address_Type (*_PyNs3Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Address_wrapper_registry;
#define PyNs3Address_wrapper_registry (*_PyNs3Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AsciiTraceHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AsciiTraceHelper;


extern PyTypeObject *_PyNs3AsciiTraceHelper_Type;
#define PyNs3AsciiTraceHelper_Type (*_PyNs3AsciiTraceHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3AsciiTraceHelper_wrapper_registry;
#define PyNs3AsciiTraceHelper_wrapper_registry (*_PyNs3AsciiTraceHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AsciiTraceHelperForDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AsciiTraceHelperForDevice;


extern PyTypeObject *_PyNs3AsciiTraceHelperForDevice_Type;
#define PyNs3AsciiTraceHelperForDevice_Type (*_PyNs3AsciiTraceHelperForDevice_Type)

class PyNs3AsciiTraceHelperForDevice__PythonHelper : public ns3::AsciiTraceHelperForDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AsciiTraceHelperForDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3AsciiTraceHelperForDevice_wrapper_registry;
#define PyNs3AsciiTraceHelperForDevice_wrapper_registry (*_PyNs3AsciiTraceHelperForDevice_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionList;


extern PyTypeObject *_PyNs3AttributeConstructionList_Type;
#define PyNs3AttributeConstructionList_Type (*_PyNs3AttributeConstructionList_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionList_wrapper_registry;
#define PyNs3AttributeConstructionList_wrapper_registry (*_PyNs3AttributeConstructionList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionListItem;


extern PyTypeObject *_PyNs3AttributeConstructionListItem_Type;
#define PyNs3AttributeConstructionListItem_Type (*_PyNs3AttributeConstructionListItem_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionListItem_wrapper_registry;
#define PyNs3AttributeConstructionListItem_wrapper_registry (*_PyNs3AttributeConstructionListItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Buffer;


extern PyTypeObject *_PyNs3Buffer_Type;
#define PyNs3Buffer_Type (*_PyNs3Buffer_Type)

extern std::map<void*, PyObject*> *_PyNs3Buffer_wrapper_registry;
#define PyNs3Buffer_wrapper_registry (*_PyNs3Buffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BufferIterator;


extern PyTypeObject *_PyNs3BufferIterator_Type;
#define PyNs3BufferIterator_Type (*_PyNs3BufferIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3BufferIterator_wrapper_registry;
#define PyNs3BufferIterator_wrapper_registry (*_PyNs3BufferIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIterator;


extern PyTypeObject *_PyNs3ByteTagIterator_Type;
#define PyNs3ByteTagIterator_Type (*_PyNs3ByteTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIterator_wrapper_registry;
#define PyNs3ByteTagIterator_wrapper_registry (*_PyNs3ByteTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIteratorItem;


extern PyTypeObject *_PyNs3ByteTagIteratorItem_Type;
#define PyNs3ByteTagIteratorItem_Type (*_PyNs3ByteTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIteratorItem_wrapper_registry;
#define PyNs3ByteTagIteratorItem_wrapper_registry (*_PyNs3ByteTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagList;


extern PyTypeObject *_PyNs3ByteTagList_Type;
#define PyNs3ByteTagList_Type (*_PyNs3ByteTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagList_wrapper_registry;
#define PyNs3ByteTagList_wrapper_registry (*_PyNs3ByteTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIterator;


extern PyTypeObject *_PyNs3ByteTagListIterator_Type;
#define PyNs3ByteTagListIterator_Type (*_PyNs3ByteTagListIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIterator_wrapper_registry;
#define PyNs3ByteTagListIterator_wrapper_registry (*_PyNs3ByteTagListIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIteratorItem;


extern PyTypeObject *_PyNs3ByteTagListIteratorItem_Type;
#define PyNs3ByteTagListIteratorItem_Type (*_PyNs3ByteTagListIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIteratorItem_wrapper_registry;
#define PyNs3ByteTagListIteratorItem_wrapper_registry (*_PyNs3ByteTagListIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::CallbackBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackBase;


extern PyTypeObject *_PyNs3CallbackBase_Type;
#define PyNs3CallbackBase_Type (*_PyNs3CallbackBase_Type)

extern std::map<void*, PyObject*> *_PyNs3CallbackBase_wrapper_registry;
#define PyNs3CallbackBase_wrapper_registry (*_PyNs3CallbackBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EventId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventId;


extern PyTypeObject *_PyNs3EventId_Type;
#define PyNs3EventId_Type (*_PyNs3EventId_Type)

extern std::map<void*, PyObject*> *_PyNs3EventId_wrapper_registry;
#define PyNs3EventId_wrapper_registry (*_PyNs3EventId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Hasher *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Hasher;


extern PyTypeObject *_PyNs3Hasher_Type;
#define PyNs3Hasher_Type (*_PyNs3Hasher_Type)

extern std::map<void*, PyObject*> *_PyNs3Hasher_wrapper_registry;
#define PyNs3Hasher_wrapper_registry (*_PyNs3Hasher_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Inet6SocketAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Inet6SocketAddress;


extern PyTypeObject *_PyNs3Inet6SocketAddress_Type;
#define PyNs3Inet6SocketAddress_Type (*_PyNs3Inet6SocketAddress_Type)

extern std::map<void*, PyObject*> *_PyNs3Inet6SocketAddress_wrapper_registry;
#define PyNs3Inet6SocketAddress_wrapper_registry (*_PyNs3Inet6SocketAddress_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::InetSocketAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3InetSocketAddress;


extern PyTypeObject *_PyNs3InetSocketAddress_Type;
#define PyNs3InetSocketAddress_Type (*_PyNs3InetSocketAddress_Type)

extern std::map<void*, PyObject*> *_PyNs3InetSocketAddress_wrapper_registry;
#define PyNs3InetSocketAddress_wrapper_registry (*_PyNs3InetSocketAddress_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 0 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__0;


extern PyTypeObject *_PyNs3IntToType__0_Type;
#define PyNs3IntToType__0_Type (*_PyNs3IntToType__0_Type)

extern std::map<void*, PyObject*> *_PyNs3IntToType__0_wrapper_registry;
#define PyNs3IntToType__0_wrapper_registry (*_PyNs3IntToType__0_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 1 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__1;


extern PyTypeObject *_PyNs3IntToType__1_Type;
#define PyNs3IntToType__1_Type (*_PyNs3IntToType__1_Type)

extern std::map<void*, PyObject*> *_PyNs3IntToType__1_wrapper_registry;
#define PyNs3IntToType__1_wrapper_registry (*_PyNs3IntToType__1_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 2 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__2;


extern PyTypeObject *_PyNs3IntToType__2_Type;
#define PyNs3IntToType__2_Type (*_PyNs3IntToType__2_Type)

extern std::map<void*, PyObject*> *_PyNs3IntToType__2_wrapper_registry;
#define PyNs3IntToType__2_wrapper_registry (*_PyNs3IntToType__2_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 3 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__3;


extern PyTypeObject *_PyNs3IntToType__3_Type;
#define PyNs3IntToType__3_Type (*_PyNs3IntToType__3_Type)

extern std::map<void*, PyObject*> *_PyNs3IntToType__3_wrapper_registry;
#define PyNs3IntToType__3_wrapper_registry (*_PyNs3IntToType__3_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 4 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__4;


extern PyTypeObject *_PyNs3IntToType__4_Type;
#define PyNs3IntToType__4_Type (*_PyNs3IntToType__4_Type)

extern std::map<void*, PyObject*> *_PyNs3IntToType__4_wrapper_registry;
#define PyNs3IntToType__4_wrapper_registry (*_PyNs3IntToType__4_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 5 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__5;


extern PyTypeObject *_PyNs3IntToType__5_Type;
#define PyNs3IntToType__5_Type (*_PyNs3IntToType__5_Type)

extern std::map<void*, PyObject*> *_PyNs3IntToType__5_wrapper_registry;
#define PyNs3IntToType__5_wrapper_registry (*_PyNs3IntToType__5_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 6 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__6;


extern PyTypeObject *_PyNs3IntToType__6_Type;
#define PyNs3IntToType__6_Type (*_PyNs3IntToType__6_Type)

extern std::map<void*, PyObject*> *_PyNs3IntToType__6_wrapper_registry;
#define PyNs3IntToType__6_wrapper_registry (*_PyNs3IntToType__6_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Address;


extern PyTypeObject *_PyNs3Ipv4Address_Type;
#define PyNs3Ipv4Address_Type (*_PyNs3Ipv4Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Address_wrapper_registry;
#define PyNs3Ipv4Address_wrapper_registry (*_PyNs3Ipv4Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Mask *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Mask;


extern PyTypeObject *_PyNs3Ipv4Mask_Type;
#define PyNs3Ipv4Mask_Type (*_PyNs3Ipv4Mask_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Mask_wrapper_registry;
#define PyNs3Ipv4Mask_wrapper_registry (*_PyNs3Ipv4Mask_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Address;


extern PyTypeObject *_PyNs3Ipv6Address_Type;
#define PyNs3Ipv6Address_Type (*_PyNs3Ipv6Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Address_wrapper_registry;
#define PyNs3Ipv6Address_wrapper_registry (*_PyNs3Ipv6Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Prefix *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Prefix;


extern PyTypeObject *_PyNs3Ipv6Prefix_Type;
#define PyNs3Ipv6Prefix_Type (*_PyNs3Ipv6Prefix_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Prefix_wrapper_registry;
#define PyNs3Ipv6Prefix_wrapper_registry (*_PyNs3Ipv6Prefix_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Mac48Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48Address;


extern PyTypeObject *_PyNs3Mac48Address_Type;
#define PyNs3Mac48Address_Type (*_PyNs3Mac48Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Mac48Address_wrapper_registry;
#define PyNs3Mac48Address_wrapper_registry (*_PyNs3Mac48Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NetDeviceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDeviceContainer;


extern PyTypeObject *_PyNs3NetDeviceContainer_Type;
#define PyNs3NetDeviceContainer_Type (*_PyNs3NetDeviceContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NetDeviceContainer_wrapper_registry;
#define PyNs3NetDeviceContainer_wrapper_registry (*_PyNs3NetDeviceContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NodeContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NodeContainer;


extern PyTypeObject *_PyNs3NodeContainer_Type;
#define PyNs3NodeContainer_Type (*_PyNs3NodeContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NodeContainer_wrapper_registry;
#define PyNs3NodeContainer_wrapper_registry (*_PyNs3NodeContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectBase;


extern PyTypeObject *_PyNs3ObjectBase_Type;
#define PyNs3ObjectBase_Type (*_PyNs3ObjectBase_Type)

class PyNs3ObjectBase__PythonHelper : public ns3::ObjectBase
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ObjectBase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3ObjectBase_wrapper_registry;
#define PyNs3ObjectBase_wrapper_registry (*_PyNs3ObjectBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectDeleter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectDeleter;


extern PyTypeObject *_PyNs3ObjectDeleter_Type;
#define PyNs3ObjectDeleter_Type (*_PyNs3ObjectDeleter_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectDeleter_wrapper_registry;
#define PyNs3ObjectDeleter_wrapper_registry (*_PyNs3ObjectDeleter_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactory;


extern PyTypeObject *_PyNs3ObjectFactory_Type;
#define PyNs3ObjectFactory_Type (*_PyNs3ObjectFactory_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectFactory_wrapper_registry;
#define PyNs3ObjectFactory_wrapper_registry (*_PyNs3ObjectFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadata;


extern PyTypeObject *_PyNs3PacketMetadata_Type;
#define PyNs3PacketMetadata_Type (*_PyNs3PacketMetadata_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadata_wrapper_registry;
#define PyNs3PacketMetadata_wrapper_registry (*_PyNs3PacketMetadata_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItem;


extern PyTypeObject *_PyNs3PacketMetadataItem_Type;
#define PyNs3PacketMetadataItem_Type (*_PyNs3PacketMetadataItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItem_wrapper_registry;
#define PyNs3PacketMetadataItem_wrapper_registry (*_PyNs3PacketMetadataItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::ItemIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItemIterator;


extern PyTypeObject *_PyNs3PacketMetadataItemIterator_Type;
#define PyNs3PacketMetadataItemIterator_Type (*_PyNs3PacketMetadataItemIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItemIterator_wrapper_registry;
#define PyNs3PacketMetadataItemIterator_wrapper_registry (*_PyNs3PacketMetadataItemIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIterator;


extern PyTypeObject *_PyNs3PacketTagIterator_Type;
#define PyNs3PacketTagIterator_Type (*_PyNs3PacketTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIterator_wrapper_registry;
#define PyNs3PacketTagIterator_wrapper_registry (*_PyNs3PacketTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIteratorItem;


extern PyTypeObject *_PyNs3PacketTagIteratorItem_Type;
#define PyNs3PacketTagIteratorItem_Type (*_PyNs3PacketTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIteratorItem_wrapper_registry;
#define PyNs3PacketTagIteratorItem_wrapper_registry (*_PyNs3PacketTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagList;


extern PyTypeObject *_PyNs3PacketTagList_Type;
#define PyNs3PacketTagList_Type (*_PyNs3PacketTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagList_wrapper_registry;
#define PyNs3PacketTagList_wrapper_registry (*_PyNs3PacketTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList::TagData *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagListTagData;


extern PyTypeObject *_PyNs3PacketTagListTagData_Type;
#define PyNs3PacketTagListTagData_Type (*_PyNs3PacketTagListTagData_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagListTagData_wrapper_registry;
#define PyNs3PacketTagListTagData_wrapper_registry (*_PyNs3PacketTagListTagData_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapFile *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapFile;


extern PyTypeObject *_PyNs3PcapFile_Type;
#define PyNs3PcapFile_Type (*_PyNs3PcapFile_Type)

extern std::map<void*, PyObject*> *_PyNs3PcapFile_wrapper_registry;
#define PyNs3PcapFile_wrapper_registry (*_PyNs3PcapFile_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapHelper;


extern PyTypeObject *_PyNs3PcapHelper_Type;
#define PyNs3PcapHelper_Type (*_PyNs3PcapHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3PcapHelper_wrapper_registry;
#define PyNs3PcapHelper_wrapper_registry (*_PyNs3PcapHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PcapHelperForDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapHelperForDevice;


extern PyTypeObject *_PyNs3PcapHelperForDevice_Type;
#define PyNs3PcapHelperForDevice_Type (*_PyNs3PcapHelperForDevice_Type)

class PyNs3PcapHelperForDevice__PythonHelper : public ns3::PcapHelperForDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PcapHelperForDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3PcapHelperForDevice_wrapper_registry;
#define PyNs3PcapHelperForDevice_wrapper_registry (*_PyNs3PcapHelperForDevice_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SequenceNumber32 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequenceNumber32;


extern PyTypeObject *_PyNs3SequenceNumber32_Type;
#define PyNs3SequenceNumber32_Type (*_PyNs3SequenceNumber32_Type)

extern std::map<void*, PyObject*> *_PyNs3SequenceNumber32_wrapper_registry;
#define PyNs3SequenceNumber32_wrapper_registry (*_PyNs3SequenceNumber32_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type)



#include <map>
#include <string>
#include <typeinfo>
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)
# include <cxxabi.h>
#endif

#define PBG_TYPEMAP_DEBUG 0

namespace pybindgen {

class TypeMap
{
   std::map<std::string, PyTypeObject *> m_map;

public:

   TypeMap() {}

   void register_wrapper(const std::type_info &cpp_type_info, PyTypeObject *python_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "register_wrapper(this=" << this << ", type_name=" << cpp_type_info.name()
             << ", python_wrapper=" << python_wrapper->tp_name << ")" << std::endl;
#endif

       m_map[std::string(cpp_type_info.name())] = python_wrapper;
   }



   PyTypeObject * lookup_wrapper(const std::type_info &cpp_type_info, PyTypeObject *fallback_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "lookup_wrapper(this=" << this << ", type_name=" << cpp_type_info.name() << ")" << std::endl;
#endif

       PyTypeObject *python_wrapper = m_map[cpp_type_info.name()];
       if (python_wrapper)
           return python_wrapper;
       else {
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)

           // Get closest (in the single inheritance tree provided by cxxabi.h)
           // registered python wrapper.
           const abi::__si_class_type_info *_typeinfo =
               dynamic_cast<const abi::__si_class_type_info*> (&cpp_type_info);
#if PBG_TYPEMAP_DEBUG
          std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           while (_typeinfo && (python_wrapper = m_map[std::string(_typeinfo->name())]) == 0) {
               _typeinfo = dynamic_cast<const abi::__si_class_type_info*> (_typeinfo->__base_type);
#if PBG_TYPEMAP_DEBUG
               std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           }

#if PBG_TYPEMAP_DEBUG
          if (python_wrapper) {
              std::cerr << "  -> found match " << std::endl;
          } else {
              std::cerr << "  -> return fallback wrapper" << std::endl;
          }
#endif

           return python_wrapper? python_wrapper : fallback_wrapper;

#else // non gcc 3+ compilers can only match against explicitly registered classes, not hidden subclasses
           return fallback_wrapper;
#endif
       }
   }
};

}


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;

#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Simulator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Simulator;


extern PyTypeObject *_PyNs3Simulator_Type;
#define PyNs3Simulator_Type (*_PyNs3Simulator_Type)

extern std::map<void*, PyObject*> *_PyNs3Simulator_wrapper_registry;
#define PyNs3Simulator_wrapper_registry (*_PyNs3Simulator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Tag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Tag;


extern PyTypeObject *_PyNs3Tag_Type;
#define PyNs3Tag_Type (*_PyNs3Tag_Type)


typedef struct {
    PyObject_HEAD
    ns3::TagBuffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TagBuffer;


extern PyTypeObject *_PyNs3TagBuffer_Type;
#define PyNs3TagBuffer_Type (*_PyNs3TagBuffer_Type)

extern std::map<void*, PyObject*> *_PyNs3TagBuffer_wrapper_registry;
#define PyNs3TagBuffer_wrapper_registry (*_PyNs3TagBuffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TimeWithUnit *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeWithUnit;


extern PyTypeObject *_PyNs3TimeWithUnit_Type;
#define PyNs3TimeWithUnit_Type (*_PyNs3TimeWithUnit_Type)

extern std::map<void*, PyObject*> *_PyNs3TimeWithUnit_wrapper_registry;
#define PyNs3TimeWithUnit_wrapper_registry (*_PyNs3TimeWithUnit_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Timer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Timer;


extern PyTypeObject *_PyNs3Timer_Type;
#define PyNs3Timer_Type (*_PyNs3Timer_Type)

extern std::map<void*, PyObject*> *_PyNs3Timer_wrapper_registry;
#define PyNs3Timer_wrapper_registry (*_PyNs3Timer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TimerImpl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimerImpl;


extern PyTypeObject *_PyNs3TimerImpl_Type;
#define PyNs3TimerImpl_Type (*_PyNs3TimerImpl_Type)

class PyNs3TimerImpl__PythonHelper : public ns3::TimerImpl
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TimerImpl__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3TimerImpl_wrapper_registry;
#define PyNs3TimerImpl_wrapper_registry (*_PyNs3TimerImpl_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< double > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Double;


extern PyTypeObject *_PyNs3TracedValue__Double_Type;
#define PyNs3TracedValue__Double_Type (*_PyNs3TracedValue__Double_Type)

extern std::map<void*, PyObject*> *_PyNs3TracedValue__Double_wrapper_registry;
#define PyNs3TracedValue__Double_wrapper_registry (*_PyNs3TracedValue__Double_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< ns3::SequenceNumber<unsigned int, int> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Ns3SequenceNumber__lt__unsigned_int__int__gt__;


extern PyTypeObject *_PyNs3TracedValue__Ns3SequenceNumber__lt__unsigned_int__int__gt___Type;
#define PyNs3TracedValue__Ns3SequenceNumber__lt__unsigned_int__int__gt___Type (*_PyNs3TracedValue__Ns3SequenceNumber__lt__unsigned_int__int__gt___Type)

extern std::map<void*, PyObject*> *_PyNs3TracedValue__Ns3SequenceNumber__lt__unsigned_int__int__gt___wrapper_registry;
#define PyNs3TracedValue__Ns3SequenceNumber__lt__unsigned_int__int__gt___wrapper_registry (*_PyNs3TracedValue__Ns3SequenceNumber__lt__unsigned_int__int__gt___wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< unsigned int > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Unsigned_int;


extern PyTypeObject *_PyNs3TracedValue__Unsigned_int_Type;
#define PyNs3TracedValue__Unsigned_int_Type (*_PyNs3TracedValue__Unsigned_int_Type)

extern std::map<void*, PyObject*> *_PyNs3TracedValue__Unsigned_int_wrapper_registry;
#define PyNs3TracedValue__Unsigned_int_wrapper_registry (*_PyNs3TracedValue__Unsigned_int_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeId;


extern PyTypeObject *_PyNs3TypeId_Type;
#define PyNs3TypeId_Type (*_PyNs3TypeId_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeId_wrapper_registry;
#define PyNs3TypeId_wrapper_registry (*_PyNs3TypeId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::AttributeInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdAttributeInformation;


extern PyTypeObject *_PyNs3TypeIdAttributeInformation_Type;
#define PyNs3TypeIdAttributeInformation_Type (*_PyNs3TypeIdAttributeInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdAttributeInformation_wrapper_registry;
#define PyNs3TypeIdAttributeInformation_wrapper_registry (*_PyNs3TypeIdAttributeInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::TraceSourceInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdTraceSourceInformation;


extern PyTypeObject *_PyNs3TypeIdTraceSourceInformation_Type;
#define PyNs3TypeIdTraceSourceInformation_Type (*_PyNs3TypeIdTraceSourceInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdTraceSourceInformation_wrapper_registry;
#define PyNs3TypeIdTraceSourceInformation_wrapper_registry (*_PyNs3TypeIdTraceSourceInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::empty *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Empty;


extern PyTypeObject *_PyNs3Empty_Type;
#define PyNs3Empty_Type (*_PyNs3Empty_Type)

extern std::map<void*, PyObject*> *_PyNs3Empty_wrapper_registry;
#define PyNs3Empty_wrapper_registry (*_PyNs3Empty_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::int64x64_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Int64x64_t;


extern PyTypeObject *_PyNs3Int64x64_t_Type;
#define PyNs3Int64x64_t_Type (*_PyNs3Int64x64_t_Type)

extern std::map<void*, PyObject*> *_PyNs3Int64x64_t_wrapper_registry;
#define PyNs3Int64x64_t_wrapper_registry (*_PyNs3Int64x64_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Chunk *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Chunk;


extern PyTypeObject *_PyNs3Chunk_Type;
#define PyNs3Chunk_Type (*_PyNs3Chunk_Type)


typedef struct {
    PyObject_HEAD
    ns3::Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Header;


extern PyTypeObject *_PyNs3Header_Type;
#define PyNs3Header_Type (*_PyNs3Header_Type)


typedef struct {
    PyObject_HEAD
    ns3::Object *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Object;


extern PyTypeObject *_PyNs3Object_Type;
#define PyNs3Object_Type (*_PyNs3Object_Type)

class PyNs3Object__PythonHelper : public ns3::Object
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Object__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Object::AggregateIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectAggregateIterator;


extern PyTypeObject *_PyNs3ObjectAggregateIterator_Type;
#define PyNs3ObjectAggregateIterator_Type (*_PyNs3ObjectAggregateIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectAggregateIterator_wrapper_registry;
#define PyNs3ObjectAggregateIterator_wrapper_registry (*_PyNs3ObjectAggregateIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketFilter *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketFilter;


extern PyTypeObject *_PyNs3PacketFilter_Type;
#define PyNs3PacketFilter_Type (*_PyNs3PacketFilter_Type)

class PyNs3PacketFilter__PythonHelper : public ns3::PacketFilter
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PacketFilter__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::PcapFileWrapper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapFileWrapper;


extern PyTypeObject *_PyNs3PcapFileWrapper_Type;
#define PyNs3PcapFileWrapper_Type (*_PyNs3PcapFileWrapper_Type)


typedef struct {
    PyObject_HEAD
    ns3::Queue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Queue;


extern PyTypeObject *_PyNs3Queue_Type;
#define PyNs3Queue_Type (*_PyNs3Queue_Type)

class PyNs3Queue__PythonHelper : public ns3::Queue
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Queue__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::QueueDisc *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueDisc;


extern PyTypeObject *_PyNs3QueueDisc_Type;
#define PyNs3QueueDisc_Type (*_PyNs3QueueDisc_Type)

class PyNs3QueueDisc__PythonHelper : public ns3::QueueDisc
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3QueueDisc__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::QueueDiscClass *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueDiscClass;


extern PyTypeObject *_PyNs3QueueDiscClass_Type;
#define PyNs3QueueDiscClass_Type (*_PyNs3QueueDiscClass_Type)

class PyNs3QueueDiscClass__PythonHelper : public ns3::QueueDiscClass
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3QueueDiscClass__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RandomVariableStream *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableStream;


extern PyTypeObject *_PyNs3RandomVariableStream_Type;
#define PyNs3RandomVariableStream_Type (*_PyNs3RandomVariableStream_Type)

class PyNs3RandomVariableStream__PythonHelper : public ns3::RandomVariableStream
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomVariableStream__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SequentialRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequentialRandomVariable;


extern PyTypeObject *_PyNs3SequentialRandomVariable_Type;
#define PyNs3SequentialRandomVariable_Type (*_PyNs3SequentialRandomVariable_Type)

class PyNs3SequentialRandomVariable__PythonHelper : public ns3::SequentialRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SequentialRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;
#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;
#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type;
#define PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type (*_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___Type;
#define PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___Type (*_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type;
#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type;
#define PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type (*_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type;
#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type;
#define PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type (*_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Socket *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Socket;


extern PyTypeObject *_PyNs3Socket_Type;
#define PyNs3Socket_Type (*_PyNs3Socket_Type)

class PyNs3Socket__PythonHelper : public ns3::Socket
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Socket__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SocketFactory *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketFactory;


extern PyTypeObject *_PyNs3SocketFactory_Type;
#define PyNs3SocketFactory_Type (*_PyNs3SocketFactory_Type)

class PyNs3SocketFactory__PythonHelper : public ns3::SocketFactory
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SocketFactory__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SocketIpTosTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpTosTag;


extern PyTypeObject *_PyNs3SocketIpTosTag_Type;
#define PyNs3SocketIpTosTag_Type (*_PyNs3SocketIpTosTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketIpTtlTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpTtlTag;


extern PyTypeObject *_PyNs3SocketIpTtlTag_Type;
#define PyNs3SocketIpTtlTag_Type (*_PyNs3SocketIpTtlTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketIpv6HopLimitTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpv6HopLimitTag;


extern PyTypeObject *_PyNs3SocketIpv6HopLimitTag_Type;
#define PyNs3SocketIpv6HopLimitTag_Type (*_PyNs3SocketIpv6HopLimitTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketIpv6TclassTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpv6TclassTag;


extern PyTypeObject *_PyNs3SocketIpv6TclassTag_Type;
#define PyNs3SocketIpv6TclassTag_Type (*_PyNs3SocketIpv6TclassTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketPriorityTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketPriorityTag;


extern PyTypeObject *_PyNs3SocketPriorityTag_Type;
#define PyNs3SocketPriorityTag_Type (*_PyNs3SocketPriorityTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketSetDontFragmentTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketSetDontFragmentTag;


extern PyTypeObject *_PyNs3SocketSetDontFragmentTag_Type;
#define PyNs3SocketSetDontFragmentTag_Type (*_PyNs3SocketSetDontFragmentTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::Time *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Time;


extern PyTypeObject *_PyNs3Time_Type;
#define PyNs3Time_Type (*_PyNs3Time_Type)

extern std::map<void*, PyObject*> *_PyNs3Time_wrapper_registry;
#define PyNs3Time_wrapper_registry (*_PyNs3Time_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TraceSourceAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TraceSourceAccessor;


extern PyTypeObject *_PyNs3TraceSourceAccessor_Type;
#define PyNs3TraceSourceAccessor_Type (*_PyNs3TraceSourceAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::TracedValue< ns3::Time > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Ns3Time;


extern PyTypeObject *_PyNs3TracedValue__Ns3Time_Type;
#define PyNs3TracedValue__Ns3Time_Type (*_PyNs3TracedValue__Ns3Time_Type)

extern std::map<void*, PyObject*> *_PyNs3TracedValue__Ns3Time_wrapper_registry;
#define PyNs3TracedValue__Ns3Time_wrapper_registry (*_PyNs3TracedValue__Ns3Time_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TrafficControlLayer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TrafficControlLayer;


extern PyTypeObject *_PyNs3TrafficControlLayer_Type;
#define PyNs3TrafficControlLayer_Type (*_PyNs3TrafficControlLayer_Type)

class PyNs3TrafficControlLayer__PythonHelper : public ns3::TrafficControlLayer
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TrafficControlLayer__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Trailer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Trailer;


extern PyTypeObject *_PyNs3Trailer_Type;
#define PyNs3Trailer_Type (*_PyNs3Trailer_Type)


typedef struct {
    PyObject_HEAD
    ns3::TriangularRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TriangularRandomVariable;


extern PyTypeObject *_PyNs3TriangularRandomVariable_Type;
#define PyNs3TriangularRandomVariable_Type (*_PyNs3TriangularRandomVariable_Type)

class PyNs3TriangularRandomVariable__PythonHelper : public ns3::TriangularRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TriangularRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::UniformRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UniformRandomVariable;


extern PyTypeObject *_PyNs3UniformRandomVariable_Type;
#define PyNs3UniformRandomVariable_Type (*_PyNs3UniformRandomVariable_Type)

class PyNs3UniformRandomVariable__PythonHelper : public ns3::UniformRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UniformRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::WeibullRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WeibullRandomVariable;


extern PyTypeObject *_PyNs3WeibullRandomVariable_Type;
#define PyNs3WeibullRandomVariable_Type (*_PyNs3WeibullRandomVariable_Type)

class PyNs3WeibullRandomVariable__PythonHelper : public ns3::WeibullRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WeibullRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ZetaRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZetaRandomVariable;


extern PyTypeObject *_PyNs3ZetaRandomVariable_Type;
#define PyNs3ZetaRandomVariable_Type (*_PyNs3ZetaRandomVariable_Type)

class PyNs3ZetaRandomVariable__PythonHelper : public ns3::ZetaRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ZetaRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ZipfRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZipfRandomVariable;


extern PyTypeObject *_PyNs3ZipfRandomVariable_Type;
#define PyNs3ZipfRandomVariable_Type (*_PyNs3ZipfRandomVariable_Type)

class PyNs3ZipfRandomVariable__PythonHelper : public ns3::ZipfRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ZipfRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::AttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeAccessor;


extern PyTypeObject *_PyNs3AttributeAccessor_Type;
#define PyNs3AttributeAccessor_Type (*_PyNs3AttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeChecker;


extern PyTypeObject *_PyNs3AttributeChecker_Type;
#define PyNs3AttributeChecker_Type (*_PyNs3AttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeValue;


extern PyTypeObject *_PyNs3AttributeValue_Type;
#define PyNs3AttributeValue_Type (*_PyNs3AttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::BooleanChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanChecker;


extern PyTypeObject *_PyNs3BooleanChecker_Type;
#define PyNs3BooleanChecker_Type (*_PyNs3BooleanChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::BooleanValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanValue;


extern PyTypeObject *_PyNs3BooleanValue_Type;
#define PyNs3BooleanValue_Type (*_PyNs3BooleanValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackChecker;


extern PyTypeObject *_PyNs3CallbackChecker_Type;
#define PyNs3CallbackChecker_Type (*_PyNs3CallbackChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImplBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImplBase;


extern PyTypeObject *_PyNs3CallbackImplBase_Type;
#define PyNs3CallbackImplBase_Type (*_PyNs3CallbackImplBase_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackValue;


extern PyTypeObject *_PyNs3CallbackValue_Type;
#define PyNs3CallbackValue_Type (*_PyNs3CallbackValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Channel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Channel;


extern PyTypeObject *_PyNs3Channel_Type;
#define PyNs3Channel_Type (*_PyNs3Channel_Type)

class PyNs3Channel__PythonHelper : public ns3::Channel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Channel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ConstantRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantRandomVariable;


extern PyTypeObject *_PyNs3ConstantRandomVariable_Type;
#define PyNs3ConstantRandomVariable_Type (*_PyNs3ConstantRandomVariable_Type)

class PyNs3ConstantRandomVariable__PythonHelper : public ns3::ConstantRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DataCollectionObject *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataCollectionObject;


extern PyTypeObject *_PyNs3DataCollectionObject_Type;
#define PyNs3DataCollectionObject_Type (*_PyNs3DataCollectionObject_Type)

class PyNs3DataCollectionObject__PythonHelper : public ns3::DataCollectionObject
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DataCollectionObject__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DeterministicRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeterministicRandomVariable;


extern PyTypeObject *_PyNs3DeterministicRandomVariable_Type;
#define PyNs3DeterministicRandomVariable_Type (*_PyNs3DeterministicRandomVariable_Type)

class PyNs3DeterministicRandomVariable__PythonHelper : public ns3::DeterministicRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DeterministicRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DoubleValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DoubleValue;


extern PyTypeObject *_PyNs3DoubleValue_Type;
#define PyNs3DoubleValue_Type (*_PyNs3DoubleValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmpiricalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmpiricalRandomVariable;


extern PyTypeObject *_PyNs3EmpiricalRandomVariable_Type;
#define PyNs3EmpiricalRandomVariable_Type (*_PyNs3EmpiricalRandomVariable_Type)

class PyNs3EmpiricalRandomVariable__PythonHelper : public ns3::EmpiricalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EmpiricalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeAccessor;


extern PyTypeObject *_PyNs3EmptyAttributeAccessor_Type;
#define PyNs3EmptyAttributeAccessor_Type (*_PyNs3EmptyAttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeChecker;


extern PyTypeObject *_PyNs3EmptyAttributeChecker_Type;
#define PyNs3EmptyAttributeChecker_Type (*_PyNs3EmptyAttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeValue;


extern PyTypeObject *_PyNs3EmptyAttributeValue_Type;
#define PyNs3EmptyAttributeValue_Type (*_PyNs3EmptyAttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EnumChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumChecker;


extern PyTypeObject *_PyNs3EnumChecker_Type;
#define PyNs3EnumChecker_Type (*_PyNs3EnumChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::EnumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumValue;


extern PyTypeObject *_PyNs3EnumValue_Type;
#define PyNs3EnumValue_Type (*_PyNs3EnumValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::ErlangRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErlangRandomVariable;


extern PyTypeObject *_PyNs3ErlangRandomVariable_Type;
#define PyNs3ErlangRandomVariable_Type (*_PyNs3ErlangRandomVariable_Type)

class PyNs3ErlangRandomVariable__PythonHelper : public ns3::ErlangRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ErlangRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::EventImpl *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventImpl;


extern PyTypeObject *_PyNs3EventImpl_Type;
#define PyNs3EventImpl_Type (*_PyNs3EventImpl_Type)


typedef struct {
    PyObject_HEAD
    ns3::ExponentialRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ExponentialRandomVariable;


extern PyTypeObject *_PyNs3ExponentialRandomVariable_Type;
#define PyNs3ExponentialRandomVariable_Type (*_PyNs3ExponentialRandomVariable_Type)

class PyNs3ExponentialRandomVariable__PythonHelper : public ns3::ExponentialRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ExponentialRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::GammaRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3GammaRandomVariable;


extern PyTypeObject *_PyNs3GammaRandomVariable_Type;
#define PyNs3GammaRandomVariable_Type (*_PyNs3GammaRandomVariable_Type)

class PyNs3GammaRandomVariable__PythonHelper : public ns3::GammaRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3GammaRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::IntegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntegerValue;


extern PyTypeObject *_PyNs3IntegerValue_Type;
#define PyNs3IntegerValue_Type (*_PyNs3IntegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressChecker;


extern PyTypeObject *_PyNs3Ipv4AddressChecker_Type;
#define PyNs3Ipv4AddressChecker_Type (*_PyNs3Ipv4AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressValue;


extern PyTypeObject *_PyNs3Ipv4AddressValue_Type;
#define PyNs3Ipv4AddressValue_Type (*_PyNs3Ipv4AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskChecker;


extern PyTypeObject *_PyNs3Ipv4MaskChecker_Type;
#define PyNs3Ipv4MaskChecker_Type (*_PyNs3Ipv4MaskChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskValue;


extern PyTypeObject *_PyNs3Ipv4MaskValue_Type;
#define PyNs3Ipv4MaskValue_Type (*_PyNs3Ipv4MaskValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressChecker;


extern PyTypeObject *_PyNs3Ipv6AddressChecker_Type;
#define PyNs3Ipv6AddressChecker_Type (*_PyNs3Ipv6AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressValue;


extern PyTypeObject *_PyNs3Ipv6AddressValue_Type;
#define PyNs3Ipv6AddressValue_Type (*_PyNs3Ipv6AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixChecker;


extern PyTypeObject *_PyNs3Ipv6PrefixChecker_Type;
#define PyNs3Ipv6PrefixChecker_Type (*_PyNs3Ipv6PrefixChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixValue;


extern PyTypeObject *_PyNs3Ipv6PrefixValue_Type;
#define PyNs3Ipv6PrefixValue_Type (*_PyNs3Ipv6PrefixValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::LogNormalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogNormalRandomVariable;


extern PyTypeObject *_PyNs3LogNormalRandomVariable_Type;
#define PyNs3LogNormalRandomVariable_Type (*_PyNs3LogNormalRandomVariable_Type)

class PyNs3LogNormalRandomVariable__PythonHelper : public ns3::LogNormalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LogNormalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressChecker;


extern PyTypeObject *_PyNs3Mac48AddressChecker_Type;
#define PyNs3Mac48AddressChecker_Type (*_PyNs3Mac48AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressValue;


extern PyTypeObject *_PyNs3Mac48AddressValue_Type;
#define PyNs3Mac48AddressValue_Type (*_PyNs3Mac48AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::NetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDevice;


extern PyTypeObject *_PyNs3NetDevice_Type;
#define PyNs3NetDevice_Type (*_PyNs3NetDevice_Type)

class PyNs3NetDevice__PythonHelper : public ns3::NetDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NetDeviceQueue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDeviceQueue;


extern PyTypeObject *_PyNs3NetDeviceQueue_Type;
#define PyNs3NetDeviceQueue_Type (*_PyNs3NetDeviceQueue_Type)


typedef struct {
    PyObject_HEAD
    ns3::NetDeviceQueueInterface *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDeviceQueueInterface;


extern PyTypeObject *_PyNs3NetDeviceQueueInterface_Type;
#define PyNs3NetDeviceQueueInterface_Type (*_PyNs3NetDeviceQueueInterface_Type)

class PyNs3NetDeviceQueueInterface__PythonHelper : public ns3::NetDeviceQueueInterface
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NetDeviceQueueInterface__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NixVector *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NixVector;


extern PyTypeObject *_PyNs3NixVector_Type;
#define PyNs3NixVector_Type (*_PyNs3NixVector_Type)


typedef struct {
    PyObject_HEAD
    ns3::Node *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Node;


extern PyTypeObject *_PyNs3Node_Type;
#define PyNs3Node_Type (*_PyNs3Node_Type)

class PyNs3Node__PythonHelper : public ns3::Node
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Node__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NormalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NormalRandomVariable;


extern PyTypeObject *_PyNs3NormalRandomVariable_Type;
#define PyNs3NormalRandomVariable_Type (*_PyNs3NormalRandomVariable_Type)

class PyNs3NormalRandomVariable__PythonHelper : public ns3::NormalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NormalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryChecker;


extern PyTypeObject *_PyNs3ObjectFactoryChecker_Type;
#define PyNs3ObjectFactoryChecker_Type (*_PyNs3ObjectFactoryChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryValue;


extern PyTypeObject *_PyNs3ObjectFactoryValue_Type;
#define PyNs3ObjectFactoryValue_Type (*_PyNs3ObjectFactoryValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::OutputStreamWrapper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OutputStreamWrapper;


extern PyTypeObject *_PyNs3OutputStreamWrapper_Type;
#define PyNs3OutputStreamWrapper_Type (*_PyNs3OutputStreamWrapper_Type)


typedef struct {
    PyObject_HEAD
    ns3::Packet *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Packet;


extern PyTypeObject *_PyNs3Packet_Type;
#define PyNs3Packet_Type (*_PyNs3Packet_Type)


typedef struct {
    PyObject_HEAD
    ns3::ParetoRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParetoRandomVariable;


extern PyTypeObject *_PyNs3ParetoRandomVariable_Type;
#define PyNs3ParetoRandomVariable_Type (*_PyNs3ParetoRandomVariable_Type)

class PyNs3ParetoRandomVariable__PythonHelper : public ns3::ParetoRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ParetoRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Probe *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Probe;


extern PyTypeObject *_PyNs3Probe_Type;
#define PyNs3Probe_Type (*_PyNs3Probe_Type)

class PyNs3Probe__PythonHelper : public ns3::Probe
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Probe__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::QueueItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueItem;


extern PyTypeObject *_PyNs3QueueItem_Type;
#define PyNs3QueueItem_Type (*_PyNs3QueueItem_Type)


typedef struct {
    PyObject_HEAD
    ns3::TimeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeValue;


extern PyTypeObject *_PyNs3TimeValue_Type;
#define PyNs3TimeValue_Type (*_PyNs3TimeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdChecker;


extern PyTypeObject *_PyNs3TypeIdChecker_Type;
#define PyNs3TypeIdChecker_Type (*_PyNs3TypeIdChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdValue;


extern PyTypeObject *_PyNs3TypeIdValue_Type;
#define PyNs3TypeIdValue_Type (*_PyNs3TypeIdValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::UintegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UintegerValue;


extern PyTypeObject *_PyNs3UintegerValue_Type;
#define PyNs3UintegerValue_Type (*_PyNs3UintegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressChecker;


extern PyTypeObject *_PyNs3AddressChecker_Type;
#define PyNs3AddressChecker_Type (*_PyNs3AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressValue;


extern PyTypeObject *_PyNs3AddressValue_Type;
#define PyNs3AddressValue_Type (*_PyNs3AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::BridgeChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BridgeChannel;


extern PyTypeObject *_PyNs3BridgeChannel_Type;
#define PyNs3BridgeChannel_Type (*_PyNs3BridgeChannel_Type)

class PyNs3BridgeChannel__PythonHelper : public ns3::BridgeChannel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BridgeChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::BridgeNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BridgeNetDevice;


extern PyTypeObject *_PyNs3BridgeNetDevice_Type;
#define PyNs3BridgeNetDevice_Type (*_PyNs3BridgeNetDevice_Type)

class PyNs3BridgeNetDevice__PythonHelper : public ns3::BridgeNetDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BridgeNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::QueueDiscItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueDiscItem;


extern PyTypeObject *_PyNs3QueueDiscItem_Type;
#define PyNs3QueueDiscItem_Type (*_PyNs3QueueDiscItem_Type)


typedef struct {
    PyObject_HEAD
    ns3::AsciiTraceHelperForIpv4 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AsciiTraceHelperForIpv4;


extern PyTypeObject PyNs3AsciiTraceHelperForIpv4_Type;

class PyNs3AsciiTraceHelperForIpv4__PythonHelper : public ns3::AsciiTraceHelperForIpv4
{
public:
    PyObject *m_pyself;
    PyNs3AsciiTraceHelperForIpv4__PythonHelper(ns3::AsciiTraceHelperForIpv4 const & arg0)
        : ns3::AsciiTraceHelperForIpv4(arg0), m_pyself(NULL)
        {}

    PyNs3AsciiTraceHelperForIpv4__PythonHelper()
        : ns3::AsciiTraceHelperForIpv4(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AsciiTraceHelperForIpv4__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void EnableAsciiIpv4Internal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::Ipv4 > ipv4, uint32_t interface, bool explicitFilename);
};

extern std::map<void*, PyObject*> PyNs3AsciiTraceHelperForIpv4_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::AsciiTraceHelperForIpv6 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AsciiTraceHelperForIpv6;


extern PyTypeObject PyNs3AsciiTraceHelperForIpv6_Type;

class PyNs3AsciiTraceHelperForIpv6__PythonHelper : public ns3::AsciiTraceHelperForIpv6
{
public:
    PyObject *m_pyself;
    PyNs3AsciiTraceHelperForIpv6__PythonHelper(ns3::AsciiTraceHelperForIpv6 const & arg0)
        : ns3::AsciiTraceHelperForIpv6(arg0), m_pyself(NULL)
        {}

    PyNs3AsciiTraceHelperForIpv6__PythonHelper()
        : ns3::AsciiTraceHelperForIpv6(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AsciiTraceHelperForIpv6__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void EnableAsciiIpv6Internal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::Ipv6 > ipv6, uint32_t interface, bool explicitFilename);
};

extern std::map<void*, PyObject*> PyNs3AsciiTraceHelperForIpv6_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CandidateQueue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CandidateQueue;


extern PyTypeObject PyNs3CandidateQueue_Type;

extern std::map<void*, PyObject*> PyNs3CandidateQueue_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GlobalRouteManager *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GlobalRouteManager;


extern PyTypeObject PyNs3GlobalRouteManager_Type;

extern std::map<void*, PyObject*> PyNs3GlobalRouteManager_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GlobalRouteManagerImpl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3GlobalRouteManagerImpl;


extern PyTypeObject PyNs3GlobalRouteManagerImpl_Type;

class PyNs3GlobalRouteManagerImpl__PythonHelper : public ns3::GlobalRouteManagerImpl
{
public:
    PyObject *m_pyself;
    PyNs3GlobalRouteManagerImpl__PythonHelper()
        : ns3::GlobalRouteManagerImpl(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3GlobalRouteManagerImpl__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void DeleteGlobalRoutes();

    virtual void BuildGlobalRoutingDatabase();

    virtual void InitializeRoutes();
};

extern std::map<void*, PyObject*> PyNs3GlobalRouteManagerImpl_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GlobalRouteManagerLSDB *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GlobalRouteManagerLSDB;


extern PyTypeObject PyNs3GlobalRouteManagerLSDB_Type;

extern std::map<void*, PyObject*> PyNs3GlobalRouteManagerLSDB_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GlobalRoutingLSA *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GlobalRoutingLSA;


extern PyTypeObject PyNs3GlobalRoutingLSA_Type;

extern std::map<void*, PyObject*> PyNs3GlobalRoutingLSA_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GlobalRoutingLinkRecord *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GlobalRoutingLinkRecord;


extern PyTypeObject PyNs3GlobalRoutingLinkRecord_Type;

extern std::map<void*, PyObject*> PyNs3GlobalRoutingLinkRecord_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressGenerator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressGenerator;


extern PyTypeObject PyNs3Ipv4AddressGenerator_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4AddressGenerator_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressHelper;


extern PyTypeObject PyNs3Ipv4AddressHelper_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4AddressHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4InterfaceAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4InterfaceAddress;


extern PyTypeObject PyNs3Ipv4InterfaceAddress_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4InterfaceAddress_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4InterfaceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4InterfaceContainer;


extern PyTypeObject PyNs3Ipv4InterfaceContainer_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4InterfaceContainer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4MulticastRoutingTableEntry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MulticastRoutingTableEntry;


extern PyTypeObject PyNs3Ipv4MulticastRoutingTableEntry_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4MulticastRoutingTableEntry_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4RoutingHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4RoutingHelper;


extern PyTypeObject PyNs3Ipv4RoutingHelper_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4RoutingHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4RoutingTableEntry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4RoutingTableEntry;


extern PyTypeObject PyNs3Ipv4RoutingTableEntry_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4RoutingTableEntry_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4StaticRoutingHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4StaticRoutingHelper;


extern PyTypeObject PyNs3Ipv4StaticRoutingHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressGenerator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressGenerator;


extern PyTypeObject PyNs3Ipv6AddressGenerator_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6AddressGenerator_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressHelper;


extern PyTypeObject PyNs3Ipv6AddressHelper_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6AddressHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6InterfaceAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6InterfaceAddress;


extern PyTypeObject PyNs3Ipv6InterfaceAddress_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6InterfaceAddress_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6InterfaceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6InterfaceContainer;


extern PyTypeObject PyNs3Ipv6InterfaceContainer_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6InterfaceContainer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6MulticastRoutingTableEntry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6MulticastRoutingTableEntry;


extern PyTypeObject PyNs3Ipv6MulticastRoutingTableEntry_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6MulticastRoutingTableEntry_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6RoutingHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6RoutingHelper;


extern PyTypeObject PyNs3Ipv6RoutingHelper_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6RoutingHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6RoutingTableEntry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6RoutingTableEntry;


extern PyTypeObject PyNs3Ipv6RoutingTableEntry_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6RoutingTableEntry_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6StaticRoutingHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6StaticRoutingHelper;


extern PyTypeObject PyNs3Ipv6StaticRoutingHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::OptionField *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OptionField;


extern PyTypeObject PyNs3OptionField_Type;

extern std::map<void*, PyObject*> PyNs3OptionField_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PcapHelperForIpv4 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapHelperForIpv4;


extern PyTypeObject PyNs3PcapHelperForIpv4_Type;

class PyNs3PcapHelperForIpv4__PythonHelper : public ns3::PcapHelperForIpv4
{
public:
    PyObject *m_pyself;
    PyNs3PcapHelperForIpv4__PythonHelper(ns3::PcapHelperForIpv4 const & arg0)
        : ns3::PcapHelperForIpv4(arg0), m_pyself(NULL)
        {}

    PyNs3PcapHelperForIpv4__PythonHelper()
        : ns3::PcapHelperForIpv4(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PcapHelperForIpv4__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void EnablePcapIpv4Internal(std::string prefix, ns3::Ptr< ns3::Ipv4 > ipv4, uint32_t interface, bool explicitFilename);
};

extern std::map<void*, PyObject*> PyNs3PcapHelperForIpv4_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PcapHelperForIpv6 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapHelperForIpv6;


extern PyTypeObject PyNs3PcapHelperForIpv6_Type;

class PyNs3PcapHelperForIpv6__PythonHelper : public ns3::PcapHelperForIpv6
{
public:
    PyObject *m_pyself;
    PyNs3PcapHelperForIpv6__PythonHelper(ns3::PcapHelperForIpv6 const & arg0)
        : ns3::PcapHelperForIpv6(arg0), m_pyself(NULL)
        {}

    PyNs3PcapHelperForIpv6__PythonHelper()
        : ns3::PcapHelperForIpv6(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PcapHelperForIpv6__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void EnablePcapIpv6Internal(std::string prefix, ns3::Ptr< ns3::Ipv6 > ipv6, uint32_t interface, bool explicitFilename);
};

extern std::map<void*, PyObject*> PyNs3PcapHelperForIpv6_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::RipHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RipHelper;


extern PyTypeObject PyNs3RipHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::RipNgHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RipNgHelper;


extern PyTypeObject PyNs3RipNgHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::RipNgRoutingTableEntry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RipNgRoutingTableEntry;


extern PyTypeObject PyNs3RipNgRoutingTableEntry_Type;


typedef struct {
    PyObject_HEAD
    ns3::RipRoutingTableEntry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RipRoutingTableEntry;


extern PyTypeObject PyNs3RipRoutingTableEntry_Type;


typedef struct {
    PyObject_HEAD
    ns3::RttHistory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RttHistory;


extern PyTypeObject PyNs3RttHistory_Type;

extern std::map<void*, PyObject*> PyNs3RttHistory_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SPFVertex *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SPFVertex;


extern PyTypeObject PyNs3SPFVertex_Type;

extern std::map<void*, PyObject*> PyNs3SPFVertex_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< ns3::TcpSocket::TcpStates_t > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Ns3TcpSocketTcpStates_t;


extern PyTypeObject PyNs3TracedValue__Ns3TcpSocketTcpStates_t_Type;

extern std::map<void*, PyObject*> PyNs3TracedValue__Ns3TcpSocketTcpStates_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< ns3::TcpSocketState::TcpCongState_t > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Ns3TcpSocketStateTcpCongState_t;


extern PyTypeObject PyNs3TracedValue__Ns3TcpSocketStateTcpCongState_t_Type;

extern std::map<void*, PyObject*> PyNs3TracedValue__Ns3TcpSocketStateTcpCongState_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Icmpv4DestinationUnreachable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv4DestinationUnreachable;


extern PyTypeObject PyNs3Icmpv4DestinationUnreachable_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv4Echo *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv4Echo;


extern PyTypeObject PyNs3Icmpv4Echo_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv4Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv4Header;


extern PyTypeObject PyNs3Icmpv4Header_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv4TimeExceeded *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv4TimeExceeded;


extern PyTypeObject PyNs3Icmpv4TimeExceeded_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6Header;


extern PyTypeObject PyNs3Icmpv6Header_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6NA *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6NA;


extern PyTypeObject PyNs3Icmpv6NA_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6NS *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6NS;


extern PyTypeObject PyNs3Icmpv6NS_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6OptionHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6OptionHeader;


extern PyTypeObject PyNs3Icmpv6OptionHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6OptionLinkLayerAddress *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6OptionLinkLayerAddress;


extern PyTypeObject PyNs3Icmpv6OptionLinkLayerAddress_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6OptionMtu *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6OptionMtu;


extern PyTypeObject PyNs3Icmpv6OptionMtu_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6OptionPrefixInformation *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6OptionPrefixInformation;


extern PyTypeObject PyNs3Icmpv6OptionPrefixInformation_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6OptionRedirected *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6OptionRedirected;


extern PyTypeObject PyNs3Icmpv6OptionRedirected_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6ParameterError *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6ParameterError;


extern PyTypeObject PyNs3Icmpv6ParameterError_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6RA *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6RA;


extern PyTypeObject PyNs3Icmpv6RA_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6RS *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6RS;


extern PyTypeObject PyNs3Icmpv6RS_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6Redirection *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6Redirection;


extern PyTypeObject PyNs3Icmpv6Redirection_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6TimeExceeded *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6TimeExceeded;


extern PyTypeObject PyNs3Icmpv6TimeExceeded_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6TooBig *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6TooBig;


extern PyTypeObject PyNs3Icmpv6TooBig_Type;


typedef struct {
    PyObject_HEAD
    ns3::InternetStackHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3InternetStackHelper;


extern PyTypeObject PyNs3InternetStackHelper_Type;

class PyNs3InternetStackHelper__PythonHelper : public ns3::InternetStackHelper
{
public:
    PyObject *m_pyself;
    PyNs3InternetStackHelper__PythonHelper()
        : ns3::InternetStackHelper(), m_pyself(NULL)
        {}

    PyNs3InternetStackHelper__PythonHelper(ns3::InternetStackHelper const & arg0)
        : ns3::InternetStackHelper(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3InternetStackHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void EnableAsciiIpv4Internal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::Ipv4 > ipv4, uint32_t interface, bool explicitFilename);

    virtual void EnableAsciiIpv6Internal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::Ipv6 > ipv6, uint32_t interface, bool explicitFilename);

    virtual void EnablePcapIpv4Internal(std::string prefix, ns3::Ptr< ns3::Ipv4 > ipv4, uint32_t interface, bool explicitFilename);

    virtual void EnablePcapIpv6Internal(std::string prefix, ns3::Ptr< ns3::Ipv6 > ipv6, uint32_t interface, bool explicitFilename);
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv4GlobalRoutingHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4GlobalRoutingHelper;


extern PyTypeObject PyNs3Ipv4GlobalRoutingHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Header;


extern PyTypeObject PyNs3Ipv4Header_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4ListRoutingHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4ListRoutingHelper;


extern PyTypeObject PyNs3Ipv4ListRoutingHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4PacketInfoTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4PacketInfoTag;


extern PyTypeObject PyNs3Ipv4PacketInfoTag_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionHeader;


extern PyTypeObject PyNs3Ipv6ExtensionHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionHopByHopHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionHopByHopHeader;


extern PyTypeObject PyNs3Ipv6ExtensionHopByHopHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionRoutingHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionRoutingHeader;


extern PyTypeObject PyNs3Ipv6ExtensionRoutingHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Header;


extern PyTypeObject PyNs3Ipv6Header_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ListRoutingHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ListRoutingHelper;


extern PyTypeObject PyNs3Ipv6ListRoutingHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6OptionHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6OptionHeader;


extern PyTypeObject PyNs3Ipv6OptionHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6OptionHeader::Alignment *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6OptionHeaderAlignment;


extern PyTypeObject PyNs3Ipv6OptionHeaderAlignment_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6OptionHeaderAlignment_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6OptionJumbogramHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6OptionJumbogramHeader;


extern PyTypeObject PyNs3Ipv6OptionJumbogramHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6OptionPad1Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6OptionPad1Header;


extern PyTypeObject PyNs3Ipv6OptionPad1Header_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6OptionPadnHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6OptionPadnHeader;


extern PyTypeObject PyNs3Ipv6OptionPadnHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6OptionRouterAlertHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6OptionRouterAlertHeader;


extern PyTypeObject PyNs3Ipv6OptionRouterAlertHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PacketInfoTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PacketInfoTag;


extern PyTypeObject PyNs3Ipv6PacketInfoTag_Type;


typedef struct {
    PyObject_HEAD
    ns3::RipHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RipHeader;


extern PyTypeObject PyNs3RipHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::RipNgHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RipNgHeader;


extern PyTypeObject PyNs3RipNgHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::RipNgRte *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RipNgRte;


extern PyTypeObject PyNs3RipNgRte_Type;


typedef struct {
    PyObject_HEAD
    ns3::RipRte *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RipRte;


extern PyTypeObject PyNs3RipRte_Type;


typedef struct {
    PyObject_HEAD
    ns3::RttEstimator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RttEstimator;


extern PyTypeObject PyNs3RttEstimator_Type;

class PyNs3RttEstimator__PythonHelper : public ns3::RttEstimator
{
public:
    PyObject *m_pyself;
    PyNs3RttEstimator__PythonHelper()
        : ns3::RttEstimator(), m_pyself(NULL)
        {}

    PyNs3RttEstimator__PythonHelper(ns3::RttEstimator const & r)
        : ns3::RttEstimator(r), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RttEstimator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RttEstimator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3RttEstimator *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RttEstimator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3RttEstimator *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Ptr< ns3::RttEstimator > Copy() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void Measurement(ns3::Time t);

    virtual void Reset();

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RttEstimator__PythonHelper")
        .SetParent< ns3::RttEstimator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RttEstimator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RttMeanDeviation *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RttMeanDeviation;


extern PyTypeObject PyNs3RttMeanDeviation_Type;

class PyNs3RttMeanDeviation__PythonHelper : public ns3::RttMeanDeviation
{
public:
    PyObject *m_pyself;
    PyNs3RttMeanDeviation__PythonHelper()
        : ns3::RttMeanDeviation(), m_pyself(NULL)
        {}

    PyNs3RttMeanDeviation__PythonHelper(ns3::RttMeanDeviation const & r)
        : ns3::RttMeanDeviation(r), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RttMeanDeviation__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RttMeanDeviation *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3RttMeanDeviation *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RttMeanDeviation *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3RttMeanDeviation *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Ptr< ns3::RttEstimator > Copy() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void Measurement(ns3::Time measure);

    virtual void Reset();

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RttMeanDeviation__PythonHelper")
        .SetParent< ns3::RttMeanDeviation > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RttMeanDeviation__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Ipv6MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6MulticastRoute> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Ipv6Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6Route> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Ipv6Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6Route__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3Ipv6Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6Route__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Ipv6Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6Route__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::TcpCongestionOps *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpCongestionOps;


extern PyTypeObject PyNs3TcpCongestionOps_Type;

class PyNs3TcpCongestionOps__PythonHelper : public ns3::TcpCongestionOps
{
public:
    PyObject *m_pyself;
    PyNs3TcpCongestionOps__PythonHelper()
        : ns3::TcpCongestionOps(), m_pyself(NULL)
        {}

    PyNs3TcpCongestionOps__PythonHelper(ns3::TcpCongestionOps const & other)
        : ns3::TcpCongestionOps(other), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpCongestionOps__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpCongestionOps *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3TcpCongestionOps *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TcpCongestionOps *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3TcpCongestionOps *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void CongestionStateSet(ns3::Ptr< ns3::TcpSocketState > tcb, ns3::TcpSocketState::TcpCongState_t newState);

    virtual ns3::Ptr< ns3::TcpCongestionOps > Fork();

    virtual std::string GetName() const;

    virtual uint32_t GetSsThresh(ns3::Ptr< ns3::TcpSocketState const > tcb, uint32_t bytesInFlight);

    virtual void IncreaseWindow(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual void PktsAcked(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked, ns3::Time const & rtt);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TcpCongestionOps__PythonHelper")
        .SetParent< ns3::TcpCongestionOps > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TcpCongestionOps__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TcpHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpHeader;


extern PyTypeObject PyNs3TcpHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::TcpNewReno *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpNewReno;


extern PyTypeObject PyNs3TcpNewReno_Type;

class PyNs3TcpNewReno__PythonHelper : public ns3::TcpNewReno
{
public:
    PyObject *m_pyself;
    PyNs3TcpNewReno__PythonHelper()
        : ns3::TcpNewReno(), m_pyself(NULL)
        {}

    PyNs3TcpNewReno__PythonHelper(ns3::TcpNewReno const & sock)
        : ns3::TcpNewReno(sock), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpNewReno__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpNewReno *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3TcpNewReno *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TcpNewReno *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_CongestionAvoidance(PyNs3TcpNewReno *self, PyObject *args, PyObject *kwargs);
    inline void CongestionAvoidance__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { ns3::TcpNewReno::CongestionAvoidance(tcb, segmentsAcked); }

    static PyObject * _wrap_DoDispose(PyNs3TcpNewReno *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_SlowStart(PyNs3TcpNewReno *self, PyObject *args, PyObject *kwargs);
    inline uint32_t SlowStart__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { return ns3::TcpNewReno::SlowStart(tcb, segmentsAcked); }

    virtual ns3::Ptr< ns3::TcpCongestionOps > Fork();

    virtual std::string GetName() const;

    virtual uint32_t GetSsThresh(ns3::Ptr< ns3::TcpSocketState const > tcb, uint32_t bytesInFlight);

    virtual void IncreaseWindow(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual void CongestionAvoidance(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual uint32_t SlowStart(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual void PktsAcked(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked, ns3::Time const & rtt);

    virtual void CongestionStateSet(ns3::Ptr< ns3::TcpSocketState > tcb, ns3::TcpSocketState::TcpCongState_t newState);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TcpNewReno__PythonHelper")
        .SetParent< ns3::TcpNewReno > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TcpNewReno__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TcpOption *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpOption;


extern PyTypeObject PyNs3TcpOption_Type;


typedef struct {
    PyObject_HEAD
    ns3::TcpOptionUnknown *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpOptionUnknown;


extern PyTypeObject PyNs3TcpOptionUnknown_Type;


typedef struct {
    PyObject_HEAD
    ns3::TcpRxBuffer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpRxBuffer;


extern PyTypeObject PyNs3TcpRxBuffer_Type;


typedef struct {
    PyObject_HEAD
    ns3::TcpScalable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpScalable;


extern PyTypeObject PyNs3TcpScalable_Type;

class PyNs3TcpScalable__PythonHelper : public ns3::TcpScalable
{
public:
    PyObject *m_pyself;
    PyNs3TcpScalable__PythonHelper()
        : ns3::TcpScalable(), m_pyself(NULL)
        {}

    PyNs3TcpScalable__PythonHelper(ns3::TcpScalable const & sock)
        : ns3::TcpScalable(sock), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpScalable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpScalable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3TcpScalable *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TcpScalable *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_CongestionAvoidance(PyNs3TcpScalable *self, PyObject *args, PyObject *kwargs);
    inline void CongestionAvoidance__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { ns3::TcpScalable::CongestionAvoidance(tcb, segmentsAcked); }

    static PyObject * _wrap_DoDispose(PyNs3TcpScalable *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_SlowStart(PyNs3TcpScalable *self, PyObject *args, PyObject *kwargs);
    inline uint32_t SlowStart__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { return ns3::TcpNewReno::SlowStart(tcb, segmentsAcked); }

    virtual ns3::Ptr< ns3::TcpCongestionOps > Fork();

    virtual std::string GetName() const;

    virtual uint32_t GetSsThresh(ns3::Ptr< ns3::TcpSocketState const > tcb, uint32_t bytesInFlight);

    virtual void CongestionAvoidance(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual void IncreaseWindow(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual uint32_t SlowStart(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual void PktsAcked(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked, ns3::Time const & rtt);

    virtual void CongestionStateSet(ns3::Ptr< ns3::TcpSocketState > tcb, ns3::TcpSocketState::TcpCongState_t newState);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TcpScalable__PythonHelper")
        .SetParent< ns3::TcpScalable > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TcpScalable__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TcpSocket *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpSocket;


extern PyTypeObject PyNs3TcpSocket_Type;

class PyNs3TcpSocket__PythonHelper : public ns3::TcpSocket
{
public:
    PyObject *m_pyself;
    PyNs3TcpSocket__PythonHelper(ns3::TcpSocket const & arg0)
        : ns3::TcpSocket(arg0), m_pyself(NULL)
        {}

    PyNs3TcpSocket__PythonHelper()
        : ns3::TcpSocket(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpSocket__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpSocket *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3TcpSocket *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TcpSocket *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3TcpSocket *self);
    inline void DoDispose__parent_caller()
    { ns3::Socket::DoDispose(); }

    virtual ns3::Time GetConnTimeout() const;

    virtual uint32_t GetDataRetries() const;

    virtual uint32_t GetDelAckMaxCount() const;

    virtual ns3::Time GetDelAckTimeout() const;

    virtual uint32_t GetInitialCwnd() const;

    virtual uint32_t GetInitialSSThresh() const;

    virtual ns3::Time GetPersistTimeout() const;

    virtual uint32_t GetRcvBufSize() const;

    virtual uint32_t GetSegSize() const;

    virtual uint32_t GetSndBufSize() const;

    virtual uint32_t GetSynRetries() const;

    virtual bool GetTcpNoDelay() const;

    virtual void SetConnTimeout(ns3::Time timeout);

    virtual void SetDataRetries(uint32_t retries);

    virtual void SetDelAckMaxCount(uint32_t count);

    virtual void SetDelAckTimeout(ns3::Time timeout);

    virtual void SetInitialCwnd(uint32_t cwnd);

    virtual void SetInitialSSThresh(uint32_t threshold);

    virtual void SetPersistTimeout(ns3::Time timeout);

    virtual void SetRcvBufSize(uint32_t size);

    virtual void SetSegSize(uint32_t size);

    virtual void SetSndBufSize(uint32_t size);

    virtual void SetSynRetries(uint32_t count);

    virtual void SetTcpNoDelay(bool noDelay);

    virtual uint32_t GetRxAvailable() const;

    virtual bool SetAllowBroadcast(bool allowBroadcast);

    virtual ns3::Socket::SocketType GetSocketType() const;

    virtual void BindToNetDevice(ns3::Ptr< ns3::NetDevice > netdevice);

    virtual int Bind6();

    virtual bool GetAllowBroadcast() const;

    virtual ns3::Socket::SocketErrno GetErrno() const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual void SetIpTtl(uint8_t ipTtl);

    virtual int ShutdownRecv();

    virtual uint8_t GetIpTtl() const;

    virtual int ShutdownSend();

    virtual int GetSockName(ns3::Address & address) const;

    virtual uint32_t GetTxAvailable() const;

    virtual int GetPeerName(ns3::Address & address) const;

    virtual int Listen();

    virtual ns3::Ptr< ns3::Packet > Recv(uint32_t maxSize, uint32_t flags);

    virtual void Ipv6JoinGroup(ns3::Ipv6Address address, ns3::Socket::Ipv6MulticastFilterMode filterMode, std::vector< ns3::Ipv6Address > sourceAddresses);

    virtual void Ipv6JoinGroup(ns3::Ipv6Address address);

    virtual int Bind(ns3::Address const & address);

    virtual int Bind();

    virtual void Ipv6LeaveGroup();

    virtual int SendTo(ns3::Ptr< ns3::Packet > p, uint32_t flags, ns3::Address const & toAddress);

    virtual int Send(ns3::Ptr< ns3::Packet > p, uint32_t flags);

    virtual void SetIpv6HopLimit(uint8_t ipHopLimit);

    virtual uint8_t GetIpv6HopLimit() const;

    virtual ns3::Ptr< ns3::Packet > RecvFrom(uint32_t maxSize, uint32_t flags, ns3::Address & fromAddress);

    virtual int Connect(ns3::Address const & address);

    virtual int Close();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TcpSocket__PythonHelper")
        .SetParent< ns3::TcpSocket > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TcpSocket__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TcpSocketBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpSocketBase;


extern PyTypeObject PyNs3TcpSocketBase_Type;

class PyNs3TcpSocketBase__PythonHelper : public ns3::TcpSocketBase
{
public:
    PyObject *m_pyself;
    PyNs3TcpSocketBase__PythonHelper()
        : ns3::TcpSocketBase(), m_pyself(NULL)
        {}

    PyNs3TcpSocketBase__PythonHelper(ns3::TcpSocketBase const & sock)
        : ns3::TcpSocketBase(sock), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpSocketBase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_AddOptions(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void AddOptions__parent_caller(ns3::TcpHeader & tcpHeader)
    { ns3::TcpSocketBase::AddOptions(tcpHeader); }

    static PyObject * _wrap_CancelAllTimers(PyNs3TcpSocketBase *self);
    inline void CancelAllTimers__parent_caller()
    { ns3::TcpSocketBase::CancelAllTimers(); }

    static PyObject * _wrap_DupAck(PyNs3TcpSocketBase *self);
    inline void DupAck__parent_caller()
    { ns3::TcpSocketBase::DupAck(); }

    static PyObject * _wrap_SetRcvBufSize(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void SetRcvBufSize__parent_caller(uint32_t size)
    { ns3::TcpSocketBase::SetRcvBufSize(size); }

    static PyObject * _wrap_DeallocateEndPoint(PyNs3TcpSocketBase *self);
    inline void DeallocateEndPoint__parent_caller()
    { ns3::TcpSocketBase::DeallocateEndPoint(); }

    static PyObject * _wrap_SafeSubtraction(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline uint32_t SafeSubtraction__parent_caller(uint32_t a, uint32_t b)
    { return ns3::TcpSocketBase::SafeSubtraction(a, b); }

    static PyObject * _wrap_GetPersistTimeout(PyNs3TcpSocketBase *self);
    inline ns3::Time GetPersistTimeout__parent_caller()
    { return ns3::TcpSocketBase::GetPersistTimeout(); }

    static PyObject * _wrap_GetSndBufSize(PyNs3TcpSocketBase *self);
    inline uint32_t GetSndBufSize__parent_caller()
    { return ns3::TcpSocketBase::GetSndBufSize(); }

    static PyObject * _wrap_NewAck(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void NewAck__parent_caller(ns3::SequenceNumber32 const & seq, bool resetRTO)
    { ns3::TcpSocketBase::NewAck(seq, resetRTO); }

    static PyObject * _wrap_EstimateRtt(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void EstimateRtt__parent_caller(ns3::TcpHeader const & tcpHeader)
    { ns3::TcpSocketBase::EstimateRtt(tcpHeader); }

    static PyObject * _wrap_SetSndBufSize(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void SetSndBufSize__parent_caller(uint32_t size)
    { ns3::TcpSocketBase::SetSndBufSize(size); }

    static PyObject * _wrap_GetRcvBufSize(PyNs3TcpSocketBase *self);
    inline uint32_t GetRcvBufSize__parent_caller()
    { return ns3::TcpSocketBase::GetRcvBufSize(); }

    static PyObject * _wrap_ReceivedAck(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void ReceivedAck__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::TcpHeader const & tcpHeader)
    { ns3::TcpSocketBase::ReceivedAck(packet, tcpHeader); }

    static PyObject * _wrap_DoInitialize(PyNs3TcpSocketBase *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_ProcessClosing(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void ProcessClosing__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::TcpHeader const & tcpHeader)
    { ns3::TcpSocketBase::ProcessClosing(packet, tcpHeader); }

    static PyObject * _wrap_GetDataRetries(PyNs3TcpSocketBase *self);
    inline uint32_t GetDataRetries__parent_caller()
    { return ns3::TcpSocketBase::GetDataRetries(); }

    static PyObject * _wrap_PersistTimeout(PyNs3TcpSocketBase *self);
    inline void PersistTimeout__parent_caller()
    { ns3::TcpSocketBase::PersistTimeout(); }

    static PyObject * _wrap_SendPendingData(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline bool SendPendingData__parent_caller(bool withAck)
    { return ns3::TcpSocketBase::SendPendingData(withAck); }

    static PyObject * _wrap_ProcessListen(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void ProcessListen__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::TcpHeader const & tcpHeader, ns3::Address const & fromAddress, ns3::Address const & toAddress)
    { ns3::TcpSocketBase::ProcessListen(packet, tcpHeader, fromAddress, toAddress); }

    static PyObject * _wrap_SendEmptyPacket(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void SendEmptyPacket__parent_caller(uint8_t flags)
    { ns3::TcpSocketBase::SendEmptyPacket(flags); }

    static PyObject * _wrap_UpdateRttHistory(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void UpdateRttHistory__parent_caller(ns3::SequenceNumber32 const & seq, uint32_t sz, bool isRetransmission)
    { ns3::TcpSocketBase::UpdateRttHistory(seq, sz, isRetransmission); }

    static PyObject * _wrap_GetDelAckMaxCount(PyNs3TcpSocketBase *self);
    inline uint32_t GetDelAckMaxCount__parent_caller()
    { return ns3::TcpSocketBase::GetDelAckMaxCount(); }

    static PyObject * _wrap_ProcessSynRcvd(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void ProcessSynRcvd__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::TcpHeader const & tcpHeader, ns3::Address const & fromAddress, ns3::Address const & toAddress)
    { ns3::TcpSocketBase::ProcessSynRcvd(packet, tcpHeader, fromAddress, toAddress); }

    static PyObject * _wrap_Destroy(PyNs3TcpSocketBase *self);
    inline void Destroy__parent_caller()
    { ns3::TcpSocketBase::Destroy(); }

    static PyObject * _wrap_DelAckTimeout(PyNs3TcpSocketBase *self);
    inline void DelAckTimeout__parent_caller()
    { ns3::TcpSocketBase::DelAckTimeout(); }

    static PyObject * _wrap_AddOptionWScale(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void AddOptionWScale__parent_caller(ns3::TcpHeader & header)
    { ns3::TcpSocketBase::AddOptionWScale(header); }

    static PyObject * _wrap_Fork(PyNs3TcpSocketBase *self);
    inline ns3::Ptr< ns3::TcpSocketBase > Fork__parent_caller()
    { return ns3::TcpSocketBase::Fork(); }

    static PyObject * _wrap_ForwardUp(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void ForwardUp__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::Ipv4Header header, uint16_t port, ns3::Ptr< ns3::Ipv4Interface > incomingInterface)
    { ns3::TcpSocketBase::ForwardUp(packet, header, port, incomingInterface); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TcpSocketBase *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_ForwardIcmp(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void ForwardIcmp__parent_caller(ns3::Ipv4Address icmpSource, uint8_t icmpTtl, uint8_t icmpType, uint8_t icmpCode, uint32_t icmpInfo)
    { ns3::TcpSocketBase::ForwardIcmp(icmpSource, icmpTtl, icmpType, icmpCode, icmpInfo); }

    static PyObject * _wrap_ReceivedData(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void ReceivedData__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::TcpHeader const & tcpHeader)
    { ns3::TcpSocketBase::ReceivedData(packet, tcpHeader); }

    static PyObject * _wrap_SetTcpNoDelay(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void SetTcpNoDelay__parent_caller(bool noDelay)
    { ns3::TcpSocketBase::SetTcpNoDelay(noDelay); }

    static PyObject * _wrap_SendRST(PyNs3TcpSocketBase *self);
    inline void SendRST__parent_caller()
    { ns3::TcpSocketBase::SendRST(); }

    static PyObject * _wrap_AdvertisedWindowSize(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline uint16_t AdvertisedWindowSize__parent_caller(bool scale)
    { return ns3::TcpSocketBase::AdvertisedWindowSize(scale); }

    static PyObject * _wrap_LastAckTimeout(PyNs3TcpSocketBase *self);
    inline void LastAckTimeout__parent_caller()
    { ns3::TcpSocketBase::LastAckTimeout(); }

    static PyObject * _wrap_SetPersistTimeout(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void SetPersistTimeout__parent_caller(ns3::Time timeout)
    { ns3::TcpSocketBase::SetPersistTimeout(timeout); }

    static PyObject * _wrap_DoPeerClose(PyNs3TcpSocketBase *self);
    inline void DoPeerClose__parent_caller()
    { ns3::TcpSocketBase::DoPeerClose(); }

    static PyObject * _wrap_ProcessWait(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void ProcessWait__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::TcpHeader const & tcpHeader)
    { ns3::TcpSocketBase::ProcessWait(packet, tcpHeader); }

    static PyObject * _wrap_SetConnTimeout(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void SetConnTimeout__parent_caller(ns3::Time timeout)
    { ns3::TcpSocketBase::SetConnTimeout(timeout); }

    static PyObject * _wrap_UpdateWindowSize(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void UpdateWindowSize__parent_caller(ns3::TcpHeader const & header)
    { ns3::TcpSocketBase::UpdateWindowSize(header); }

    static PyObject * _wrap_Retransmit(PyNs3TcpSocketBase *self);
    inline void Retransmit__parent_caller()
    { ns3::TcpSocketBase::Retransmit(); }

    static PyObject * _wrap_ProcessLastAck(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void ProcessLastAck__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::TcpHeader const & tcpHeader)
    { ns3::TcpSocketBase::ProcessLastAck(packet, tcpHeader); }

    static PyObject * _wrap_GetTcpNoDelay(PyNs3TcpSocketBase *self);
    inline bool GetTcpNoDelay__parent_caller()
    { return ns3::TcpSocketBase::GetTcpNoDelay(); }

    static PyObject * _wrap_GetInitialCwnd(PyNs3TcpSocketBase *self);
    inline uint32_t GetInitialCwnd__parent_caller()
    { return ns3::TcpSocketBase::GetInitialCwnd(); }

    static PyObject * _wrap_SetDelAckMaxCount(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void SetDelAckMaxCount__parent_caller(uint32_t count)
    { ns3::TcpSocketBase::SetDelAckMaxCount(count); }

    static PyObject * _wrap_TimeWait(PyNs3TcpSocketBase *self);
    inline void TimeWait__parent_caller()
    { ns3::TcpSocketBase::TimeWait(); }

    static PyObject * _wrap_CompleteFork(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void CompleteFork__parent_caller(ns3::Ptr< ns3::Packet > p, ns3::TcpHeader const & tcpHeader, ns3::Address const & fromAddress, ns3::Address const & toAddress)
    { ns3::TcpSocketBase::CompleteFork(p, tcpHeader, fromAddress, toAddress); }

    static PyObject * _wrap_SetAllowBroadcast(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline bool SetAllowBroadcast__parent_caller(bool allowBroadcast)
    { return ns3::TcpSocketBase::SetAllowBroadcast(allowBroadcast); }

    static PyObject * _wrap_OutOfRange(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline bool OutOfRange__parent_caller(ns3::SequenceNumber32 head, ns3::SequenceNumber32 tail)
    { return ns3::TcpSocketBase::OutOfRange(head, tail); }

    static PyObject * _wrap_SetupCallback(PyNs3TcpSocketBase *self);
    inline int SetupCallback__parent_caller()
    { return ns3::TcpSocketBase::SetupCallback(); }

    static PyObject * _wrap_SendDataPacket(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline uint32_t SendDataPacket__parent_caller(ns3::SequenceNumber32 seq, uint32_t maxSize, bool withAck)
    { return ns3::TcpSocketBase::SendDataPacket(seq, maxSize, withAck); }

    static PyObject * _wrap_SetInitialSSThresh(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void SetInitialSSThresh__parent_caller(uint32_t threshold)
    { ns3::TcpSocketBase::SetInitialSSThresh(threshold); }

    static PyObject * _wrap_SetupEndpoint(PyNs3TcpSocketBase *self);
    inline int SetupEndpoint__parent_caller()
    { return ns3::TcpSocketBase::SetupEndpoint(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpSocketBase *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_ConnectionSucceeded(PyNs3TcpSocketBase *self);
    inline void ConnectionSucceeded__parent_caller()
    { ns3::TcpSocketBase::ConnectionSucceeded(); }

    static PyObject * _wrap_DoRetransmit(PyNs3TcpSocketBase *self);
    inline void DoRetransmit__parent_caller()
    { ns3::TcpSocketBase::DoRetransmit(); }

    static PyObject * _wrap_SetupEndpoint6(PyNs3TcpSocketBase *self);
    inline int SetupEndpoint6__parent_caller()
    { return ns3::TcpSocketBase::SetupEndpoint6(); }

    static PyObject * _wrap_SetSegSize(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void SetSegSize__parent_caller(uint32_t size)
    { ns3::TcpSocketBase::SetSegSize(size); }

    static PyObject * _wrap_CalculateWScale(PyNs3TcpSocketBase *self);
    inline uint8_t CalculateWScale__parent_caller()
    { return ns3::TcpSocketBase::CalculateWScale(); }

    static PyObject * _wrap_Destroy6(PyNs3TcpSocketBase *self);
    inline void Destroy6__parent_caller()
    { ns3::TcpSocketBase::Destroy6(); }

    static PyObject * _wrap_GetSynRetries(PyNs3TcpSocketBase *self);
    inline uint32_t GetSynRetries__parent_caller()
    { return ns3::TcpSocketBase::GetSynRetries(); }

    static PyObject * _wrap_DoConnect(PyNs3TcpSocketBase *self);
    inline int DoConnect__parent_caller()
    { return ns3::TcpSocketBase::DoConnect(); }

    static PyObject * _wrap_GetConnTimeout(PyNs3TcpSocketBase *self);
    inline ns3::Time GetConnTimeout__parent_caller()
    { return ns3::TcpSocketBase::GetConnTimeout(); }

    static PyObject * _wrap_CloseAndNotify(PyNs3TcpSocketBase *self);
    inline void CloseAndNotify__parent_caller()
    { ns3::TcpSocketBase::CloseAndNotify(); }

    static PyObject * _wrap_DoForwardUp(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void DoForwardUp__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::Address const & fromAddress, ns3::Address const & toAddress)
    { ns3::TcpSocketBase::DoForwardUp(packet, fromAddress, toAddress); }

    static PyObject * _wrap_ReTxTimeout(PyNs3TcpSocketBase *self);
    inline void ReTxTimeout__parent_caller()
    { ns3::TcpSocketBase::ReTxTimeout(); }

    static PyObject * _wrap_BytesInFlight(PyNs3TcpSocketBase *self);
    inline uint32_t BytesInFlight__parent_caller()
    { return ns3::TcpSocketBase::BytesInFlight(); }

    static PyObject * _wrap_SetSynRetries(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void SetSynRetries__parent_caller(uint32_t count)
    { ns3::TcpSocketBase::SetSynRetries(count); }

    static PyObject * _wrap_DoClose(PyNs3TcpSocketBase *self);
    inline int DoClose__parent_caller()
    { return ns3::TcpSocketBase::DoClose(); }

    static PyObject * _wrap_Window(PyNs3TcpSocketBase *self);
    inline uint32_t Window__parent_caller()
    { return ns3::TcpSocketBase::Window(); }

    static PyObject * _wrap_GetAllowBroadcast(PyNs3TcpSocketBase *self);
    inline bool GetAllowBroadcast__parent_caller()
    { return ns3::TcpSocketBase::GetAllowBroadcast(); }

    static PyObject * _wrap_GetDelAckTimeout(PyNs3TcpSocketBase *self);
    inline ns3::Time GetDelAckTimeout__parent_caller()
    { return ns3::TcpSocketBase::GetDelAckTimeout(); }

    static PyObject * _wrap_GetInitialSSThresh(PyNs3TcpSocketBase *self);
    inline uint32_t GetInitialSSThresh__parent_caller()
    { return ns3::TcpSocketBase::GetInitialSSThresh(); }

    static PyObject * _wrap_PeerClose(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void PeerClose__parent_caller(ns3::Ptr< ns3::Packet > p, ns3::TcpHeader const & tcpHeader)
    { ns3::TcpSocketBase::PeerClose(p, tcpHeader); }

    static PyObject * _wrap_ProcessEstablished(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void ProcessEstablished__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::TcpHeader const & tcpHeader)
    { ns3::TcpSocketBase::ProcessEstablished(packet, tcpHeader); }

    static PyObject * _wrap_SetDelAckTimeout(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void SetDelAckTimeout__parent_caller(ns3::Time timeout)
    { ns3::TcpSocketBase::SetDelAckTimeout(timeout); }

    static PyObject * _wrap_FastRetransmit(PyNs3TcpSocketBase *self);
    inline void FastRetransmit__parent_caller()
    { ns3::TcpSocketBase::FastRetransmit(); }

    static PyObject * _wrap_SetDataRetries(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void SetDataRetries__parent_caller(uint32_t retries)
    { ns3::TcpSocketBase::SetDataRetries(retries); }

    static PyObject * _wrap_SetInitialCwnd(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void SetInitialCwnd__parent_caller(uint32_t cwnd)
    { ns3::TcpSocketBase::SetInitialCwnd(cwnd); }

    static PyObject * _wrap_LimitedTransmit(PyNs3TcpSocketBase *self);
    inline void LimitedTransmit__parent_caller()
    { ns3::TcpSocketBase::LimitedTransmit(); }

    static PyObject * _wrap_DoDispose(PyNs3TcpSocketBase *self);
    inline void DoDispose__parent_caller()
    { ns3::Socket::DoDispose(); }

    static PyObject * _wrap_ForwardUp6(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void ForwardUp6__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::Ipv6Header header, uint16_t port, ns3::Ptr< ns3::Ipv6Interface > incomingInterface)
    { ns3::TcpSocketBase::ForwardUp6(packet, header, port, incomingInterface); }

    static PyObject * _wrap_GetSegSize(PyNs3TcpSocketBase *self);
    inline uint32_t GetSegSize__parent_caller()
    { return ns3::TcpSocketBase::GetSegSize(); }

    static PyObject * _wrap_ForwardIcmp6(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void ForwardIcmp6__parent_caller(ns3::Ipv6Address icmpSource, uint8_t icmpTtl, uint8_t icmpType, uint8_t icmpCode, uint32_t icmpInfo)
    { ns3::TcpSocketBase::ForwardIcmp6(icmpSource, icmpTtl, icmpType, icmpCode, icmpInfo); }

    static PyObject * _wrap_ProcessSynSent(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void ProcessSynSent__parent_caller(ns3::Ptr< ns3::Packet > packet, ns3::TcpHeader const & tcpHeader)
    { ns3::TcpSocketBase::ProcessSynSent(packet, tcpHeader); }

    static PyObject * _wrap_AddOptionTimestamp(PyNs3TcpSocketBase *self, PyObject *args, PyObject *kwargs);
    inline void AddOptionTimestamp__parent_caller(ns3::TcpHeader & header)
    { ns3::TcpSocketBase::AddOptionTimestamp(header); }

    static PyObject * _wrap_UnAckDataCount(PyNs3TcpSocketBase *self);
    inline uint32_t UnAckDataCount__parent_caller()
    { return ns3::TcpSocketBase::UnAckDataCount(); }

    static PyObject * _wrap_AvailableWindow(PyNs3TcpSocketBase *self);
    inline uint32_t AvailableWindow__parent_caller()
    { return ns3::TcpSocketBase::AvailableWindow(); }

    virtual int Bind();

    virtual int Bind(ns3::Address const & address);

    virtual int Bind6();

    virtual void BindToNetDevice(ns3::Ptr< ns3::NetDevice > netdevice);

    virtual int Close();

    virtual int Connect(ns3::Address const & address);

    virtual ns3::Socket::SocketErrno GetErrno() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual int GetPeerName(ns3::Address & address) const;

    virtual uint32_t GetRxAvailable() const;

    virtual int GetSockName(ns3::Address & address) const;

    virtual ns3::Socket::SocketType GetSocketType() const;

    virtual uint32_t GetTxAvailable() const;

    virtual int Listen();

    virtual ns3::Ptr< ns3::Packet > Recv(uint32_t maxSize, uint32_t flags);

    virtual ns3::Ptr< ns3::Packet > RecvFrom(uint32_t maxSize, uint32_t flags, ns3::Address & fromAddress);

    virtual int Send(ns3::Ptr< ns3::Packet > p, uint32_t flags);

    virtual int SendTo(ns3::Ptr< ns3::Packet > p, uint32_t flags, ns3::Address const & toAddress);

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual void SetRtt(ns3::Ptr< ns3::RttEstimator > rtt);

    virtual void SetTcp(ns3::Ptr< ns3::TcpL4Protocol > tcp);

    virtual int ShutdownRecv();

    virtual int ShutdownSend();

    virtual void AddOptions(ns3::TcpHeader & tcpHeader);

    virtual uint16_t AdvertisedWindowSize(bool scale) const;

    virtual uint32_t AvailableWindow() const;

    virtual uint32_t BytesInFlight();

    virtual void CompleteFork(ns3::Ptr< ns3::Packet > p, ns3::TcpHeader const & tcpHeader, ns3::Address const & fromAddress, ns3::Address const & toAddress);

    virtual void DelAckTimeout();

    virtual void DoForwardUp(ns3::Ptr< ns3::Packet > packet, ns3::Address const & fromAddress, ns3::Address const & toAddress);

    virtual void DoRetransmit();

    virtual void EstimateRtt(ns3::TcpHeader const & tcpHeader);

    virtual ns3::Ptr< ns3::TcpSocketBase > Fork();

    virtual bool GetAllowBroadcast() const;

    virtual ns3::Time GetConnTimeout() const;

    virtual uint32_t GetDataRetries() const;

    virtual uint32_t GetDelAckMaxCount() const;

    virtual ns3::Time GetDelAckTimeout() const;

    virtual uint32_t GetInitialCwnd() const;

    virtual uint32_t GetInitialSSThresh() const;

    virtual ns3::Time GetPersistTimeout() const;

    virtual uint32_t GetRcvBufSize() const;

    virtual uint32_t GetSegSize() const;

    virtual uint32_t GetSndBufSize() const;

    virtual uint32_t GetSynRetries() const;

    virtual bool GetTcpNoDelay() const;

    virtual void LastAckTimeout();

    virtual void NewAck(ns3::SequenceNumber32 const & seq, bool resetRTO);

    virtual void PersistTimeout();

    virtual void ReTxTimeout();

    virtual void ReceivedAck(ns3::Ptr< ns3::Packet > packet, ns3::TcpHeader const & tcpHeader);

    virtual void ReceivedData(ns3::Ptr< ns3::Packet > packet, ns3::TcpHeader const & tcpHeader);

    virtual void Retransmit();

    virtual void SendEmptyPacket(uint8_t flags);

    virtual bool SetAllowBroadcast(bool allowBroadcast);

    virtual void SetConnTimeout(ns3::Time timeout);

    virtual void SetDataRetries(uint32_t retries);

    virtual void SetDelAckMaxCount(uint32_t count);

    virtual void SetDelAckTimeout(ns3::Time timeout);

    virtual void SetInitialCwnd(uint32_t cwnd);

    virtual void SetInitialSSThresh(uint32_t threshold);

    virtual void SetPersistTimeout(ns3::Time timeout);

    virtual void SetRcvBufSize(uint32_t size);

    virtual void SetSegSize(uint32_t size);

    virtual void SetSndBufSize(uint32_t size);

    virtual void SetSynRetries(uint32_t count);

    virtual void SetTcpNoDelay(bool noDelay);

    virtual uint32_t UnAckDataCount() const;

    virtual void UpdateRttHistory(ns3::SequenceNumber32 const & seq, uint32_t sz, bool isRetransmission);

    virtual uint32_t Window() const;

    virtual void SetIpTtl(uint8_t ipTtl);

    virtual uint8_t GetIpTtl() const;

    virtual void Ipv6JoinGroup(ns3::Ipv6Address address, ns3::Socket::Ipv6MulticastFilterMode filterMode, std::vector< ns3::Ipv6Address > sourceAddresses);

    virtual void Ipv6JoinGroup(ns3::Ipv6Address address);

    virtual void Ipv6LeaveGroup();

    virtual void SetIpv6HopLimit(uint8_t ipHopLimit);

    virtual uint8_t GetIpv6HopLimit() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TcpSocketBase__PythonHelper")
        .SetParent< ns3::TcpSocketBase > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TcpSocketBase__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TcpSocketFactory *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpSocketFactory;


extern PyTypeObject PyNs3TcpSocketFactory_Type;


typedef struct {
    PyObject_HEAD
    ns3::TcpSocketState *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpSocketState;


extern PyTypeObject PyNs3TcpSocketState_Type;


typedef struct {
    PyObject_HEAD
    ns3::TcpTxBuffer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpTxBuffer;


extern PyTypeObject PyNs3TcpTxBuffer_Type;


typedef struct {
    PyObject_HEAD
    ns3::TcpVegas *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpVegas;


extern PyTypeObject PyNs3TcpVegas_Type;

class PyNs3TcpVegas__PythonHelper : public ns3::TcpVegas
{
public:
    PyObject *m_pyself;
    PyNs3TcpVegas__PythonHelper()
        : ns3::TcpVegas(), m_pyself(NULL)
        {}

    PyNs3TcpVegas__PythonHelper(ns3::TcpVegas const & sock)
        : ns3::TcpVegas(sock), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpVegas__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpVegas *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3TcpVegas *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TcpVegas *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_CongestionAvoidance(PyNs3TcpVegas *self, PyObject *args, PyObject *kwargs);
    inline void CongestionAvoidance__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { ns3::TcpNewReno::CongestionAvoidance(tcb, segmentsAcked); }

    static PyObject * _wrap_DoDispose(PyNs3TcpVegas *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_SlowStart(PyNs3TcpVegas *self, PyObject *args, PyObject *kwargs);
    inline uint32_t SlowStart__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { return ns3::TcpNewReno::SlowStart(tcb, segmentsAcked); }

    virtual void CongestionStateSet(ns3::Ptr< ns3::TcpSocketState > tcb, ns3::TcpSocketState::TcpCongState_t newState);

    virtual ns3::Ptr< ns3::TcpCongestionOps > Fork();

    virtual std::string GetName() const;

    virtual uint32_t GetSsThresh(ns3::Ptr< ns3::TcpSocketState const > tcb, uint32_t bytesInFlight);

    virtual void IncreaseWindow(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual void PktsAcked(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked, ns3::Time const & rtt);

    virtual void CongestionAvoidance(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual uint32_t SlowStart(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TcpVegas__PythonHelper")
        .SetParent< ns3::TcpVegas > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TcpVegas__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TcpVeno *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpVeno;


extern PyTypeObject PyNs3TcpVeno_Type;

class PyNs3TcpVeno__PythonHelper : public ns3::TcpVeno
{
public:
    PyObject *m_pyself;
    PyNs3TcpVeno__PythonHelper()
        : ns3::TcpVeno(), m_pyself(NULL)
        {}

    PyNs3TcpVeno__PythonHelper(ns3::TcpVeno const & sock)
        : ns3::TcpVeno(sock), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpVeno__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpVeno *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3TcpVeno *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TcpVeno *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_CongestionAvoidance(PyNs3TcpVeno *self, PyObject *args, PyObject *kwargs);
    inline void CongestionAvoidance__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { ns3::TcpNewReno::CongestionAvoidance(tcb, segmentsAcked); }

    static PyObject * _wrap_DoDispose(PyNs3TcpVeno *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_SlowStart(PyNs3TcpVeno *self, PyObject *args, PyObject *kwargs);
    inline uint32_t SlowStart__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { return ns3::TcpNewReno::SlowStart(tcb, segmentsAcked); }

    virtual void CongestionStateSet(ns3::Ptr< ns3::TcpSocketState > tcb, ns3::TcpSocketState::TcpCongState_t newState);

    virtual ns3::Ptr< ns3::TcpCongestionOps > Fork();

    virtual std::string GetName() const;

    virtual uint32_t GetSsThresh(ns3::Ptr< ns3::TcpSocketState const > tcb, uint32_t bytesInFlight);

    virtual void IncreaseWindow(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual void PktsAcked(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked, ns3::Time const & rtt);

    virtual void CongestionAvoidance(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual uint32_t SlowStart(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TcpVeno__PythonHelper")
        .SetParent< ns3::TcpVeno > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TcpVeno__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TcpWestwood *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpWestwood;


extern PyTypeObject PyNs3TcpWestwood_Type;

class PyNs3TcpWestwood__PythonHelper : public ns3::TcpWestwood
{
public:
    PyObject *m_pyself;
    PyNs3TcpWestwood__PythonHelper()
        : ns3::TcpWestwood(), m_pyself(NULL)
        {}

    PyNs3TcpWestwood__PythonHelper(ns3::TcpWestwood const & sock)
        : ns3::TcpWestwood(sock), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpWestwood__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpWestwood *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3TcpWestwood *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TcpWestwood *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_CongestionAvoidance(PyNs3TcpWestwood *self, PyObject *args, PyObject *kwargs);
    inline void CongestionAvoidance__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { ns3::TcpNewReno::CongestionAvoidance(tcb, segmentsAcked); }

    static PyObject * _wrap_DoDispose(PyNs3TcpWestwood *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_SlowStart(PyNs3TcpWestwood *self, PyObject *args, PyObject *kwargs);
    inline uint32_t SlowStart__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { return ns3::TcpNewReno::SlowStart(tcb, segmentsAcked); }

    virtual ns3::Ptr< ns3::TcpCongestionOps > Fork();

    virtual uint32_t GetSsThresh(ns3::Ptr< ns3::TcpSocketState const > tcb, uint32_t bytesInFlight);

    virtual void PktsAcked(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t packetsAcked, ns3::Time const & rtt);

    virtual std::string GetName() const;

    virtual void IncreaseWindow(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual void CongestionAvoidance(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual uint32_t SlowStart(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual void CongestionStateSet(ns3::Ptr< ns3::TcpSocketState > tcb, ns3::TcpSocketState::TcpCongState_t newState);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TcpWestwood__PythonHelper")
        .SetParent< ns3::TcpWestwood > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TcpWestwood__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TcpYeah *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpYeah;


extern PyTypeObject PyNs3TcpYeah_Type;

class PyNs3TcpYeah__PythonHelper : public ns3::TcpYeah
{
public:
    PyObject *m_pyself;
    PyNs3TcpYeah__PythonHelper()
        : ns3::TcpYeah(), m_pyself(NULL)
        {}

    PyNs3TcpYeah__PythonHelper(ns3::TcpYeah const & sock)
        : ns3::TcpYeah(sock), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpYeah__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpYeah *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3TcpYeah *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TcpYeah *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_CongestionAvoidance(PyNs3TcpYeah *self, PyObject *args, PyObject *kwargs);
    inline void CongestionAvoidance__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { ns3::TcpNewReno::CongestionAvoidance(tcb, segmentsAcked); }

    static PyObject * _wrap_DoDispose(PyNs3TcpYeah *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_SlowStart(PyNs3TcpYeah *self, PyObject *args, PyObject *kwargs);
    inline uint32_t SlowStart__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { return ns3::TcpNewReno::SlowStart(tcb, segmentsAcked); }

    virtual void CongestionStateSet(ns3::Ptr< ns3::TcpSocketState > tcb, ns3::TcpSocketState::TcpCongState_t newState);

    virtual ns3::Ptr< ns3::TcpCongestionOps > Fork();

    virtual std::string GetName() const;

    virtual uint32_t GetSsThresh(ns3::Ptr< ns3::TcpSocketState const > tcb, uint32_t bytesInFlight);

    virtual void IncreaseWindow(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual void PktsAcked(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked, ns3::Time const & rtt);

    virtual void CongestionAvoidance(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual uint32_t SlowStart(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TcpYeah__PythonHelper")
        .SetParent< ns3::TcpYeah > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TcpYeah__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UdpHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpHeader;


extern PyTypeObject PyNs3UdpHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::UdpSocket *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpSocket;


extern PyTypeObject PyNs3UdpSocket_Type;

class PyNs3UdpSocket__PythonHelper : public ns3::UdpSocket
{
public:
    PyObject *m_pyself;
    PyNs3UdpSocket__PythonHelper(ns3::UdpSocket const & arg0)
        : ns3::UdpSocket(arg0), m_pyself(NULL)
        {}

    PyNs3UdpSocket__PythonHelper()
        : ns3::UdpSocket(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UdpSocket__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UdpSocket *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3UdpSocket *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UdpSocket *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3UdpSocket *self);
    inline void DoDispose__parent_caller()
    { ns3::Socket::DoDispose(); }

    virtual int MulticastJoinGroup(uint32_t interface, ns3::Address const & groupAddress);

    virtual int MulticastLeaveGroup(uint32_t interface, ns3::Address const & groupAddress);

    virtual int32_t GetIpMulticastIf() const;

    virtual bool GetIpMulticastLoop() const;

    virtual uint8_t GetIpMulticastTtl() const;

    virtual bool GetMtuDiscover() const;

    virtual uint32_t GetRcvBufSize() const;

    virtual void SetIpMulticastIf(int32_t ipIf);

    virtual void SetIpMulticastLoop(bool loop);

    virtual void SetIpMulticastTtl(uint8_t ipTtl);

    virtual void SetMtuDiscover(bool discover);

    virtual void SetRcvBufSize(uint32_t size);

    virtual uint32_t GetRxAvailable() const;

    virtual bool SetAllowBroadcast(bool allowBroadcast);

    virtual ns3::Socket::SocketType GetSocketType() const;

    virtual void BindToNetDevice(ns3::Ptr< ns3::NetDevice > netdevice);

    virtual int Bind6();

    virtual bool GetAllowBroadcast() const;

    virtual ns3::Socket::SocketErrno GetErrno() const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual void SetIpTtl(uint8_t ipTtl);

    virtual int ShutdownRecv();

    virtual uint8_t GetIpTtl() const;

    virtual int ShutdownSend();

    virtual int GetSockName(ns3::Address & address) const;

    virtual uint32_t GetTxAvailable() const;

    virtual int GetPeerName(ns3::Address & address) const;

    virtual int Listen();

    virtual ns3::Ptr< ns3::Packet > Recv(uint32_t maxSize, uint32_t flags);

    virtual void Ipv6JoinGroup(ns3::Ipv6Address address, ns3::Socket::Ipv6MulticastFilterMode filterMode, std::vector< ns3::Ipv6Address > sourceAddresses);

    virtual void Ipv6JoinGroup(ns3::Ipv6Address address);

    virtual int Bind(ns3::Address const & address);

    virtual int Bind();

    virtual void Ipv6LeaveGroup();

    virtual int SendTo(ns3::Ptr< ns3::Packet > p, uint32_t flags, ns3::Address const & toAddress);

    virtual int Send(ns3::Ptr< ns3::Packet > p, uint32_t flags);

    virtual void SetIpv6HopLimit(uint8_t ipHopLimit);

    virtual uint8_t GetIpv6HopLimit() const;

    virtual ns3::Ptr< ns3::Packet > RecvFrom(uint32_t maxSize, uint32_t flags, ns3::Address & fromAddress);

    virtual int Connect(ns3::Address const & address);

    virtual int Close();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UdpSocket__PythonHelper")
        .SetParent< ns3::UdpSocket > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UdpSocket__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UdpSocketFactory *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpSocketFactory;


extern PyTypeObject PyNs3UdpSocketFactory_Type;


typedef struct {
    PyObject_HEAD
    ns3::ArpCache *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ArpCache;


extern PyTypeObject PyNs3ArpCache_Type;

class PyNs3ArpCache__PythonHelper : public ns3::ArpCache
{
public:
    PyObject *m_pyself;
    PyNs3ArpCache__PythonHelper()
        : ns3::ArpCache(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ArpCache__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ArpCache *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3ArpCache *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ArpCache *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ArpCache__PythonHelper")
        .SetParent< ns3::ArpCache > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ArpCache__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ArpCache::Entry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ArpCacheEntry;


extern PyTypeObject PyNs3ArpCacheEntry_Type;

extern std::map<void*, PyObject*> PyNs3ArpCacheEntry_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ArpHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ArpHeader;


extern PyTypeObject PyNs3ArpHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::ArpL3Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ArpL3Protocol;


extern PyTypeObject PyNs3ArpL3Protocol_Type;
extern PyTypeObject PyNs3ArpL3ProtocolMeta_Type;

class PyNs3ArpL3Protocol__PythonHelper : public ns3::ArpL3Protocol
{
public:
    PyObject *m_pyself;
    PyNs3ArpL3Protocol__PythonHelper()
        : ns3::ArpL3Protocol(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ArpL3Protocol__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ArpL3Protocol *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3ArpL3Protocol *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ArpL3Protocol *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::ArpL3Protocol::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3ArpL3Protocol *self);
    inline void DoDispose__parent_caller()
    { ns3::ArpL3Protocol::DoDispose(); }

    virtual void DoDispose();

    virtual void NotifyNewAggregate();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ArpL3Protocol__PythonHelper")
        .SetParent< ns3::ArpL3Protocol > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ArpL3Protocol__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::GlobalRouter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GlobalRouter;


extern PyTypeObject PyNs3GlobalRouter_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6DestinationUnreachable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6DestinationUnreachable;


extern PyTypeObject PyNs3Icmpv6DestinationUnreachable_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6Echo *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6Echo;


extern PyTypeObject PyNs3Icmpv6Echo_Type;


typedef struct {
    PyObject_HEAD
    ns3::IpL4Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3IpL4Protocol;


extern PyTypeObject PyNs3IpL4Protocol_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4;


extern PyTypeObject PyNs3Ipv4_Type;
extern PyTypeObject PyNs3Ipv4Meta_Type;

class PyNs3Ipv4__PythonHelper : public ns3::Ipv4
{
public:
    PyObject *m_pyself;
    PyNs3Ipv4__PythonHelper(ns3::Ipv4 const & arg0)
        : ns3::Ipv4(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv4__PythonHelper()
        : ns3::Ipv4(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv4__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv4 *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Ipv4 *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv4 *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv4 *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool AddAddress(uint32_t interface, ns3::Ipv4InterfaceAddress address);

    virtual uint32_t AddInterface(ns3::Ptr< ns3::NetDevice > device);

    virtual ns3::Ptr< ns3::Socket > CreateRawSocket();

    virtual void DeleteRawSocket(ns3::Ptr< ns3::Socket > socket);

    virtual ns3::Ipv4InterfaceAddress GetAddress(uint32_t interface, uint32_t addressIndex) const;

    virtual int32_t GetInterfaceForAddress(ns3::Ipv4Address address) const;

    virtual int32_t GetInterfaceForDevice(ns3::Ptr< ns3::NetDevice const > device) const;

    virtual int32_t GetInterfaceForPrefix(ns3::Ipv4Address address, ns3::Ipv4Mask mask) const;

    virtual uint16_t GetMetric(uint32_t interface) const;

    virtual uint16_t GetMtu(uint32_t interface) const;

    virtual uint32_t GetNAddresses(uint32_t interface) const;

    virtual uint32_t GetNInterfaces() const;

    virtual ns3::Ptr< ns3::NetDevice > GetNetDevice(uint32_t interface);

    virtual ns3::Ptr< ns3::IpL4Protocol > GetProtocol(int protocolNumber) const;

    virtual ns3::Ptr< ns3::IpL4Protocol > GetProtocol(int protocolNumber, int32_t interfaceIndex) const;

    virtual ns3::Ptr< ns3::Ipv4RoutingProtocol > GetRoutingProtocol() const;

    virtual void Insert(ns3::Ptr< ns3::IpL4Protocol > protocol);

    virtual void Insert(ns3::Ptr< ns3::IpL4Protocol > protocol, uint32_t interfaceIndex);

    virtual bool IsDestinationAddress(ns3::Ipv4Address address, uint32_t iif) const;

    virtual bool IsForwarding(uint32_t interface) const;

    virtual bool IsUp(uint32_t interface) const;

    virtual void Remove(ns3::Ptr< ns3::IpL4Protocol > protocol);

    virtual void Remove(ns3::Ptr< ns3::IpL4Protocol > protocol, uint32_t interfaceIndex);

    virtual bool RemoveAddress(uint32_t interface, uint32_t addressIndex);

    virtual bool RemoveAddress(uint32_t interface, ns3::Ipv4Address address);

    virtual ns3::Ipv4Address SelectSourceAddress(ns3::Ptr< ns3::NetDevice const > device, ns3::Ipv4Address dst, ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e scope);

    virtual void Send(ns3::Ptr< ns3::Packet > packet, ns3::Ipv4Address source, ns3::Ipv4Address destination, uint8_t protocol, ns3::Ptr< ns3::Ipv4Route > route);

    virtual void SendWithHeader(ns3::Ptr< ns3::Packet > packet, ns3::Ipv4Header ipHeader, ns3::Ptr< ns3::Ipv4Route > route);

    virtual void SetDown(uint32_t interface);

    virtual void SetForwarding(uint32_t interface, bool val);

    virtual void SetMetric(uint32_t interface, uint16_t metric);

    virtual void SetRoutingProtocol(ns3::Ptr< ns3::Ipv4RoutingProtocol > routingProtocol);

    virtual void SetUp(uint32_t interface);

    virtual ns3::Ipv4Address SourceAddressSelection(uint32_t interface, ns3::Ipv4Address dest);

    virtual bool GetIpForward() const;

    virtual bool GetWeakEsModel() const;

    virtual void SetIpForward(bool forward);

    virtual void SetWeakEsModel(bool model);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv4__PythonHelper")
        .SetParent< ns3::Ipv4 > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv4__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv4Interface *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Interface;


extern PyTypeObject PyNs3Ipv4Interface_Type;

class PyNs3Ipv4Interface__PythonHelper : public ns3::Ipv4Interface
{
public:
    PyObject *m_pyself;
    PyNs3Ipv4Interface__PythonHelper(ns3::Ipv4Interface const & arg0)
        : ns3::Ipv4Interface(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv4Interface__PythonHelper()
        : ns3::Ipv4Interface(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv4Interface__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv4Interface *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Ipv4Interface *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv4Interface *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv4Interface *self);
    inline void DoDispose__parent_caller()
    { ns3::Ipv4Interface::DoDispose(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv4Interface__PythonHelper")
        .SetParent< ns3::Ipv4Interface > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv4Interface__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv4L3Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4L3Protocol;


extern PyTypeObject PyNs3Ipv4L3Protocol_Type;
extern PyTypeObject PyNs3Ipv4L3ProtocolMeta_Type;

class PyNs3Ipv4L3Protocol__PythonHelper : public ns3::Ipv4L3Protocol
{
public:
    PyObject *m_pyself;
    PyNs3Ipv4L3Protocol__PythonHelper()
        : ns3::Ipv4L3Protocol(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv4L3Protocol__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv4L3Protocol *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Ipv4L3Protocol *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv4L3Protocol *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Ipv4L3Protocol::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv4L3Protocol *self);
    inline void DoDispose__parent_caller()
    { ns3::Ipv4L3Protocol::DoDispose(); }

    virtual bool AddAddress(uint32_t i, ns3::Ipv4InterfaceAddress address);

    virtual uint32_t AddInterface(ns3::Ptr< ns3::NetDevice > device);

    virtual ns3::Ptr< ns3::Socket > CreateRawSocket();

    virtual void DeleteRawSocket(ns3::Ptr< ns3::Socket > socket);

    virtual ns3::Ipv4InterfaceAddress GetAddress(uint32_t interfaceIndex, uint32_t addressIndex) const;

    virtual int32_t GetInterfaceForAddress(ns3::Ipv4Address addr) const;

    virtual int32_t GetInterfaceForDevice(ns3::Ptr< ns3::NetDevice const > device) const;

    virtual int32_t GetInterfaceForPrefix(ns3::Ipv4Address addr, ns3::Ipv4Mask mask) const;

    virtual uint16_t GetMetric(uint32_t i) const;

    virtual uint16_t GetMtu(uint32_t i) const;

    virtual uint32_t GetNAddresses(uint32_t interface) const;

    virtual uint32_t GetNInterfaces() const;

    virtual ns3::Ptr< ns3::NetDevice > GetNetDevice(uint32_t i);

    virtual ns3::Ptr< ns3::IpL4Protocol > GetProtocol(int protocolNumber) const;

    virtual ns3::Ptr< ns3::IpL4Protocol > GetProtocol(int protocolNumber, int32_t interfaceIndex) const;

    virtual ns3::Ptr< ns3::Ipv4RoutingProtocol > GetRoutingProtocol() const;

    virtual void Insert(ns3::Ptr< ns3::IpL4Protocol > protocol);

    virtual void Insert(ns3::Ptr< ns3::IpL4Protocol > protocol, uint32_t interfaceIndex);

    virtual bool IsDestinationAddress(ns3::Ipv4Address address, uint32_t iif) const;

    virtual bool IsForwarding(uint32_t i) const;

    virtual bool IsUp(uint32_t i) const;

    virtual void Remove(ns3::Ptr< ns3::IpL4Protocol > protocol);

    virtual void Remove(ns3::Ptr< ns3::IpL4Protocol > protocol, uint32_t interfaceIndex);

    virtual bool RemoveAddress(uint32_t interfaceIndex, uint32_t addressIndex);

    virtual bool RemoveAddress(uint32_t interface, ns3::Ipv4Address address);

    virtual ns3::Ipv4Address SelectSourceAddress(ns3::Ptr< ns3::NetDevice const > device, ns3::Ipv4Address dst, ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e scope);

    virtual void Send(ns3::Ptr< ns3::Packet > packet, ns3::Ipv4Address source, ns3::Ipv4Address destination, uint8_t protocol, ns3::Ptr< ns3::Ipv4Route > route);

    virtual void SendWithHeader(ns3::Ptr< ns3::Packet > packet, ns3::Ipv4Header ipHeader, ns3::Ptr< ns3::Ipv4Route > route);

    virtual void SetDown(uint32_t i);

    virtual void SetForwarding(uint32_t i, bool val);

    virtual void SetMetric(uint32_t i, uint16_t metric);

    virtual void SetRoutingProtocol(ns3::Ptr< ns3::Ipv4RoutingProtocol > routingProtocol);

    virtual void SetUp(uint32_t i);

    virtual ns3::Ipv4Address SourceAddressSelection(uint32_t interface, ns3::Ipv4Address dest);

    virtual void DoDispose();

    virtual void NotifyNewAggregate();

    virtual bool GetIpForward() const;

    virtual bool GetWeakEsModel() const;

    virtual void SetIpForward(bool forward);

    virtual void SetWeakEsModel(bool model);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv4L3Protocol__PythonHelper")
        .SetParent< ns3::Ipv4L3Protocol > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv4L3Protocol__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MulticastRoute *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MulticastRoute;


extern PyTypeObject PyNs3Ipv4MulticastRoute_Type;
extern PyTypeObject PyNs3Ipv4MulticastRouteMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4PacketFilter *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4PacketFilter;


extern PyTypeObject PyNs3Ipv4PacketFilter_Type;

class PyNs3Ipv4PacketFilter__PythonHelper : public ns3::Ipv4PacketFilter
{
public:
    PyObject *m_pyself;
    PyNs3Ipv4PacketFilter__PythonHelper(ns3::Ipv4PacketFilter const & arg0)
        : ns3::Ipv4PacketFilter(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv4PacketFilter__PythonHelper()
        : ns3::Ipv4PacketFilter(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv4PacketFilter__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv4PacketFilter *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Ipv4PacketFilter *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv4PacketFilter *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv4PacketFilter *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool CheckProtocol(ns3::Ptr< ns3::QueueDiscItem > item) const;

    virtual int32_t DoClassify(ns3::Ptr< ns3::QueueDiscItem > item) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv4PacketFilter__PythonHelper")
        .SetParent< ns3::Ipv4PacketFilter > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv4PacketFilter__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv4RawSocketFactory *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4RawSocketFactory;


extern PyTypeObject PyNs3Ipv4RawSocketFactory_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4RawSocketImpl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4RawSocketImpl;


extern PyTypeObject PyNs3Ipv4RawSocketImpl_Type;

class PyNs3Ipv4RawSocketImpl__PythonHelper : public ns3::Ipv4RawSocketImpl
{
public:
    PyObject *m_pyself;
    PyNs3Ipv4RawSocketImpl__PythonHelper(ns3::Ipv4RawSocketImpl const & arg0)
        : ns3::Ipv4RawSocketImpl(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv4RawSocketImpl__PythonHelper()
        : ns3::Ipv4RawSocketImpl(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv4RawSocketImpl__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv4RawSocketImpl *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Ipv4RawSocketImpl *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv4RawSocketImpl *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual int Bind(ns3::Address const & address);

    virtual int Bind();

    virtual int Bind6();

    virtual int Close();

    virtual int Connect(ns3::Address const & address);

    virtual bool GetAllowBroadcast() const;

    virtual ns3::Socket::SocketErrno GetErrno() const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual int GetPeerName(ns3::Address & address) const;

    virtual uint32_t GetRxAvailable() const;

    virtual int GetSockName(ns3::Address & address) const;

    virtual ns3::Socket::SocketType GetSocketType() const;

    virtual uint32_t GetTxAvailable() const;

    virtual int Listen();

    virtual ns3::Ptr< ns3::Packet > Recv(uint32_t maxSize, uint32_t flags);

    virtual ns3::Ptr< ns3::Packet > RecvFrom(uint32_t maxSize, uint32_t flags, ns3::Address & fromAddress);

    virtual int Send(ns3::Ptr< ns3::Packet > p, uint32_t flags);

    virtual int SendTo(ns3::Ptr< ns3::Packet > p, uint32_t flags, ns3::Address const & toAddress);

    virtual bool SetAllowBroadcast(bool allowBroadcast);

    virtual int ShutdownRecv();

    virtual int ShutdownSend();

    virtual void DoDispose();

    virtual void BindToNetDevice(ns3::Ptr< ns3::NetDevice > netdevice);

    virtual void SetIpTtl(uint8_t ipTtl);

    virtual uint8_t GetIpTtl() const;

    virtual void Ipv6JoinGroup(ns3::Ipv6Address address, ns3::Socket::Ipv6MulticastFilterMode filterMode, std::vector< ns3::Ipv6Address > sourceAddresses);

    virtual void Ipv6JoinGroup(ns3::Ipv6Address address);

    virtual void Ipv6LeaveGroup();

    virtual void SetIpv6HopLimit(uint8_t ipHopLimit);

    virtual uint8_t GetIpv6HopLimit() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv4RawSocketImpl__PythonHelper")
        .SetParent< ns3::Ipv4RawSocketImpl > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv4RawSocketImpl__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv4Route *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Route;


extern PyTypeObject PyNs3Ipv4Route_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4RoutingProtocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4RoutingProtocol;


extern PyTypeObject PyNs3Ipv4RoutingProtocol_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4StaticRouting *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4StaticRouting;


extern PyTypeObject PyNs3Ipv4StaticRouting_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6;


extern PyTypeObject PyNs3Ipv6_Type;
extern PyTypeObject PyNs3Ipv6Meta_Type;

class PyNs3Ipv6__PythonHelper : public ns3::Ipv6
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6__PythonHelper(ns3::Ipv6 const & arg0)
        : ns3::Ipv6(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6__PythonHelper()
        : ns3::Ipv6(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6 *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Ipv6 *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv6 *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv6 *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool AddAddress(uint32_t interface, ns3::Ipv6InterfaceAddress address);

    virtual uint32_t AddInterface(ns3::Ptr< ns3::NetDevice > device);

    virtual ns3::Ipv6InterfaceAddress GetAddress(uint32_t interface, uint32_t addressIndex) const;

    virtual int32_t GetInterfaceForAddress(ns3::Ipv6Address address) const;

    virtual int32_t GetInterfaceForDevice(ns3::Ptr< ns3::NetDevice const > device) const;

    virtual int32_t GetInterfaceForPrefix(ns3::Ipv6Address address, ns3::Ipv6Prefix mask) const;

    virtual uint16_t GetMetric(uint32_t interface) const;

    virtual uint16_t GetMtu(uint32_t interface) const;

    virtual uint32_t GetNAddresses(uint32_t interface) const;

    virtual uint32_t GetNInterfaces() const;

    virtual ns3::Ptr< ns3::NetDevice > GetNetDevice(uint32_t interface);

    virtual ns3::Ptr< ns3::IpL4Protocol > GetProtocol(int protocolNumber) const;

    virtual ns3::Ptr< ns3::IpL4Protocol > GetProtocol(int protocolNumber, int32_t interfaceIndex) const;

    virtual ns3::Ptr< ns3::Ipv6RoutingProtocol > GetRoutingProtocol() const;

    virtual void Insert(ns3::Ptr< ns3::IpL4Protocol > protocol);

    virtual void Insert(ns3::Ptr< ns3::IpL4Protocol > protocol, uint32_t interfaceIndex);

    virtual bool IsForwarding(uint32_t interface) const;

    virtual bool IsUp(uint32_t interface) const;

    virtual void RegisterExtensions();

    virtual void RegisterOptions();

    virtual void Remove(ns3::Ptr< ns3::IpL4Protocol > protocol);

    virtual void Remove(ns3::Ptr< ns3::IpL4Protocol > protocol, uint32_t interfaceIndex);

    virtual bool RemoveAddress(uint32_t interface, uint32_t addressIndex);

    virtual bool RemoveAddress(uint32_t interface, ns3::Ipv6Address address);

    virtual void Send(ns3::Ptr< ns3::Packet > packet, ns3::Ipv6Address source, ns3::Ipv6Address destination, uint8_t protocol, ns3::Ptr< ns3::Ipv6Route > route);

    virtual void SetDown(uint32_t interface);

    virtual void SetForwarding(uint32_t interface, bool val);

    virtual void SetMetric(uint32_t interface, uint16_t metric);

    virtual void SetPmtu(ns3::Ipv6Address dst, uint32_t pmtu);

    virtual void SetRoutingProtocol(ns3::Ptr< ns3::Ipv6RoutingProtocol > routingProtocol);

    virtual void SetUp(uint32_t interface);

    virtual ns3::Ipv6Address SourceAddressSelection(uint32_t interface, ns3::Ipv6Address dest);

    virtual bool GetIpForward() const;

    virtual bool GetMtuDiscover() const;

    virtual void SetIpForward(bool forward);

    virtual void SetMtuDiscover(bool mtuDiscover);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv6__PythonHelper")
        .SetParent< ns3::Ipv6 > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv6__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv6Extension *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Extension;


extern PyTypeObject PyNs3Ipv6Extension_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionAH *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionAH;


extern PyTypeObject PyNs3Ipv6ExtensionAH_Type;
extern PyTypeObject PyNs3Ipv6ExtensionAHMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionAHHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionAHHeader;


extern PyTypeObject PyNs3Ipv6ExtensionAHHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionDemux *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionDemux;


extern PyTypeObject PyNs3Ipv6ExtensionDemux_Type;

class PyNs3Ipv6ExtensionDemux__PythonHelper : public ns3::Ipv6ExtensionDemux
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6ExtensionDemux__PythonHelper(ns3::Ipv6ExtensionDemux const & arg0)
        : ns3::Ipv6ExtensionDemux(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6ExtensionDemux__PythonHelper()
        : ns3::Ipv6ExtensionDemux(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6ExtensionDemux__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6ExtensionDemux *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Ipv6ExtensionDemux *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv6ExtensionDemux *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv6ExtensionDemux *self);
    inline void DoDispose__parent_caller()
    { ns3::Ipv6ExtensionDemux::DoDispose(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv6ExtensionDemux__PythonHelper")
        .SetParent< ns3::Ipv6ExtensionDemux > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv6ExtensionDemux__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionDestination *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionDestination;


extern PyTypeObject PyNs3Ipv6ExtensionDestination_Type;
extern PyTypeObject PyNs3Ipv6ExtensionDestinationMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionDestinationHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionDestinationHeader;


extern PyTypeObject PyNs3Ipv6ExtensionDestinationHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionESP *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionESP;


extern PyTypeObject PyNs3Ipv6ExtensionESP_Type;
extern PyTypeObject PyNs3Ipv6ExtensionESPMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionESPHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionESPHeader;


extern PyTypeObject PyNs3Ipv6ExtensionESPHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionFragment *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionFragment;


extern PyTypeObject PyNs3Ipv6ExtensionFragment_Type;
extern PyTypeObject PyNs3Ipv6ExtensionFragmentMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionFragmentHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionFragmentHeader;


extern PyTypeObject PyNs3Ipv6ExtensionFragmentHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionHopByHop *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionHopByHop;


extern PyTypeObject PyNs3Ipv6ExtensionHopByHop_Type;
extern PyTypeObject PyNs3Ipv6ExtensionHopByHopMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionLooseRoutingHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionLooseRoutingHeader;


extern PyTypeObject PyNs3Ipv6ExtensionLooseRoutingHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionRouting *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionRouting;


extern PyTypeObject PyNs3Ipv6ExtensionRouting_Type;
extern PyTypeObject PyNs3Ipv6ExtensionRoutingMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionRoutingDemux *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionRoutingDemux;


extern PyTypeObject PyNs3Ipv6ExtensionRoutingDemux_Type;

class PyNs3Ipv6ExtensionRoutingDemux__PythonHelper : public ns3::Ipv6ExtensionRoutingDemux
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6ExtensionRoutingDemux__PythonHelper(ns3::Ipv6ExtensionRoutingDemux const & arg0)
        : ns3::Ipv6ExtensionRoutingDemux(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6ExtensionRoutingDemux__PythonHelper()
        : ns3::Ipv6ExtensionRoutingDemux(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6ExtensionRoutingDemux__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6ExtensionRoutingDemux *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Ipv6ExtensionRoutingDemux *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv6ExtensionRoutingDemux *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv6ExtensionRoutingDemux *self);
    inline void DoDispose__parent_caller()
    { ns3::Ipv6ExtensionRoutingDemux::DoDispose(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv6ExtensionRoutingDemux__PythonHelper")
        .SetParent< ns3::Ipv6ExtensionRoutingDemux > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv6ExtensionRoutingDemux__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv6Interface *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Interface;


extern PyTypeObject PyNs3Ipv6Interface_Type;

class PyNs3Ipv6Interface__PythonHelper : public ns3::Ipv6Interface
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6Interface__PythonHelper(ns3::Ipv6Interface const & arg0)
        : ns3::Ipv6Interface(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6Interface__PythonHelper()
        : ns3::Ipv6Interface(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6Interface__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6Interface *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Ipv6Interface *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv6Interface *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv6Interface *self);
    inline void DoDispose__parent_caller()
    { ns3::Ipv6Interface::DoDispose(); }

    virtual ns3::Ptr< ns3::NetDevice > GetDevice() const;

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv6Interface__PythonHelper")
        .SetParent< ns3::Ipv6Interface > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv6Interface__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv6L3Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6L3Protocol;


extern PyTypeObject PyNs3Ipv6L3Protocol_Type;
extern PyTypeObject PyNs3Ipv6L3ProtocolMeta_Type;

class PyNs3Ipv6L3Protocol__PythonHelper : public ns3::Ipv6L3Protocol
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6L3Protocol__PythonHelper()
        : ns3::Ipv6L3Protocol(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6L3Protocol__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6L3Protocol *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Ipv6L3Protocol *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv6L3Protocol *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Ipv6L3Protocol::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv6L3Protocol *self);
    inline void DoDispose__parent_caller()
    { ns3::Ipv6L3Protocol::DoDispose(); }

    virtual void Insert(ns3::Ptr< ns3::IpL4Protocol > protocol);

    virtual void Insert(ns3::Ptr< ns3::IpL4Protocol > protocol, uint32_t interfaceIndex);

    virtual void Remove(ns3::Ptr< ns3::IpL4Protocol > protocol);

    virtual void Remove(ns3::Ptr< ns3::IpL4Protocol > protocol, uint32_t interfaceIndex);

    virtual ns3::Ptr< ns3::IpL4Protocol > GetProtocol(int protocolNumber) const;

    virtual ns3::Ptr< ns3::IpL4Protocol > GetProtocol(int protocolNumber, int32_t interfaceIndex) const;

    virtual void Send(ns3::Ptr< ns3::Packet > packet, ns3::Ipv6Address source, ns3::Ipv6Address destination, uint8_t protocol, ns3::Ptr< ns3::Ipv6Route > route);

    virtual void SetRoutingProtocol(ns3::Ptr< ns3::Ipv6RoutingProtocol > routingProtocol);

    virtual ns3::Ptr< ns3::Ipv6RoutingProtocol > GetRoutingProtocol() const;

    virtual uint32_t AddInterface(ns3::Ptr< ns3::NetDevice > device);

    virtual uint32_t GetNInterfaces() const;

    virtual int32_t GetInterfaceForAddress(ns3::Ipv6Address addr) const;

    virtual int32_t GetInterfaceForPrefix(ns3::Ipv6Address addr, ns3::Ipv6Prefix mask) const;

    virtual int32_t GetInterfaceForDevice(ns3::Ptr< ns3::NetDevice const > device) const;

    virtual bool AddAddress(uint32_t i, ns3::Ipv6InterfaceAddress address);

    virtual ns3::Ipv6InterfaceAddress GetAddress(uint32_t interfaceIndex, uint32_t addressIndex) const;

    virtual uint32_t GetNAddresses(uint32_t interface) const;

    virtual bool RemoveAddress(uint32_t interfaceIndex, uint32_t addressIndex);

    virtual bool RemoveAddress(uint32_t interfaceIndex, ns3::Ipv6Address address);

    virtual void SetMetric(uint32_t i, uint16_t metric);

    virtual uint16_t GetMetric(uint32_t i) const;

    virtual uint16_t GetMtu(uint32_t i) const;

    virtual void SetPmtu(ns3::Ipv6Address dst, uint32_t pmtu);

    virtual bool IsUp(uint32_t i) const;

    virtual void SetUp(uint32_t i);

    virtual void SetDown(uint32_t i);

    virtual bool IsForwarding(uint32_t i) const;

    virtual void SetForwarding(uint32_t i, bool val);

    virtual ns3::Ipv6Address SourceAddressSelection(uint32_t interface, ns3::Ipv6Address dest);

    virtual ns3::Ptr< ns3::NetDevice > GetNetDevice(uint32_t i);

    virtual void RegisterExtensions();

    virtual void RegisterOptions();

    virtual void ReportDrop(ns3::Ipv6Header ipHeader, ns3::Ptr< ns3::Packet > p, ns3::Ipv6L3Protocol::DropReason dropReason);

    virtual void DoDispose();

    virtual void NotifyNewAggregate();

    virtual void SetIpForward(bool forward);

    virtual bool GetIpForward() const;

    virtual void SetMtuDiscover(bool mtuDiscover);

    virtual bool GetMtuDiscover() const;

    virtual void SetSendIcmpv6Redirect(bool sendIcmpv6Redirect);

    virtual bool GetSendIcmpv6Redirect() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv6L3Protocol__PythonHelper")
        .SetParent< ns3::Ipv6L3Protocol > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv6L3Protocol__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv6MulticastRoute *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6MulticastRoute;


extern PyTypeObject PyNs3Ipv6MulticastRoute_Type;
extern PyTypeObject PyNs3Ipv6MulticastRouteMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PacketFilter *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PacketFilter;


extern PyTypeObject PyNs3Ipv6PacketFilter_Type;

class PyNs3Ipv6PacketFilter__PythonHelper : public ns3::Ipv6PacketFilter
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6PacketFilter__PythonHelper(ns3::Ipv6PacketFilter const & arg0)
        : ns3::Ipv6PacketFilter(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6PacketFilter__PythonHelper()
        : ns3::Ipv6PacketFilter(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6PacketFilter__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6PacketFilter *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Ipv6PacketFilter *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv6PacketFilter *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv6PacketFilter *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool CheckProtocol(ns3::Ptr< ns3::QueueDiscItem > item) const;

    virtual int32_t DoClassify(ns3::Ptr< ns3::QueueDiscItem > item) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv6PacketFilter__PythonHelper")
        .SetParent< ns3::Ipv6PacketFilter > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv6PacketFilter__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PmtuCache *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PmtuCache;


extern PyTypeObject PyNs3Ipv6PmtuCache_Type;

class PyNs3Ipv6PmtuCache__PythonHelper : public ns3::Ipv6PmtuCache
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6PmtuCache__PythonHelper(ns3::Ipv6PmtuCache const & arg0)
        : ns3::Ipv6PmtuCache(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6PmtuCache__PythonHelper()
        : ns3::Ipv6PmtuCache(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6PmtuCache__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6PmtuCache *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Ipv6PmtuCache *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv6PmtuCache *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv6PmtuCache__PythonHelper")
        .SetParent< ns3::Ipv6PmtuCache > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv6PmtuCache__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv6RawSocketFactory *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6RawSocketFactory;


extern PyTypeObject PyNs3Ipv6RawSocketFactory_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6Route *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Route;


extern PyTypeObject PyNs3Ipv6Route_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6RoutingProtocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6RoutingProtocol;


extern PyTypeObject PyNs3Ipv6RoutingProtocol_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6StaticRouting *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6StaticRouting;


extern PyTypeObject PyNs3Ipv6StaticRouting_Type;


typedef struct {
    PyObject_HEAD
    ns3::NdiscCache *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdiscCache;


extern PyTypeObject PyNs3NdiscCache_Type;
extern PyTypeObject PyNs3NdiscCacheMeta_Type;

class PyNs3NdiscCache__PythonHelper : public ns3::NdiscCache
{
public:
    PyObject *m_pyself;
    PyNs3NdiscCache__PythonHelper()
        : ns3::NdiscCache(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NdiscCache__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NdiscCache *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3NdiscCache *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NdiscCache *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NdiscCache__PythonHelper")
        .SetParent< ns3::NdiscCache > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NdiscCache__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::NdiscCache::Entry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdiscCacheEntry;


extern PyTypeObject PyNs3NdiscCacheEntry_Type;

extern std::map<void*, PyObject*> PyNs3NdiscCacheEntry_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Rip *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Rip;


extern PyTypeObject PyNs3Rip_Type;


typedef struct {
    PyObject_HEAD
    ns3::RipNg *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RipNg;


extern PyTypeObject PyNs3RipNg_Type;


typedef struct {
    PyObject_HEAD
    ns3::TcpBic *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpBic;


extern PyTypeObject PyNs3TcpBic_Type;

class PyNs3TcpBic__PythonHelper : public ns3::TcpBic
{
public:
    PyObject *m_pyself;
    PyNs3TcpBic__PythonHelper()
        : ns3::TcpBic(), m_pyself(NULL)
        {}

    PyNs3TcpBic__PythonHelper(ns3::TcpBic const & sock)
        : ns3::TcpBic(sock), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpBic__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpBic *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3TcpBic *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TcpBic *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_Update(PyNs3TcpBic *self, PyObject *args, PyObject *kwargs);
    inline uint32_t Update__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb)
    { return ns3::TcpBic::Update(tcb); }

    static PyObject * _wrap_DoDispose(PyNs3TcpBic *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Ptr< ns3::TcpCongestionOps > Fork();

    virtual std::string GetName() const;

    virtual uint32_t GetSsThresh(ns3::Ptr< ns3::TcpSocketState const > tcb, uint32_t bytesInFlight);

    virtual void IncreaseWindow(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual uint32_t Update(ns3::Ptr< ns3::TcpSocketState > tcb);

    virtual void PktsAcked(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked, ns3::Time const & rtt);

    virtual void CongestionStateSet(ns3::Ptr< ns3::TcpSocketState > tcb, ns3::TcpSocketState::TcpCongState_t newState);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TcpBic__PythonHelper")
        .SetParent< ns3::TcpBic > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TcpBic__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TcpHighSpeed *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpHighSpeed;


extern PyTypeObject PyNs3TcpHighSpeed_Type;

class PyNs3TcpHighSpeed__PythonHelper : public ns3::TcpHighSpeed
{
public:
    PyObject *m_pyself;
    PyNs3TcpHighSpeed__PythonHelper()
        : ns3::TcpHighSpeed(), m_pyself(NULL)
        {}

    PyNs3TcpHighSpeed__PythonHelper(ns3::TcpHighSpeed const & sock)
        : ns3::TcpHighSpeed(sock), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpHighSpeed__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpHighSpeed *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3TcpHighSpeed *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TcpHighSpeed *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_CongestionAvoidance(PyNs3TcpHighSpeed *self, PyObject *args, PyObject *kwargs);
    inline void CongestionAvoidance__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { ns3::TcpHighSpeed::CongestionAvoidance(tcb, segmentsAcked); }

    static PyObject * _wrap_DoDispose(PyNs3TcpHighSpeed *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_SlowStart(PyNs3TcpHighSpeed *self, PyObject *args, PyObject *kwargs);
    inline uint32_t SlowStart__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { return ns3::TcpNewReno::SlowStart(tcb, segmentsAcked); }

    virtual ns3::Ptr< ns3::TcpCongestionOps > Fork();

    virtual std::string GetName() const;

    virtual uint32_t GetSsThresh(ns3::Ptr< ns3::TcpSocketState const > tcb, uint32_t bytesInFlight);

    virtual void CongestionAvoidance(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual void IncreaseWindow(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual uint32_t SlowStart(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual void PktsAcked(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked, ns3::Time const & rtt);

    virtual void CongestionStateSet(ns3::Ptr< ns3::TcpSocketState > tcb, ns3::TcpSocketState::TcpCongState_t newState);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TcpHighSpeed__PythonHelper")
        .SetParent< ns3::TcpHighSpeed > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TcpHighSpeed__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TcpHtcp *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpHtcp;


extern PyTypeObject PyNs3TcpHtcp_Type;

class PyNs3TcpHtcp__PythonHelper : public ns3::TcpHtcp
{
public:
    PyObject *m_pyself;
    PyNs3TcpHtcp__PythonHelper()
        : ns3::TcpHtcp(), m_pyself(NULL)
        {}

    PyNs3TcpHtcp__PythonHelper(ns3::TcpHtcp const & sock)
        : ns3::TcpHtcp(sock), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpHtcp__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpHtcp *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3TcpHtcp *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TcpHtcp *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_CongestionAvoidance(PyNs3TcpHtcp *self, PyObject *args, PyObject *kwargs);
    inline void CongestionAvoidance__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { ns3::TcpHtcp::CongestionAvoidance(tcb, segmentsAcked); }

    static PyObject * _wrap_DoDispose(PyNs3TcpHtcp *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_SlowStart(PyNs3TcpHtcp *self, PyObject *args, PyObject *kwargs);
    inline uint32_t SlowStart__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { return ns3::TcpNewReno::SlowStart(tcb, segmentsAcked); }

    virtual ns3::Ptr< ns3::TcpCongestionOps > Fork();

    virtual std::string GetName() const;

    virtual uint32_t GetSsThresh(ns3::Ptr< ns3::TcpSocketState const > tcb, uint32_t bytesInFlight);

    virtual void PktsAcked(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked, ns3::Time const & rtt);

    virtual void CongestionAvoidance(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual void IncreaseWindow(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual uint32_t SlowStart(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual void CongestionStateSet(ns3::Ptr< ns3::TcpSocketState > tcb, ns3::TcpSocketState::TcpCongState_t newState);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TcpHtcp__PythonHelper")
        .SetParent< ns3::TcpHtcp > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TcpHtcp__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TcpHybla *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpHybla;


extern PyTypeObject PyNs3TcpHybla_Type;

class PyNs3TcpHybla__PythonHelper : public ns3::TcpHybla
{
public:
    PyObject *m_pyself;
    PyNs3TcpHybla__PythonHelper()
        : ns3::TcpHybla(), m_pyself(NULL)
        {}

    PyNs3TcpHybla__PythonHelper(ns3::TcpHybla const & sock)
        : ns3::TcpHybla(sock), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpHybla__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpHybla *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3TcpHybla *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TcpHybla *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_CongestionAvoidance(PyNs3TcpHybla *self, PyObject *args, PyObject *kwargs);
    inline void CongestionAvoidance__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { ns3::TcpHybla::CongestionAvoidance(tcb, segmentsAcked); }

    static PyObject * _wrap_DoDispose(PyNs3TcpHybla *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_SlowStart(PyNs3TcpHybla *self, PyObject *args, PyObject *kwargs);
    inline uint32_t SlowStart__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { return ns3::TcpHybla::SlowStart(tcb, segmentsAcked); }

    virtual ns3::Ptr< ns3::TcpCongestionOps > Fork();

    virtual std::string GetName() const;

    virtual void PktsAcked(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked, ns3::Time const & rtt);

    virtual void CongestionAvoidance(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual uint32_t SlowStart(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual uint32_t GetSsThresh(ns3::Ptr< ns3::TcpSocketState const > tcb, uint32_t bytesInFlight);

    virtual void IncreaseWindow(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual void CongestionStateSet(ns3::Ptr< ns3::TcpSocketState > tcb, ns3::TcpSocketState::TcpCongState_t newState);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TcpHybla__PythonHelper")
        .SetParent< ns3::TcpHybla > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TcpHybla__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TcpIllinois *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpIllinois;


extern PyTypeObject PyNs3TcpIllinois_Type;

class PyNs3TcpIllinois__PythonHelper : public ns3::TcpIllinois
{
public:
    PyObject *m_pyself;
    PyNs3TcpIllinois__PythonHelper()
        : ns3::TcpIllinois(), m_pyself(NULL)
        {}

    PyNs3TcpIllinois__PythonHelper(ns3::TcpIllinois const & sock)
        : ns3::TcpIllinois(sock), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpIllinois__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpIllinois *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3TcpIllinois *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TcpIllinois *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_CongestionAvoidance(PyNs3TcpIllinois *self, PyObject *args, PyObject *kwargs);
    inline void CongestionAvoidance__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { ns3::TcpNewReno::CongestionAvoidance(tcb, segmentsAcked); }

    static PyObject * _wrap_DoDispose(PyNs3TcpIllinois *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_SlowStart(PyNs3TcpIllinois *self, PyObject *args, PyObject *kwargs);
    inline uint32_t SlowStart__parent_caller(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked)
    { return ns3::TcpNewReno::SlowStart(tcb, segmentsAcked); }

    virtual void CongestionStateSet(ns3::Ptr< ns3::TcpSocketState > tcb, ns3::TcpSocketState::TcpCongState_t newState);

    virtual ns3::Ptr< ns3::TcpCongestionOps > Fork();

    virtual std::string GetName() const;

    virtual uint32_t GetSsThresh(ns3::Ptr< ns3::TcpSocketState const > tcb, uint32_t bytesInFlight);

    virtual void IncreaseWindow(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual void PktsAcked(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked, ns3::Time const & rtt);

    virtual void CongestionAvoidance(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual uint32_t SlowStart(ns3::Ptr< ns3::TcpSocketState > tcb, uint32_t segmentsAcked);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TcpIllinois__PythonHelper")
        .SetParent< ns3::TcpIllinois > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TcpIllinois__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TcpL4Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpL4Protocol;


extern PyTypeObject PyNs3TcpL4Protocol_Type;
extern PyTypeObject PyNs3TcpL4ProtocolMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::UdpL4Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpL4Protocol;


extern PyTypeObject PyNs3UdpL4Protocol_Type;
extern PyTypeObject PyNs3UdpL4ProtocolMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::FqCoDelIpv4PacketFilter *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FqCoDelIpv4PacketFilter;


extern PyTypeObject PyNs3FqCoDelIpv4PacketFilter_Type;

class PyNs3FqCoDelIpv4PacketFilter__PythonHelper : public ns3::FqCoDelIpv4PacketFilter
{
public:
    PyObject *m_pyself;
    PyNs3FqCoDelIpv4PacketFilter__PythonHelper(ns3::FqCoDelIpv4PacketFilter const & arg0)
        : ns3::FqCoDelIpv4PacketFilter(arg0), m_pyself(NULL)
        {}

    PyNs3FqCoDelIpv4PacketFilter__PythonHelper()
        : ns3::FqCoDelIpv4PacketFilter(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FqCoDelIpv4PacketFilter__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3FqCoDelIpv4PacketFilter *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3FqCoDelIpv4PacketFilter *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3FqCoDelIpv4PacketFilter *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3FqCoDelIpv4PacketFilter *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual int32_t DoClassify(ns3::Ptr< ns3::QueueDiscItem > item) const;

    virtual bool CheckProtocol(ns3::Ptr< ns3::QueueDiscItem > item) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3FqCoDelIpv4PacketFilter__PythonHelper")
        .SetParent< ns3::FqCoDelIpv4PacketFilter > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3FqCoDelIpv4PacketFilter__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::FqCoDelIpv6PacketFilter *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FqCoDelIpv6PacketFilter;


extern PyTypeObject PyNs3FqCoDelIpv6PacketFilter_Type;

class PyNs3FqCoDelIpv6PacketFilter__PythonHelper : public ns3::FqCoDelIpv6PacketFilter
{
public:
    PyObject *m_pyself;
    PyNs3FqCoDelIpv6PacketFilter__PythonHelper(ns3::FqCoDelIpv6PacketFilter const & arg0)
        : ns3::FqCoDelIpv6PacketFilter(arg0), m_pyself(NULL)
        {}

    PyNs3FqCoDelIpv6PacketFilter__PythonHelper()
        : ns3::FqCoDelIpv6PacketFilter(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FqCoDelIpv6PacketFilter__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3FqCoDelIpv6PacketFilter *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3FqCoDelIpv6PacketFilter *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3FqCoDelIpv6PacketFilter *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3FqCoDelIpv6PacketFilter *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual int32_t DoClassify(ns3::Ptr< ns3::QueueDiscItem > item) const;

    virtual bool CheckProtocol(ns3::Ptr< ns3::QueueDiscItem > item) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3FqCoDelIpv6PacketFilter__PythonHelper")
        .SetParent< ns3::FqCoDelIpv6PacketFilter > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3FqCoDelIpv6PacketFilter__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Icmpv4L4Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv4L4Protocol;


extern PyTypeObject PyNs3Icmpv4L4Protocol_Type;
extern PyTypeObject PyNs3Icmpv4L4ProtocolMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6L4Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6L4Protocol;


extern PyTypeObject PyNs3Icmpv6L4Protocol_Type;
extern PyTypeObject PyNs3Icmpv6L4ProtocolMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4GlobalRouting *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4GlobalRouting;


extern PyTypeObject PyNs3Ipv4GlobalRouting_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4ListRouting *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4ListRouting;


extern PyTypeObject PyNs3Ipv4ListRouting_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4PacketProbe *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4PacketProbe;


extern PyTypeObject PyNs3Ipv4PacketProbe_Type;

class PyNs3Ipv4PacketProbe__PythonHelper : public ns3::Ipv4PacketProbe
{
public:
    PyObject *m_pyself;
    PyNs3Ipv4PacketProbe__PythonHelper(ns3::Ipv4PacketProbe const & arg0)
        : ns3::Ipv4PacketProbe(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv4PacketProbe__PythonHelper()
        : ns3::Ipv4PacketProbe(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv4PacketProbe__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv4PacketProbe *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Ipv4PacketProbe *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv4PacketProbe *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv4PacketProbe *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool ConnectByObject(std::string traceSource, ns3::Ptr< ns3::Object > obj);

    virtual void ConnectByPath(std::string path);

    virtual bool IsEnabled() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv4PacketProbe__PythonHelper")
        .SetParent< ns3::Ipv4PacketProbe > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv4PacketProbe__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionLooseRouting *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionLooseRouting;


extern PyTypeObject PyNs3Ipv6ExtensionLooseRouting_Type;
extern PyTypeObject PyNs3Ipv6ExtensionLooseRoutingMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ListRouting *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ListRouting;


extern PyTypeObject PyNs3Ipv6ListRouting_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PacketProbe *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PacketProbe;


extern PyTypeObject PyNs3Ipv6PacketProbe_Type;

class PyNs3Ipv6PacketProbe__PythonHelper : public ns3::Ipv6PacketProbe
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6PacketProbe__PythonHelper(ns3::Ipv6PacketProbe const & arg0)
        : ns3::Ipv6PacketProbe(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6PacketProbe__PythonHelper()
        : ns3::Ipv6PacketProbe(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6PacketProbe__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6PacketProbe *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Ipv6PacketProbe *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv6PacketProbe *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv6PacketProbe *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool ConnectByObject(std::string traceSource, ns3::Ptr< ns3::Object > obj);

    virtual void ConnectByPath(std::string path);

    virtual bool IsEnabled() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv6PacketProbe__PythonHelper")
        .SetParent< ns3::Ipv6PacketProbe > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv6PacketProbe__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LoopbackNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LoopbackNetDevice;


extern PyTypeObject PyNs3LoopbackNetDevice_Type;

class PyNs3LoopbackNetDevice__PythonHelper : public ns3::LoopbackNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3LoopbackNetDevice__PythonHelper(ns3::LoopbackNetDevice const & arg0)
        : ns3::LoopbackNetDevice(arg0), m_pyself(NULL)
        {}

    PyNs3LoopbackNetDevice__PythonHelper()
        : ns3::LoopbackNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LoopbackNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LoopbackNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LoopbackNetDevice *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LoopbackNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3LoopbackNetDevice *self);
    inline void DoDispose__parent_caller()
    { ns3::LoopbackNetDevice::DoDispose(); }

    virtual ns3::Address GetAddress() const;

    virtual ns3::Address GetBroadcast() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual uint32_t GetIfIndex() const;

    virtual uint16_t GetMtu() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address multicastGroup) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool IsBridge() const;

    virtual bool IsBroadcast() const;

    virtual bool IsLinkUp() const;

    virtual bool IsMulticast() const;

    virtual bool IsPointToPoint() const;

    virtual bool NeedsArp() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual void SetAddress(ns3::Address address);

    virtual void SetIfIndex(uint32_t const index);

    virtual bool SetMtu(uint16_t const mtu);

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual bool SupportsSendFrom() const;

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LoopbackNetDevice__PythonHelper")
        .SetParent< ns3::LoopbackNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LoopbackNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv4QueueDiscItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4QueueDiscItem;


extern PyTypeObject PyNs3Ipv4QueueDiscItem_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6QueueDiscItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6QueueDiscItem;


extern PyTypeObject PyNs3Ipv6QueueDiscItem_Type;


typedef struct {
    PyObject_HEAD
    std::vector< unsigned int > *obj;
} Pystd__vector__lt___unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___unsigned_int___gt__ *container;
    std::vector< unsigned int >::iterator *iterator;
} Pystd__vector__lt___unsigned_int___gt__Iter;


extern PyTypeObject Pystd__vector__lt___unsigned_int___gt___Type;
extern PyTypeObject Pystd__vector__lt___unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___unsigned_int___gt__(PyObject *arg, std::vector< unsigned int > *container);

typedef struct {
    PyObject_HEAD
    std::vector< bool > *obj;
} Pystd__vector__lt___bool___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___bool___gt__ *container;
    std::vector< bool >::iterator *iterator;
} Pystd__vector__lt___bool___gt__Iter;


extern PyTypeObject Pystd__vector__lt___bool___gt___Type;
extern PyTypeObject Pystd__vector__lt___bool___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___bool___gt__(PyObject *arg, std::vector< bool > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::RipRte > *obj;
} Pystd__list__lt___ns3__RipRte___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__RipRte___gt__ *container;
    std::list< ns3::RipRte >::iterator *iterator;
} Pystd__list__lt___ns3__RipRte___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__RipRte___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__RipRte___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__RipRte___gt__(PyObject *arg, std::list< ns3::RipRte > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::RipNgRte > *obj;
} Pystd__list__lt___ns3__RipNgRte___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__RipNgRte___gt__ *container;
    std::list< ns3::RipNgRte >::iterator *iterator;
} Pystd__list__lt___ns3__RipNgRte___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__RipNgRte___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__RipNgRte___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__RipNgRte___gt__(PyObject *arg, std::list< ns3::RipNgRte > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ipv6Address > *obj;
} Pystd__vector__lt___ns3__Ipv6Address___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ipv6Address___gt__ *container;
    std::vector< ns3::Ipv6Address >::iterator *iterator;
} Pystd__vector__lt___ns3__Ipv6Address___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ipv6Address___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ipv6Address___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ipv6Address___gt__(PyObject *arg, std::vector< ns3::Ipv6Address > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ptr< ns3::QueueDisc > > *obj;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__ *container;
    std::vector< ns3::Ptr< ns3::QueueDisc > >::iterator *iterator;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::QueueDisc > > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned int, unsigned int > *obj;
} Pystd__map__lt___unsigned_int__unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_int__unsigned_int___gt__ *container;
    std::map< unsigned int, unsigned int >::iterator *iterator;
} Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_int__unsigned_int___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_int__unsigned_int___gt__(PyObject *arg, std::map< unsigned int, unsigned int > *container);

typedef struct {
    PyObject_HEAD
    std::set< unsigned int > *obj;
} Pystd__set__lt___unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__set__lt___unsigned_int___gt__ *container;
    std::set< unsigned int >::iterator *iterator;
} Pystd__set__lt___unsigned_int___gt__Iter;


extern PyTypeObject Pystd__set__lt___unsigned_int___gt___Type;
extern PyTypeObject Pystd__set__lt___unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__set__lt___unsigned_int___gt__(PyObject *arg, std::set< unsigned int > *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Implementation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashImplementation;


extern PyTypeObject *_PyNs3HashImplementation_Type;
#define PyNs3HashImplementation_Type (*_PyNs3HashImplementation_Type)

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Fnv1a *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionFnv1a;


extern PyTypeObject *_PyNs3HashFunctionFnv1a_Type;
#define PyNs3HashFunctionFnv1a_Type (*_PyNs3HashFunctionFnv1a_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash32 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash32;


extern PyTypeObject *_PyNs3HashFunctionHash32_Type;
#define PyNs3HashFunctionHash32_Type (*_PyNs3HashFunctionHash32_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash64 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash64;


extern PyTypeObject *_PyNs3HashFunctionHash64_Type;
#define PyNs3HashFunctionHash64_Type (*_PyNs3HashFunctionHash64_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Murmur3 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionMurmur3;


extern PyTypeObject *_PyNs3HashFunctionMurmur3_Type;
#define PyNs3HashFunctionMurmur3_Type (*_PyNs3HashFunctionMurmur3_Type)


class PythonCallbackImpl0 : public ns3::CallbackImpl<void, ns3::Ipv6Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl0(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl0()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl0 *other = dynamic_cast<const PythonCallbackImpl0*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ipv6Address arg1, unsigned char arg2, unsigned char arg3, unsigned char arg4, unsigned int arg5)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Ipv6Address *py_Ipv6Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Ipv6Address = PyObject_New(PyNs3Ipv6Address, &PyNs3Ipv6Address_Type);
        py_Ipv6Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv6Address->obj = new ns3::Ipv6Address(arg1);
        PyNs3Ipv6Address_wrapper_registry[(void *) py_Ipv6Address->obj] = (PyObject *) py_Ipv6Address;
        args = Py_BuildValue((char *) "(NiiiN)", py_Ipv6Address, (int) arg2, (int) arg3, (int) arg4, PyLong_FromUnsignedLong(arg5));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl1 : public ns3::CallbackImpl<void, ns3::Ipv4Address, unsigned char, unsigned char, unsigned char, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl1(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl1()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl1 *other = dynamic_cast<const PythonCallbackImpl1*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ipv4Address arg1, unsigned char arg2, unsigned char arg3, unsigned char arg4, unsigned int arg5)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Ipv4Address *py_Ipv4Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
        py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv4Address->obj = new ns3::Ipv4Address(arg1);
        PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
        args = Py_BuildValue((char *) "(NiiiN)", py_Ipv4Address, (int) arg2, (int) arg3, (int) arg4, PyLong_FromUnsignedLong(arg5));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl2 : public ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl2(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl2()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl2 *other = dynamic_cast<const PythonCallbackImpl2*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()()
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "()");
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl3 : public ns3::CallbackImpl<unsigned char, ns3::Ptr<ns3::QueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl3(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl3()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl3 *other = dynamic_cast<const PythonCallbackImpl3*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    unsigned char
    operator()(ns3::Ptr< ns3::QueueItem > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        unsigned char retval;
        PyNs3QueueItem *py_QueueItem;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;
        int tmp;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::QueueItem *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_QueueItem = NULL;
        } else {
            py_QueueItem = (PyNs3QueueItem *) wrapper_lookup_iter->second;
            Py_INCREF(py_QueueItem);
        }

        if (py_QueueItem == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::QueueItem *> (ns3::PeekPointer (arg1))), &PyNs3QueueItem_Type);
            py_QueueItem = PyObject_New(PyNs3QueueItem, wrapper_type);

            py_QueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::QueueItem *> (ns3::PeekPointer (arg1))->Ref();
            py_QueueItem->obj = const_cast<ns3::QueueItem *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_QueueItem->obj] = (PyObject *) py_QueueItem;
        }
        args = Py_BuildValue((char *) "(N)", py_QueueItem);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return 0;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return 0;
        }
        if (tmp > 0xff) {
            PyErr_SetString(PyExc_ValueError, "Out of range");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return 0;
        }
        retval = tmp;
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl4 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::QueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl4(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl4()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl4 *other = dynamic_cast<const PythonCallbackImpl4*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::QueueItem > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3QueueItem *py_QueueItem;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::QueueItem *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_QueueItem = NULL;
        } else {
            py_QueueItem = (PyNs3QueueItem *) wrapper_lookup_iter->second;
            Py_INCREF(py_QueueItem);
        }

        if (py_QueueItem == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::QueueItem *> (ns3::PeekPointer (arg1))), &PyNs3QueueItem_Type);
            py_QueueItem = PyObject_New(PyNs3QueueItem, wrapper_type);

            py_QueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::QueueItem *> (ns3::PeekPointer (arg1))->Ref();
            py_QueueItem->obj = const_cast<ns3::QueueItem *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_QueueItem->obj] = (PyObject *) py_QueueItem;
        }
        args = Py_BuildValue((char *) "(N)", py_QueueItem);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl5 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl5(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl5()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl5 *other = dynamic_cast<const PythonCallbackImpl5*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        args = Py_BuildValue((char *) "(N)", py_Socket);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl6 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl6(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl6()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl6 *other = dynamic_cast<const PythonCallbackImpl6*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1, unsigned int arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        args = Py_BuildValue((char *) "(NN)", py_Socket, PyLong_FromUnsignedLong(arg2));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl7 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl7(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl7()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl7 *other = dynamic_cast<const PythonCallbackImpl7*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1, ns3::Address const & arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Address *py_Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg2);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NN)", py_Socket, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl8 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl8(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl8()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl8 *other = dynamic_cast<const PythonCallbackImpl8*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::Socket > arg1, ns3::Address const & arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg2);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NN)", py_Socket, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl9 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv6Address, ns3::Ipv6Address, unsigned char, ns3::Ptr<ns3::Ipv6Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl9(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl9()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl9 *other = dynamic_cast<const PythonCallbackImpl9*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet > arg1, ns3::Ipv6Address arg2, ns3::Ipv6Address arg3, unsigned char arg4, ns3::Ptr< ns3::Ipv6Route > arg5)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Ipv6Address *py_Ipv6Address;
        PyNs3Ipv6Address *py_Ipv6Address2;
        PyNs3Ipv6Route *py_Ipv6Route;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Ipv6Address = PyObject_New(PyNs3Ipv6Address, &PyNs3Ipv6Address_Type);
        py_Ipv6Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv6Address->obj = new ns3::Ipv6Address(arg2);
        PyNs3Ipv6Address_wrapper_registry[(void *) py_Ipv6Address->obj] = (PyObject *) py_Ipv6Address;
        py_Ipv6Address2 = PyObject_New(PyNs3Ipv6Address, &PyNs3Ipv6Address_Type);
        py_Ipv6Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv6Address2->obj = new ns3::Ipv6Address(arg3);
        PyNs3Ipv6Address_wrapper_registry[(void *) py_Ipv6Address2->obj] = (PyObject *) py_Ipv6Address2;
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Ipv6Route *> (ns3::PeekPointer (arg5)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Ipv6Route = NULL;
        } else {
            py_Ipv6Route = (PyNs3Ipv6Route *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Ipv6Route);
        }

        if (py_Ipv6Route == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Ipv6Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6Route__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Ipv6Route *> (ns3::PeekPointer (arg5))), &PyNs3Ipv6Route_Type);
            py_Ipv6Route = PyObject_New(PyNs3Ipv6Route, wrapper_type2);

            py_Ipv6Route->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Ipv6Route *> (ns3::PeekPointer (arg5))->Ref();
            py_Ipv6Route->obj = const_cast<ns3::Ipv6Route *> (ns3::PeekPointer (arg5));
            PyNs3Empty_wrapper_registry[(void *) py_Ipv6Route->obj] = (PyObject *) py_Ipv6Route;
        }
        args = Py_BuildValue((char *) "(NNNiN)", py_Packet, py_Ipv6Address, py_Ipv6Address2, (int) arg4, py_Ipv6Route);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl10 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl10(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl10()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl10 *other = dynamic_cast<const PythonCallbackImpl10*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet > arg1, ns3::Ipv4Address arg2, ns3::Ipv4Address arg3, unsigned char arg4, ns3::Ptr< ns3::Ipv4Route > arg5)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Ipv4Address *py_Ipv4Address;
        PyNs3Ipv4Address *py_Ipv4Address2;
        PyNs3Ipv4Route *py_Ipv4Route;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
        py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv4Address->obj = new ns3::Ipv4Address(arg2);
        PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
        py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
        py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv4Address2->obj = new ns3::Ipv4Address(arg3);
        PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (arg5)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Ipv4Route = NULL;
        } else {
            py_Ipv4Route = (PyNs3Ipv4Route *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Ipv4Route);
        }

        if (py_Ipv4Route == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (arg5))), &PyNs3Ipv4Route_Type);
            py_Ipv4Route = PyObject_New(PyNs3Ipv4Route, wrapper_type2);

            py_Ipv4Route->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (arg5))->Ref();
            py_Ipv4Route->obj = const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (arg5));
            PyNs3Empty_wrapper_registry[(void *) py_Ipv4Route->obj] = (PyObject *) py_Ipv4Route;
        }
        args = Py_BuildValue((char *) "(NNNiN)", py_Packet, py_Ipv4Address, py_Ipv4Address2, (int) arg4, py_Ipv4Route);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl11 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl11(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl11()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl11 *other = dynamic_cast<const PythonCallbackImpl11*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
        {
            py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_NetDevice);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_NetDevice = NULL;
            } else {
                py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
                Py_INCREF(py_NetDevice);
            }

            if (py_NetDevice == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
                py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
                py_NetDevice->inst_dict = NULL;

                py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
                py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
            }
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl12 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl12(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl12()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl12 *other = dynamic_cast<const PythonCallbackImpl12*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
        {
            py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_NetDevice);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_NetDevice = NULL;
            } else {
                py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
                Py_INCREF(py_NetDevice);
            }

            if (py_NetDevice == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
                py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
                py_NetDevice->inst_dict = NULL;

                py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
                py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
            }
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NNiN)", py_NetDevice, py_Packet, (int) arg3, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl13 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl13(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl13()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl13 *other = dynamic_cast<const PythonCallbackImpl13*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
        {
            py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_NetDevice);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_NetDevice = NULL;
            } else {
                py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
                Py_INCREF(py_NetDevice);
            }

            if (py_NetDevice == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
                py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
                py_NetDevice->inst_dict = NULL;

                py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
                py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
            }
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl14 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::ArpCache const>, ns3::Ipv4Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl14(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl14()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl14 *other = dynamic_cast<const PythonCallbackImpl14*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::ArpCache const > arg1, ns3::Ipv4Address arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3ArpCache *py_ArpCache;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Ipv4Address *py_Ipv4Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::ArpCache *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3ArpCache__PythonHelper).name())
        {
            py_ArpCache = (PyNs3ArpCache*) (((PyNs3ArpCache__PythonHelper*) const_cast<ns3::ArpCache *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_ArpCache->obj = const_cast<ns3::ArpCache *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_ArpCache);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ArpCache *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_ArpCache = NULL;
            } else {
                py_ArpCache = (PyNs3ArpCache *) wrapper_lookup_iter->second;
                Py_INCREF(py_ArpCache);
            }

            if (py_ArpCache == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ArpCache *> (ns3::PeekPointer (arg1))), &PyNs3ArpCache_Type);
                py_ArpCache = PyObject_GC_New(PyNs3ArpCache, wrapper_type);
                py_ArpCache->inst_dict = NULL;

                py_ArpCache->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::ArpCache *> (ns3::PeekPointer (arg1))->Ref();
                py_ArpCache->obj = const_cast<ns3::ArpCache *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_ArpCache->obj] = (PyObject *) py_ArpCache;
            }
        }
        py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
        py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv4Address->obj = new ns3::Ipv4Address(arg2);
        PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
        args = Py_BuildValue((char *) "(NN)", py_ArpCache, py_Ipv4Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


int _wrap_convert_py2c__unsigned_int(PyObject *value, unsigned int *address);


int _wrap_convert_py2c__bool(PyObject *value, bool *address);


int _wrap_convert_py2c__ns3__RipRte(PyObject *value, ns3::RipRte *address);


int _wrap_convert_py2c__ns3__RipNgRte(PyObject *value, ns3::RipNgRte *address);


int _wrap_convert_py2c__ns3__Ipv6Address(PyObject *value, ns3::Ipv6Address *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__QueueDisc___gt__(PyObject *value, ns3::Ptr< ns3::QueueDisc > *address);

