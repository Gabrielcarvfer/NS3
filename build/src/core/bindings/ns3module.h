/* This file was generated by PyBindGen 0.0.0.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#ifndef PyVarObject_HEAD_INIT
#define PyVarObject_HEAD_INIT(type, size) \
        PyObject_HEAD_INIT(type) size,
#endif


#if PY_VERSION_HEX >= 0x03000000
typedef void* cmpfunc;
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif


#include "ns3/core-module.h"
#include <fstream>
#include <ostream>
#include <sstream>
#include <typeinfo>
#include <map>
#include <iostream>
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionList;


extern PyTypeObject PyNs3AttributeConstructionList_Type;

extern std::map<void*, PyObject*> PyNs3AttributeConstructionList_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionListItem;


extern PyTypeObject PyNs3AttributeConstructionListItem_Type;

extern std::map<void*, PyObject*> PyNs3AttributeConstructionListItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CallbackBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackBase;


extern PyTypeObject PyNs3CallbackBase_Type;

extern std::map<void*, PyObject*> PyNs3CallbackBase_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CommandLine *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CommandLine;


extern PyTypeObject PyNs3CommandLine_Type;

extern std::map<void*, PyObject*> PyNs3CommandLine_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CriticalSection *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CriticalSection;


extern PyTypeObject PyNs3CriticalSection_Type;

extern std::map<void*, PyObject*> PyNs3CriticalSection_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EventGarbageCollector *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventGarbageCollector;


extern PyTypeObject PyNs3EventGarbageCollector_Type;

extern std::map<void*, PyObject*> PyNs3EventGarbageCollector_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EventId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventId;


extern PyTypeObject PyNs3EventId_Type;

extern std::map<void*, PyObject*> PyNs3EventId_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GlobalValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GlobalValue;


extern PyTypeObject PyNs3GlobalValue_Type;

extern std::map<void*, PyObject*> PyNs3GlobalValue_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Hasher *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Hasher;


extern PyTypeObject PyNs3Hasher_Type;

extern std::map<void*, PyObject*> PyNs3Hasher_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 0 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__0;


extern PyTypeObject PyNs3IntToType__0_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__0_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 1 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__1;


extern PyTypeObject PyNs3IntToType__1_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__1_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 2 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__2;


extern PyTypeObject PyNs3IntToType__2_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__2_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 3 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__3;


extern PyTypeObject PyNs3IntToType__3_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__3_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 4 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__4;


extern PyTypeObject PyNs3IntToType__4_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__4_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 5 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__5;


extern PyTypeObject PyNs3IntToType__5_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__5_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 6 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__6;


extern PyTypeObject PyNs3IntToType__6_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__6_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LogComponent *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogComponent;


extern PyTypeObject PyNs3LogComponent_Type;

extern std::map<void*, PyObject*> PyNs3LogComponent_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Names *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Names;


extern PyTypeObject PyNs3Names_Type;

extern std::map<void*, PyObject*> PyNs3Names_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::NonCopyable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NonCopyable;


extern PyTypeObject PyNs3NonCopyable_Type;

extern std::map<void*, PyObject*> PyNs3NonCopyable_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ObjectBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectBase;


extern PyTypeObject PyNs3ObjectBase_Type;

class PyNs3ObjectBase__PythonHelper : public ns3::ObjectBase
{
public:
    PyObject *m_pyself;
    PyNs3ObjectBase__PythonHelper()
        : ns3::ObjectBase(), m_pyself(NULL)
        {}

    PyNs3ObjectBase__PythonHelper(ns3::ObjectBase const & arg0)
        : ns3::ObjectBase(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ObjectBase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_ConstructSelf(PyNs3ObjectBase *self, PyObject *args, PyObject *kwargs);
    inline void ConstructSelf__parent_caller(ns3::AttributeConstructionList const & attributes)
    { ns3::ObjectBase::ConstructSelf(attributes); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ObjectBase *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyConstructionCompleted();
};

extern std::map<void*, PyObject*> PyNs3ObjectBase_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ObjectDeleter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectDeleter;


extern PyTypeObject PyNs3ObjectDeleter_Type;

extern std::map<void*, PyObject*> PyNs3ObjectDeleter_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ObjectFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactory;


extern PyTypeObject PyNs3ObjectFactory_Type;

extern std::map<void*, PyObject*> PyNs3ObjectFactory_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ParameterLogger *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParameterLogger;


extern PyTypeObject PyNs3ParameterLogger_Type;

extern std::map<void*, PyObject*> PyNs3ParameterLogger_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::RandomVariableStreamHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableStreamHelper;


extern PyTypeObject PyNs3RandomVariableStreamHelper_Type;

extern std::map<void*, PyObject*> PyNs3RandomVariableStreamHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::RngSeedManager *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RngSeedManager;


extern PyTypeObject PyNs3RngSeedManager_Type;

extern std::map<void*, PyObject*> PyNs3RngSeedManager_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::RngStream *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RngStream;


extern PyTypeObject PyNs3RngStream_Type;

extern std::map<void*, PyObject*> PyNs3RngStream_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter;


extern PyTypeObject PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;



#include <map>
#include <string>
#include <typeinfo>
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)
# include <cxxabi.h>
#endif

#define PBG_TYPEMAP_DEBUG 0

namespace pybindgen {

class TypeMap
{
   std::map<std::string, PyTypeObject *> m_map;

public:

   TypeMap() {}

   void register_wrapper(const std::type_info &cpp_type_info, PyTypeObject *python_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "register_wrapper(this=" << this << ", type_name=" << cpp_type_info.name()
             << ", python_wrapper=" << python_wrapper->tp_name << ")" << std::endl;
#endif

       m_map[std::string(cpp_type_info.name())] = python_wrapper;
   }



   PyTypeObject * lookup_wrapper(const std::type_info &cpp_type_info, PyTypeObject *fallback_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "lookup_wrapper(this=" << this << ", type_name=" << cpp_type_info.name() << ")" << std::endl;
#endif

       PyTypeObject *python_wrapper = m_map[cpp_type_info.name()];
       if (python_wrapper)
           return python_wrapper;
       else {
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)

           // Get closest (in the single inheritance tree provided by cxxabi.h)
           // registered python wrapper.
           const abi::__si_class_type_info *_typeinfo =
               dynamic_cast<const abi::__si_class_type_info*> (&cpp_type_info);
#if PBG_TYPEMAP_DEBUG
          std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           while (_typeinfo && (python_wrapper = m_map[std::string(_typeinfo->name())]) == 0) {
               _typeinfo = dynamic_cast<const abi::__si_class_type_info*> (_typeinfo->__base_type);
#if PBG_TYPEMAP_DEBUG
               std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           }

#if PBG_TYPEMAP_DEBUG
          if (python_wrapper) {
              std::cerr << "  -> found match " << std::endl;
          } else {
              std::cerr << "  -> return fallback wrapper" << std::endl;
          }
#endif

           return python_wrapper? python_wrapper : fallback_wrapper;

#else // non gcc 3+ compilers can only match against explicitly registered classes, not hidden subclasses
           return fallback_wrapper;
#endif
       }
   }
};

}


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::Simulator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Simulator;


extern PyTypeObject PyNs3Simulator_Type;

extern std::map<void*, PyObject*> PyNs3Simulator_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Singleton< ns3::DesMetrics > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Singleton__Ns3DesMetrics;


extern PyTypeObject PyNs3Singleton__Ns3DesMetrics_Type;


typedef struct {
    PyObject_HEAD
    ns3::SystemCondition *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SystemCondition;


extern PyTypeObject PyNs3SystemCondition_Type;

extern std::map<void*, PyObject*> PyNs3SystemCondition_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SystemMutex *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SystemMutex;


extern PyTypeObject PyNs3SystemMutex_Type;

extern std::map<void*, PyObject*> PyNs3SystemMutex_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SystemWallClockMs *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SystemWallClockMs;


extern PyTypeObject PyNs3SystemWallClockMs_Type;

extern std::map<void*, PyObject*> PyNs3SystemWallClockMs_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TimeWithUnit *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeWithUnit;


extern PyTypeObject PyNs3TimeWithUnit_Type;

extern std::map<void*, PyObject*> PyNs3TimeWithUnit_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Timer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Timer;


extern PyTypeObject PyNs3Timer_Type;

extern std::map<void*, PyObject*> PyNs3Timer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TimerImpl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimerImpl;


extern PyTypeObject PyNs3TimerImpl_Type;

class PyNs3TimerImpl__PythonHelper : public ns3::TimerImpl
{
public:
    PyObject *m_pyself;
    PyNs3TimerImpl__PythonHelper()
        : ns3::TimerImpl(), m_pyself(NULL)
        {}

    PyNs3TimerImpl__PythonHelper(ns3::TimerImpl const & arg0)
        : ns3::TimerImpl(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TimerImpl__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void Invoke();

    virtual ns3::EventId Schedule(ns3::Time const & delay);
};

extern std::map<void*, PyObject*> PyNs3TimerImpl_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TypeId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeId;


extern PyTypeObject PyNs3TypeId_Type;

extern std::map<void*, PyObject*> PyNs3TypeId_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TypeId::AttributeInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdAttributeInformation;


extern PyTypeObject PyNs3TypeIdAttributeInformation_Type;

extern std::map<void*, PyObject*> PyNs3TypeIdAttributeInformation_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TypeId::TraceSourceInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdTraceSourceInformation;


extern PyTypeObject PyNs3TypeIdTraceSourceInformation_Type;

extern std::map<void*, PyObject*> PyNs3TypeIdTraceSourceInformation_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Vector2D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2D;


extern PyTypeObject PyNs3Vector2D_Type;

extern std::map<void*, PyObject*> PyNs3Vector2D_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Vector3D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3D;


extern PyTypeObject PyNs3Vector3D_Type;

extern std::map<void*, PyObject*> PyNs3Vector3D_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Watchdog *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Watchdog;


extern PyTypeObject PyNs3Watchdog_Type;

extern std::map<void*, PyObject*> PyNs3Watchdog_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::empty *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Empty;


extern PyTypeObject PyNs3Empty_Type;

extern std::map<void*, PyObject*> PyNs3Empty_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::int64x64_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Int64x64_t;


extern PyTypeObject PyNs3Int64x64_t_Type;
extern PyTypeObject PyNs3Int64x64_tMeta_Type;

extern std::map<void*, PyObject*> PyNs3Int64x64_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DesMetrics *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DesMetrics;


extern PyTypeObject PyNs3DesMetrics_Type;


typedef struct {
    PyObject_HEAD
    ns3::Object *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Object;


extern PyTypeObject PyNs3Object_Type;

class PyNs3Object__PythonHelper : public ns3::Object
{
public:
    PyObject *m_pyself;
    PyNs3Object__PythonHelper()
        : ns3::Object(), m_pyself(NULL)
        {}

    PyNs3Object__PythonHelper(ns3::Object const & o)
        : ns3::Object(o), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Object__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Object *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Object *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Object *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Object *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Object__PythonHelper")
        .SetParent< ns3::Object > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Object__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Object::AggregateIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectAggregateIterator;


extern PyTypeObject PyNs3ObjectAggregateIterator_Type;

extern std::map<void*, PyObject*> PyNs3ObjectAggregateIterator_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::RandomVariableStream *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableStream;


extern PyTypeObject PyNs3RandomVariableStream_Type;

class PyNs3RandomVariableStream__PythonHelper : public ns3::RandomVariableStream
{
public:
    PyObject *m_pyself;
    PyNs3RandomVariableStream__PythonHelper()
        : ns3::RandomVariableStream(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomVariableStream__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RandomVariableStream *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3RandomVariableStream *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RandomVariableStream *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3RandomVariableStream *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetValue();

    virtual uint32_t GetInteger();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RandomVariableStream__PythonHelper")
        .SetParent< ns3::RandomVariableStream > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RandomVariableStream__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Scheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Scheduler;


extern PyTypeObject PyNs3Scheduler_Type;

class PyNs3Scheduler__PythonHelper : public ns3::Scheduler
{
public:
    PyObject *m_pyself;
    PyNs3Scheduler__PythonHelper()
        : ns3::Scheduler(), m_pyself(NULL)
        {}

    PyNs3Scheduler__PythonHelper(ns3::Scheduler const & arg0)
        : ns3::Scheduler(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Scheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Scheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Scheduler *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Scheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Scheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Scheduler__PythonHelper")
        .SetParent< ns3::Scheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Scheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Scheduler::Event *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SchedulerEvent;


extern PyTypeObject PyNs3SchedulerEvent_Type;

extern std::map<void*, PyObject*> PyNs3SchedulerEvent_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Scheduler::EventKey *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SchedulerEventKey;


extern PyTypeObject PyNs3SchedulerEventKey_Type;

extern std::map<void*, PyObject*> PyNs3SchedulerEventKey_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SequentialRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequentialRandomVariable;


extern PyTypeObject PyNs3SequentialRandomVariable_Type;

class PyNs3SequentialRandomVariable__PythonHelper : public ns3::SequentialRandomVariable
{
public:
    PyObject *m_pyself;
    PyNs3SequentialRandomVariable__PythonHelper()
        : ns3::SequentialRandomVariable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SequentialRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SequentialRandomVariable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3SequentialRandomVariable *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SequentialRandomVariable *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3SequentialRandomVariable *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetValue();

    virtual uint32_t GetInteger();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SequentialRandomVariable__PythonHelper")
        .SetParent< ns3::SequentialRandomVariable > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SequentialRandomVariable__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::FdReader, ns3::empty, ns3::DefaultDeleter<ns3::FdReader> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3FdReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3FdReader__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3FdReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3FdReader__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3FdReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3FdReader__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::RefCountBase, ns3::empty, ns3::DefaultDeleter<ns3::RefCountBase> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SystemThread, ns3::empty, ns3::DefaultDeleter<ns3::SystemThread> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimulatorImpl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimulatorImpl;


extern PyTypeObject PyNs3SimulatorImpl_Type;


typedef struct {
    PyObject_HEAD
    ns3::Synchronizer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Synchronizer;


extern PyTypeObject PyNs3Synchronizer_Type;

class PyNs3Synchronizer__PythonHelper : public ns3::Synchronizer
{
public:
    PyObject *m_pyself;
    PyNs3Synchronizer__PythonHelper(ns3::Synchronizer const & arg0)
        : ns3::Synchronizer(arg0), m_pyself(NULL)
        {}

    PyNs3Synchronizer__PythonHelper()
        : ns3::Synchronizer(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Synchronizer__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Synchronizer *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3Synchronizer *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Synchronizer *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Synchronizer *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual uint64_t DoEventEnd();

    virtual void DoEventStart();

    virtual uint64_t DoGetCurrentRealtime();

    virtual int64_t DoGetDrift(uint64_t ns);

    virtual bool DoRealtime();

    virtual void DoSetCondition(bool arg0);

    virtual void DoSetOrigin(uint64_t ns);

    virtual void DoSignal();

    virtual bool DoSynchronize(uint64_t nsCurrent, uint64_t nsDelay);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Synchronizer__PythonHelper")
        .SetParent< ns3::Synchronizer > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Synchronizer__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SystemThread *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SystemThread;


extern PyTypeObject PyNs3SystemThread_Type;


typedef struct {
    PyObject_HEAD
    ns3::Time *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Time;


extern PyTypeObject PyNs3Time_Type;

extern std::map<void*, PyObject*> PyNs3Time_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TraceSourceAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TraceSourceAccessor;


extern PyTypeObject PyNs3TraceSourceAccessor_Type;


typedef struct {
    PyObject_HEAD
    ns3::TriangularRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TriangularRandomVariable;


extern PyTypeObject PyNs3TriangularRandomVariable_Type;

class PyNs3TriangularRandomVariable__PythonHelper : public ns3::TriangularRandomVariable
{
public:
    PyObject *m_pyself;
    PyNs3TriangularRandomVariable__PythonHelper()
        : ns3::TriangularRandomVariable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TriangularRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TriangularRandomVariable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3TriangularRandomVariable *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TriangularRandomVariable *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3TriangularRandomVariable *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetValue();

    virtual uint32_t GetInteger();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TriangularRandomVariable__PythonHelper")
        .SetParent< ns3::TriangularRandomVariable > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TriangularRandomVariable__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UniformRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UniformRandomVariable;


extern PyTypeObject PyNs3UniformRandomVariable_Type;

class PyNs3UniformRandomVariable__PythonHelper : public ns3::UniformRandomVariable
{
public:
    PyObject *m_pyself;
    PyNs3UniformRandomVariable__PythonHelper()
        : ns3::UniformRandomVariable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UniformRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UniformRandomVariable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3UniformRandomVariable *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UniformRandomVariable *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3UniformRandomVariable *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetValue();

    virtual uint32_t GetInteger();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UniformRandomVariable__PythonHelper")
        .SetParent< ns3::UniformRandomVariable > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UniformRandomVariable__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::WallClockSynchronizer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WallClockSynchronizer;


extern PyTypeObject PyNs3WallClockSynchronizer_Type;
extern PyTypeObject PyNs3WallClockSynchronizerMeta_Type;

class PyNs3WallClockSynchronizer__PythonHelper : public ns3::WallClockSynchronizer
{
public:
    PyObject *m_pyself;
    PyNs3WallClockSynchronizer__PythonHelper(ns3::WallClockSynchronizer const & arg0)
        : ns3::WallClockSynchronizer(arg0), m_pyself(NULL)
        {}

    PyNs3WallClockSynchronizer__PythonHelper()
        : ns3::WallClockSynchronizer(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WallClockSynchronizer__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoSetOrigin(PyNs3WallClockSynchronizer *self, PyObject *args, PyObject *kwargs);
    inline void DoSetOrigin__parent_caller(uint64_t ns)
    { ns3::WallClockSynchronizer::DoSetOrigin(ns); }

    static PyObject * _wrap_DriftCorrect(PyNs3WallClockSynchronizer *self, PyObject *args, PyObject *kwargs);
    inline uint64_t DriftCorrect__parent_caller(uint64_t nsNow, uint64_t nsDelay)
    { return ns3::WallClockSynchronizer::DriftCorrect(nsNow, nsDelay); }

    static PyObject * _wrap_SpinWait(PyNs3WallClockSynchronizer *self, PyObject *args, PyObject *kwargs);
    inline bool SpinWait__parent_caller(uint64_t ns)
    { return ns3::WallClockSynchronizer::SpinWait(ns); }

    static PyObject * _wrap_DoDispose(PyNs3WallClockSynchronizer *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_GetRealtime(PyNs3WallClockSynchronizer *self);
    inline uint64_t GetRealtime__parent_caller()
    { return ns3::WallClockSynchronizer::GetRealtime(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WallClockSynchronizer *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoInitialize(PyNs3WallClockSynchronizer *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_DoEventEnd(PyNs3WallClockSynchronizer *self);
    inline uint64_t DoEventEnd__parent_caller()
    { return ns3::WallClockSynchronizer::DoEventEnd(); }

    static PyObject * _wrap_DoEventStart(PyNs3WallClockSynchronizer *self);
    inline void DoEventStart__parent_caller()
    { ns3::WallClockSynchronizer::DoEventStart(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WallClockSynchronizer *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoGetDrift(PyNs3WallClockSynchronizer *self, PyObject *args, PyObject *kwargs);
    inline int64_t DoGetDrift__parent_caller(uint64_t ns)
    { return ns3::WallClockSynchronizer::DoGetDrift(ns); }

    static PyObject * _wrap_DoRealtime(PyNs3WallClockSynchronizer *self);
    inline bool DoRealtime__parent_caller()
    { return ns3::WallClockSynchronizer::DoRealtime(); }

    static PyObject * _wrap_DoSetCondition(PyNs3WallClockSynchronizer *self, PyObject *args, PyObject *kwargs);
    inline void DoSetCondition__parent_caller(bool cond)
    { ns3::WallClockSynchronizer::DoSetCondition(cond); }

    static PyObject * _wrap_DoGetCurrentRealtime(PyNs3WallClockSynchronizer *self);
    inline uint64_t DoGetCurrentRealtime__parent_caller()
    { return ns3::WallClockSynchronizer::DoGetCurrentRealtime(); }

    static PyObject * _wrap_SleepWait(PyNs3WallClockSynchronizer *self, PyObject *args, PyObject *kwargs);
    inline bool SleepWait__parent_caller(uint64_t ns)
    { return ns3::WallClockSynchronizer::SleepWait(ns); }

    static PyObject * _wrap_GetNormalizedRealtime(PyNs3WallClockSynchronizer *self);
    inline uint64_t GetNormalizedRealtime__parent_caller()
    { return ns3::WallClockSynchronizer::GetNormalizedRealtime(); }

    static PyObject * _wrap_DoSynchronize(PyNs3WallClockSynchronizer *self, PyObject *args, PyObject *kwargs);
    inline bool DoSynchronize__parent_caller(uint64_t nsCurrent, uint64_t nsDelay)
    { return ns3::WallClockSynchronizer::DoSynchronize(nsCurrent, nsDelay); }

    static PyObject * _wrap_DoSignal(PyNs3WallClockSynchronizer *self);
    inline void DoSignal__parent_caller()
    { ns3::WallClockSynchronizer::DoSignal(); }

    virtual uint64_t DoEventEnd();

    virtual void DoEventStart();

    virtual uint64_t DoGetCurrentRealtime();

    virtual int64_t DoGetDrift(uint64_t ns);

    virtual bool DoRealtime();

    virtual void DoSetCondition(bool cond);

    virtual void DoSetOrigin(uint64_t ns);

    virtual void DoSignal();

    virtual bool DoSynchronize(uint64_t nsCurrent, uint64_t nsDelay);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WallClockSynchronizer__PythonHelper")
        .SetParent< ns3::WallClockSynchronizer > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WallClockSynchronizer__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::WeibullRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WeibullRandomVariable;


extern PyTypeObject PyNs3WeibullRandomVariable_Type;

class PyNs3WeibullRandomVariable__PythonHelper : public ns3::WeibullRandomVariable
{
public:
    PyObject *m_pyself;
    PyNs3WeibullRandomVariable__PythonHelper()
        : ns3::WeibullRandomVariable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WeibullRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WeibullRandomVariable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3WeibullRandomVariable *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WeibullRandomVariable *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3WeibullRandomVariable *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetValue();

    virtual uint32_t GetInteger();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WeibullRandomVariable__PythonHelper")
        .SetParent< ns3::WeibullRandomVariable > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WeibullRandomVariable__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ZetaRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZetaRandomVariable;


extern PyTypeObject PyNs3ZetaRandomVariable_Type;

class PyNs3ZetaRandomVariable__PythonHelper : public ns3::ZetaRandomVariable
{
public:
    PyObject *m_pyself;
    PyNs3ZetaRandomVariable__PythonHelper()
        : ns3::ZetaRandomVariable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ZetaRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ZetaRandomVariable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3ZetaRandomVariable *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ZetaRandomVariable *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3ZetaRandomVariable *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetValue();

    virtual uint32_t GetInteger();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ZetaRandomVariable__PythonHelper")
        .SetParent< ns3::ZetaRandomVariable > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ZetaRandomVariable__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ZipfRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZipfRandomVariable;


extern PyTypeObject PyNs3ZipfRandomVariable_Type;

class PyNs3ZipfRandomVariable__PythonHelper : public ns3::ZipfRandomVariable
{
public:
    PyObject *m_pyself;
    PyNs3ZipfRandomVariable__PythonHelper()
        : ns3::ZipfRandomVariable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ZipfRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ZipfRandomVariable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3ZipfRandomVariable *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ZipfRandomVariable *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3ZipfRandomVariable *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetValue();

    virtual uint32_t GetInteger();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ZipfRandomVariable__PythonHelper")
        .SetParent< ns3::ZipfRandomVariable > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ZipfRandomVariable__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::AttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeAccessor;


extern PyTypeObject PyNs3AttributeAccessor_Type;


typedef struct {
    PyObject_HEAD
    ns3::AttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeChecker;


extern PyTypeObject PyNs3AttributeChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::AttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeValue;


extern PyTypeObject PyNs3AttributeValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::BooleanChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanChecker;


extern PyTypeObject PyNs3BooleanChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::BooleanValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanValue;


extern PyTypeObject PyNs3BooleanValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::CalendarScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CalendarScheduler;


extern PyTypeObject PyNs3CalendarScheduler_Type;

class PyNs3CalendarScheduler__PythonHelper : public ns3::CalendarScheduler
{
public:
    PyObject *m_pyself;
    PyNs3CalendarScheduler__PythonHelper(ns3::CalendarScheduler const & arg0)
        : ns3::CalendarScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3CalendarScheduler__PythonHelper()
        : ns3::CalendarScheduler(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3CalendarScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3CalendarScheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3CalendarScheduler *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3CalendarScheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3CalendarScheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3CalendarScheduler__PythonHelper")
        .SetParent< ns3::CalendarScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3CalendarScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::CallbackChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackChecker;


extern PyTypeObject PyNs3CallbackChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackImplBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImplBase;


extern PyTypeObject PyNs3CallbackImplBase_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackValue;


extern PyTypeObject PyNs3CallbackValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::ConstantRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantRandomVariable;


extern PyTypeObject PyNs3ConstantRandomVariable_Type;

class PyNs3ConstantRandomVariable__PythonHelper : public ns3::ConstantRandomVariable
{
public:
    PyObject *m_pyself;
    PyNs3ConstantRandomVariable__PythonHelper()
        : ns3::ConstantRandomVariable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ConstantRandomVariable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3ConstantRandomVariable *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ConstantRandomVariable *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3ConstantRandomVariable *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetValue();

    virtual uint32_t GetInteger();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ConstantRandomVariable__PythonHelper")
        .SetParent< ns3::ConstantRandomVariable > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ConstantRandomVariable__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::DefaultSimulatorImpl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultSimulatorImpl;


extern PyTypeObject PyNs3DefaultSimulatorImpl_Type;


typedef struct {
    PyObject_HEAD
    ns3::DeterministicRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeterministicRandomVariable;


extern PyTypeObject PyNs3DeterministicRandomVariable_Type;

class PyNs3DeterministicRandomVariable__PythonHelper : public ns3::DeterministicRandomVariable
{
public:
    PyObject *m_pyself;
    PyNs3DeterministicRandomVariable__PythonHelper()
        : ns3::DeterministicRandomVariable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DeterministicRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3DeterministicRandomVariable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3DeterministicRandomVariable *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3DeterministicRandomVariable *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3DeterministicRandomVariable *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetValue();

    virtual uint32_t GetInteger();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3DeterministicRandomVariable__PythonHelper")
        .SetParent< ns3::DeterministicRandomVariable > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3DeterministicRandomVariable__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::DoubleValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DoubleValue;


extern PyTypeObject PyNs3DoubleValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::EmpiricalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmpiricalRandomVariable;


extern PyTypeObject PyNs3EmpiricalRandomVariable_Type;

class PyNs3EmpiricalRandomVariable__PythonHelper : public ns3::EmpiricalRandomVariable
{
public:
    PyObject *m_pyself;
    PyNs3EmpiricalRandomVariable__PythonHelper()
        : ns3::EmpiricalRandomVariable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EmpiricalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EmpiricalRandomVariable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3EmpiricalRandomVariable *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3EmpiricalRandomVariable *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3EmpiricalRandomVariable *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual uint32_t GetInteger();

    virtual double GetValue();

    virtual double Interpolate(double c1, double c2, double v1, double v2, double r);

    virtual void Validate();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3EmpiricalRandomVariable__PythonHelper")
        .SetParent< ns3::EmpiricalRandomVariable > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3EmpiricalRandomVariable__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeAccessor;


extern PyTypeObject PyNs3EmptyAttributeAccessor_Type;


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeChecker;


extern PyTypeObject PyNs3EmptyAttributeChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeValue;


extern PyTypeObject PyNs3EmptyAttributeValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::EnumChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumChecker;


extern PyTypeObject PyNs3EnumChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::EnumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumValue;


extern PyTypeObject PyNs3EnumValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::ErlangRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErlangRandomVariable;


extern PyTypeObject PyNs3ErlangRandomVariable_Type;

class PyNs3ErlangRandomVariable__PythonHelper : public ns3::ErlangRandomVariable
{
public:
    PyObject *m_pyself;
    PyNs3ErlangRandomVariable__PythonHelper()
        : ns3::ErlangRandomVariable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ErlangRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ErlangRandomVariable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3ErlangRandomVariable *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ErlangRandomVariable *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3ErlangRandomVariable *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetValue();

    virtual uint32_t GetInteger();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ErlangRandomVariable__PythonHelper")
        .SetParent< ns3::ErlangRandomVariable > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ErlangRandomVariable__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::EventImpl *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventImpl;


extern PyTypeObject PyNs3EventImpl_Type;


typedef struct {
    PyObject_HEAD
    ns3::ExponentialRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ExponentialRandomVariable;


extern PyTypeObject PyNs3ExponentialRandomVariable_Type;

class PyNs3ExponentialRandomVariable__PythonHelper : public ns3::ExponentialRandomVariable
{
public:
    PyObject *m_pyself;
    PyNs3ExponentialRandomVariable__PythonHelper()
        : ns3::ExponentialRandomVariable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ExponentialRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ExponentialRandomVariable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3ExponentialRandomVariable *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ExponentialRandomVariable *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3ExponentialRandomVariable *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetValue();

    virtual uint32_t GetInteger();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ExponentialRandomVariable__PythonHelper")
        .SetParent< ns3::ExponentialRandomVariable > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ExponentialRandomVariable__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::FdReader *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FdReader;


extern PyTypeObject PyNs3FdReader_Type;


typedef struct {
    PyObject_HEAD
    ns3::GammaRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3GammaRandomVariable;


extern PyTypeObject PyNs3GammaRandomVariable_Type;

class PyNs3GammaRandomVariable__PythonHelper : public ns3::GammaRandomVariable
{
public:
    PyObject *m_pyself;
    PyNs3GammaRandomVariable__PythonHelper()
        : ns3::GammaRandomVariable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3GammaRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3GammaRandomVariable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3GammaRandomVariable *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3GammaRandomVariable *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3GammaRandomVariable *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetValue();

    virtual uint32_t GetInteger();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3GammaRandomVariable__PythonHelper")
        .SetParent< ns3::GammaRandomVariable > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3GammaRandomVariable__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::HeapScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeapScheduler;


extern PyTypeObject PyNs3HeapScheduler_Type;

class PyNs3HeapScheduler__PythonHelper : public ns3::HeapScheduler
{
public:
    PyObject *m_pyself;
    PyNs3HeapScheduler__PythonHelper(ns3::HeapScheduler const & arg0)
        : ns3::HeapScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3HeapScheduler__PythonHelper()
        : ns3::HeapScheduler(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3HeapScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3HeapScheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3HeapScheduler *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3HeapScheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3HeapScheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3HeapScheduler__PythonHelper")
        .SetParent< ns3::HeapScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3HeapScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::IntegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntegerValue;


extern PyTypeObject PyNs3IntegerValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::ListScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ListScheduler;


extern PyTypeObject PyNs3ListScheduler_Type;

class PyNs3ListScheduler__PythonHelper : public ns3::ListScheduler
{
public:
    PyObject *m_pyself;
    PyNs3ListScheduler__PythonHelper(ns3::ListScheduler const & arg0)
        : ns3::ListScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3ListScheduler__PythonHelper()
        : ns3::ListScheduler(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ListScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ListScheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3ListScheduler *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ListScheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3ListScheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ListScheduler__PythonHelper")
        .SetParent< ns3::ListScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ListScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LogNormalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogNormalRandomVariable;


extern PyTypeObject PyNs3LogNormalRandomVariable_Type;

class PyNs3LogNormalRandomVariable__PythonHelper : public ns3::LogNormalRandomVariable
{
public:
    PyObject *m_pyself;
    PyNs3LogNormalRandomVariable__PythonHelper()
        : ns3::LogNormalRandomVariable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LogNormalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LogNormalRandomVariable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LogNormalRandomVariable *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LogNormalRandomVariable *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3LogNormalRandomVariable *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetValue();

    virtual uint32_t GetInteger();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LogNormalRandomVariable__PythonHelper")
        .SetParent< ns3::LogNormalRandomVariable > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LogNormalRandomVariable__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MapScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MapScheduler;


extern PyTypeObject PyNs3MapScheduler_Type;

class PyNs3MapScheduler__PythonHelper : public ns3::MapScheduler
{
public:
    PyObject *m_pyself;
    PyNs3MapScheduler__PythonHelper(ns3::MapScheduler const & arg0)
        : ns3::MapScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3MapScheduler__PythonHelper()
        : ns3::MapScheduler(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MapScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MapScheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3MapScheduler *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MapScheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3MapScheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MapScheduler__PythonHelper")
        .SetParent< ns3::MapScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MapScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::NormalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NormalRandomVariable;


extern PyTypeObject PyNs3NormalRandomVariable_Type;
extern PyTypeObject PyNs3NormalRandomVariableMeta_Type;

class PyNs3NormalRandomVariable__PythonHelper : public ns3::NormalRandomVariable
{
public:
    PyObject *m_pyself;
    PyNs3NormalRandomVariable__PythonHelper()
        : ns3::NormalRandomVariable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NormalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NormalRandomVariable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3NormalRandomVariable *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NormalRandomVariable *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3NormalRandomVariable *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetValue();

    virtual uint32_t GetInteger();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NormalRandomVariable__PythonHelper")
        .SetParent< ns3::NormalRandomVariable > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NormalRandomVariable__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryChecker;


extern PyTypeObject PyNs3ObjectFactoryChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryValue;


extern PyTypeObject PyNs3ObjectFactoryValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::ObjectPtrContainerAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectPtrContainerAccessor;


extern PyTypeObject PyNs3ObjectPtrContainerAccessor_Type;


typedef struct {
    PyObject_HEAD
    ns3::ObjectPtrContainerChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectPtrContainerChecker;


extern PyTypeObject PyNs3ObjectPtrContainerChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::ObjectPtrContainerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectPtrContainerValue;


extern PyTypeObject PyNs3ObjectPtrContainerValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::ParetoRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParetoRandomVariable;


extern PyTypeObject PyNs3ParetoRandomVariable_Type;

class PyNs3ParetoRandomVariable__PythonHelper : public ns3::ParetoRandomVariable
{
public:
    PyObject *m_pyself;
    PyNs3ParetoRandomVariable__PythonHelper()
        : ns3::ParetoRandomVariable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ParetoRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ParetoRandomVariable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3ParetoRandomVariable *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ParetoRandomVariable *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3ParetoRandomVariable *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetValue();

    virtual uint32_t GetInteger();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ParetoRandomVariable__PythonHelper")
        .SetParent< ns3::ParetoRandomVariable > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ParetoRandomVariable__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::PointerChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointerChecker;


extern PyTypeObject PyNs3PointerChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::PointerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointerValue;


extern PyTypeObject PyNs3PointerValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::RealtimeSimulatorImpl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RealtimeSimulatorImpl;


extern PyTypeObject PyNs3RealtimeSimulatorImpl_Type;


typedef struct {
    PyObject_HEAD
    ns3::RefCountBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RefCountBase;


extern PyTypeObject PyNs3RefCountBase_Type;


typedef struct {
    PyObject_HEAD
    ns3::StringChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3StringChecker;


extern PyTypeObject PyNs3StringChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::StringValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3StringValue;


extern PyTypeObject PyNs3StringValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::TimeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeValue;


extern PyTypeObject PyNs3TimeValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::TypeIdChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdChecker;


extern PyTypeObject PyNs3TypeIdChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::TypeIdValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdValue;


extern PyTypeObject PyNs3TypeIdValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::UintegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UintegerValue;


extern PyTypeObject PyNs3UintegerValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::Vector2DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DChecker;


extern PyTypeObject PyNs3Vector2DChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::Vector2DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DValue;


extern PyTypeObject PyNs3Vector2DValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::Vector3DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DChecker;


extern PyTypeObject PyNs3Vector3DChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::Vector3DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DValue;


extern PyTypeObject PyNs3Vector3DValue_Type;


typedef struct {
    PyObject_HEAD
    ::std::ostream *obj;
    PyBindGenWrapperFlags flags:8;
} PyStdOstream;


extern PyTypeObject PyStdOstream_Type;

extern std::map<void*, PyObject*> PyStdOstream_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ::std::ofstream *obj;
    PyBindGenWrapperFlags flags:8;
} PyStdOfstream;


extern PyTypeObject PyStdOfstream_Type;

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Config::MatchContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConfigMatchContainer;


extern PyTypeObject PyNs3ConfigMatchContainer_Type;

extern std::map<void*, PyObject*> PyNs3ConfigMatchContainer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ptr< ns3::Object > > *obj;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__ *container;
    std::vector< ns3::Ptr< ns3::Object > >::iterator *iterator;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::Object > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< std::string > *obj;
} Pystd__vector__lt___std__string___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___std__string___gt__ *container;
    std::vector< std::string >::iterator *iterator;
} Pystd__vector__lt___std__string___gt__Iter;


extern PyTypeObject Pystd__vector__lt___std__string___gt___Type;
extern PyTypeObject Pystd__vector__lt___std__string___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___std__string___gt__(PyObject *arg, std::vector< std::string > *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Implementation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashImplementation;


extern PyTypeObject PyNs3HashImplementation_Type;

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Fnv1a *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionFnv1a;


extern PyTypeObject PyNs3HashFunctionFnv1a_Type;


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash32 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash32;


extern PyTypeObject PyNs3HashFunctionHash32_Type;


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash64 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash64;


extern PyTypeObject PyNs3HashFunctionHash64_Type;


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Murmur3 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionMurmur3;


extern PyTypeObject PyNs3HashFunctionMurmur3_Type;

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    std::list< std::string > *obj;
} Pystd__list__lt___std__string___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___std__string___gt__ *container;
    std::list< std::string >::iterator *iterator;
} Pystd__list__lt___std__string___gt__Iter;


extern PyTypeObject Pystd__list__lt___std__string___gt___Type;
extern PyTypeObject Pystd__list__lt___std__string___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___std__string___gt__(PyObject *arg, std::list< std::string > *container);

class PythonCallbackImpl1 : public ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl1(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl1()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl1 *other = dynamic_cast<const PythonCallbackImpl1*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()()
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "()");
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl2 : public ns3::CallbackImpl<bool, std::string, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl2(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl2()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl2 *other = dynamic_cast<const PythonCallbackImpl2*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(std::string arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        const char *arg1_ptr;
        Py_ssize_t arg1_len;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        arg1_ptr = (arg1).c_str();
        arg1_len = (arg1).size();
        args = Py_BuildValue((char *) "(s#)", arg1_ptr, arg1_len);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__Object___gt__(PyObject *value, ns3::Ptr< ns3::Object > *address);


int _wrap_convert_py2c__std__string(PyObject *value, std::string *address);


PyObject* _wrap_convert_c2py__ns3__int64x64_t(ns3::int64x64_t *cvalue);


int _wrap_convert_py2c__ns3__int64x64_t(PyObject *value, ns3::int64x64_t *address);


PyObject* _wrap_convert_c2py__ns3__Time(ns3::Time *cvalue);


int _wrap_convert_py2c__ns3__Time(PyObject *value, ns3::Time *address);


int _wrap_convert_py2c__int64_t(PyObject *value, int64_t *address);

