/* This file was generated by PyBindGen 0.0.0.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#ifndef PyVarObject_HEAD_INIT
#define PyVarObject_HEAD_INIT(type, size) \
        PyObject_HEAD_INIT(type) size,
#endif


#if PY_VERSION_HEX >= 0x03000000
typedef void* cmpfunc;
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif


#include "ns3/lte-module.h"
#include <ostream>
#include <sstream>
#include <typeinfo>
#include <map>
#include <iostream>
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Address;


extern PyTypeObject *_PyNs3Address_Type;
#define PyNs3Address_Type (*_PyNs3Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Address_wrapper_registry;
#define PyNs3Address_wrapper_registry (*_PyNs3Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionList;


extern PyTypeObject *_PyNs3AttributeConstructionList_Type;
#define PyNs3AttributeConstructionList_Type (*_PyNs3AttributeConstructionList_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionList_wrapper_registry;
#define PyNs3AttributeConstructionList_wrapper_registry (*_PyNs3AttributeConstructionList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionListItem;


extern PyTypeObject *_PyNs3AttributeConstructionListItem_Type;
#define PyNs3AttributeConstructionListItem_Type (*_PyNs3AttributeConstructionListItem_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionListItem_wrapper_registry;
#define PyNs3AttributeConstructionListItem_wrapper_registry (*_PyNs3AttributeConstructionListItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::BandInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BandInfo;


extern PyTypeObject *_PyNs3BandInfo_Type;
#define PyNs3BandInfo_Type (*_PyNs3BandInfo_Type)

extern std::map<void*, PyObject*> *_PyNs3BandInfo_wrapper_registry;
#define PyNs3BandInfo_wrapper_registry (*_PyNs3BandInfo_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Buffer;


extern PyTypeObject *_PyNs3Buffer_Type;
#define PyNs3Buffer_Type (*_PyNs3Buffer_Type)

extern std::map<void*, PyObject*> *_PyNs3Buffer_wrapper_registry;
#define PyNs3Buffer_wrapper_registry (*_PyNs3Buffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BufferIterator;


extern PyTypeObject *_PyNs3BufferIterator_Type;
#define PyNs3BufferIterator_Type (*_PyNs3BufferIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3BufferIterator_wrapper_registry;
#define PyNs3BufferIterator_wrapper_registry (*_PyNs3BufferIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIterator;


extern PyTypeObject *_PyNs3ByteTagIterator_Type;
#define PyNs3ByteTagIterator_Type (*_PyNs3ByteTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIterator_wrapper_registry;
#define PyNs3ByteTagIterator_wrapper_registry (*_PyNs3ByteTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIteratorItem;


extern PyTypeObject *_PyNs3ByteTagIteratorItem_Type;
#define PyNs3ByteTagIteratorItem_Type (*_PyNs3ByteTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIteratorItem_wrapper_registry;
#define PyNs3ByteTagIteratorItem_wrapper_registry (*_PyNs3ByteTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagList;


extern PyTypeObject *_PyNs3ByteTagList_Type;
#define PyNs3ByteTagList_Type (*_PyNs3ByteTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagList_wrapper_registry;
#define PyNs3ByteTagList_wrapper_registry (*_PyNs3ByteTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIterator;


extern PyTypeObject *_PyNs3ByteTagListIterator_Type;
#define PyNs3ByteTagListIterator_Type (*_PyNs3ByteTagListIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIterator_wrapper_registry;
#define PyNs3ByteTagListIterator_wrapper_registry (*_PyNs3ByteTagListIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIteratorItem;


extern PyTypeObject *_PyNs3ByteTagListIteratorItem_Type;
#define PyNs3ByteTagListIteratorItem_Type (*_PyNs3ByteTagListIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIteratorItem_wrapper_registry;
#define PyNs3ByteTagListIteratorItem_wrapper_registry (*_PyNs3ByteTagListIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::CallbackBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackBase;


extern PyTypeObject *_PyNs3CallbackBase_Type;
#define PyNs3CallbackBase_Type (*_PyNs3CallbackBase_Type)

extern std::map<void*, PyObject*> *_PyNs3CallbackBase_wrapper_registry;
#define PyNs3CallbackBase_wrapper_registry (*_PyNs3CallbackBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DataOutputCallback *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataOutputCallback;


extern PyTypeObject *_PyNs3DataOutputCallback_Type;
#define PyNs3DataOutputCallback_Type (*_PyNs3DataOutputCallback_Type)

class PyNs3DataOutputCallback__PythonHelper : public ns3::DataOutputCallback
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DataOutputCallback__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3DataOutputCallback_wrapper_registry;
#define PyNs3DataOutputCallback_wrapper_registry (*_PyNs3DataOutputCallback_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::DataRate *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRate;


extern PyTypeObject *_PyNs3DataRate_Type;
#define PyNs3DataRate_Type (*_PyNs3DataRate_Type)

extern std::map<void*, PyObject*> *_PyNs3DataRate_wrapper_registry;
#define PyNs3DataRate_wrapper_registry (*_PyNs3DataRate_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EventId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventId;


extern PyTypeObject *_PyNs3EventId_Type;
#define PyNs3EventId_Type (*_PyNs3EventId_Type)

extern std::map<void*, PyObject*> *_PyNs3EventId_wrapper_registry;
#define PyNs3EventId_wrapper_registry (*_PyNs3EventId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Hasher *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Hasher;


extern PyTypeObject *_PyNs3Hasher_Type;
#define PyNs3Hasher_Type (*_PyNs3Hasher_Type)

extern std::map<void*, PyObject*> *_PyNs3Hasher_wrapper_registry;
#define PyNs3Hasher_wrapper_registry (*_PyNs3Hasher_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Inet6SocketAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Inet6SocketAddress;


extern PyTypeObject *_PyNs3Inet6SocketAddress_Type;
#define PyNs3Inet6SocketAddress_Type (*_PyNs3Inet6SocketAddress_Type)

extern std::map<void*, PyObject*> *_PyNs3Inet6SocketAddress_wrapper_registry;
#define PyNs3Inet6SocketAddress_wrapper_registry (*_PyNs3Inet6SocketAddress_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::InetSocketAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3InetSocketAddress;


extern PyTypeObject *_PyNs3InetSocketAddress_Type;
#define PyNs3InetSocketAddress_Type (*_PyNs3InetSocketAddress_Type)

extern std::map<void*, PyObject*> *_PyNs3InetSocketAddress_wrapper_registry;
#define PyNs3InetSocketAddress_wrapper_registry (*_PyNs3InetSocketAddress_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Address;


extern PyTypeObject *_PyNs3Ipv4Address_Type;
#define PyNs3Ipv4Address_Type (*_PyNs3Ipv4Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Address_wrapper_registry;
#define PyNs3Ipv4Address_wrapper_registry (*_PyNs3Ipv4Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressHelper;


extern PyTypeObject *_PyNs3Ipv4AddressHelper_Type;
#define PyNs3Ipv4AddressHelper_Type (*_PyNs3Ipv4AddressHelper_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4AddressHelper_wrapper_registry;
#define PyNs3Ipv4AddressHelper_wrapper_registry (*_PyNs3Ipv4AddressHelper_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4InterfaceAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4InterfaceAddress;


extern PyTypeObject *_PyNs3Ipv4InterfaceAddress_Type;
#define PyNs3Ipv4InterfaceAddress_Type (*_PyNs3Ipv4InterfaceAddress_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4InterfaceAddress_wrapper_registry;
#define PyNs3Ipv4InterfaceAddress_wrapper_registry (*_PyNs3Ipv4InterfaceAddress_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4InterfaceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4InterfaceContainer;


extern PyTypeObject *_PyNs3Ipv4InterfaceContainer_Type;
#define PyNs3Ipv4InterfaceContainer_Type (*_PyNs3Ipv4InterfaceContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4InterfaceContainer_wrapper_registry;
#define PyNs3Ipv4InterfaceContainer_wrapper_registry (*_PyNs3Ipv4InterfaceContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Mask *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Mask;


extern PyTypeObject *_PyNs3Ipv4Mask_Type;
#define PyNs3Ipv4Mask_Type (*_PyNs3Ipv4Mask_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Mask_wrapper_registry;
#define PyNs3Ipv4Mask_wrapper_registry (*_PyNs3Ipv4Mask_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Address;


extern PyTypeObject *_PyNs3Ipv6Address_Type;
#define PyNs3Ipv6Address_Type (*_PyNs3Ipv6Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Address_wrapper_registry;
#define PyNs3Ipv6Address_wrapper_registry (*_PyNs3Ipv6Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Prefix *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Prefix;


extern PyTypeObject *_PyNs3Ipv6Prefix_Type;
#define PyNs3Ipv6Prefix_Type (*_PyNs3Ipv6Prefix_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Prefix_wrapper_registry;
#define PyNs3Ipv6Prefix_wrapper_registry (*_PyNs3Ipv6Prefix_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::LogComponent *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogComponent;


extern PyTypeObject *_PyNs3LogComponent_Type;
#define PyNs3LogComponent_Type (*_PyNs3LogComponent_Type)

extern std::map<void*, PyObject*> *_PyNs3LogComponent_wrapper_registry;
#define PyNs3LogComponent_wrapper_registry (*_PyNs3LogComponent_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Mac48Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48Address;


extern PyTypeObject *_PyNs3Mac48Address_Type;
#define PyNs3Mac48Address_Type (*_PyNs3Mac48Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Mac48Address_wrapper_registry;
#define PyNs3Mac48Address_wrapper_registry (*_PyNs3Mac48Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Names *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Names;


extern PyTypeObject *_PyNs3Names_Type;
#define PyNs3Names_Type (*_PyNs3Names_Type)

extern std::map<void*, PyObject*> *_PyNs3Names_wrapper_registry;
#define PyNs3Names_wrapper_registry (*_PyNs3Names_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NetDeviceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDeviceContainer;


extern PyTypeObject *_PyNs3NetDeviceContainer_Type;
#define PyNs3NetDeviceContainer_Type (*_PyNs3NetDeviceContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NetDeviceContainer_wrapper_registry;
#define PyNs3NetDeviceContainer_wrapper_registry (*_PyNs3NetDeviceContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NodeContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NodeContainer;


extern PyTypeObject *_PyNs3NodeContainer_Type;
#define PyNs3NodeContainer_Type (*_PyNs3NodeContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NodeContainer_wrapper_registry;
#define PyNs3NodeContainer_wrapper_registry (*_PyNs3NodeContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectBase;


extern PyTypeObject *_PyNs3ObjectBase_Type;
#define PyNs3ObjectBase_Type (*_PyNs3ObjectBase_Type)

class PyNs3ObjectBase__PythonHelper : public ns3::ObjectBase
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ObjectBase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3ObjectBase_wrapper_registry;
#define PyNs3ObjectBase_wrapper_registry (*_PyNs3ObjectBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectDeleter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectDeleter;


extern PyTypeObject *_PyNs3ObjectDeleter_Type;
#define PyNs3ObjectDeleter_Type (*_PyNs3ObjectDeleter_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectDeleter_wrapper_registry;
#define PyNs3ObjectDeleter_wrapper_registry (*_PyNs3ObjectDeleter_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactory;


extern PyTypeObject *_PyNs3ObjectFactory_Type;
#define PyNs3ObjectFactory_Type (*_PyNs3ObjectFactory_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectFactory_wrapper_registry;
#define PyNs3ObjectFactory_wrapper_registry (*_PyNs3ObjectFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadata;


extern PyTypeObject *_PyNs3PacketMetadata_Type;
#define PyNs3PacketMetadata_Type (*_PyNs3PacketMetadata_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadata_wrapper_registry;
#define PyNs3PacketMetadata_wrapper_registry (*_PyNs3PacketMetadata_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItem;


extern PyTypeObject *_PyNs3PacketMetadataItem_Type;
#define PyNs3PacketMetadataItem_Type (*_PyNs3PacketMetadataItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItem_wrapper_registry;
#define PyNs3PacketMetadataItem_wrapper_registry (*_PyNs3PacketMetadataItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::ItemIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItemIterator;


extern PyTypeObject *_PyNs3PacketMetadataItemIterator_Type;
#define PyNs3PacketMetadataItemIterator_Type (*_PyNs3PacketMetadataItemIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItemIterator_wrapper_registry;
#define PyNs3PacketMetadataItemIterator_wrapper_registry (*_PyNs3PacketMetadataItemIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIterator;


extern PyTypeObject *_PyNs3PacketTagIterator_Type;
#define PyNs3PacketTagIterator_Type (*_PyNs3PacketTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIterator_wrapper_registry;
#define PyNs3PacketTagIterator_wrapper_registry (*_PyNs3PacketTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIteratorItem;


extern PyTypeObject *_PyNs3PacketTagIteratorItem_Type;
#define PyNs3PacketTagIteratorItem_Type (*_PyNs3PacketTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIteratorItem_wrapper_registry;
#define PyNs3PacketTagIteratorItem_wrapper_registry (*_PyNs3PacketTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagList;


extern PyTypeObject *_PyNs3PacketTagList_Type;
#define PyNs3PacketTagList_Type (*_PyNs3PacketTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagList_wrapper_registry;
#define PyNs3PacketTagList_wrapper_registry (*_PyNs3PacketTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList::TagData *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagListTagData;


extern PyTypeObject *_PyNs3PacketTagListTagData_Type;
#define PyNs3PacketTagListTagData_Type (*_PyNs3PacketTagListTagData_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagListTagData_wrapper_registry;
#define PyNs3PacketTagListTagData_wrapper_registry (*_PyNs3PacketTagListTagData_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ParameterLogger *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParameterLogger;


extern PyTypeObject *_PyNs3ParameterLogger_Type;
#define PyNs3ParameterLogger_Type (*_PyNs3ParameterLogger_Type)

extern std::map<void*, PyObject*> *_PyNs3ParameterLogger_wrapper_registry;
#define PyNs3ParameterLogger_wrapper_registry (*_PyNs3ParameterLogger_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type)



#include <map>
#include <string>
#include <typeinfo>
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)
# include <cxxabi.h>
#endif

#define PBG_TYPEMAP_DEBUG 0

namespace pybindgen {

class TypeMap
{
   std::map<std::string, PyTypeObject *> m_map;

public:

   TypeMap() {}

   void register_wrapper(const std::type_info &cpp_type_info, PyTypeObject *python_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "register_wrapper(this=" << this << ", type_name=" << cpp_type_info.name()
             << ", python_wrapper=" << python_wrapper->tp_name << ")" << std::endl;
#endif

       m_map[std::string(cpp_type_info.name())] = python_wrapper;
   }



   PyTypeObject * lookup_wrapper(const std::type_info &cpp_type_info, PyTypeObject *fallback_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "lookup_wrapper(this=" << this << ", type_name=" << cpp_type_info.name() << ")" << std::endl;
#endif

       PyTypeObject *python_wrapper = m_map[cpp_type_info.name()];
       if (python_wrapper)
           return python_wrapper;
       else {
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)

           // Get closest (in the single inheritance tree provided by cxxabi.h)
           // registered python wrapper.
           const abi::__si_class_type_info *_typeinfo =
               dynamic_cast<const abi::__si_class_type_info*> (&cpp_type_info);
#if PBG_TYPEMAP_DEBUG
          std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           while (_typeinfo && (python_wrapper = m_map[std::string(_typeinfo->name())]) == 0) {
               _typeinfo = dynamic_cast<const abi::__si_class_type_info*> (_typeinfo->__base_type);
#if PBG_TYPEMAP_DEBUG
               std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           }

#if PBG_TYPEMAP_DEBUG
          if (python_wrapper) {
              std::cerr << "  -> found match " << std::endl;
          } else {
              std::cerr << "  -> return fallback wrapper" << std::endl;
          }
#endif

           return python_wrapper? python_wrapper : fallback_wrapper;

#else // non gcc 3+ compilers can only match against explicitly registered classes, not hidden subclasses
           return fallback_wrapper;
#endif
       }
   }
};

}


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;

#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Simulator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Simulator;


extern PyTypeObject *_PyNs3Simulator_Type;
#define PyNs3Simulator_Type (*_PyNs3Simulator_Type)

extern std::map<void*, PyObject*> *_PyNs3Simulator_wrapper_registry;
#define PyNs3Simulator_wrapper_registry (*_PyNs3Simulator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::StatisticalSummary *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3StatisticalSummary;


extern PyTypeObject *_PyNs3StatisticalSummary_Type;
#define PyNs3StatisticalSummary_Type (*_PyNs3StatisticalSummary_Type)

class PyNs3StatisticalSummary__PythonHelper : public ns3::StatisticalSummary
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3StatisticalSummary__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3StatisticalSummary_wrapper_registry;
#define PyNs3StatisticalSummary_wrapper_registry (*_PyNs3StatisticalSummary_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Tag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Tag;


extern PyTypeObject *_PyNs3Tag_Type;
#define PyNs3Tag_Type (*_PyNs3Tag_Type)


typedef struct {
    PyObject_HEAD
    ns3::TagBuffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TagBuffer;


extern PyTypeObject *_PyNs3TagBuffer_Type;
#define PyNs3TagBuffer_Type (*_PyNs3TagBuffer_Type)

extern std::map<void*, PyObject*> *_PyNs3TagBuffer_wrapper_registry;
#define PyNs3TagBuffer_wrapper_registry (*_PyNs3TagBuffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TimeWithUnit *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeWithUnit;


extern PyTypeObject *_PyNs3TimeWithUnit_Type;
#define PyNs3TimeWithUnit_Type (*_PyNs3TimeWithUnit_Type)

extern std::map<void*, PyObject*> *_PyNs3TimeWithUnit_wrapper_registry;
#define PyNs3TimeWithUnit_wrapper_registry (*_PyNs3TimeWithUnit_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeId;


extern PyTypeObject *_PyNs3TypeId_Type;
#define PyNs3TypeId_Type (*_PyNs3TypeId_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeId_wrapper_registry;
#define PyNs3TypeId_wrapper_registry (*_PyNs3TypeId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::AttributeInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdAttributeInformation;


extern PyTypeObject *_PyNs3TypeIdAttributeInformation_Type;
#define PyNs3TypeIdAttributeInformation_Type (*_PyNs3TypeIdAttributeInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdAttributeInformation_wrapper_registry;
#define PyNs3TypeIdAttributeInformation_wrapper_registry (*_PyNs3TypeIdAttributeInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::TraceSourceInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdTraceSourceInformation;


extern PyTypeObject *_PyNs3TypeIdTraceSourceInformation_Type;
#define PyNs3TypeIdTraceSourceInformation_Type (*_PyNs3TypeIdTraceSourceInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdTraceSourceInformation_wrapper_registry;
#define PyNs3TypeIdTraceSourceInformation_wrapper_registry (*_PyNs3TypeIdTraceSourceInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Vector2D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2D;


extern PyTypeObject *_PyNs3Vector2D_Type;
#define PyNs3Vector2D_Type (*_PyNs3Vector2D_Type)

extern std::map<void*, PyObject*> *_PyNs3Vector2D_wrapper_registry;
#define PyNs3Vector2D_wrapper_registry (*_PyNs3Vector2D_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Vector3D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3D;


extern PyTypeObject *_PyNs3Vector3D_Type;
#define PyNs3Vector3D_Type (*_PyNs3Vector3D_Type)

extern std::map<void*, PyObject*> *_PyNs3Vector3D_wrapper_registry;
#define PyNs3Vector3D_wrapper_registry (*_PyNs3Vector3D_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::empty *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Empty;


extern PyTypeObject *_PyNs3Empty_Type;
#define PyNs3Empty_Type (*_PyNs3Empty_Type)

extern std::map<void*, PyObject*> *_PyNs3Empty_wrapper_registry;
#define PyNs3Empty_wrapper_registry (*_PyNs3Empty_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::int64x64_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Int64x64_t;


extern PyTypeObject *_PyNs3Int64x64_t_Type;
#define PyNs3Int64x64_t_Type (*_PyNs3Int64x64_t_Type)

extern std::map<void*, PyObject*> *_PyNs3Int64x64_t_wrapper_registry;
#define PyNs3Int64x64_t_wrapper_registry (*_PyNs3Int64x64_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Chunk *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Chunk;


extern PyTypeObject *_PyNs3Chunk_Type;
#define PyNs3Chunk_Type (*_PyNs3Chunk_Type)


typedef struct {
    PyObject_HEAD
    ns3::Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Header;


extern PyTypeObject *_PyNs3Header_Type;
#define PyNs3Header_Type (*_PyNs3Header_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Header;


extern PyTypeObject *_PyNs3Ipv4Header_Type;
#define PyNs3Ipv4Header_Type (*_PyNs3Ipv4Header_Type)


typedef struct {
    PyObject_HEAD
    ns3::Object *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Object;


extern PyTypeObject *_PyNs3Object_Type;
#define PyNs3Object_Type (*_PyNs3Object_Type)

class PyNs3Object__PythonHelper : public ns3::Object
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Object__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Object::AggregateIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectAggregateIterator;


extern PyTypeObject *_PyNs3ObjectAggregateIterator_Type;
#define PyNs3ObjectAggregateIterator_Type (*_PyNs3ObjectAggregateIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectAggregateIterator_wrapper_registry;
#define PyNs3ObjectAggregateIterator_wrapper_registry (*_PyNs3ObjectAggregateIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketBurst *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketBurst;


extern PyTypeObject *_PyNs3PacketBurst_Type;
#define PyNs3PacketBurst_Type (*_PyNs3PacketBurst_Type)

class PyNs3PacketBurst__PythonHelper : public ns3::PacketBurst
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PacketBurst__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::RandomVariableStream *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableStream;


extern PyTypeObject *_PyNs3RandomVariableStream_Type;
#define PyNs3RandomVariableStream_Type (*_PyNs3RandomVariableStream_Type)

class PyNs3RandomVariableStream__PythonHelper : public ns3::RandomVariableStream
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomVariableStream__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SequentialRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequentialRandomVariable;


extern PyTypeObject *_PyNs3SequentialRandomVariable_Type;
#define PyNs3SequentialRandomVariable_Type (*_PyNs3SequentialRandomVariable_Type)

class PyNs3SequentialRandomVariable__PythonHelper : public ns3::SequentialRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SequentialRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;
#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;
#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type;
#define PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type (*_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type;
#define PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type (*_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type;
#define PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type (*_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___Type;
#define PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___Type (*_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type;
#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type;
#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type;
#define PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type (*_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type;
#define PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type (*_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumSignalParameters, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumSignalParameters> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___Type;
#define PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___Type (*_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3SpectrumSignalParameters_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumSignalParameters__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type (*_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Socket *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Socket;


extern PyTypeObject *_PyNs3Socket_Type;
#define PyNs3Socket_Type (*_PyNs3Socket_Type)

class PyNs3Socket__PythonHelper : public ns3::Socket
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Socket__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SocketIpTosTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpTosTag;


extern PyTypeObject *_PyNs3SocketIpTosTag_Type;
#define PyNs3SocketIpTosTag_Type (*_PyNs3SocketIpTosTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketIpTtlTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpTtlTag;


extern PyTypeObject *_PyNs3SocketIpTtlTag_Type;
#define PyNs3SocketIpTtlTag_Type (*_PyNs3SocketIpTtlTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketIpv6HopLimitTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpv6HopLimitTag;


extern PyTypeObject *_PyNs3SocketIpv6HopLimitTag_Type;
#define PyNs3SocketIpv6HopLimitTag_Type (*_PyNs3SocketIpv6HopLimitTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketIpv6TclassTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpv6TclassTag;


extern PyTypeObject *_PyNs3SocketIpv6TclassTag_Type;
#define PyNs3SocketIpv6TclassTag_Type (*_PyNs3SocketIpv6TclassTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketPriorityTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketPriorityTag;


extern PyTypeObject *_PyNs3SocketPriorityTag_Type;
#define PyNs3SocketPriorityTag_Type (*_PyNs3SocketPriorityTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SocketSetDontFragmentTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketSetDontFragmentTag;


extern PyTypeObject *_PyNs3SocketSetDontFragmentTag_Type;
#define PyNs3SocketSetDontFragmentTag_Type (*_PyNs3SocketSetDontFragmentTag_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumInterference *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumInterference;


extern PyTypeObject *_PyNs3SpectrumInterference_Type;
#define PyNs3SpectrumInterference_Type (*_PyNs3SpectrumInterference_Type)

class PyNs3SpectrumInterference__PythonHelper : public ns3::SpectrumInterference
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumInterference__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SpectrumModel *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumModel;


extern PyTypeObject *_PyNs3SpectrumModel_Type;
#define PyNs3SpectrumModel_Type (*_PyNs3SpectrumModel_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumPhy;


extern PyTypeObject *_PyNs3SpectrumPhy_Type;
#define PyNs3SpectrumPhy_Type (*_PyNs3SpectrumPhy_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumPropagationLossModel;


extern PyTypeObject *_PyNs3SpectrumPropagationLossModel_Type;
#define PyNs3SpectrumPropagationLossModel_Type (*_PyNs3SpectrumPropagationLossModel_Type)

class PyNs3SpectrumPropagationLossModel__PythonHelper : public ns3::SpectrumPropagationLossModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::SpectrumSignalParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumSignalParameters;


extern PyTypeObject *_PyNs3SpectrumSignalParameters_Type;
#define PyNs3SpectrumSignalParameters_Type (*_PyNs3SpectrumSignalParameters_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumValue;


extern PyTypeObject *_PyNs3SpectrumValue_Type;
#define PyNs3SpectrumValue_Type (*_PyNs3SpectrumValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Time *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Time;


extern PyTypeObject *_PyNs3Time_Type;
#define PyNs3Time_Type (*_PyNs3Time_Type)

extern std::map<void*, PyObject*> *_PyNs3Time_wrapper_registry;
#define PyNs3Time_wrapper_registry (*_PyNs3Time_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TraceSourceAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TraceSourceAccessor;


extern PyTypeObject *_PyNs3TraceSourceAccessor_Type;
#define PyNs3TraceSourceAccessor_Type (*_PyNs3TraceSourceAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::Trailer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Trailer;


extern PyTypeObject *_PyNs3Trailer_Type;
#define PyNs3Trailer_Type (*_PyNs3Trailer_Type)


typedef struct {
    PyObject_HEAD
    ns3::TriangularRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TriangularRandomVariable;


extern PyTypeObject *_PyNs3TriangularRandomVariable_Type;
#define PyNs3TriangularRandomVariable_Type (*_PyNs3TriangularRandomVariable_Type)

class PyNs3TriangularRandomVariable__PythonHelper : public ns3::TriangularRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TriangularRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::UniformRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UniformRandomVariable;


extern PyTypeObject *_PyNs3UniformRandomVariable_Type;
#define PyNs3UniformRandomVariable_Type (*_PyNs3UniformRandomVariable_Type)

class PyNs3UniformRandomVariable__PythonHelper : public ns3::UniformRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UniformRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::WeibullRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WeibullRandomVariable;


extern PyTypeObject *_PyNs3WeibullRandomVariable_Type;
#define PyNs3WeibullRandomVariable_Type (*_PyNs3WeibullRandomVariable_Type)

class PyNs3WeibullRandomVariable__PythonHelper : public ns3::WeibullRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WeibullRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ZetaRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZetaRandomVariable;


extern PyTypeObject *_PyNs3ZetaRandomVariable_Type;
#define PyNs3ZetaRandomVariable_Type (*_PyNs3ZetaRandomVariable_Type)

class PyNs3ZetaRandomVariable__PythonHelper : public ns3::ZetaRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ZetaRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ZipfRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZipfRandomVariable;


extern PyTypeObject *_PyNs3ZipfRandomVariable_Type;
#define PyNs3ZipfRandomVariable_Type (*_PyNs3ZipfRandomVariable_Type)

class PyNs3ZipfRandomVariable__PythonHelper : public ns3::ZipfRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ZipfRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Application *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Application;


extern PyTypeObject *_PyNs3Application_Type;
#define PyNs3Application_Type (*_PyNs3Application_Type)

class PyNs3Application__PythonHelper : public ns3::Application
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Application__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::AttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeAccessor;


extern PyTypeObject *_PyNs3AttributeAccessor_Type;
#define PyNs3AttributeAccessor_Type (*_PyNs3AttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeChecker;


extern PyTypeObject *_PyNs3AttributeChecker_Type;
#define PyNs3AttributeChecker_Type (*_PyNs3AttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeValue;


extern PyTypeObject *_PyNs3AttributeValue_Type;
#define PyNs3AttributeValue_Type (*_PyNs3AttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::BooleanChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanChecker;


extern PyTypeObject *_PyNs3BooleanChecker_Type;
#define PyNs3BooleanChecker_Type (*_PyNs3BooleanChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::BooleanValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanValue;


extern PyTypeObject *_PyNs3BooleanValue_Type;
#define PyNs3BooleanValue_Type (*_PyNs3BooleanValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackChecker;


extern PyTypeObject *_PyNs3CallbackChecker_Type;
#define PyNs3CallbackChecker_Type (*_PyNs3CallbackChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImplBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImplBase;


extern PyTypeObject *_PyNs3CallbackImplBase_Type;
#define PyNs3CallbackImplBase_Type (*_PyNs3CallbackImplBase_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackValue;


extern PyTypeObject *_PyNs3CallbackValue_Type;
#define PyNs3CallbackValue_Type (*_PyNs3CallbackValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Channel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Channel;


extern PyTypeObject *_PyNs3Channel_Type;
#define PyNs3Channel_Type (*_PyNs3Channel_Type)

class PyNs3Channel__PythonHelper : public ns3::Channel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Channel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ConstantRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantRandomVariable;


extern PyTypeObject *_PyNs3ConstantRandomVariable_Type;
#define PyNs3ConstantRandomVariable_Type (*_PyNs3ConstantRandomVariable_Type)

class PyNs3ConstantRandomVariable__PythonHelper : public ns3::ConstantRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DataCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataCalculator;


extern PyTypeObject *_PyNs3DataCalculator_Type;
#define PyNs3DataCalculator_Type (*_PyNs3DataCalculator_Type)

class PyNs3DataCalculator__PythonHelper : public ns3::DataCalculator
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DataCalculator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DataOutputInterface *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataOutputInterface;


extern PyTypeObject *_PyNs3DataOutputInterface_Type;
#define PyNs3DataOutputInterface_Type (*_PyNs3DataOutputInterface_Type)


typedef struct {
    PyObject_HEAD
    ns3::DataRateChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRateChecker;


extern PyTypeObject *_PyNs3DataRateChecker_Type;
#define PyNs3DataRateChecker_Type (*_PyNs3DataRateChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::DataRateValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRateValue;


extern PyTypeObject *_PyNs3DataRateValue_Type;
#define PyNs3DataRateValue_Type (*_PyNs3DataRateValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::DeterministicRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeterministicRandomVariable;


extern PyTypeObject *_PyNs3DeterministicRandomVariable_Type;
#define PyNs3DeterministicRandomVariable_Type (*_PyNs3DeterministicRandomVariable_Type)

class PyNs3DeterministicRandomVariable__PythonHelper : public ns3::DeterministicRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DeterministicRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::DoubleValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DoubleValue;


extern PyTypeObject *_PyNs3DoubleValue_Type;
#define PyNs3DoubleValue_Type (*_PyNs3DoubleValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmpiricalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmpiricalRandomVariable;


extern PyTypeObject *_PyNs3EmpiricalRandomVariable_Type;
#define PyNs3EmpiricalRandomVariable_Type (*_PyNs3EmpiricalRandomVariable_Type)

class PyNs3EmpiricalRandomVariable__PythonHelper : public ns3::EmpiricalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EmpiricalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeAccessor;


extern PyTypeObject *_PyNs3EmptyAttributeAccessor_Type;
#define PyNs3EmptyAttributeAccessor_Type (*_PyNs3EmptyAttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeChecker;


extern PyTypeObject *_PyNs3EmptyAttributeChecker_Type;
#define PyNs3EmptyAttributeChecker_Type (*_PyNs3EmptyAttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeValue;


extern PyTypeObject *_PyNs3EmptyAttributeValue_Type;
#define PyNs3EmptyAttributeValue_Type (*_PyNs3EmptyAttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EnumChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumChecker;


extern PyTypeObject *_PyNs3EnumChecker_Type;
#define PyNs3EnumChecker_Type (*_PyNs3EnumChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::EnumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumValue;


extern PyTypeObject *_PyNs3EnumValue_Type;
#define PyNs3EnumValue_Type (*_PyNs3EnumValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::ErlangRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErlangRandomVariable;


extern PyTypeObject *_PyNs3ErlangRandomVariable_Type;
#define PyNs3ErlangRandomVariable_Type (*_PyNs3ErlangRandomVariable_Type)

class PyNs3ErlangRandomVariable__PythonHelper : public ns3::ErlangRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ErlangRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::EventImpl *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventImpl;


extern PyTypeObject *_PyNs3EventImpl_Type;
#define PyNs3EventImpl_Type (*_PyNs3EventImpl_Type)


typedef struct {
    PyObject_HEAD
    ns3::ExponentialRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ExponentialRandomVariable;


extern PyTypeObject *_PyNs3ExponentialRandomVariable_Type;
#define PyNs3ExponentialRandomVariable_Type (*_PyNs3ExponentialRandomVariable_Type)

class PyNs3ExponentialRandomVariable__PythonHelper : public ns3::ExponentialRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ExponentialRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::GammaRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3GammaRandomVariable;


extern PyTypeObject *_PyNs3GammaRandomVariable_Type;
#define PyNs3GammaRandomVariable_Type (*_PyNs3GammaRandomVariable_Type)

class PyNs3GammaRandomVariable__PythonHelper : public ns3::GammaRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3GammaRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::IntegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntegerValue;


extern PyTypeObject *_PyNs3IntegerValue_Type;
#define PyNs3IntegerValue_Type (*_PyNs3IntegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4;


extern PyTypeObject *_PyNs3Ipv4_Type;
#define PyNs3Ipv4_Type (*_PyNs3Ipv4_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressChecker;


extern PyTypeObject *_PyNs3Ipv4AddressChecker_Type;
#define PyNs3Ipv4AddressChecker_Type (*_PyNs3Ipv4AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressValue;


extern PyTypeObject *_PyNs3Ipv4AddressValue_Type;
#define PyNs3Ipv4AddressValue_Type (*_PyNs3Ipv4AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskChecker;


extern PyTypeObject *_PyNs3Ipv4MaskChecker_Type;
#define PyNs3Ipv4MaskChecker_Type (*_PyNs3Ipv4MaskChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskValue;


extern PyTypeObject *_PyNs3Ipv4MaskValue_Type;
#define PyNs3Ipv4MaskValue_Type (*_PyNs3Ipv4MaskValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MulticastRoute *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MulticastRoute;


extern PyTypeObject *_PyNs3Ipv4MulticastRoute_Type;
#define PyNs3Ipv4MulticastRoute_Type (*_PyNs3Ipv4MulticastRoute_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4Route *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Route;


extern PyTypeObject *_PyNs3Ipv4Route_Type;
#define PyNs3Ipv4Route_Type (*_PyNs3Ipv4Route_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressChecker;


extern PyTypeObject *_PyNs3Ipv6AddressChecker_Type;
#define PyNs3Ipv6AddressChecker_Type (*_PyNs3Ipv6AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressValue;


extern PyTypeObject *_PyNs3Ipv6AddressValue_Type;
#define PyNs3Ipv6AddressValue_Type (*_PyNs3Ipv6AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixChecker;


extern PyTypeObject *_PyNs3Ipv6PrefixChecker_Type;
#define PyNs3Ipv6PrefixChecker_Type (*_PyNs3Ipv6PrefixChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixValue;


extern PyTypeObject *_PyNs3Ipv6PrefixValue_Type;
#define PyNs3Ipv6PrefixValue_Type (*_PyNs3Ipv6PrefixValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::LogNormalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogNormalRandomVariable;


extern PyTypeObject *_PyNs3LogNormalRandomVariable_Type;
#define PyNs3LogNormalRandomVariable_Type (*_PyNs3LogNormalRandomVariable_Type)

class PyNs3LogNormalRandomVariable__PythonHelper : public ns3::LogNormalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LogNormalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressChecker;


extern PyTypeObject *_PyNs3Mac48AddressChecker_Type;
#define PyNs3Mac48AddressChecker_Type (*_PyNs3Mac48AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressValue;


extern PyTypeObject *_PyNs3Mac48AddressValue_Type;
#define PyNs3Mac48AddressValue_Type (*_PyNs3Mac48AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::MobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MobilityModel;


extern PyTypeObject *_PyNs3MobilityModel_Type;
#define PyNs3MobilityModel_Type (*_PyNs3MobilityModel_Type)

class PyNs3MobilityModel__PythonHelper : public ns3::MobilityModel
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDevice;


extern PyTypeObject *_PyNs3NetDevice_Type;
#define PyNs3NetDevice_Type (*_PyNs3NetDevice_Type)

class PyNs3NetDevice__PythonHelper : public ns3::NetDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NetDeviceQueue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDeviceQueue;


extern PyTypeObject *_PyNs3NetDeviceQueue_Type;
#define PyNs3NetDeviceQueue_Type (*_PyNs3NetDeviceQueue_Type)


typedef struct {
    PyObject_HEAD
    ns3::NetDeviceQueueInterface *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDeviceQueueInterface;


extern PyTypeObject *_PyNs3NetDeviceQueueInterface_Type;
#define PyNs3NetDeviceQueueInterface_Type (*_PyNs3NetDeviceQueueInterface_Type)

class PyNs3NetDeviceQueueInterface__PythonHelper : public ns3::NetDeviceQueueInterface
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NetDeviceQueueInterface__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NixVector *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NixVector;


extern PyTypeObject *_PyNs3NixVector_Type;
#define PyNs3NixVector_Type (*_PyNs3NixVector_Type)


typedef struct {
    PyObject_HEAD
    ns3::Node *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Node;


extern PyTypeObject *_PyNs3Node_Type;
#define PyNs3Node_Type (*_PyNs3Node_Type)

class PyNs3Node__PythonHelper : public ns3::Node
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Node__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::NormalRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NormalRandomVariable;


extern PyTypeObject *_PyNs3NormalRandomVariable_Type;
#define PyNs3NormalRandomVariable_Type (*_PyNs3NormalRandomVariable_Type)

class PyNs3NormalRandomVariable__PythonHelper : public ns3::NormalRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NormalRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryChecker;


extern PyTypeObject *_PyNs3ObjectFactoryChecker_Type;
#define PyNs3ObjectFactoryChecker_Type (*_PyNs3ObjectFactoryChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryValue;


extern PyTypeObject *_PyNs3ObjectFactoryValue_Type;
#define PyNs3ObjectFactoryValue_Type (*_PyNs3ObjectFactoryValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Packet *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Packet;


extern PyTypeObject *_PyNs3Packet_Type;
#define PyNs3Packet_Type (*_PyNs3Packet_Type)


typedef struct {
    PyObject_HEAD
    ns3::ParetoRandomVariable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParetoRandomVariable;


extern PyTypeObject *_PyNs3ParetoRandomVariable_Type;
#define PyNs3ParetoRandomVariable_Type (*_PyNs3ParetoRandomVariable_Type)

class PyNs3ParetoRandomVariable__PythonHelper : public ns3::ParetoRandomVariable
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ParetoRandomVariable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::PointerChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointerChecker;


extern PyTypeObject *_PyNs3PointerChecker_Type;
#define PyNs3PointerChecker_Type (*_PyNs3PointerChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::PointerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointerValue;


extern PyTypeObject *_PyNs3PointerValue_Type;
#define PyNs3PointerValue_Type (*_PyNs3PointerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::QueueItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3QueueItem;


extern PyTypeObject *_PyNs3QueueItem_Type;
#define PyNs3QueueItem_Type (*_PyNs3QueueItem_Type)


typedef struct {
    PyObject_HEAD
    ns3::SpectrumChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumChannel;


extern PyTypeObject *_PyNs3SpectrumChannel_Type;
#define PyNs3SpectrumChannel_Type (*_PyNs3SpectrumChannel_Type)


typedef struct {
    PyObject_HEAD
    ns3::StringChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3StringChecker;


extern PyTypeObject *_PyNs3StringChecker_Type;
#define PyNs3StringChecker_Type (*_PyNs3StringChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::StringValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3StringValue;


extern PyTypeObject *_PyNs3StringValue_Type;
#define PyNs3StringValue_Type (*_PyNs3StringValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TimeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeValue;


extern PyTypeObject *_PyNs3TimeValue_Type;
#define PyNs3TimeValue_Type (*_PyNs3TimeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdChecker;


extern PyTypeObject *_PyNs3TypeIdChecker_Type;
#define PyNs3TypeIdChecker_Type (*_PyNs3TypeIdChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdValue;


extern PyTypeObject *_PyNs3TypeIdValue_Type;
#define PyNs3TypeIdValue_Type (*_PyNs3TypeIdValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::UintegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UintegerValue;


extern PyTypeObject *_PyNs3UintegerValue_Type;
#define PyNs3UintegerValue_Type (*_PyNs3UintegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector2DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DChecker;


extern PyTypeObject *_PyNs3Vector2DChecker_Type;
#define PyNs3Vector2DChecker_Type (*_PyNs3Vector2DChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector2DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DValue;


extern PyTypeObject *_PyNs3Vector2DValue_Type;
#define PyNs3Vector2DValue_Type (*_PyNs3Vector2DValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector3DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DChecker;


extern PyTypeObject *_PyNs3Vector3DChecker_Type;
#define PyNs3Vector3DChecker_Type (*_PyNs3Vector3DChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Vector3DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DValue;


extern PyTypeObject *_PyNs3Vector3DValue_Type;
#define PyNs3Vector3DValue_Type (*_PyNs3Vector3DValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::VirtualNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3VirtualNetDevice;


extern PyTypeObject *_PyNs3VirtualNetDevice_Type;
#define PyNs3VirtualNetDevice_Type (*_PyNs3VirtualNetDevice_Type)

class PyNs3VirtualNetDevice__PythonHelper : public ns3::VirtualNetDevice
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3VirtualNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressChecker;


extern PyTypeObject *_PyNs3AddressChecker_Type;
#define PyNs3AddressChecker_Type (*_PyNs3AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressValue;


extern PyTypeObject *_PyNs3AddressValue_Type;
#define PyNs3AddressValue_Type (*_PyNs3AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::AllocationRetentionPriority *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AllocationRetentionPriority;


extern PyTypeObject PyNs3AllocationRetentionPriority_Type;

extern std::map<void*, PyObject*> PyNs3AllocationRetentionPriority_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::BufferSizeLevelBsr *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BufferSizeLevelBsr;


extern PyTypeObject PyNs3BufferSizeLevelBsr_Type;

extern std::map<void*, PyObject*> PyNs3BufferSizeLevelBsr_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::BuildBroadcastListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BuildBroadcastListElement_s;


extern PyTypeObject PyNs3BuildBroadcastListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3BuildBroadcastListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::BuildDataListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BuildDataListElement_s;


extern PyTypeObject PyNs3BuildDataListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3BuildDataListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::BuildRarListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BuildRarListElement_s;


extern PyTypeObject PyNs3BuildRarListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3BuildRarListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::BwPart_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BwPart_s;


extern PyTypeObject PyNs3BwPart_s_Type;

extern std::map<void*, PyObject*> PyNs3BwPart_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CqasFlowPerf_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CqasFlowPerf_t;


extern PyTypeObject PyNs3CqasFlowPerf_t_Type;

extern std::map<void*, PyObject*> PyNs3CqasFlowPerf_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CqiConfig_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CqiConfig_s;


extern PyTypeObject PyNs3CqiConfig_s_Type;

extern std::map<void*, PyObject*> PyNs3CqiConfig_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CqiListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CqiListElement_s;


extern PyTypeObject PyNs3CqiListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3CqiListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DlDciListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlDciListElement_s;


extern PyTypeObject PyNs3DlDciListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3DlDciListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DlInfoListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlInfoListElement_s;


extern PyTypeObject PyNs3DlInfoListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3DlInfoListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DrxConfig_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DrxConfig_s;


extern PyTypeObject PyNs3DrxConfig_s_Type;

extern std::map<void*, PyObject*> PyNs3DrxConfig_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcEnbS1SapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcEnbS1SapProvider;


extern PyTypeObject PyNs3EpcEnbS1SapProvider_Type;

class PyNs3EpcEnbS1SapProvider__PythonHelper : public ns3::EpcEnbS1SapProvider
{
public:
    PyObject *m_pyself;
    PyNs3EpcEnbS1SapProvider__PythonHelper()
        : ns3::EpcEnbS1SapProvider(), m_pyself(NULL)
        {}

    PyNs3EpcEnbS1SapProvider__PythonHelper(ns3::EpcEnbS1SapProvider const & arg0)
        : ns3::EpcEnbS1SapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EpcEnbS1SapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void DoSendReleaseIndication(uint64_t imsi, uint16_t rnti, uint8_t bearerId);

    virtual void InitialUeMessage(uint64_t imsi, uint16_t rnti);

    virtual void PathSwitchRequest(ns3::EpcEnbS1SapProvider::PathSwitchRequestParameters params);

    virtual void UeContextRelease(uint16_t rnti);
};

extern std::map<void*, PyObject*> PyNs3EpcEnbS1SapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcEnbS1SapProvider::BearerToBeSwitched *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcEnbS1SapProviderBearerToBeSwitched;


extern PyTypeObject PyNs3EpcEnbS1SapProviderBearerToBeSwitched_Type;

extern std::map<void*, PyObject*> PyNs3EpcEnbS1SapProviderBearerToBeSwitched_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcEnbS1SapProvider::PathSwitchRequestParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcEnbS1SapProviderPathSwitchRequestParameters;


extern PyTypeObject PyNs3EpcEnbS1SapProviderPathSwitchRequestParameters_Type;

extern std::map<void*, PyObject*> PyNs3EpcEnbS1SapProviderPathSwitchRequestParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcEnbS1SapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcEnbS1SapUser;


extern PyTypeObject PyNs3EpcEnbS1SapUser_Type;

class PyNs3EpcEnbS1SapUser__PythonHelper : public ns3::EpcEnbS1SapUser
{
public:
    PyObject *m_pyself;
    PyNs3EpcEnbS1SapUser__PythonHelper()
        : ns3::EpcEnbS1SapUser(), m_pyself(NULL)
        {}

    PyNs3EpcEnbS1SapUser__PythonHelper(ns3::EpcEnbS1SapUser const & arg0)
        : ns3::EpcEnbS1SapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EpcEnbS1SapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void DataRadioBearerSetupRequest(ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequestParameters params);

    virtual void PathSwitchRequestAcknowledge(ns3::EpcEnbS1SapUser::PathSwitchRequestAcknowledgeParameters params);
};

extern std::map<void*, PyObject*> PyNs3EpcEnbS1SapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcEnbS1SapUser::DataRadioBearerSetupRequestParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcEnbS1SapUserDataRadioBearerSetupRequestParameters;


extern PyTypeObject PyNs3EpcEnbS1SapUserDataRadioBearerSetupRequestParameters_Type;

extern std::map<void*, PyObject*> PyNs3EpcEnbS1SapUserDataRadioBearerSetupRequestParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcEnbS1SapUser::PathSwitchRequestAcknowledgeParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcEnbS1SapUserPathSwitchRequestAcknowledgeParameters;


extern PyTypeObject PyNs3EpcEnbS1SapUserPathSwitchRequestAcknowledgeParameters_Type;

extern std::map<void*, PyObject*> PyNs3EpcEnbS1SapUserPathSwitchRequestAcknowledgeParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcS11Sap *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11Sap;


extern PyTypeObject PyNs3EpcS11Sap_Type;

extern std::map<void*, PyObject*> PyNs3EpcS11Sap_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcS11Sap::Fteid *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapFteid;


extern PyTypeObject PyNs3EpcS11SapFteid_Type;

extern std::map<void*, PyObject*> PyNs3EpcS11SapFteid_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcS11Sap::GtpcMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapGtpcMessage;


extern PyTypeObject PyNs3EpcS11SapGtpcMessage_Type;

extern std::map<void*, PyObject*> PyNs3EpcS11SapGtpcMessage_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcS11Sap::Uli *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapUli;


extern PyTypeObject PyNs3EpcS11SapUli_Type;

extern std::map<void*, PyObject*> PyNs3EpcS11SapUli_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcS11SapMme *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapMme;


extern PyTypeObject PyNs3EpcS11SapMme_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcS11SapMme::BearerContextCreated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapMmeBearerContextCreated;


extern PyTypeObject PyNs3EpcS11SapMmeBearerContextCreated_Type;

extern std::map<void*, PyObject*> PyNs3EpcS11SapMmeBearerContextCreated_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcS11SapMme::BearerContextRemoved *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapMmeBearerContextRemoved;


extern PyTypeObject PyNs3EpcS11SapMmeBearerContextRemoved_Type;

extern std::map<void*, PyObject*> PyNs3EpcS11SapMmeBearerContextRemoved_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcS11SapMme::CreateSessionResponseMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapMmeCreateSessionResponseMessage;


extern PyTypeObject PyNs3EpcS11SapMmeCreateSessionResponseMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcS11SapMme::DeleteBearerRequestMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapMmeDeleteBearerRequestMessage;


extern PyTypeObject PyNs3EpcS11SapMmeDeleteBearerRequestMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcS11SapMme::ModifyBearerResponseMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapMmeModifyBearerResponseMessage;


extern PyTypeObject PyNs3EpcS11SapMmeModifyBearerResponseMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcS11SapSgw *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapSgw;


extern PyTypeObject PyNs3EpcS11SapSgw_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcS11SapSgw::BearerContextRemovedSgwPgw *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapSgwBearerContextRemovedSgwPgw;


extern PyTypeObject PyNs3EpcS11SapSgwBearerContextRemovedSgwPgw_Type;

extern std::map<void*, PyObject*> PyNs3EpcS11SapSgwBearerContextRemovedSgwPgw_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcS11SapSgw::BearerContextToBeCreated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapSgwBearerContextToBeCreated;


extern PyTypeObject PyNs3EpcS11SapSgwBearerContextToBeCreated_Type;

extern std::map<void*, PyObject*> PyNs3EpcS11SapSgwBearerContextToBeCreated_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcS11SapSgw::BearerContextToBeRemoved *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapSgwBearerContextToBeRemoved;


extern PyTypeObject PyNs3EpcS11SapSgwBearerContextToBeRemoved_Type;

extern std::map<void*, PyObject*> PyNs3EpcS11SapSgwBearerContextToBeRemoved_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcS11SapSgw::CreateSessionRequestMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapSgwCreateSessionRequestMessage;


extern PyTypeObject PyNs3EpcS11SapSgwCreateSessionRequestMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcS11SapSgw::DeleteBearerCommandMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapSgwDeleteBearerCommandMessage;


extern PyTypeObject PyNs3EpcS11SapSgwDeleteBearerCommandMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcS11SapSgw::DeleteBearerResponseMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapSgwDeleteBearerResponseMessage;


extern PyTypeObject PyNs3EpcS11SapSgwDeleteBearerResponseMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcS11SapSgw::ModifyBearerRequestMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS11SapSgwModifyBearerRequestMessage;


extern PyTypeObject PyNs3EpcS11SapSgwModifyBearerRequestMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcS1apSap *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS1apSap;


extern PyTypeObject PyNs3EpcS1apSap_Type;

extern std::map<void*, PyObject*> PyNs3EpcS1apSap_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcS1apSapEnb *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS1apSapEnb;


extern PyTypeObject PyNs3EpcS1apSapEnb_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcS1apSapEnb::ErabSwitchedInUplinkItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS1apSapEnbErabSwitchedInUplinkItem;


extern PyTypeObject PyNs3EpcS1apSapEnbErabSwitchedInUplinkItem_Type;

extern std::map<void*, PyObject*> PyNs3EpcS1apSapEnbErabSwitchedInUplinkItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcS1apSapEnb::ErabToBeSetupItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS1apSapEnbErabToBeSetupItem;


extern PyTypeObject PyNs3EpcS1apSapEnbErabToBeSetupItem_Type;

extern std::map<void*, PyObject*> PyNs3EpcS1apSapEnbErabToBeSetupItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcS1apSapMme *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS1apSapMme;


extern PyTypeObject PyNs3EpcS1apSapMme_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcS1apSapMme::ErabSetupItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS1apSapMmeErabSetupItem;


extern PyTypeObject PyNs3EpcS1apSapMmeErabSetupItem_Type;

extern std::map<void*, PyObject*> PyNs3EpcS1apSapMmeErabSetupItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcS1apSapMme::ErabSwitchedInDownlinkItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS1apSapMmeErabSwitchedInDownlinkItem;


extern PyTypeObject PyNs3EpcS1apSapMmeErabSwitchedInDownlinkItem_Type;

extern std::map<void*, PyObject*> PyNs3EpcS1apSapMmeErabSwitchedInDownlinkItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcS1apSapMme::ErabToBeReleasedIndication *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcS1apSapMmeErabToBeReleasedIndication;


extern PyTypeObject PyNs3EpcS1apSapMmeErabToBeReleasedIndication_Type;

extern std::map<void*, PyObject*> PyNs3EpcS1apSapMmeErabToBeReleasedIndication_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2Sap;


extern PyTypeObject PyNs3EpcX2Sap_Type;
extern PyTypeObject PyNs3EpcX2SapMeta_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2Sap_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::CellInformationItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapCellInformationItem;


extern PyTypeObject PyNs3EpcX2SapCellInformationItem_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapCellInformationItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::CellMeasurementResultItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapCellMeasurementResultItem;


extern PyTypeObject PyNs3EpcX2SapCellMeasurementResultItem_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapCellMeasurementResultItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::CompositeAvailCapacity *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapCompositeAvailCapacity;


extern PyTypeObject PyNs3EpcX2SapCompositeAvailCapacity_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapCompositeAvailCapacity_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::ErabAdmittedItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapErabAdmittedItem;


extern PyTypeObject PyNs3EpcX2SapErabAdmittedItem_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapErabAdmittedItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::ErabNotAdmittedItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapErabNotAdmittedItem;


extern PyTypeObject PyNs3EpcX2SapErabNotAdmittedItem_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapErabNotAdmittedItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::ErabToBeSetupItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapErabToBeSetupItem;


extern PyTypeObject PyNs3EpcX2SapErabToBeSetupItem_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapErabToBeSetupItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapErabsSubjectToStatusTransferItem;


extern PyTypeObject PyNs3EpcX2SapErabsSubjectToStatusTransferItem_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapErabsSubjectToStatusTransferItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::HandoverPreparationFailureParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapHandoverPreparationFailureParams;


extern PyTypeObject PyNs3EpcX2SapHandoverPreparationFailureParams_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapHandoverPreparationFailureParams_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::HandoverRequestAckParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapHandoverRequestAckParams;


extern PyTypeObject PyNs3EpcX2SapHandoverRequestAckParams_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapHandoverRequestAckParams_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::HandoverRequestParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapHandoverRequestParams;


extern PyTypeObject PyNs3EpcX2SapHandoverRequestParams_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapHandoverRequestParams_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::LoadInformationParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapLoadInformationParams;


extern PyTypeObject PyNs3EpcX2SapLoadInformationParams_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapLoadInformationParams_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::RelativeNarrowbandTxBand *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapRelativeNarrowbandTxBand;


extern PyTypeObject PyNs3EpcX2SapRelativeNarrowbandTxBand_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapRelativeNarrowbandTxBand_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::ResourceStatusUpdateParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapResourceStatusUpdateParams;


extern PyTypeObject PyNs3EpcX2SapResourceStatusUpdateParams_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapResourceStatusUpdateParams_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::SnStatusTransferParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapSnStatusTransferParams;


extern PyTypeObject PyNs3EpcX2SapSnStatusTransferParams_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapSnStatusTransferParams_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::UeContextReleaseParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapUeContextReleaseParams;


extern PyTypeObject PyNs3EpcX2SapUeContextReleaseParams_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapUeContextReleaseParams_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::UeDataParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapUeDataParams;


extern PyTypeObject PyNs3EpcX2SapUeDataParams_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapUeDataParams_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2Sap::UlHighInterferenceInformationItem *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapUlHighInterferenceInformationItem;


extern PyTypeObject PyNs3EpcX2SapUlHighInterferenceInformationItem_Type;

extern std::map<void*, PyObject*> PyNs3EpcX2SapUlHighInterferenceInformationItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcX2SapProvider *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapProvider;


extern PyTypeObject PyNs3EpcX2SapProvider_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcX2SapUser *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SapUser;


extern PyTypeObject PyNs3EpcX2SapUser_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpsBearer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpsBearer;


extern PyTypeObject PyNs3EpsBearer_Type;

extern std::map<void*, PyObject*> PyNs3EpsBearer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EutranMeasurementMapping *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EutranMeasurementMapping;


extern PyTypeObject PyNs3EutranMeasurementMapping_Type;

extern std::map<void*, PyObject*> PyNs3EutranMeasurementMapping_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapProvider;


extern PyTypeObject PyNs3FfMacCschedSapProvider_Type;

class PyNs3FfMacCschedSapProvider__PythonHelper : public ns3::FfMacCschedSapProvider
{
public:
    PyObject *m_pyself;
    PyNs3FfMacCschedSapProvider__PythonHelper()
        : ns3::FfMacCschedSapProvider(), m_pyself(NULL)
        {}

    PyNs3FfMacCschedSapProvider__PythonHelper(ns3::FfMacCschedSapProvider const & arg0)
        : ns3::FfMacCschedSapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FfMacCschedSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void CschedCellConfigReq(ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters const & params);

    virtual void CschedLcConfigReq(ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters const & params);

    virtual void CschedLcReleaseReq(ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters const & params);

    virtual void CschedUeConfigReq(ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters const & params);

    virtual void CschedUeReleaseReq(ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters const & params);
};

extern std::map<void*, PyObject*> PyNs3FfMacCschedSapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapProvider::CschedCellConfigReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapProviderCschedCellConfigReqParameters;


extern PyTypeObject PyNs3FfMacCschedSapProviderCschedCellConfigReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacCschedSapProviderCschedCellConfigReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapProvider::CschedLcConfigReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapProviderCschedLcConfigReqParameters;


extern PyTypeObject PyNs3FfMacCschedSapProviderCschedLcConfigReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacCschedSapProviderCschedLcConfigReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapProvider::CschedLcReleaseReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapProviderCschedLcReleaseReqParameters;


extern PyTypeObject PyNs3FfMacCschedSapProviderCschedLcReleaseReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacCschedSapProviderCschedLcReleaseReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapProvider::CschedUeConfigReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapProviderCschedUeConfigReqParameters;


extern PyTypeObject PyNs3FfMacCschedSapProviderCschedUeConfigReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacCschedSapProviderCschedUeConfigReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapProvider::CschedUeReleaseReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapProviderCschedUeReleaseReqParameters;


extern PyTypeObject PyNs3FfMacCschedSapProviderCschedUeReleaseReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacCschedSapProviderCschedUeReleaseReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapUser;


extern PyTypeObject PyNs3FfMacCschedSapUser_Type;

class PyNs3FfMacCschedSapUser__PythonHelper : public ns3::FfMacCschedSapUser
{
public:
    PyObject *m_pyself;
    PyNs3FfMacCschedSapUser__PythonHelper()
        : ns3::FfMacCschedSapUser(), m_pyself(NULL)
        {}

    PyNs3FfMacCschedSapUser__PythonHelper(ns3::FfMacCschedSapUser const & arg0)
        : ns3::FfMacCschedSapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FfMacCschedSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void CschedCellConfigCnf(ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters const & params);

    virtual void CschedCellConfigUpdateInd(ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters const & params);

    virtual void CschedLcConfigCnf(ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters const & params);

    virtual void CschedLcReleaseCnf(ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters const & params);

    virtual void CschedUeConfigCnf(ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters const & params);

    virtual void CschedUeConfigUpdateInd(ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters const & params);

    virtual void CschedUeReleaseCnf(ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters const & params);
};

extern std::map<void*, PyObject*> PyNs3FfMacCschedSapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapUser::CschedCellConfigCnfParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapUserCschedCellConfigCnfParameters;


extern PyTypeObject PyNs3FfMacCschedSapUserCschedCellConfigCnfParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacCschedSapUserCschedCellConfigCnfParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapUser::CschedCellConfigUpdateIndParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapUserCschedCellConfigUpdateIndParameters;


extern PyTypeObject PyNs3FfMacCschedSapUserCschedCellConfigUpdateIndParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacCschedSapUserCschedCellConfigUpdateIndParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapUser::CschedLcConfigCnfParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapUserCschedLcConfigCnfParameters;


extern PyTypeObject PyNs3FfMacCschedSapUserCschedLcConfigCnfParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacCschedSapUserCschedLcConfigCnfParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapUser::CschedLcReleaseCnfParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapUserCschedLcReleaseCnfParameters;


extern PyTypeObject PyNs3FfMacCschedSapUserCschedLcReleaseCnfParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacCschedSapUserCschedLcReleaseCnfParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapUser::CschedUeConfigCnfParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapUserCschedUeConfigCnfParameters;


extern PyTypeObject PyNs3FfMacCschedSapUserCschedUeConfigCnfParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacCschedSapUserCschedUeConfigCnfParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapUser::CschedUeConfigUpdateIndParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapUserCschedUeConfigUpdateIndParameters;


extern PyTypeObject PyNs3FfMacCschedSapUserCschedUeConfigUpdateIndParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacCschedSapUserCschedUeConfigUpdateIndParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacCschedSapUser::CschedUeReleaseCnfParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacCschedSapUserCschedUeReleaseCnfParameters;


extern PyTypeObject PyNs3FfMacCschedSapUserCschedUeReleaseCnfParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacCschedSapUserCschedUeReleaseCnfParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProvider;


extern PyTypeObject PyNs3FfMacSchedSapProvider_Type;

class PyNs3FfMacSchedSapProvider__PythonHelper : public ns3::FfMacSchedSapProvider
{
public:
    PyObject *m_pyself;
    PyNs3FfMacSchedSapProvider__PythonHelper()
        : ns3::FfMacSchedSapProvider(), m_pyself(NULL)
        {}

    PyNs3FfMacSchedSapProvider__PythonHelper(ns3::FfMacSchedSapProvider const & arg0)
        : ns3::FfMacSchedSapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FfMacSchedSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void SchedDlCqiInfoReq(ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters const & params);

    virtual void SchedDlMacBufferReq(ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters const & params);

    virtual void SchedDlPagingBufferReq(ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters const & params);

    virtual void SchedDlRachInfoReq(ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters const & params);

    virtual void SchedDlRlcBufferReq(ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters const & params);

    virtual void SchedDlTriggerReq(ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters const & params);

    virtual void SchedUlCqiInfoReq(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters const & params);

    virtual void SchedUlMacCtrlInfoReq(ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters const & params);

    virtual void SchedUlNoiseInterferenceReq(ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters const & params);

    virtual void SchedUlSrInfoReq(ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters const & params);

    virtual void SchedUlTriggerReq(ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters const & params);
};

extern std::map<void*, PyObject*> PyNs3FfMacSchedSapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlCqiInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters;


extern PyTypeObject PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacSchedSapProviderSchedDlCqiInfoReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlMacBufferReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters;


extern PyTypeObject PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacSchedSapProviderSchedDlMacBufferReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlPagingBufferReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters;


extern PyTypeObject PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacSchedSapProviderSchedDlPagingBufferReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlRachInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters;


extern PyTypeObject PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacSchedSapProviderSchedDlRachInfoReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlRlcBufferReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters;


extern PyTypeObject PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacSchedSapProviderSchedDlRlcBufferReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedDlTriggerReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters;


extern PyTypeObject PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacSchedSapProviderSchedDlTriggerReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters;


extern PyTypeObject PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacSchedSapProviderSchedUlCqiInfoReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedUlMacCtrlInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters;


extern PyTypeObject PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacSchedSapProviderSchedUlMacCtrlInfoReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedUlNoiseInterferenceReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters;


extern PyTypeObject PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacSchedSapProviderSchedUlNoiseInterferenceReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedUlSrInfoReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters;


extern PyTypeObject PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacSchedSapProviderSchedUlSrInfoReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapProvider::SchedUlTriggerReqParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters;


extern PyTypeObject PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacSchedSapProviderSchedUlTriggerReqParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapUser;


extern PyTypeObject PyNs3FfMacSchedSapUser_Type;

class PyNs3FfMacSchedSapUser__PythonHelper : public ns3::FfMacSchedSapUser
{
public:
    PyObject *m_pyself;
    PyNs3FfMacSchedSapUser__PythonHelper()
        : ns3::FfMacSchedSapUser(), m_pyself(NULL)
        {}

    PyNs3FfMacSchedSapUser__PythonHelper(ns3::FfMacSchedSapUser const & arg0)
        : ns3::FfMacSchedSapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FfMacSchedSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void SchedDlConfigInd(ns3::FfMacSchedSapUser::SchedDlConfigIndParameters const & params);

    virtual void SchedUlConfigInd(ns3::FfMacSchedSapUser::SchedUlConfigIndParameters const & params);
};

extern std::map<void*, PyObject*> PyNs3FfMacSchedSapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapUser::SchedDlConfigIndParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapUserSchedDlConfigIndParameters;


extern PyTypeObject PyNs3FfMacSchedSapUserSchedDlConfigIndParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacSchedSapUserSchedDlConfigIndParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FfMacSchedSapUser::SchedUlConfigIndParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacSchedSapUserSchedUlConfigIndParameters;


extern PyTypeObject PyNs3FfMacSchedSapUserSchedUlConfigIndParameters_Type;

extern std::map<void*, PyObject*> PyNs3FfMacSchedSapUserSchedUlConfigIndParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GbrQosInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GbrQosInformation;


extern PyTypeObject PyNs3GbrQosInformation_Type;

extern std::map<void*, PyObject*> PyNs3GbrQosInformation_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::HarqProcessInfoElement_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HarqProcessInfoElement_t;


extern PyTypeObject PyNs3HarqProcessInfoElement_t_Type;

extern std::map<void*, PyObject*> PyNs3HarqProcessInfoElement_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::HigherLayerSelected_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HigherLayerSelected_s;


extern PyTypeObject PyNs3HigherLayerSelected_s_Type;

extern std::map<void*, PyObject*> PyNs3HigherLayerSelected_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ImsiLcidPair_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ImsiLcidPair_t;


extern PyTypeObject PyNs3ImsiLcidPair_t_Type;

extern std::map<void*, PyObject*> PyNs3ImsiLcidPair_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LogicalChannelConfigListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogicalChannelConfigListElement_s;


extern PyTypeObject PyNs3LogicalChannelConfigListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3LogicalChannelConfigListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteAnrSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteAnrSapProvider;


extern PyTypeObject PyNs3LteAnrSapProvider_Type;

class PyNs3LteAnrSapProvider__PythonHelper : public ns3::LteAnrSapProvider
{
public:
    PyObject *m_pyself;
    PyNs3LteAnrSapProvider__PythonHelper()
        : ns3::LteAnrSapProvider(), m_pyself(NULL)
        {}

    PyNs3LteAnrSapProvider__PythonHelper(ns3::LteAnrSapProvider const & arg0)
        : ns3::LteAnrSapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteAnrSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void AddNeighbourRelation(uint16_t cellId);

    virtual bool GetNoHo(uint16_t cellId) const;

    virtual bool GetNoRemove(uint16_t cellId) const;

    virtual bool GetNoX2(uint16_t cellId) const;

    virtual void ReportUeMeas(ns3::LteRrcSap::MeasResults measResults);
};

extern std::map<void*, PyObject*> PyNs3LteAnrSapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteAnrSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteAnrSapUser;


extern PyTypeObject PyNs3LteAnrSapUser_Type;

class PyNs3LteAnrSapUser__PythonHelper : public ns3::LteAnrSapUser
{
public:
    PyObject *m_pyself;
    PyNs3LteAnrSapUser__PythonHelper()
        : ns3::LteAnrSapUser(), m_pyself(NULL)
        {}

    PyNs3LteAnrSapUser__PythonHelper(ns3::LteAnrSapUser const & arg0)
        : ns3::LteAnrSapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteAnrSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual uint8_t AddUeMeasReportConfigForAnr(ns3::LteRrcSap::ReportConfigEutra reportConfig);
};

extern std::map<void*, PyObject*> PyNs3LteAnrSapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteAsSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteAsSapProvider;


extern PyTypeObject PyNs3LteAsSapProvider_Type;

class PyNs3LteAsSapProvider__PythonHelper : public ns3::LteAsSapProvider
{
public:
    PyObject *m_pyself;
    PyNs3LteAsSapProvider__PythonHelper()
        : ns3::LteAsSapProvider(), m_pyself(NULL)
        {}

    PyNs3LteAsSapProvider__PythonHelper(ns3::LteAsSapProvider const & arg0)
        : ns3::LteAsSapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteAsSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void Connect();

    virtual void Disconnect();

    virtual void ForceCampedOnEnb(uint16_t cellId, uint16_t dlEarfcn);

    virtual void SendData(ns3::Ptr< ns3::Packet > packet, uint8_t bid);

    virtual void SetCsgWhiteList(uint32_t csgId);

    virtual void StartCellSelection(uint16_t dlEarfcn);
};

extern std::map<void*, PyObject*> PyNs3LteAsSapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteAsSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteAsSapUser;


extern PyTypeObject PyNs3LteAsSapUser_Type;

class PyNs3LteAsSapUser__PythonHelper : public ns3::LteAsSapUser
{
public:
    PyObject *m_pyself;
    PyNs3LteAsSapUser__PythonHelper()
        : ns3::LteAsSapUser(), m_pyself(NULL)
        {}

    PyNs3LteAsSapUser__PythonHelper(ns3::LteAsSapUser const & arg0)
        : ns3::LteAsSapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteAsSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void NotifyConnectionFailed();

    virtual void NotifyConnectionReleased();

    virtual void NotifyConnectionSuccessful();

    virtual void RecvData(ns3::Ptr< ns3::Packet > packet);
};

extern std::map<void*, PyObject*> PyNs3LteAsSapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCmacSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCmacSapProvider;


extern PyTypeObject PyNs3LteEnbCmacSapProvider_Type;

extern std::map<void*, PyObject*> PyNs3LteEnbCmacSapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCmacSapProvider::AllocateNcRaPreambleReturnValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCmacSapProviderAllocateNcRaPreambleReturnValue;


extern PyTypeObject PyNs3LteEnbCmacSapProviderAllocateNcRaPreambleReturnValue_Type;

extern std::map<void*, PyObject*> PyNs3LteEnbCmacSapProviderAllocateNcRaPreambleReturnValue_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCmacSapProvider::LcInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCmacSapProviderLcInfo;


extern PyTypeObject PyNs3LteEnbCmacSapProviderLcInfo_Type;

extern std::map<void*, PyObject*> PyNs3LteEnbCmacSapProviderLcInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCmacSapProvider::RachConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCmacSapProviderRachConfig;


extern PyTypeObject PyNs3LteEnbCmacSapProviderRachConfig_Type;

extern std::map<void*, PyObject*> PyNs3LteEnbCmacSapProviderRachConfig_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCmacSapProvider::UeConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCmacSapProviderUeConfig;


extern PyTypeObject PyNs3LteEnbCmacSapProviderUeConfig_Type;

extern std::map<void*, PyObject*> PyNs3LteEnbCmacSapProviderUeConfig_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCmacSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCmacSapUser;


extern PyTypeObject PyNs3LteEnbCmacSapUser_Type;

class PyNs3LteEnbCmacSapUser__PythonHelper : public ns3::LteEnbCmacSapUser
{
public:
    PyObject *m_pyself;
    PyNs3LteEnbCmacSapUser__PythonHelper()
        : ns3::LteEnbCmacSapUser(), m_pyself(NULL)
        {}

    PyNs3LteEnbCmacSapUser__PythonHelper(ns3::LteEnbCmacSapUser const & arg0)
        : ns3::LteEnbCmacSapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbCmacSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual uint16_t AllocateTemporaryCellRnti();

    virtual void NotifyLcConfigResult(uint16_t rnti, uint8_t lcid, bool success);

    virtual void RrcConfigurationUpdateInd(ns3::LteEnbCmacSapUser::UeConfig params);
};

extern std::map<void*, PyObject*> PyNs3LteEnbCmacSapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCmacSapUser::UeConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCmacSapUserUeConfig;


extern PyTypeObject PyNs3LteEnbCmacSapUserUeConfig_Type;

extern std::map<void*, PyObject*> PyNs3LteEnbCmacSapUserUeConfig_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCphySapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCphySapProvider;


extern PyTypeObject PyNs3LteEnbCphySapProvider_Type;

class PyNs3LteEnbCphySapProvider__PythonHelper : public ns3::LteEnbCphySapProvider
{
public:
    PyObject *m_pyself;
    PyNs3LteEnbCphySapProvider__PythonHelper()
        : ns3::LteEnbCphySapProvider(), m_pyself(NULL)
        {}

    PyNs3LteEnbCphySapProvider__PythonHelper(ns3::LteEnbCphySapProvider const & arg0)
        : ns3::LteEnbCphySapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbCphySapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void AddUe(uint16_t rnti);

    virtual int8_t GetReferenceSignalPower();

    virtual void RemoveUe(uint16_t rnti);

    virtual void SetBandwidth(uint8_t ulBandwidth, uint8_t dlBandwidth);

    virtual void SetCellId(uint16_t cellId);

    virtual void SetEarfcn(uint16_t ulEarfcn, uint16_t dlEarfcn);

    virtual void SetMasterInformationBlock(ns3::LteRrcSap::MasterInformationBlock mib);

    virtual void SetPa(uint16_t rnti, double pa);

    virtual void SetSrsConfigurationIndex(uint16_t rnti, uint16_t srsCi);

    virtual void SetSystemInformationBlockType1(ns3::LteRrcSap::SystemInformationBlockType1 sib1);

    virtual void SetTransmissionMode(uint16_t rnti, uint8_t txMode);
};

extern std::map<void*, PyObject*> PyNs3LteEnbCphySapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteEnbCphySapUser *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbCphySapUser;


extern PyTypeObject PyNs3LteEnbCphySapUser_Type;

extern std::map<void*, PyObject*> PyNs3LteEnbCphySapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteEnbPhySapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbPhySapProvider;


extern PyTypeObject PyNs3LteEnbPhySapProvider_Type;

class PyNs3LteEnbPhySapProvider__PythonHelper : public ns3::LteEnbPhySapProvider
{
public:
    PyObject *m_pyself;
    PyNs3LteEnbPhySapProvider__PythonHelper()
        : ns3::LteEnbPhySapProvider(), m_pyself(NULL)
        {}

    PyNs3LteEnbPhySapProvider__PythonHelper(ns3::LteEnbPhySapProvider const & arg0)
        : ns3::LteEnbPhySapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbPhySapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual uint8_t GetMacChTtiDelay();

    virtual void SendLteControlMessage(ns3::Ptr< ns3::LteControlMessage > msg);

    virtual void SendMacPdu(ns3::Ptr< ns3::Packet > p);
};

extern std::map<void*, PyObject*> PyNs3LteEnbPhySapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteEnbPhySapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbPhySapUser;


extern PyTypeObject PyNs3LteEnbPhySapUser_Type;

class PyNs3LteEnbPhySapUser__PythonHelper : public ns3::LteEnbPhySapUser
{
public:
    PyObject *m_pyself;
    PyNs3LteEnbPhySapUser__PythonHelper()
        : ns3::LteEnbPhySapUser(), m_pyself(NULL)
        {}

    PyNs3LteEnbPhySapUser__PythonHelper(ns3::LteEnbPhySapUser const & arg0)
        : ns3::LteEnbPhySapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbPhySapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void DlInfoListElementHarqFeeback(ns3::DlInfoListElement_s params);

    virtual void ReceiveLteControlMessage(ns3::Ptr< ns3::LteControlMessage > msg);

    virtual void ReceivePhyPdu(ns3::Ptr< ns3::Packet > p);

    virtual void ReceiveRachPreamble(uint32_t prachId);

    virtual void SubframeIndication(uint32_t frameNo, uint32_t subframeNo);

    virtual void UlCqiReport(ns3::FfMacSchedSapProvider::SchedUlCqiInfoReqParameters ulcqi);

    virtual void UlInfoListElementHarqFeeback(ns3::UlInfoListElement_s params);
};

extern std::map<void*, PyObject*> PyNs3LteEnbPhySapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteFfConverter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFfConverter;


extern PyTypeObject PyNs3LteFfConverter_Type;

extern std::map<void*, PyObject*> PyNs3LteFfConverter_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteFfrRrcSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFfrRrcSapProvider;


extern PyTypeObject PyNs3LteFfrRrcSapProvider_Type;

class PyNs3LteFfrRrcSapProvider__PythonHelper : public ns3::LteFfrRrcSapProvider
{
public:
    PyObject *m_pyself;
    PyNs3LteFfrRrcSapProvider__PythonHelper()
        : ns3::LteFfrRrcSapProvider(), m_pyself(NULL)
        {}

    PyNs3LteFfrRrcSapProvider__PythonHelper(ns3::LteFfrRrcSapProvider const & arg0)
        : ns3::LteFfrRrcSapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteFfrRrcSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void RecvLoadInformation(ns3::EpcX2Sap::LoadInformationParams params);

    virtual void ReportUeMeas(uint16_t rnti, ns3::LteRrcSap::MeasResults measResults);

    virtual void SetBandwidth(uint8_t ulBandwidth, uint8_t dlBandwidth);

    virtual void SetCellId(uint16_t cellId);
};

extern std::map<void*, PyObject*> PyNs3LteFfrRrcSapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteFfrRrcSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFfrRrcSapUser;


extern PyTypeObject PyNs3LteFfrRrcSapUser_Type;

class PyNs3LteFfrRrcSapUser__PythonHelper : public ns3::LteFfrRrcSapUser
{
public:
    PyObject *m_pyself;
    PyNs3LteFfrRrcSapUser__PythonHelper()
        : ns3::LteFfrRrcSapUser(), m_pyself(NULL)
        {}

    PyNs3LteFfrRrcSapUser__PythonHelper(ns3::LteFfrRrcSapUser const & arg0)
        : ns3::LteFfrRrcSapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteFfrRrcSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual uint8_t AddUeMeasReportConfigForFfr(ns3::LteRrcSap::ReportConfigEutra reportConfig);

    virtual void SendLoadInformation(ns3::EpcX2Sap::LoadInformationParams params);

    virtual void SetPdschConfigDedicated(uint16_t rnti, ns3::LteRrcSap::PdschConfigDedicated pdschConfigDedicated);
};

extern std::map<void*, PyObject*> PyNs3LteFfrRrcSapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteFfrSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFfrSapProvider;


extern PyTypeObject PyNs3LteFfrSapProvider_Type;

extern std::map<void*, PyObject*> PyNs3LteFfrSapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteFfrSapUser *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFfrSapUser;


extern PyTypeObject PyNs3LteFfrSapUser_Type;

extern std::map<void*, PyObject*> PyNs3LteFfrSapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteFlowId_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFlowId_t;


extern PyTypeObject PyNs3LteFlowId_t_Type;

extern std::map<void*, PyObject*> PyNs3LteFlowId_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteGlobalPathlossDatabase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteGlobalPathlossDatabase;


extern PyTypeObject PyNs3LteGlobalPathlossDatabase_Type;

class PyNs3LteGlobalPathlossDatabase__PythonHelper : public ns3::LteGlobalPathlossDatabase
{
public:
    PyObject *m_pyself;
    PyNs3LteGlobalPathlossDatabase__PythonHelper()
        : ns3::LteGlobalPathlossDatabase(), m_pyself(NULL)
        {}

    PyNs3LteGlobalPathlossDatabase__PythonHelper(ns3::LteGlobalPathlossDatabase const & arg0)
        : ns3::LteGlobalPathlossDatabase(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteGlobalPathlossDatabase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void UpdatePathloss(std::string context, ns3::Ptr< ns3::SpectrumPhy > txPhy, ns3::Ptr< ns3::SpectrumPhy > rxPhy, double lossDb);
};

extern std::map<void*, PyObject*> PyNs3LteGlobalPathlossDatabase_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteHandoverManagementSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteHandoverManagementSapProvider;


extern PyTypeObject PyNs3LteHandoverManagementSapProvider_Type;

class PyNs3LteHandoverManagementSapProvider__PythonHelper : public ns3::LteHandoverManagementSapProvider
{
public:
    PyObject *m_pyself;
    PyNs3LteHandoverManagementSapProvider__PythonHelper()
        : ns3::LteHandoverManagementSapProvider(), m_pyself(NULL)
        {}

    PyNs3LteHandoverManagementSapProvider__PythonHelper(ns3::LteHandoverManagementSapProvider const & arg0)
        : ns3::LteHandoverManagementSapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteHandoverManagementSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void ReportUeMeas(uint16_t rnti, ns3::LteRrcSap::MeasResults measResults);
};

extern std::map<void*, PyObject*> PyNs3LteHandoverManagementSapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteHandoverManagementSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteHandoverManagementSapUser;


extern PyTypeObject PyNs3LteHandoverManagementSapUser_Type;

class PyNs3LteHandoverManagementSapUser__PythonHelper : public ns3::LteHandoverManagementSapUser
{
public:
    PyObject *m_pyself;
    PyNs3LteHandoverManagementSapUser__PythonHelper()
        : ns3::LteHandoverManagementSapUser(), m_pyself(NULL)
        {}

    PyNs3LteHandoverManagementSapUser__PythonHelper(ns3::LteHandoverManagementSapUser const & arg0)
        : ns3::LteHandoverManagementSapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteHandoverManagementSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual uint8_t AddUeMeasReportConfigForHandover(ns3::LteRrcSap::ReportConfigEutra reportConfig);

    virtual void TriggerHandover(uint16_t rnti, uint16_t targetCellId);
};

extern std::map<void*, PyObject*> PyNs3LteHandoverManagementSapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteMacSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteMacSapProvider;


extern PyTypeObject PyNs3LteMacSapProvider_Type;

class PyNs3LteMacSapProvider__PythonHelper : public ns3::LteMacSapProvider
{
public:
    PyObject *m_pyself;
    PyNs3LteMacSapProvider__PythonHelper()
        : ns3::LteMacSapProvider(), m_pyself(NULL)
        {}

    PyNs3LteMacSapProvider__PythonHelper(ns3::LteMacSapProvider const & arg0)
        : ns3::LteMacSapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteMacSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void ReportBufferStatus(ns3::LteMacSapProvider::ReportBufferStatusParameters params);

    virtual void TransmitPdu(ns3::LteMacSapProvider::TransmitPduParameters params);
};

extern std::map<void*, PyObject*> PyNs3LteMacSapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteMacSapProvider::ReportBufferStatusParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteMacSapProviderReportBufferStatusParameters;


extern PyTypeObject PyNs3LteMacSapProviderReportBufferStatusParameters_Type;

extern std::map<void*, PyObject*> PyNs3LteMacSapProviderReportBufferStatusParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteMacSapProvider::TransmitPduParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteMacSapProviderTransmitPduParameters;


extern PyTypeObject PyNs3LteMacSapProviderTransmitPduParameters_Type;

extern std::map<void*, PyObject*> PyNs3LteMacSapProviderTransmitPduParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteMacSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteMacSapUser;


extern PyTypeObject PyNs3LteMacSapUser_Type;

class PyNs3LteMacSapUser__PythonHelper : public ns3::LteMacSapUser
{
public:
    PyObject *m_pyself;
    PyNs3LteMacSapUser__PythonHelper()
        : ns3::LteMacSapUser(), m_pyself(NULL)
        {}

    PyNs3LteMacSapUser__PythonHelper(ns3::LteMacSapUser const & arg0)
        : ns3::LteMacSapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteMacSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void NotifyHarqDeliveryFailure();

    virtual void NotifyTxOpportunity(uint32_t bytes, uint8_t layer, uint8_t harqId);

    virtual void ReceivePdu(ns3::Ptr< ns3::Packet > p);
};

extern std::map<void*, PyObject*> PyNs3LteMacSapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteMiErrorModel *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteMiErrorModel;


extern PyTypeObject PyNs3LteMiErrorModel_Type;

extern std::map<void*, PyObject*> PyNs3LteMiErrorModel_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LtePdcpSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePdcpSapProvider;


extern PyTypeObject PyNs3LtePdcpSapProvider_Type;

class PyNs3LtePdcpSapProvider__PythonHelper : public ns3::LtePdcpSapProvider
{
public:
    PyObject *m_pyself;
    PyNs3LtePdcpSapProvider__PythonHelper()
        : ns3::LtePdcpSapProvider(), m_pyself(NULL)
        {}

    PyNs3LtePdcpSapProvider__PythonHelper(ns3::LtePdcpSapProvider const & arg0)
        : ns3::LtePdcpSapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LtePdcpSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void TransmitPdcpSdu(ns3::LtePdcpSapProvider::TransmitPdcpSduParameters params);
};

extern std::map<void*, PyObject*> PyNs3LtePdcpSapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LtePdcpSapProvider::TransmitPdcpSduParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePdcpSapProviderTransmitPdcpSduParameters;


extern PyTypeObject PyNs3LtePdcpSapProviderTransmitPdcpSduParameters_Type;

extern std::map<void*, PyObject*> PyNs3LtePdcpSapProviderTransmitPdcpSduParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LtePdcpSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePdcpSapUser;


extern PyTypeObject PyNs3LtePdcpSapUser_Type;

class PyNs3LtePdcpSapUser__PythonHelper : public ns3::LtePdcpSapUser
{
public:
    PyObject *m_pyself;
    PyNs3LtePdcpSapUser__PythonHelper()
        : ns3::LtePdcpSapUser(), m_pyself(NULL)
        {}

    PyNs3LtePdcpSapUser__PythonHelper(ns3::LtePdcpSapUser const & arg0)
        : ns3::LtePdcpSapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LtePdcpSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void ReceivePdcpSdu(ns3::LtePdcpSapUser::ReceivePdcpSduParameters params);
};

extern std::map<void*, PyObject*> PyNs3LtePdcpSapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LtePdcpSapUser::ReceivePdcpSduParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePdcpSapUserReceivePdcpSduParameters;


extern PyTypeObject PyNs3LtePdcpSapUserReceivePdcpSduParameters_Type;

extern std::map<void*, PyObject*> PyNs3LtePdcpSapUserReceivePdcpSduParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRlcSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcSapProvider;


extern PyTypeObject PyNs3LteRlcSapProvider_Type;

class PyNs3LteRlcSapProvider__PythonHelper : public ns3::LteRlcSapProvider
{
public:
    PyObject *m_pyself;
    PyNs3LteRlcSapProvider__PythonHelper()
        : ns3::LteRlcSapProvider(), m_pyself(NULL)
        {}

    PyNs3LteRlcSapProvider__PythonHelper(ns3::LteRlcSapProvider const & arg0)
        : ns3::LteRlcSapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteRlcSapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void TransmitPdcpPdu(ns3::LteRlcSapProvider::TransmitPdcpPduParameters params);
};

extern std::map<void*, PyObject*> PyNs3LteRlcSapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRlcSapProvider::TransmitPdcpPduParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcSapProviderTransmitPdcpPduParameters;


extern PyTypeObject PyNs3LteRlcSapProviderTransmitPdcpPduParameters_Type;

extern std::map<void*, PyObject*> PyNs3LteRlcSapProviderTransmitPdcpPduParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRlcSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcSapUser;


extern PyTypeObject PyNs3LteRlcSapUser_Type;

class PyNs3LteRlcSapUser__PythonHelper : public ns3::LteRlcSapUser
{
public:
    PyObject *m_pyself;
    PyNs3LteRlcSapUser__PythonHelper()
        : ns3::LteRlcSapUser(), m_pyself(NULL)
        {}

    PyNs3LteRlcSapUser__PythonHelper(ns3::LteRlcSapUser const & arg0)
        : ns3::LteRlcSapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteRlcSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void ReceivePdcpPdu(ns3::Ptr< ns3::Packet > p);
};

extern std::map<void*, PyObject*> PyNs3LteRlcSapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSap;


extern PyTypeObject PyNs3LteRrcSap_Type;
extern PyTypeObject PyNs3LteRrcSapMeta_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSap_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::AntennaInfoDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapAntennaInfoDedicated;


extern PyTypeObject PyNs3LteRrcSapAntennaInfoDedicated_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapAntennaInfoDedicated_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::AsConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapAsConfig;


extern PyTypeObject PyNs3LteRrcSapAsConfig_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapAsConfig_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::BlackCellsToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapBlackCellsToAddMod;


extern PyTypeObject PyNs3LteRrcSapBlackCellsToAddMod_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapBlackCellsToAddMod_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CarrierBandwidthEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCarrierBandwidthEutra;


extern PyTypeObject PyNs3LteRrcSapCarrierBandwidthEutra_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapCarrierBandwidthEutra_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CarrierFreqEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCarrierFreqEutra;


extern PyTypeObject PyNs3LteRrcSapCarrierFreqEutra_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapCarrierFreqEutra_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CellAccessRelatedInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCellAccessRelatedInfo;


extern PyTypeObject PyNs3LteRrcSapCellAccessRelatedInfo_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapCellAccessRelatedInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CellSelectionInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCellSelectionInfo;


extern PyTypeObject PyNs3LteRrcSapCellSelectionInfo_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapCellSelectionInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CellsToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCellsToAddMod;


extern PyTypeObject PyNs3LteRrcSapCellsToAddMod_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapCellsToAddMod_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::CgiInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapCgiInfo;


extern PyTypeObject PyNs3LteRrcSapCgiInfo_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapCgiInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::DrbToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapDrbToAddMod;


extern PyTypeObject PyNs3LteRrcSapDrbToAddMod_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapDrbToAddMod_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::FreqInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapFreqInfo;


extern PyTypeObject PyNs3LteRrcSapFreqInfo_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapFreqInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::HandoverPreparationInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapHandoverPreparationInfo;


extern PyTypeObject PyNs3LteRrcSapHandoverPreparationInfo_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapHandoverPreparationInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::LogicalChannelConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapLogicalChannelConfig;


extern PyTypeObject PyNs3LteRrcSapLogicalChannelConfig_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapLogicalChannelConfig_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MasterInformationBlock *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMasterInformationBlock;


extern PyTypeObject PyNs3LteRrcSapMasterInformationBlock_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapMasterInformationBlock_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasConfig;


extern PyTypeObject PyNs3LteRrcSapMeasConfig_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapMeasConfig_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasGapConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasGapConfig;


extern PyTypeObject PyNs3LteRrcSapMeasGapConfig_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapMeasGapConfig_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasIdToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasIdToAddMod;


extern PyTypeObject PyNs3LteRrcSapMeasIdToAddMod_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapMeasIdToAddMod_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasObjectEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasObjectEutra;


extern PyTypeObject PyNs3LteRrcSapMeasObjectEutra_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapMeasObjectEutra_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasObjectToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasObjectToAddMod;


extern PyTypeObject PyNs3LteRrcSapMeasObjectToAddMod_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapMeasObjectToAddMod_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasResultEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasResultEutra;


extern PyTypeObject PyNs3LteRrcSapMeasResultEutra_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapMeasResultEutra_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasResults *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasResults;


extern PyTypeObject PyNs3LteRrcSapMeasResults_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapMeasResults_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MeasurementReport *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMeasurementReport;


extern PyTypeObject PyNs3LteRrcSapMeasurementReport_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapMeasurementReport_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MobilityControlInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMobilityControlInfo;


extern PyTypeObject PyNs3LteRrcSapMobilityControlInfo_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapMobilityControlInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::MobilityStateParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapMobilityStateParameters;


extern PyTypeObject PyNs3LteRrcSapMobilityStateParameters_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapMobilityStateParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PdschConfigCommon *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPdschConfigCommon;


extern PyTypeObject PyNs3LteRrcSapPdschConfigCommon_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapPdschConfigCommon_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PdschConfigDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPdschConfigDedicated;


extern PyTypeObject PyNs3LteRrcSapPdschConfigDedicated_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapPdschConfigDedicated_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PhysCellIdRange *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPhysCellIdRange;


extern PyTypeObject PyNs3LteRrcSapPhysCellIdRange_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapPhysCellIdRange_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PhysicalConfigDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPhysicalConfigDedicated;


extern PyTypeObject PyNs3LteRrcSapPhysicalConfigDedicated_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapPhysicalConfigDedicated_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PlmnIdentityInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPlmnIdentityInfo;


extern PyTypeObject PyNs3LteRrcSapPlmnIdentityInfo_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapPlmnIdentityInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::PreambleInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapPreambleInfo;


extern PyTypeObject PyNs3LteRrcSapPreambleInfo_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapPreambleInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::QuantityConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapQuantityConfig;


extern PyTypeObject PyNs3LteRrcSapQuantityConfig_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapQuantityConfig_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RaSupervisionInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRaSupervisionInfo;


extern PyTypeObject PyNs3LteRrcSapRaSupervisionInfo_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRaSupervisionInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RachConfigCommon *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRachConfigCommon;


extern PyTypeObject PyNs3LteRrcSapRachConfigCommon_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRachConfigCommon_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RachConfigDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRachConfigDedicated;


extern PyTypeObject PyNs3LteRrcSapRachConfigDedicated_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRachConfigDedicated_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RadioResourceConfigCommon *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRadioResourceConfigCommon;


extern PyTypeObject PyNs3LteRrcSapRadioResourceConfigCommon_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRadioResourceConfigCommon_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RadioResourceConfigCommonSib *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRadioResourceConfigCommonSib;


extern PyTypeObject PyNs3LteRrcSapRadioResourceConfigCommonSib_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRadioResourceConfigCommonSib_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RadioResourceConfigDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRadioResourceConfigDedicated;


extern PyTypeObject PyNs3LteRrcSapRadioResourceConfigDedicated_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRadioResourceConfigDedicated_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::ReestabUeIdentity *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapReestabUeIdentity;


extern PyTypeObject PyNs3LteRrcSapReestabUeIdentity_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapReestabUeIdentity_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::ReportConfigEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapReportConfigEutra;


extern PyTypeObject PyNs3LteRrcSapReportConfigEutra_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapReportConfigEutra_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::ReportConfigToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapReportConfigToAddMod;


extern PyTypeObject PyNs3LteRrcSapReportConfigToAddMod_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapReportConfigToAddMod_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RlcConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRlcConfig;


extern PyTypeObject PyNs3LteRrcSapRlcConfig_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRlcConfig_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReconfiguration *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReconfiguration;


extern PyTypeObject PyNs3LteRrcSapRrcConnectionReconfiguration_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRrcConnectionReconfiguration_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReconfigurationCompleted *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReconfigurationCompleted;


extern PyTypeObject PyNs3LteRrcSapRrcConnectionReconfigurationCompleted_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRrcConnectionReconfigurationCompleted_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReestablishment *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReestablishment;


extern PyTypeObject PyNs3LteRrcSapRrcConnectionReestablishment_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRrcConnectionReestablishment_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReestablishmentComplete *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReestablishmentComplete;


extern PyTypeObject PyNs3LteRrcSapRrcConnectionReestablishmentComplete_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRrcConnectionReestablishmentComplete_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReestablishmentReject *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReestablishmentReject;


extern PyTypeObject PyNs3LteRrcSapRrcConnectionReestablishmentReject_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRrcConnectionReestablishmentReject_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReestablishmentRequest *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReestablishmentRequest;


extern PyTypeObject PyNs3LteRrcSapRrcConnectionReestablishmentRequest_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRrcConnectionReestablishmentRequest_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionReject *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionReject;


extern PyTypeObject PyNs3LteRrcSapRrcConnectionReject_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRrcConnectionReject_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionRelease *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionRelease;


extern PyTypeObject PyNs3LteRrcSapRrcConnectionRelease_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRrcConnectionRelease_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionRequest *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionRequest;


extern PyTypeObject PyNs3LteRrcSapRrcConnectionRequest_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRrcConnectionRequest_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionSetup *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionSetup;


extern PyTypeObject PyNs3LteRrcSapRrcConnectionSetup_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRrcConnectionSetup_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::RrcConnectionSetupCompleted *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapRrcConnectionSetupCompleted;


extern PyTypeObject PyNs3LteRrcSapRrcConnectionSetupCompleted_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapRrcConnectionSetupCompleted_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SoundingRsUlConfigCommon *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSoundingRsUlConfigCommon;


extern PyTypeObject PyNs3LteRrcSapSoundingRsUlConfigCommon_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapSoundingRsUlConfigCommon_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SoundingRsUlConfigDedicated *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSoundingRsUlConfigDedicated;


extern PyTypeObject PyNs3LteRrcSapSoundingRsUlConfigDedicated_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapSoundingRsUlConfigDedicated_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SpeedStatePars *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSpeedStatePars;


extern PyTypeObject PyNs3LteRrcSapSpeedStatePars_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapSpeedStatePars_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SpeedStateScaleFactors *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSpeedStateScaleFactors;


extern PyTypeObject PyNs3LteRrcSapSpeedStateScaleFactors_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapSpeedStateScaleFactors_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SrbToAddMod *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSrbToAddMod;


extern PyTypeObject PyNs3LteRrcSapSrbToAddMod_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapSrbToAddMod_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SystemInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSystemInformation;


extern PyTypeObject PyNs3LteRrcSapSystemInformation_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapSystemInformation_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SystemInformationBlockType1 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSystemInformationBlockType1;


extern PyTypeObject PyNs3LteRrcSapSystemInformationBlockType1_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapSystemInformationBlockType1_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::SystemInformationBlockType2 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapSystemInformationBlockType2;


extern PyTypeObject PyNs3LteRrcSapSystemInformationBlockType2_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapSystemInformationBlockType2_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteRrcSap::ThresholdEutra *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRrcSapThresholdEutra;


extern PyTypeObject PyNs3LteRrcSapThresholdEutra_Type;

extern std::map<void*, PyObject*> PyNs3LteRrcSapThresholdEutra_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteSpectrumValueCatcher *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteSpectrumValueCatcher;


extern PyTypeObject PyNs3LteSpectrumValueCatcher_Type;

extern std::map<void*, PyObject*> PyNs3LteSpectrumValueCatcher_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteSpectrumValueHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteSpectrumValueHelper;


extern PyTypeObject PyNs3LteSpectrumValueHelper_Type;

extern std::map<void*, PyObject*> PyNs3LteSpectrumValueHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteUeCmacSapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCmacSapProvider;


extern PyTypeObject PyNs3LteUeCmacSapProvider_Type;

extern std::map<void*, PyObject*> PyNs3LteUeCmacSapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteUeCmacSapProvider::LogicalChannelConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCmacSapProviderLogicalChannelConfig;


extern PyTypeObject PyNs3LteUeCmacSapProviderLogicalChannelConfig_Type;

extern std::map<void*, PyObject*> PyNs3LteUeCmacSapProviderLogicalChannelConfig_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteUeCmacSapProvider::RachConfig *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCmacSapProviderRachConfig;


extern PyTypeObject PyNs3LteUeCmacSapProviderRachConfig_Type;

extern std::map<void*, PyObject*> PyNs3LteUeCmacSapProviderRachConfig_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteUeCmacSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCmacSapUser;


extern PyTypeObject PyNs3LteUeCmacSapUser_Type;

class PyNs3LteUeCmacSapUser__PythonHelper : public ns3::LteUeCmacSapUser
{
public:
    PyObject *m_pyself;
    PyNs3LteUeCmacSapUser__PythonHelper()
        : ns3::LteUeCmacSapUser(), m_pyself(NULL)
        {}

    PyNs3LteUeCmacSapUser__PythonHelper(ns3::LteUeCmacSapUser const & arg0)
        : ns3::LteUeCmacSapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUeCmacSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void NotifyRandomAccessFailed();

    virtual void NotifyRandomAccessSuccessful();

    virtual void SetTemporaryCellRnti(uint16_t rnti);
};

extern std::map<void*, PyObject*> PyNs3LteUeCmacSapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteUeConfig_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeConfig_t;


extern PyTypeObject PyNs3LteUeConfig_t_Type;

extern std::map<void*, PyObject*> PyNs3LteUeConfig_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteUeCphySapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCphySapProvider;


extern PyTypeObject PyNs3LteUeCphySapProvider_Type;

class PyNs3LteUeCphySapProvider__PythonHelper : public ns3::LteUeCphySapProvider
{
public:
    PyObject *m_pyself;
    PyNs3LteUeCphySapProvider__PythonHelper()
        : ns3::LteUeCphySapProvider(), m_pyself(NULL)
        {}

    PyNs3LteUeCphySapProvider__PythonHelper(ns3::LteUeCphySapProvider const & arg0)
        : ns3::LteUeCphySapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUeCphySapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void ConfigureReferenceSignalPower(int8_t referenceSignalPower);

    virtual void ConfigureUplink(uint16_t ulEarfcn, uint8_t ulBandwidth);

    virtual void Reset();

    virtual void SetDlBandwidth(uint8_t dlBandwidth);

    virtual void SetPa(double pa);

    virtual void SetRnti(uint16_t rnti);

    virtual void SetSrsConfigurationIndex(uint16_t srcCi);

    virtual void SetTransmissionMode(uint8_t txMode);

    virtual void StartCellSearch(uint16_t dlEarfcn);

    virtual void SynchronizeWithEnb(uint16_t cellId);

    virtual void SynchronizeWithEnb(uint16_t cellId, uint16_t dlEarfcn);
};

extern std::map<void*, PyObject*> PyNs3LteUeCphySapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteUeCphySapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCphySapUser;


extern PyTypeObject PyNs3LteUeCphySapUser_Type;

class PyNs3LteUeCphySapUser__PythonHelper : public ns3::LteUeCphySapUser
{
public:
    PyObject *m_pyself;
    PyNs3LteUeCphySapUser__PythonHelper()
        : ns3::LteUeCphySapUser(), m_pyself(NULL)
        {}

    PyNs3LteUeCphySapUser__PythonHelper(ns3::LteUeCphySapUser const & arg0)
        : ns3::LteUeCphySapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUeCphySapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void RecvMasterInformationBlock(uint16_t cellId, ns3::LteRrcSap::MasterInformationBlock mib);

    virtual void RecvSystemInformationBlockType1(uint16_t cellId, ns3::LteRrcSap::SystemInformationBlockType1 sib1);

    virtual void ReportUeMeasurements(ns3::LteUeCphySapUser::UeMeasurementsParameters params);
};

extern std::map<void*, PyObject*> PyNs3LteUeCphySapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteUeCphySapUser::UeMeasurementsElement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCphySapUserUeMeasurementsElement;


extern PyTypeObject PyNs3LteUeCphySapUserUeMeasurementsElement_Type;

extern std::map<void*, PyObject*> PyNs3LteUeCphySapUserUeMeasurementsElement_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteUeCphySapUser::UeMeasurementsParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeCphySapUserUeMeasurementsParameters;


extern PyTypeObject PyNs3LteUeCphySapUserUeMeasurementsParameters_Type;

extern std::map<void*, PyObject*> PyNs3LteUeCphySapUserUeMeasurementsParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteUePhySapProvider *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUePhySapProvider;


extern PyTypeObject PyNs3LteUePhySapProvider_Type;

class PyNs3LteUePhySapProvider__PythonHelper : public ns3::LteUePhySapProvider
{
public:
    PyObject *m_pyself;
    PyNs3LteUePhySapProvider__PythonHelper()
        : ns3::LteUePhySapProvider(), m_pyself(NULL)
        {}

    PyNs3LteUePhySapProvider__PythonHelper(ns3::LteUePhySapProvider const & arg0)
        : ns3::LteUePhySapProvider(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUePhySapProvider__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void SendLteControlMessage(ns3::Ptr< ns3::LteControlMessage > msg);

    virtual void SendMacPdu(ns3::Ptr< ns3::Packet > p);

    virtual void SendRachPreamble(uint32_t prachId, uint32_t raRnti);
};

extern std::map<void*, PyObject*> PyNs3LteUePhySapProvider_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteUePhySapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUePhySapUser;


extern PyTypeObject PyNs3LteUePhySapUser_Type;

class PyNs3LteUePhySapUser__PythonHelper : public ns3::LteUePhySapUser
{
public:
    PyObject *m_pyself;
    PyNs3LteUePhySapUser__PythonHelper()
        : ns3::LteUePhySapUser(), m_pyself(NULL)
        {}

    PyNs3LteUePhySapUser__PythonHelper(ns3::LteUePhySapUser const & arg0)
        : ns3::LteUePhySapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUePhySapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void ReceiveLteControlMessage(ns3::Ptr< ns3::LteControlMessage > msg);

    virtual void ReceivePhyPdu(ns3::Ptr< ns3::Packet > p);

    virtual void SubframeIndication(uint32_t frameNo, uint32_t subframeNo);
};

extern std::map<void*, PyObject*> PyNs3LteUePhySapUser_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteUeRrcSapProvider *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeRrcSapProvider;


extern PyTypeObject PyNs3LteUeRrcSapProvider_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteUeRrcSapProvider::CompleteSetupParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeRrcSapProviderCompleteSetupParameters;


extern PyTypeObject PyNs3LteUeRrcSapProviderCompleteSetupParameters_Type;

extern std::map<void*, PyObject*> PyNs3LteUeRrcSapProviderCompleteSetupParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteUeRrcSapUser *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeRrcSapUser;


extern PyTypeObject PyNs3LteUeRrcSapUser_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteUeRrcSapUser::SetupParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeRrcSapUserSetupParameters;


extern PyTypeObject PyNs3LteUeRrcSapUserSetupParameters_Type;

extern std::map<void*, PyObject*> PyNs3LteUeRrcSapUserSetupParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MacCeListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacCeListElement_s;


extern PyTypeObject PyNs3MacCeListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3MacCeListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MacCeValue_u *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacCeValue_u;


extern PyTypeObject PyNs3MacCeValue_u_Type;

extern std::map<void*, PyObject*> PyNs3MacCeValue_u_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PagingInfoListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PagingInfoListElement_s;


extern PyTypeObject PyNs3PagingInfoListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3PagingInfoListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PhichListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PhichListElement_s;


extern PyTypeObject PyNs3PhichListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3PhichListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PhyReceptionStatParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PhyReceptionStatParameters;


extern PyTypeObject PyNs3PhyReceptionStatParameters_Type;

extern std::map<void*, PyObject*> PyNs3PhyReceptionStatParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PhyTransmissionStatParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PhyTransmissionStatParameters;


extern PyTypeObject PyNs3PhyTransmissionStatParameters_Type;

extern std::map<void*, PyObject*> PyNs3PhyTransmissionStatParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::RachListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RachListElement_s;


extern PyTypeObject PyNs3RachListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3RachListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::RadioBearerStatsConnector *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RadioBearerStatsConnector;


extern PyTypeObject PyNs3RadioBearerStatsConnector_Type;

extern std::map<void*, PyObject*> PyNs3RadioBearerStatsConnector_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::RealProtocolRlcSapUser *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RealProtocolRlcSapUser;


extern PyTypeObject PyNs3RealProtocolRlcSapUser_Type;

class PyNs3RealProtocolRlcSapUser__PythonHelper : public ns3::RealProtocolRlcSapUser
{
public:
    PyObject *m_pyself;
    PyNs3RealProtocolRlcSapUser__PythonHelper(ns3::RealProtocolRlcSapUser const & arg0)
        : ns3::RealProtocolRlcSapUser(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RealProtocolRlcSapUser__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void ReceivePdcpPdu(ns3::Ptr< ns3::Packet > p);
};


typedef struct {
    PyObject_HEAD
    ns3::RlcPduListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RlcPduListElement_s;


extern PyTypeObject PyNs3RlcPduListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3RlcPduListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SbMeasResult_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SbMeasResult_s;


extern PyTypeObject PyNs3SbMeasResult_s_Type;

extern std::map<void*, PyObject*> PyNs3SbMeasResult_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SequenceNumber10 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequenceNumber10;


extern PyTypeObject PyNs3SequenceNumber10_Type;

extern std::map<void*, PyObject*> PyNs3SequenceNumber10_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SiConfiguration_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SiConfiguration_s;


extern PyTypeObject PyNs3SiConfiguration_s_Type;

extern std::map<void*, PyObject*> PyNs3SiConfiguration_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SiMessageListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SiMessageListElement_s;


extern PyTypeObject PyNs3SiMessageListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3SiMessageListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SpsConfig_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpsConfig_s;


extern PyTypeObject PyNs3SpsConfig_s_Type;

extern std::map<void*, PyObject*> PyNs3SpsConfig_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SrConfig_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SrConfig_s;


extern PyTypeObject PyNs3SrConfig_s_Type;

extern std::map<void*, PyObject*> PyNs3SrConfig_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SrListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SrListElement_s;


extern PyTypeObject PyNs3SrListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3SrListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TbId_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TbId_t;


extern PyTypeObject PyNs3TbId_t_Type;

extern std::map<void*, PyObject*> PyNs3TbId_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TbStats_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TbStats_t;


extern PyTypeObject PyNs3TbStats_t_Type;

extern std::map<void*, PyObject*> PyNs3TbStats_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TransmissionModesLayers *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TransmissionModesLayers;


extern PyTypeObject PyNs3TransmissionModesLayers_Type;

extern std::map<void*, PyObject*> PyNs3TransmissionModesLayers_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UeCapabilities_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UeCapabilities_s;


extern PyTypeObject PyNs3UeCapabilities_s_Type;

extern std::map<void*, PyObject*> PyNs3UeCapabilities_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UeSelected_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UeSelected_s;


extern PyTypeObject PyNs3UeSelected_s_Type;

extern std::map<void*, PyObject*> PyNs3UeSelected_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UlCqi_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlCqi_s;


extern PyTypeObject PyNs3UlCqi_s_Type;

extern std::map<void*, PyObject*> PyNs3UlCqi_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UlDciListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlDciListElement_s;


extern PyTypeObject PyNs3UlDciListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3UlDciListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UlGrant_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlGrant_s;


extern PyTypeObject PyNs3UlGrant_s_Type;

extern std::map<void*, PyObject*> PyNs3UlGrant_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UlInfoListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlInfoListElement_s;


extern PyTypeObject PyNs3UlInfoListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3UlInfoListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UplinkLteGlobalPathlossDatabase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UplinkLteGlobalPathlossDatabase;


extern PyTypeObject PyNs3UplinkLteGlobalPathlossDatabase_Type;

class PyNs3UplinkLteGlobalPathlossDatabase__PythonHelper : public ns3::UplinkLteGlobalPathlossDatabase
{
public:
    PyObject *m_pyself;
    PyNs3UplinkLteGlobalPathlossDatabase__PythonHelper()
        : ns3::UplinkLteGlobalPathlossDatabase(), m_pyself(NULL)
        {}

    PyNs3UplinkLteGlobalPathlossDatabase__PythonHelper(ns3::UplinkLteGlobalPathlossDatabase const & arg0)
        : ns3::UplinkLteGlobalPathlossDatabase(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UplinkLteGlobalPathlossDatabase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void UpdatePathloss(std::string context, ns3::Ptr< ns3::SpectrumPhy > txPhy, ns3::Ptr< ns3::SpectrumPhy > rxPhy, double lossDb);
};


typedef struct {
    PyObject_HEAD
    ns3::VendorSpecificListElement_s *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3VendorSpecificListElement_s;


extern PyTypeObject PyNs3VendorSpecificListElement_s_Type;

extern std::map<void*, PyObject*> PyNs3VendorSpecificListElement_s_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::fdbetsFlowPerf_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FdbetsFlowPerf_t;


extern PyTypeObject PyNs3FdbetsFlowPerf_t_Type;

extern std::map<void*, PyObject*> PyNs3FdbetsFlowPerf_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::fdtbfqsFlowPerf_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FdtbfqsFlowPerf_t;


extern PyTypeObject PyNs3FdtbfqsFlowPerf_t_Type;

extern std::map<void*, PyObject*> PyNs3FdtbfqsFlowPerf_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::pfsFlowPerf_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PfsFlowPerf_t;


extern PyTypeObject PyNs3PfsFlowPerf_t_Type;

extern std::map<void*, PyObject*> PyNs3PfsFlowPerf_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::pssFlowPerf_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PssFlowPerf_t;


extern PyTypeObject PyNs3PssFlowPerf_t_Type;

extern std::map<void*, PyObject*> PyNs3PssFlowPerf_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::tbInfo_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TbInfo_t;


extern PyTypeObject PyNs3TbInfo_t_Type;

extern std::map<void*, PyObject*> PyNs3TbInfo_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::tdbetsFlowPerf_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TdbetsFlowPerf_t;


extern PyTypeObject PyNs3TdbetsFlowPerf_t_Type;

extern std::map<void*, PyObject*> PyNs3TdbetsFlowPerf_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::tdtbfqsFlowPerf_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TdtbfqsFlowPerf_t;


extern PyTypeObject PyNs3TdtbfqsFlowPerf_t_Type;

extern std::map<void*, PyObject*> PyNs3TdtbfqsFlowPerf_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DownlinkLteGlobalPathlossDatabase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DownlinkLteGlobalPathlossDatabase;


extern PyTypeObject PyNs3DownlinkLteGlobalPathlossDatabase_Type;

class PyNs3DownlinkLteGlobalPathlossDatabase__PythonHelper : public ns3::DownlinkLteGlobalPathlossDatabase
{
public:
    PyObject *m_pyself;
    PyNs3DownlinkLteGlobalPathlossDatabase__PythonHelper()
        : ns3::DownlinkLteGlobalPathlossDatabase(), m_pyself(NULL)
        {}

    PyNs3DownlinkLteGlobalPathlossDatabase__PythonHelper(ns3::DownlinkLteGlobalPathlossDatabase const & arg0)
        : ns3::DownlinkLteGlobalPathlossDatabase(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DownlinkLteGlobalPathlossDatabase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void UpdatePathloss(std::string context, ns3::Ptr< ns3::SpectrumPhy > txPhy, ns3::Ptr< ns3::SpectrumPhy > rxPhy, double lossDb);
};


typedef struct {
    PyObject_HEAD
    ns3::EpsBearerTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpsBearerTag;


extern PyTypeObject PyNs3EpsBearerTag_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrcSapProvider *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrcSapProvider;


extern PyTypeObject PyNs3LteEnbRrcSapProvider_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrcSapProvider::CompleteSetupUeParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters;


extern PyTypeObject PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters_Type;

extern std::map<void*, PyObject*> PyNs3LteEnbRrcSapProviderCompleteSetupUeParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrcSapUser *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrcSapUser;


extern PyTypeObject PyNs3LteEnbRrcSapUser_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrcSapUser::SetupUeParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrcSapUserSetupUeParameters;


extern PyTypeObject PyNs3LteEnbRrcSapUserSetupUeParameters_Type;

extern std::map<void*, PyObject*> PyNs3LteEnbRrcSapUserSetupUeParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LtePdcpHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePdcpHeader;


extern PyTypeObject PyNs3LtePdcpHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::LtePhyTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePhyTag;


extern PyTypeObject PyNs3LtePhyTag_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteRadioBearerTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRadioBearerTag;


extern PyTypeObject PyNs3LteRadioBearerTag_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteRlcAmHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcAmHeader;


extern PyTypeObject PyNs3LteRlcAmHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteRlcHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcHeader;


extern PyTypeObject PyNs3LteRlcHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteRlcSduStatusTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcSduStatusTag;


extern PyTypeObject PyNs3LteRlcSduStatusTag_Type;


typedef struct {
    PyObject_HEAD
    ns3::PdcpTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PdcpTag;


extern PyTypeObject PyNs3PdcpTag_Type;


typedef struct {
    PyObject_HEAD
    ns3::RadioEnvironmentMapHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RadioEnvironmentMapHelper;


extern PyTypeObject PyNs3RadioEnvironmentMapHelper_Type;

class PyNs3RadioEnvironmentMapHelper__PythonHelper : public ns3::RadioEnvironmentMapHelper
{
public:
    PyObject *m_pyself;
    PyNs3RadioEnvironmentMapHelper__PythonHelper()
        : ns3::RadioEnvironmentMapHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RadioEnvironmentMapHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RadioEnvironmentMapHelper *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3RadioEnvironmentMapHelper *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RadioEnvironmentMapHelper *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RadioEnvironmentMapHelper__PythonHelper")
        .SetParent< ns3::RadioEnvironmentMapHelper > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RadioEnvironmentMapHelper__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RlcTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RlcTag;


extern PyTypeObject PyNs3RlcTag_Type;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EpcTft, ns3::empty, ns3::DefaultDeleter<ns3::EpcTft> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EpcTft_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTft__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3EpcTft_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTft__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3EpcTft_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTft__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EpcTftClassifier, ns3::empty, ns3::DefaultDeleter<ns3::EpcTftClassifier> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EpcTftClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTftClassifier__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3EpcTftClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTftClassifier__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3EpcTftClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3EpcTftClassifier__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::LteChunkProcessor, ns3::empty, ns3::DefaultDeleter<ns3::LteChunkProcessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3LteChunkProcessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteChunkProcessor__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3LteChunkProcessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteChunkProcessor__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3LteChunkProcessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteChunkProcessor__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::LteControlMessage, ns3::empty, ns3::DefaultDeleter<ns3::LteControlMessage> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3LteControlMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteControlMessage__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::LteHarqPhy, ns3::empty, ns3::DefaultDeleter<ns3::LteHarqPhy> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3LteHarqPhy_Ns3Empty_Ns3DefaultDeleter__lt__ns3LteHarqPhy__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::VendorSpecificValue, ns3::empty, ns3::DefaultDeleter<ns3::VendorSpecificValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3VendorSpecificValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3VendorSpecificValue__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::X2CellInfo, ns3::empty, ns3::DefaultDeleter<ns3::X2CellInfo> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3X2CellInfo_Ns3Empty_Ns3DefaultDeleter__lt__ns3X2CellInfo__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3X2CellInfo_Ns3Empty_Ns3DefaultDeleter__lt__ns3X2CellInfo__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3X2CellInfo_Ns3Empty_Ns3DefaultDeleter__lt__ns3X2CellInfo__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::X2IfaceInfo, ns3::empty, ns3::DefaultDeleter<ns3::X2IfaceInfo> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3X2IfaceInfo_Ns3Empty_Ns3DefaultDeleter__lt__ns3X2IfaceInfo__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3X2IfaceInfo_Ns3Empty_Ns3DefaultDeleter__lt__ns3X2IfaceInfo__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3X2IfaceInfo_Ns3Empty_Ns3DefaultDeleter__lt__ns3X2IfaceInfo__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::TraceFadingLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TraceFadingLossModel;


extern PyTypeObject PyNs3TraceFadingLossModel_Type;

class PyNs3TraceFadingLossModel__PythonHelper : public ns3::TraceFadingLossModel
{
public:
    PyObject *m_pyself;
    PyNs3TraceFadingLossModel__PythonHelper(ns3::TraceFadingLossModel const & arg0)
        : ns3::TraceFadingLossModel(arg0), m_pyself(NULL)
        {}

    PyNs3TraceFadingLossModel__PythonHelper()
        : ns3::TraceFadingLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TraceFadingLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TraceFadingLossModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TraceFadingLossModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3TraceFadingLossModel *self);
    inline void DoDispose__parent_caller()
    { ns3::SpectrumPropagationLossModel::DoDispose(); }

    virtual void DoInitialize();

    virtual ns3::Ptr< ns3::SpectrumValue > DoCalcRxPowerSpectralDensity(ns3::Ptr< ns3::SpectrumValue const > txPsd, ns3::Ptr< ns3::MobilityModel const > a, ns3::Ptr< ns3::MobilityModel const > b) const;

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TraceFadingLossModel__PythonHelper")
        .SetParent< ns3::TraceFadingLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TraceFadingLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UeManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UeManager;


extern PyTypeObject PyNs3UeManager_Type;

class PyNs3UeManager__PythonHelper : public ns3::UeManager
{
public:
    PyObject *m_pyself;
    PyNs3UeManager__PythonHelper(ns3::UeManager const & arg0)
        : ns3::UeManager(arg0), m_pyself(NULL)
        {}

    PyNs3UeManager__PythonHelper()
        : ns3::UeManager(), m_pyself(NULL)
        {}

    PyNs3UeManager__PythonHelper(ns3::Ptr< ns3::LteEnbRrc > rrc, uint16_t rnti, ns3::UeManager::State s)
        : ns3::UeManager(rrc, rnti, s), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UeManager__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UeManager *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3UeManager *self);
    inline void DoInitialize__parent_caller()
    { ns3::UeManager::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UeManager *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3UeManager *self);
    inline void DoDispose__parent_caller()
    { ns3::UeManager::DoDispose(); }

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UeManager__PythonHelper")
        .SetParent< ns3::UeManager > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UeManager__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::VendorSpecificValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3VendorSpecificValue;


extern PyTypeObject PyNs3VendorSpecificValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::X2CellInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3X2CellInfo;


extern PyTypeObject PyNs3X2CellInfo_Type;


typedef struct {
    PyObject_HEAD
    ns3::X2IfaceInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3X2IfaceInfo;


extern PyTypeObject PyNs3X2IfaceInfo_Type;


typedef struct {
    PyObject_HEAD
    ns3::Asn1Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Asn1Header;


extern PyTypeObject PyNs3Asn1Header_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcEnbApplication *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcEnbApplication;


extern PyTypeObject PyNs3EpcEnbApplication_Type;

class PyNs3EpcEnbApplication__PythonHelper : public ns3::EpcEnbApplication
{
public:
    PyObject *m_pyself;
    PyNs3EpcEnbApplication__PythonHelper(ns3::EpcEnbApplication const & arg0)
        : ns3::EpcEnbApplication(arg0), m_pyself(NULL)
        {}

    PyNs3EpcEnbApplication__PythonHelper(ns3::Ptr< ns3::Socket > lteSocket, ns3::Ptr< ns3::Socket > s1uSocket, ns3::Ipv4Address enbS1uAddress, ns3::Ipv4Address sgwS1uAddress, uint16_t cellId)
        : ns3::EpcEnbApplication(lteSocket, s1uSocket, enbS1uAddress, sgwS1uAddress, cellId), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EpcEnbApplication__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EpcEnbApplication *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3EpcEnbApplication *self);
    inline void DoInitialize__parent_caller()
    { ns3::Application::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3EpcEnbApplication *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3EpcEnbApplication *self);
    inline void DoDispose__parent_caller()
    { ns3::EpcEnbApplication::DoDispose(); }

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void StartApplication();

    virtual void StopApplication();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3EpcEnbApplication__PythonHelper")
        .SetParent< ns3::EpcEnbApplication > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3EpcEnbApplication__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::EpcEnbApplication::EpsFlowId_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcEnbApplicationEpsFlowId_t;


extern PyTypeObject PyNs3EpcEnbApplicationEpsFlowId_t_Type;

extern std::map<void*, PyObject*> PyNs3EpcEnbApplicationEpsFlowId_t_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcHelper;


extern PyTypeObject PyNs3EpcHelper_Type;

class PyNs3EpcHelper__PythonHelper : public ns3::EpcHelper
{
public:
    PyObject *m_pyself;
    PyNs3EpcHelper__PythonHelper(ns3::EpcHelper const & arg0)
        : ns3::EpcHelper(arg0), m_pyself(NULL)
        {}

    PyNs3EpcHelper__PythonHelper()
        : ns3::EpcHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EpcHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EpcHelper *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3EpcHelper *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3EpcHelper *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual uint8_t ActivateEpsBearer(ns3::Ptr< ns3::NetDevice > ueLteDevice, uint64_t imsi, ns3::Ptr< ns3::EpcTft > tft, ns3::EpsBearer bearer);

    virtual void AddEnb(ns3::Ptr< ns3::Node > enbNode, ns3::Ptr< ns3::NetDevice > lteEnbNetDevice, uint16_t cellId);

    virtual void AddUe(ns3::Ptr< ns3::NetDevice > ueLteDevice, uint64_t imsi);

    virtual void AddX2Interface(ns3::Ptr< ns3::Node > enbNode1, ns3::Ptr< ns3::Node > enbNode2);

    virtual ns3::Ipv4InterfaceContainer AssignUeIpv4Address(ns3::NetDeviceContainer ueDevices);

    virtual void DoDispose();

    virtual ns3::Ptr< ns3::Node > GetPgwNode();

    virtual ns3::Ipv4Address GetUeDefaultGatewayAddress();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3EpcHelper__PythonHelper")
        .SetParent< ns3::EpcHelper > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3EpcHelper__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::EpcMme *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcMme;


extern PyTypeObject PyNs3EpcMme_Type;

class PyNs3EpcMme__PythonHelper : public ns3::EpcMme
{
public:
    PyObject *m_pyself;
    PyNs3EpcMme__PythonHelper(ns3::EpcMme const & arg0)
        : ns3::EpcMme(arg0), m_pyself(NULL)
        {}

    PyNs3EpcMme__PythonHelper()
        : ns3::EpcMme(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EpcMme__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EpcMme *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3EpcMme *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3EpcMme *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3EpcMme *self);
    inline void DoDispose__parent_caller()
    { ns3::EpcMme::DoDispose(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3EpcMme__PythonHelper")
        .SetParent< ns3::EpcMme > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3EpcMme__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::EpcSgwPgwApplication *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcSgwPgwApplication;


extern PyTypeObject PyNs3EpcSgwPgwApplication_Type;

class PyNs3EpcSgwPgwApplication__PythonHelper : public ns3::EpcSgwPgwApplication
{
public:
    PyObject *m_pyself;
    PyNs3EpcSgwPgwApplication__PythonHelper(ns3::EpcSgwPgwApplication const & arg0)
        : ns3::EpcSgwPgwApplication(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EpcSgwPgwApplication__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EpcSgwPgwApplication *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3EpcSgwPgwApplication *self);
    inline void DoInitialize__parent_caller()
    { ns3::Application::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3EpcSgwPgwApplication *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void StartApplication();

    virtual void StopApplication();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3EpcSgwPgwApplication__PythonHelper")
        .SetParent< ns3::EpcSgwPgwApplication > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3EpcSgwPgwApplication__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::EpcTft *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcTft;


extern PyTypeObject PyNs3EpcTft_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcTft::PacketFilter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcTftPacketFilter;


extern PyTypeObject PyNs3EpcTftPacketFilter_Type;

extern std::map<void*, PyObject*> PyNs3EpcTftPacketFilter_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EpcTftClassifier *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcTftClassifier;


extern PyTypeObject PyNs3EpcTftClassifier_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcUeNas *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcUeNas;


extern PyTypeObject PyNs3EpcUeNas_Type;

class PyNs3EpcUeNas__PythonHelper : public ns3::EpcUeNas
{
public:
    PyObject *m_pyself;
    PyNs3EpcUeNas__PythonHelper(ns3::EpcUeNas const & arg0)
        : ns3::EpcUeNas(arg0), m_pyself(NULL)
        {}

    PyNs3EpcUeNas__PythonHelper()
        : ns3::EpcUeNas(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EpcUeNas__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EpcUeNas *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3EpcUeNas *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3EpcUeNas *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3EpcUeNas__PythonHelper")
        .SetParent< ns3::EpcUeNas > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3EpcUeNas__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::EpcX2 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2;


extern PyTypeObject PyNs3EpcX2_Type;

class PyNs3EpcX2__PythonHelper : public ns3::EpcX2
{
public:
    PyObject *m_pyself;
    PyNs3EpcX2__PythonHelper(ns3::EpcX2 const & arg0)
        : ns3::EpcX2(arg0), m_pyself(NULL)
        {}

    PyNs3EpcX2__PythonHelper()
        : ns3::EpcX2(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EpcX2__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EpcX2 *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoSendSnStatusTransfer(PyNs3EpcX2 *self, PyObject *args, PyObject *kwargs);
    inline void DoSendSnStatusTransfer__parent_caller(ns3::EpcX2Sap::SnStatusTransferParams params)
    { ns3::EpcX2::DoSendSnStatusTransfer(params); }

    static PyObject * _wrap_DoSendHandoverPreparationFailure(PyNs3EpcX2 *self, PyObject *args, PyObject *kwargs);
    inline void DoSendHandoverPreparationFailure__parent_caller(ns3::EpcX2Sap::HandoverPreparationFailureParams params)
    { ns3::EpcX2::DoSendHandoverPreparationFailure(params); }

    static PyObject * _wrap_DoInitialize(PyNs3EpcX2 *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_DoSendHandoverRequestAck(PyNs3EpcX2 *self, PyObject *args, PyObject *kwargs);
    inline void DoSendHandoverRequestAck__parent_caller(ns3::EpcX2Sap::HandoverRequestAckParams params)
    { ns3::EpcX2::DoSendHandoverRequestAck(params); }

    static PyObject * _wrap_DoSendHandoverRequest(PyNs3EpcX2 *self, PyObject *args, PyObject *kwargs);
    inline void DoSendHandoverRequest__parent_caller(ns3::EpcX2Sap::HandoverRequestParams params)
    { ns3::EpcX2::DoSendHandoverRequest(params); }

    static PyObject * _wrap_DoSendLoadInformation(PyNs3EpcX2 *self, PyObject *args, PyObject *kwargs);
    inline void DoSendLoadInformation__parent_caller(ns3::EpcX2Sap::LoadInformationParams params)
    { ns3::EpcX2::DoSendLoadInformation(params); }

    static PyObject * _wrap_DoSendUeData(PyNs3EpcX2 *self, PyObject *args, PyObject *kwargs);
    inline void DoSendUeData__parent_caller(ns3::EpcX2Sap::UeDataParams params)
    { ns3::EpcX2::DoSendUeData(params); }

    static PyObject * _wrap_DoSendUeContextRelease(PyNs3EpcX2 *self, PyObject *args, PyObject *kwargs);
    inline void DoSendUeContextRelease__parent_caller(ns3::EpcX2Sap::UeContextReleaseParams params)
    { ns3::EpcX2::DoSendUeContextRelease(params); }

    static PyObject * _wrap_DoSendResourceStatusUpdate(PyNs3EpcX2 *self, PyObject *args, PyObject *kwargs);
    inline void DoSendResourceStatusUpdate__parent_caller(ns3::EpcX2Sap::ResourceStatusUpdateParams params)
    { ns3::EpcX2::DoSendResourceStatusUpdate(params); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3EpcX2 *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void DoSendHandoverPreparationFailure(ns3::EpcX2Sap::HandoverPreparationFailureParams params);

    virtual void DoSendHandoverRequest(ns3::EpcX2Sap::HandoverRequestParams params);

    virtual void DoSendHandoverRequestAck(ns3::EpcX2Sap::HandoverRequestAckParams params);

    virtual void DoSendLoadInformation(ns3::EpcX2Sap::LoadInformationParams params);

    virtual void DoSendResourceStatusUpdate(ns3::EpcX2Sap::ResourceStatusUpdateParams params);

    virtual void DoSendSnStatusTransfer(ns3::EpcX2Sap::SnStatusTransferParams params);

    virtual void DoSendUeContextRelease(ns3::EpcX2Sap::UeContextReleaseParams params);

    virtual void DoSendUeData(ns3::EpcX2Sap::UeDataParams params);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3EpcX2__PythonHelper")
        .SetParent< ns3::EpcX2 > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3EpcX2__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::EpcX2HandoverPreparationFailureHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2HandoverPreparationFailureHeader;


extern PyTypeObject PyNs3EpcX2HandoverPreparationFailureHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcX2HandoverRequestAckHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2HandoverRequestAckHeader;


extern PyTypeObject PyNs3EpcX2HandoverRequestAckHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcX2HandoverRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2HandoverRequestHeader;


extern PyTypeObject PyNs3EpcX2HandoverRequestHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcX2Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2Header;


extern PyTypeObject PyNs3EpcX2Header_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcX2LoadInformationHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2LoadInformationHeader;


extern PyTypeObject PyNs3EpcX2LoadInformationHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcX2ResourceStatusUpdateHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2ResourceStatusUpdateHeader;


extern PyTypeObject PyNs3EpcX2ResourceStatusUpdateHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcX2SnStatusTransferHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2SnStatusTransferHeader;


extern PyTypeObject PyNs3EpcX2SnStatusTransferHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::EpcX2UeContextReleaseHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EpcX2UeContextReleaseHeader;


extern PyTypeObject PyNs3EpcX2UeContextReleaseHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::FfMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FfMacScheduler;


extern PyTypeObject PyNs3FfMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::GtpuHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3GtpuHeader;


extern PyTypeObject PyNs3GtpuHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteAmc *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteAmc;


extern PyTypeObject PyNs3LteAmc_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteAnr *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteAnr;


extern PyTypeObject PyNs3LteAnr_Type;

class PyNs3LteAnr__PythonHelper : public ns3::LteAnr
{
public:
    PyObject *m_pyself;
    PyNs3LteAnr__PythonHelper(ns3::LteAnr const & arg0)
        : ns3::LteAnr(arg0), m_pyself(NULL)
        {}

    PyNs3LteAnr__PythonHelper(uint16_t servingCellId)
        : ns3::LteAnr(servingCellId), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteAnr__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteAnr *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteAnr *self);
    inline void DoInitialize__parent_caller()
    { ns3::LteAnr::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteAnr *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3LteAnr *self);
    inline void DoDispose__parent_caller()
    { ns3::LteAnr::DoDispose(); }

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteAnr__PythonHelper")
        .SetParent< ns3::LteAnr > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteAnr__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteChunkProcessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteChunkProcessor;


extern PyTypeObject PyNs3LteChunkProcessor_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteControlMessage;


extern PyTypeObject PyNs3LteControlMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteEnbMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbMac;


extern PyTypeObject PyNs3LteEnbMac_Type;

class PyNs3LteEnbMac__PythonHelper : public ns3::LteEnbMac
{
public:
    PyObject *m_pyself;
    PyNs3LteEnbMac__PythonHelper(ns3::LteEnbMac const & arg0)
        : ns3::LteEnbMac(arg0), m_pyself(NULL)
        {}

    PyNs3LteEnbMac__PythonHelper()
        : ns3::LteEnbMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteEnbMac *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteEnbMac *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteEnbMac *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteEnbMac__PythonHelper")
        .SetParent< ns3::LteEnbMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteEnbMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrc *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrc;


extern PyTypeObject PyNs3LteEnbRrc_Type;

class PyNs3LteEnbRrc__PythonHelper : public ns3::LteEnbRrc
{
public:
    PyObject *m_pyself;
    PyNs3LteEnbRrc__PythonHelper(ns3::LteEnbRrc const & arg0)
        : ns3::LteEnbRrc(arg0), m_pyself(NULL)
        {}

    PyNs3LteEnbRrc__PythonHelper()
        : ns3::LteEnbRrc(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbRrc__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteEnbRrc *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteEnbRrc *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteEnbRrc *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3LteEnbRrc *self);
    inline void DoDispose__parent_caller()
    { ns3::LteEnbRrc::DoDispose(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteEnbRrc__PythonHelper")
        .SetParent< ns3::LteEnbRrc > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteEnbRrc__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrcProtocolIdeal *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrcProtocolIdeal;


extern PyTypeObject PyNs3LteEnbRrcProtocolIdeal_Type;

class PyNs3LteEnbRrcProtocolIdeal__PythonHelper : public ns3::LteEnbRrcProtocolIdeal
{
public:
    PyObject *m_pyself;
    PyNs3LteEnbRrcProtocolIdeal__PythonHelper(ns3::LteEnbRrcProtocolIdeal const & arg0)
        : ns3::LteEnbRrcProtocolIdeal(arg0), m_pyself(NULL)
        {}

    PyNs3LteEnbRrcProtocolIdeal__PythonHelper()
        : ns3::LteEnbRrcProtocolIdeal(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbRrcProtocolIdeal__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteEnbRrcProtocolIdeal *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteEnbRrcProtocolIdeal *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteEnbRrcProtocolIdeal *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteEnbRrcProtocolIdeal__PythonHelper")
        .SetParent< ns3::LteEnbRrcProtocolIdeal > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteEnbRrcProtocolIdeal__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteEnbRrcProtocolReal *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbRrcProtocolReal;


extern PyTypeObject PyNs3LteEnbRrcProtocolReal_Type;

class PyNs3LteEnbRrcProtocolReal__PythonHelper : public ns3::LteEnbRrcProtocolReal
{
public:
    PyObject *m_pyself;
    PyNs3LteEnbRrcProtocolReal__PythonHelper(ns3::LteEnbRrcProtocolReal const & arg0)
        : ns3::LteEnbRrcProtocolReal(arg0), m_pyself(NULL)
        {}

    PyNs3LteEnbRrcProtocolReal__PythonHelper()
        : ns3::LteEnbRrcProtocolReal(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbRrcProtocolReal__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteEnbRrcProtocolReal *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteEnbRrcProtocolReal *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteEnbRrcProtocolReal *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteEnbRrcProtocolReal__PythonHelper")
        .SetParent< ns3::LteEnbRrcProtocolReal > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteEnbRrcProtocolReal__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteFfrAlgorithm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFfrAlgorithm;


extern PyTypeObject PyNs3LteFfrAlgorithm_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteFfrDistributedAlgorithm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFfrDistributedAlgorithm;


extern PyTypeObject PyNs3LteFfrDistributedAlgorithm_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteFfrEnhancedAlgorithm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFfrEnhancedAlgorithm;


extern PyTypeObject PyNs3LteFfrEnhancedAlgorithm_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteFfrSoftAlgorithm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFfrSoftAlgorithm;


extern PyTypeObject PyNs3LteFfrSoftAlgorithm_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteFrHardAlgorithm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFrHardAlgorithm;


extern PyTypeObject PyNs3LteFrHardAlgorithm_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteFrNoOpAlgorithm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFrNoOpAlgorithm;


extern PyTypeObject PyNs3LteFrNoOpAlgorithm_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteFrSoftAlgorithm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFrSoftAlgorithm;


extern PyTypeObject PyNs3LteFrSoftAlgorithm_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteFrStrictAlgorithm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteFrStrictAlgorithm;


extern PyTypeObject PyNs3LteFrStrictAlgorithm_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteHandoverAlgorithm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteHandoverAlgorithm;


extern PyTypeObject PyNs3LteHandoverAlgorithm_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteHarqPhy *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteHarqPhy;


extern PyTypeObject PyNs3LteHarqPhy_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteHelper;


extern PyTypeObject PyNs3LteHelper_Type;

class PyNs3LteHelper__PythonHelper : public ns3::LteHelper
{
public:
    PyObject *m_pyself;
    PyNs3LteHelper__PythonHelper(ns3::LteHelper const & arg0)
        : ns3::LteHelper(arg0), m_pyself(NULL)
        {}

    PyNs3LteHelper__PythonHelper()
        : ns3::LteHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteHelper *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteHelper *self);
    inline void DoInitialize__parent_caller()
    { ns3::LteHelper::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteHelper *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteHelper__PythonHelper")
        .SetParent< ns3::LteHelper > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteHelper__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteHexGridEnbTopologyHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteHexGridEnbTopologyHelper;


extern PyTypeObject PyNs3LteHexGridEnbTopologyHelper_Type;

class PyNs3LteHexGridEnbTopologyHelper__PythonHelper : public ns3::LteHexGridEnbTopologyHelper
{
public:
    PyObject *m_pyself;
    PyNs3LteHexGridEnbTopologyHelper__PythonHelper(ns3::LteHexGridEnbTopologyHelper const & arg0)
        : ns3::LteHexGridEnbTopologyHelper(arg0), m_pyself(NULL)
        {}

    PyNs3LteHexGridEnbTopologyHelper__PythonHelper()
        : ns3::LteHexGridEnbTopologyHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteHexGridEnbTopologyHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteHexGridEnbTopologyHelper *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteHexGridEnbTopologyHelper *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteHexGridEnbTopologyHelper *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteHexGridEnbTopologyHelper__PythonHelper")
        .SetParent< ns3::LteHexGridEnbTopologyHelper > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteHexGridEnbTopologyHelper__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteInterference *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteInterference;


extern PyTypeObject PyNs3LteInterference_Type;

class PyNs3LteInterference__PythonHelper : public ns3::LteInterference
{
public:
    PyObject *m_pyself;
    PyNs3LteInterference__PythonHelper(ns3::LteInterference const & arg0)
        : ns3::LteInterference(arg0), m_pyself(NULL)
        {}

    PyNs3LteInterference__PythonHelper()
        : ns3::LteInterference(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteInterference__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteInterference *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteInterference *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteInterference *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteInterference__PythonHelper")
        .SetParent< ns3::LteInterference > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteInterference__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LtePdcp *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePdcp;


extern PyTypeObject PyNs3LtePdcp_Type;
extern PyTypeObject PyNs3LtePdcpMeta_Type;

class PyNs3LtePdcp__PythonHelper : public ns3::LtePdcp
{
public:
    PyObject *m_pyself;
    PyNs3LtePdcp__PythonHelper(ns3::LtePdcp const & arg0)
        : ns3::LtePdcp(arg0), m_pyself(NULL)
        {}

    PyNs3LtePdcp__PythonHelper()
        : ns3::LtePdcp(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LtePdcp__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LtePdcp *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoTransmitPdcpSdu(PyNs3LtePdcp *self, PyObject *args, PyObject *kwargs);
    inline void DoTransmitPdcpSdu__parent_caller(ns3::Ptr< ns3::Packet > p)
    { ns3::LtePdcp::DoTransmitPdcpSdu(p); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LtePdcp *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoReceivePdu(PyNs3LtePdcp *self, PyObject *args, PyObject *kwargs);
    inline void DoReceivePdu__parent_caller(ns3::Ptr< ns3::Packet > p)
    { ns3::LtePdcp::DoReceivePdu(p); }

    static PyObject * _wrap_DoInitialize(PyNs3LtePdcp *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    virtual void DoDispose();

    virtual void DoReceivePdu(ns3::Ptr< ns3::Packet > p);

    virtual void DoTransmitPdcpSdu(ns3::Ptr< ns3::Packet > p);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LtePdcp__PythonHelper")
        .SetParent< ns3::LtePdcp > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LtePdcp__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LtePdcp::Status *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePdcpStatus;


extern PyTypeObject PyNs3LtePdcpStatus_Type;

extern std::map<void*, PyObject*> PyNs3LtePdcpStatus_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::LtePhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LtePhy;


extern PyTypeObject PyNs3LtePhy_Type;

class PyNs3LtePhy__PythonHelper : public ns3::LtePhy
{
public:
    PyObject *m_pyself;
    PyNs3LtePhy__PythonHelper(ns3::LtePhy const & arg0)
        : ns3::LtePhy(arg0), m_pyself(NULL)
        {}

    PyNs3LtePhy__PythonHelper()
        : ns3::LtePhy(), m_pyself(NULL)
        {}

    PyNs3LtePhy__PythonHelper(ns3::Ptr< ns3::LteSpectrumPhy > dlPhy, ns3::Ptr< ns3::LteSpectrumPhy > ulPhy)
        : ns3::LtePhy(dlPhy, ulPhy), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LtePhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LtePhy *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LtePhy *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LtePhy *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual ns3::Ptr< ns3::SpectrumValue > CreateTxPowerSpectralDensity();

    virtual void DoDispose();

    virtual void DoSendMacPdu(ns3::Ptr< ns3::Packet > p);

    virtual void GenerateCtrlCqiReport(ns3::SpectrumValue const & sinr);

    virtual void GenerateDataCqiReport(ns3::SpectrumValue const & sinr);

    virtual void ReportInterference(ns3::SpectrumValue const & interf);

    virtual void ReportRsReceivedPower(ns3::SpectrumValue const & power);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LtePhy__PythonHelper")
        .SetParent< ns3::LtePhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LtePhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteRadioBearerInfo *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRadioBearerInfo;


extern PyTypeObject PyNs3LteRadioBearerInfo_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteRlc *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlc;


extern PyTypeObject PyNs3LteRlc_Type;

class PyNs3LteRlc__PythonHelper : public ns3::LteRlc
{
public:
    PyObject *m_pyself;
    PyNs3LteRlc__PythonHelper(ns3::LteRlc const & arg0)
        : ns3::LteRlc(arg0), m_pyself(NULL)
        {}

    PyNs3LteRlc__PythonHelper()
        : ns3::LteRlc(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteRlc__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteRlc *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteRlc *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteRlc *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void DoNotifyHarqDeliveryFailure();

    virtual void DoNotifyTxOpportunity(uint32_t bytes, uint8_t layer, uint8_t harqId);

    virtual void DoReceivePdu(ns3::Ptr< ns3::Packet > p);

    virtual void DoTransmitPdcpPdu(ns3::Ptr< ns3::Packet > p);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteRlc__PythonHelper")
        .SetParent< ns3::LteRlc > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteRlc__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteRlcAm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcAm;


extern PyTypeObject PyNs3LteRlcAm_Type;

class PyNs3LteRlcAm__PythonHelper : public ns3::LteRlcAm
{
public:
    PyObject *m_pyself;
    PyNs3LteRlcAm__PythonHelper(ns3::LteRlcAm const & arg0)
        : ns3::LteRlcAm(arg0), m_pyself(NULL)
        {}

    PyNs3LteRlcAm__PythonHelper()
        : ns3::LteRlcAm(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteRlcAm__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteRlcAm *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteRlcAm *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteRlcAm *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void DoNotifyHarqDeliveryFailure();

    virtual void DoNotifyTxOpportunity(uint32_t bytes, uint8_t layer, uint8_t harqId);

    virtual void DoReceivePdu(ns3::Ptr< ns3::Packet > p);

    virtual void DoTransmitPdcpPdu(ns3::Ptr< ns3::Packet > p);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteRlcAm__PythonHelper")
        .SetParent< ns3::LteRlcAm > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteRlcAm__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteRlcSm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcSm;


extern PyTypeObject PyNs3LteRlcSm_Type;

class PyNs3LteRlcSm__PythonHelper : public ns3::LteRlcSm
{
public:
    PyObject *m_pyself;
    PyNs3LteRlcSm__PythonHelper(ns3::LteRlcSm const & arg0)
        : ns3::LteRlcSm(arg0), m_pyself(NULL)
        {}

    PyNs3LteRlcSm__PythonHelper()
        : ns3::LteRlcSm(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteRlcSm__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteRlcSm *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteRlcSm *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void DoNotifyHarqDeliveryFailure();

    virtual void DoNotifyTxOpportunity(uint32_t bytes, uint8_t layer, uint8_t harqId);

    virtual void DoReceivePdu(ns3::Ptr< ns3::Packet > p);

    virtual void DoTransmitPdcpPdu(ns3::Ptr< ns3::Packet > p);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteRlcSm__PythonHelper")
        .SetParent< ns3::LteRlcSm > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteRlcSm__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteRlcTm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcTm;


extern PyTypeObject PyNs3LteRlcTm_Type;

class PyNs3LteRlcTm__PythonHelper : public ns3::LteRlcTm
{
public:
    PyObject *m_pyself;
    PyNs3LteRlcTm__PythonHelper(ns3::LteRlcTm const & arg0)
        : ns3::LteRlcTm(arg0), m_pyself(NULL)
        {}

    PyNs3LteRlcTm__PythonHelper()
        : ns3::LteRlcTm(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteRlcTm__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteRlcTm *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteRlcTm *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteRlcTm *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void DoNotifyHarqDeliveryFailure();

    virtual void DoNotifyTxOpportunity(uint32_t bytes, uint8_t layer, uint8_t harqId);

    virtual void DoReceivePdu(ns3::Ptr< ns3::Packet > p);

    virtual void DoTransmitPdcpPdu(ns3::Ptr< ns3::Packet > p);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteRlcTm__PythonHelper")
        .SetParent< ns3::LteRlcTm > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteRlcTm__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteRlcUm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteRlcUm;


extern PyTypeObject PyNs3LteRlcUm_Type;

class PyNs3LteRlcUm__PythonHelper : public ns3::LteRlcUm
{
public:
    PyObject *m_pyself;
    PyNs3LteRlcUm__PythonHelper(ns3::LteRlcUm const & arg0)
        : ns3::LteRlcUm(arg0), m_pyself(NULL)
        {}

    PyNs3LteRlcUm__PythonHelper()
        : ns3::LteRlcUm(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteRlcUm__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteRlcUm *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteRlcUm *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteRlcUm *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void DoNotifyHarqDeliveryFailure();

    virtual void DoNotifyTxOpportunity(uint32_t bytes, uint8_t layer, uint8_t harqId);

    virtual void DoReceivePdu(ns3::Ptr< ns3::Packet > p);

    virtual void DoTransmitPdcpPdu(ns3::Ptr< ns3::Packet > p);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteRlcUm__PythonHelper")
        .SetParent< ns3::LteRlcUm > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteRlcUm__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteSignalingRadioBearerInfo *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteSignalingRadioBearerInfo;


extern PyTypeObject PyNs3LteSignalingRadioBearerInfo_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteSpectrumPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteSpectrumPhy;


extern PyTypeObject PyNs3LteSpectrumPhy_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteSpectrumSignalParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteSpectrumSignalParameters;


extern PyTypeObject PyNs3LteSpectrumSignalParameters_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteSpectrumSignalParametersDataFrame *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteSpectrumSignalParametersDataFrame;


extern PyTypeObject PyNs3LteSpectrumSignalParametersDataFrame_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteSpectrumSignalParametersDlCtrlFrame *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteSpectrumSignalParametersDlCtrlFrame;


extern PyTypeObject PyNs3LteSpectrumSignalParametersDlCtrlFrame_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteSpectrumSignalParametersUlSrsFrame *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteSpectrumSignalParametersUlSrsFrame;


extern PyTypeObject PyNs3LteSpectrumSignalParametersUlSrsFrame_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteStatsCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteStatsCalculator;


extern PyTypeObject PyNs3LteStatsCalculator_Type;

class PyNs3LteStatsCalculator__PythonHelper : public ns3::LteStatsCalculator
{
public:
    PyObject *m_pyself;
    PyNs3LteStatsCalculator__PythonHelper(ns3::LteStatsCalculator const & arg0)
        : ns3::LteStatsCalculator(arg0), m_pyself(NULL)
        {}

    PyNs3LteStatsCalculator__PythonHelper()
        : ns3::LteStatsCalculator(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteStatsCalculator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteStatsCalculator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_FindImsiFromEnbRlcPath(PyNs3LteStatsCalculator *self, PyObject *args, PyObject *kwargs);
    inline uint64_t FindImsiFromEnbRlcPath__parent_caller(std::string path)
    { return ns3::LteStatsCalculator::FindImsiFromEnbRlcPath(path); }

    static PyObject * _wrap_FindImsiForEnb(PyNs3LteStatsCalculator *self, PyObject *args, PyObject *kwargs);
    inline uint64_t FindImsiForEnb__parent_caller(std::string path, uint16_t rnti)
    { return ns3::LteStatsCalculator::FindImsiForEnb(path, rnti); }

    static PyObject * _wrap_DoInitialize(PyNs3LteStatsCalculator *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteStatsCalculator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_FindImsiForUe(PyNs3LteStatsCalculator *self, PyObject *args, PyObject *kwargs);
    inline uint64_t FindImsiForUe__parent_caller(std::string path, uint16_t rnti)
    { return ns3::LteStatsCalculator::FindImsiForUe(path, rnti); }

    static PyObject * _wrap_FindImsiFromEnbMac(PyNs3LteStatsCalculator *self, PyObject *args, PyObject *kwargs);
    inline uint64_t FindImsiFromEnbMac__parent_caller(std::string path, uint16_t rnti)
    { return ns3::LteStatsCalculator::FindImsiFromEnbMac(path, rnti); }

    static PyObject * _wrap_FindCellIdFromEnbMac(PyNs3LteStatsCalculator *self, PyObject *args, PyObject *kwargs);
    inline uint16_t FindCellIdFromEnbMac__parent_caller(std::string path, uint16_t rnti)
    { return ns3::LteStatsCalculator::FindCellIdFromEnbMac(path, rnti); }

    static PyObject * _wrap_FindCellIdFromEnbRlcPath(PyNs3LteStatsCalculator *self, PyObject *args, PyObject *kwargs);
    inline uint16_t FindCellIdFromEnbRlcPath__parent_caller(std::string path)
    { return ns3::LteStatsCalculator::FindCellIdFromEnbRlcPath(path); }

    static PyObject * _wrap_DoDispose(PyNs3LteStatsCalculator *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_FindImsiFromLteNetDevice(PyNs3LteStatsCalculator *self, PyObject *args, PyObject *kwargs);
    inline uint64_t FindImsiFromLteNetDevice__parent_caller(std::string path)
    { return ns3::LteStatsCalculator::FindImsiFromLteNetDevice(path); }

    static PyObject * _wrap_FindImsiFromUePhy(PyNs3LteStatsCalculator *self, PyObject *args, PyObject *kwargs);
    inline uint64_t FindImsiFromUePhy__parent_caller(std::string path)
    { return ns3::LteStatsCalculator::FindImsiFromUePhy(path); }

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteStatsCalculator__PythonHelper")
        .SetParent< ns3::LteStatsCalculator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteStatsCalculator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteUeMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeMac;


extern PyTypeObject PyNs3LteUeMac_Type;

class PyNs3LteUeMac__PythonHelper : public ns3::LteUeMac
{
public:
    PyObject *m_pyself;
    PyNs3LteUeMac__PythonHelper(ns3::LteUeMac const & arg0)
        : ns3::LteUeMac(arg0), m_pyself(NULL)
        {}

    PyNs3LteUeMac__PythonHelper()
        : ns3::LteUeMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUeMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteUeMac *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteUeMac *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteUeMac *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteUeMac__PythonHelper")
        .SetParent< ns3::LteUeMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteUeMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteUePhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUePhy;


extern PyTypeObject PyNs3LteUePhy_Type;

class PyNs3LteUePhy__PythonHelper : public ns3::LteUePhy
{
public:
    PyObject *m_pyself;
    PyNs3LteUePhy__PythonHelper(ns3::LteUePhy const & arg0)
        : ns3::LteUePhy(arg0), m_pyself(NULL)
        {}

    PyNs3LteUePhy__PythonHelper()
        : ns3::LteUePhy(), m_pyself(NULL)
        {}

    PyNs3LteUePhy__PythonHelper(ns3::Ptr< ns3::LteSpectrumPhy > dlPhy, ns3::Ptr< ns3::LteSpectrumPhy > ulPhy)
        : ns3::LteUePhy(dlPhy, ulPhy), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUePhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteUePhy *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteUePhy *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual ns3::Ptr< ns3::SpectrumValue > CreateTxPowerSpectralDensity();

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void GenerateCtrlCqiReport(ns3::SpectrumValue const & sinr);

    virtual void GenerateDataCqiReport(ns3::SpectrumValue const & sinr);

    virtual void GenerateMixedCqiReport(ns3::SpectrumValue const & sinr);

    virtual void ReceiveLteControlMessageList(std::list< ns3::Ptr< ns3::LteControlMessage > > arg0);

    virtual void ReceiveLteDlHarqFeedback(ns3::DlInfoListElement_s mes);

    virtual void ReceivePss(uint16_t cellId, ns3::Ptr< ns3::SpectrumValue > p);

    virtual void ReportDataInterference(ns3::SpectrumValue const & interf);

    virtual void ReportInterference(ns3::SpectrumValue const & interf);

    virtual void ReportRsReceivedPower(ns3::SpectrumValue const & power);

    virtual void DoSendLteControlMessage(ns3::Ptr< ns3::LteControlMessage > msg);

    virtual void DoSendMacPdu(ns3::Ptr< ns3::Packet > p);

    virtual void DoSendRachPreamble(uint32_t prachId, uint32_t raRnti);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteUePhy__PythonHelper")
        .SetParent< ns3::LteUePhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteUePhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteUePowerControl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUePowerControl;


extern PyTypeObject PyNs3LteUePowerControl_Type;

class PyNs3LteUePowerControl__PythonHelper : public ns3::LteUePowerControl
{
public:
    PyObject *m_pyself;
    PyNs3LteUePowerControl__PythonHelper(ns3::LteUePowerControl const & arg0)
        : ns3::LteUePowerControl(arg0), m_pyself(NULL)
        {}

    PyNs3LteUePowerControl__PythonHelper()
        : ns3::LteUePowerControl(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUePowerControl__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteUePowerControl *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteUePowerControl *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteUePowerControl__PythonHelper")
        .SetParent< ns3::LteUePowerControl > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteUePowerControl__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteUeRrc *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeRrc;


extern PyTypeObject PyNs3LteUeRrc_Type;

class PyNs3LteUeRrc__PythonHelper : public ns3::LteUeRrc
{
public:
    PyObject *m_pyself;
    PyNs3LteUeRrc__PythonHelper(ns3::LteUeRrc const & arg0)
        : ns3::LteUeRrc(arg0), m_pyself(NULL)
        {}

    PyNs3LteUeRrc__PythonHelper()
        : ns3::LteUeRrc(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUeRrc__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteUeRrc *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteUeRrc *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteUeRrc__PythonHelper")
        .SetParent< ns3::LteUeRrc > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteUeRrc__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteUeRrcProtocolIdeal *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeRrcProtocolIdeal;


extern PyTypeObject PyNs3LteUeRrcProtocolIdeal_Type;

class PyNs3LteUeRrcProtocolIdeal__PythonHelper : public ns3::LteUeRrcProtocolIdeal
{
public:
    PyObject *m_pyself;
    PyNs3LteUeRrcProtocolIdeal__PythonHelper(ns3::LteUeRrcProtocolIdeal const & arg0)
        : ns3::LteUeRrcProtocolIdeal(arg0), m_pyself(NULL)
        {}

    PyNs3LteUeRrcProtocolIdeal__PythonHelper()
        : ns3::LteUeRrcProtocolIdeal(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUeRrcProtocolIdeal__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteUeRrcProtocolIdeal *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteUeRrcProtocolIdeal *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteUeRrcProtocolIdeal *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteUeRrcProtocolIdeal__PythonHelper")
        .SetParent< ns3::LteUeRrcProtocolIdeal > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteUeRrcProtocolIdeal__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteUeRrcProtocolReal *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeRrcProtocolReal;


extern PyTypeObject PyNs3LteUeRrcProtocolReal_Type;

class PyNs3LteUeRrcProtocolReal__PythonHelper : public ns3::LteUeRrcProtocolReal
{
public:
    PyObject *m_pyself;
    PyNs3LteUeRrcProtocolReal__PythonHelper(ns3::LteUeRrcProtocolReal const & arg0)
        : ns3::LteUeRrcProtocolReal(arg0), m_pyself(NULL)
        {}

    PyNs3LteUeRrcProtocolReal__PythonHelper()
        : ns3::LteUeRrcProtocolReal(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUeRrcProtocolReal__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteUeRrcProtocolReal *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteUeRrcProtocolReal *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteUeRrcProtocolReal *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteUeRrcProtocolReal__PythonHelper")
        .SetParent< ns3::LteUeRrcProtocolReal > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteUeRrcProtocolReal__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MacStatsCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacStatsCalculator;


extern PyTypeObject PyNs3MacStatsCalculator_Type;


typedef struct {
    PyObject_HEAD
    ns3::MibLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MibLteControlMessage;


extern PyTypeObject PyNs3MibLteControlMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::NoOpHandoverAlgorithm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NoOpHandoverAlgorithm;


extern PyTypeObject PyNs3NoOpHandoverAlgorithm_Type;


typedef struct {
    PyObject_HEAD
    ns3::PfFfMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PfFfMacScheduler;


extern PyTypeObject PyNs3PfFfMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::PhyRxStatsCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PhyRxStatsCalculator;


extern PyTypeObject PyNs3PhyRxStatsCalculator_Type;


typedef struct {
    PyObject_HEAD
    ns3::PhyStatsCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PhyStatsCalculator;


extern PyTypeObject PyNs3PhyStatsCalculator_Type;


typedef struct {
    PyObject_HEAD
    ns3::PhyTxStatsCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PhyTxStatsCalculator;


extern PyTypeObject PyNs3PhyTxStatsCalculator_Type;


typedef struct {
    PyObject_HEAD
    ns3::PointToPointEpcHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointToPointEpcHelper;


extern PyTypeObject PyNs3PointToPointEpcHelper_Type;

class PyNs3PointToPointEpcHelper__PythonHelper : public ns3::PointToPointEpcHelper
{
public:
    PyObject *m_pyself;
    PyNs3PointToPointEpcHelper__PythonHelper(ns3::PointToPointEpcHelper const & arg0)
        : ns3::PointToPointEpcHelper(arg0), m_pyself(NULL)
        {}

    PyNs3PointToPointEpcHelper__PythonHelper()
        : ns3::PointToPointEpcHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PointToPointEpcHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3PointToPointEpcHelper *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3PointToPointEpcHelper *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3PointToPointEpcHelper *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual uint8_t ActivateEpsBearer(ns3::Ptr< ns3::NetDevice > ueLteDevice, uint64_t imsi, ns3::Ptr< ns3::EpcTft > tft, ns3::EpsBearer bearer);

    virtual void AddEnb(ns3::Ptr< ns3::Node > enbNode, ns3::Ptr< ns3::NetDevice > lteEnbNetDevice, uint16_t cellId);

    virtual void AddUe(ns3::Ptr< ns3::NetDevice > ueLteDevice, uint64_t imsi);

    virtual void AddX2Interface(ns3::Ptr< ns3::Node > enbNode1, ns3::Ptr< ns3::Node > enbNode2);

    virtual ns3::Ipv4InterfaceContainer AssignUeIpv4Address(ns3::NetDeviceContainer ueDevices);

    virtual void DoDispose();

    virtual ns3::Ptr< ns3::Node > GetPgwNode();

    virtual ns3::Ipv4Address GetUeDefaultGatewayAddress();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3PointToPointEpcHelper__PythonHelper")
        .SetParent< ns3::PointToPointEpcHelper > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3PointToPointEpcHelper__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::PssFfMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PssFfMacScheduler;


extern PyTypeObject PyNs3PssFfMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::RachPreambleLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RachPreambleLteControlMessage;


extern PyTypeObject PyNs3RachPreambleLteControlMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::RadioBearerStatsCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RadioBearerStatsCalculator;


extern PyTypeObject PyNs3RadioBearerStatsCalculator_Type;

class PyNs3RadioBearerStatsCalculator__PythonHelper : public ns3::RadioBearerStatsCalculator
{
public:
    PyObject *m_pyself;
    PyNs3RadioBearerStatsCalculator__PythonHelper(ns3::RadioBearerStatsCalculator const & arg0)
        : ns3::RadioBearerStatsCalculator(arg0), m_pyself(NULL)
        {}

    PyNs3RadioBearerStatsCalculator__PythonHelper()
        : ns3::RadioBearerStatsCalculator(), m_pyself(NULL)
        {}

    PyNs3RadioBearerStatsCalculator__PythonHelper(std::string protocolType)
        : ns3::RadioBearerStatsCalculator(protocolType), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RadioBearerStatsCalculator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RadioBearerStatsCalculator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3RadioBearerStatsCalculator *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RadioBearerStatsCalculator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RadioBearerStatsCalculator__PythonHelper")
        .SetParent< ns3::RadioBearerStatsCalculator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RadioBearerStatsCalculator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RarLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RarLteControlMessage;


extern PyTypeObject PyNs3RarLteControlMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::RarLteControlMessage::Rar *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RarLteControlMessageRar;


extern PyTypeObject PyNs3RarLteControlMessageRar_Type;

extern std::map<void*, PyObject*> PyNs3RarLteControlMessageRar_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::RemSpectrumPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RemSpectrumPhy;


extern PyTypeObject PyNs3RemSpectrumPhy_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrFfMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrFfMacScheduler;


extern PyTypeObject PyNs3RrFfMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrcAsn1Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcAsn1Header;


extern PyTypeObject PyNs3RrcAsn1Header_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrcDlCcchMessage *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcDlCcchMessage;


extern PyTypeObject PyNs3RrcDlCcchMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrcDlDcchMessage *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcDlDcchMessage;


extern PyTypeObject PyNs3RrcDlDcchMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrcUlCcchMessage *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcUlCcchMessage;


extern PyTypeObject PyNs3RrcUlCcchMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrcUlDcchMessage *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcUlDcchMessage;


extern PyTypeObject PyNs3RrcUlDcchMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::Sib1LteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Sib1LteControlMessage;


extern PyTypeObject PyNs3Sib1LteControlMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::SrsCqiRntiVsp *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SrsCqiRntiVsp;


extern PyTypeObject PyNs3SrsCqiRntiVsp_Type;


typedef struct {
    PyObject_HEAD
    ns3::TdBetFfMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TdBetFfMacScheduler;


extern PyTypeObject PyNs3TdBetFfMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::TdMtFfMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TdMtFfMacScheduler;


extern PyTypeObject PyNs3TdMtFfMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::TdTbfqFfMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TdTbfqFfMacScheduler;


extern PyTypeObject PyNs3TdTbfqFfMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::TtaFfMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TtaFfMacScheduler;


extern PyTypeObject PyNs3TtaFfMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::UlDciLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlDciLteControlMessage;


extern PyTypeObject PyNs3UlDciLteControlMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::A2A4RsrqHandoverAlgorithm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3A2A4RsrqHandoverAlgorithm;


extern PyTypeObject PyNs3A2A4RsrqHandoverAlgorithm_Type;


typedef struct {
    PyObject_HEAD
    ns3::A3RsrpHandoverAlgorithm *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3A3RsrpHandoverAlgorithm;


extern PyTypeObject PyNs3A3RsrpHandoverAlgorithm_Type;


typedef struct {
    PyObject_HEAD
    ns3::BsrLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BsrLteControlMessage;


extern PyTypeObject PyNs3BsrLteControlMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::CqaFfMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CqaFfMacScheduler;


extern PyTypeObject PyNs3CqaFfMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::DlCqiLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlCqiLteControlMessage;


extern PyTypeObject PyNs3DlCqiLteControlMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::DlDciLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlDciLteControlMessage;


extern PyTypeObject PyNs3DlDciLteControlMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::DlHarqFeedbackLteControlMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlHarqFeedbackLteControlMessage;


extern PyTypeObject PyNs3DlHarqFeedbackLteControlMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::EmuEpcHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmuEpcHelper;


extern PyTypeObject PyNs3EmuEpcHelper_Type;

class PyNs3EmuEpcHelper__PythonHelper : public ns3::EmuEpcHelper
{
public:
    PyObject *m_pyself;
    PyNs3EmuEpcHelper__PythonHelper(ns3::EmuEpcHelper const & arg0)
        : ns3::EmuEpcHelper(arg0), m_pyself(NULL)
        {}

    PyNs3EmuEpcHelper__PythonHelper()
        : ns3::EmuEpcHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EmuEpcHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EmuEpcHelper *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3EmuEpcHelper *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual uint8_t ActivateEpsBearer(ns3::Ptr< ns3::NetDevice > ueLteDevice, uint64_t imsi, ns3::Ptr< ns3::EpcTft > tft, ns3::EpsBearer bearer);

    virtual void AddEnb(ns3::Ptr< ns3::Node > enbNode, ns3::Ptr< ns3::NetDevice > lteEnbNetDevice, uint16_t cellId);

    virtual void AddUe(ns3::Ptr< ns3::NetDevice > ueLteDevice, uint64_t imsi);

    virtual void AddX2Interface(ns3::Ptr< ns3::Node > enbNode1, ns3::Ptr< ns3::Node > enbNode2);

    virtual ns3::Ipv4InterfaceContainer AssignUeIpv4Address(ns3::NetDeviceContainer ueDevices);

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::Ptr< ns3::Node > GetPgwNode();

    virtual ns3::Ipv4Address GetUeDefaultGatewayAddress();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3EmuEpcHelper__PythonHelper")
        .SetParent< ns3::EmuEpcHelper > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3EmuEpcHelper__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::FdBetFfMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FdBetFfMacScheduler;


extern PyTypeObject PyNs3FdBetFfMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::FdMtFfMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FdMtFfMacScheduler;


extern PyTypeObject PyNs3FdMtFfMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::FdTbfqFfMacScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FdTbfqFfMacScheduler;


extern PyTypeObject PyNs3FdTbfqFfMacScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::HandoverPreparationInfoHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3HandoverPreparationInfoHeader;


extern PyTypeObject PyNs3HandoverPreparationInfoHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteDataRadioBearerInfo *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteDataRadioBearerInfo;


extern PyTypeObject PyNs3LteDataRadioBearerInfo_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteEnbPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbPhy;


extern PyTypeObject PyNs3LteEnbPhy_Type;

class PyNs3LteEnbPhy__PythonHelper : public ns3::LteEnbPhy
{
public:
    PyObject *m_pyself;
    PyNs3LteEnbPhy__PythonHelper(ns3::LteEnbPhy const & arg0)
        : ns3::LteEnbPhy(arg0), m_pyself(NULL)
        {}

    PyNs3LteEnbPhy__PythonHelper()
        : ns3::LteEnbPhy(), m_pyself(NULL)
        {}

    PyNs3LteEnbPhy__PythonHelper(ns3::Ptr< ns3::LteSpectrumPhy > dlPhy, ns3::Ptr< ns3::LteSpectrumPhy > ulPhy)
        : ns3::LteEnbPhy(dlPhy, ulPhy), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteEnbPhy *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteEnbPhy *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual ns3::Ptr< ns3::SpectrumValue > CreateTxPowerSpectralDensity();

    virtual ns3::Ptr< ns3::SpectrumValue > CreateTxPowerSpectralDensityWithPowerAllocation();

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void GenerateCtrlCqiReport(ns3::SpectrumValue const & sinr);

    virtual void GenerateDataCqiReport(ns3::SpectrumValue const & sinr);

    virtual void ReceiveLteControlMessage(ns3::Ptr< ns3::LteControlMessage > msg);

    virtual void ReceiveLteControlMessageList(std::list< ns3::Ptr< ns3::LteControlMessage > > arg0);

    virtual void ReceiveLteUlHarqFeedback(ns3::UlInfoListElement_s mes);

    virtual void ReportInterference(ns3::SpectrumValue const & interf);

    virtual void ReportRsReceivedPower(ns3::SpectrumValue const & power);

    virtual void DoSendMacPdu(ns3::Ptr< ns3::Packet > p);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteEnbPhy__PythonHelper")
        .SetParent< ns3::LteEnbPhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteEnbPhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteNetDevice;


extern PyTypeObject PyNs3LteNetDevice_Type;

class PyNs3LteNetDevice__PythonHelper : public ns3::LteNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3LteNetDevice__PythonHelper()
        : ns3::LteNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteNetDevice *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void SetIfIndex(uint32_t const index);

    virtual uint32_t GetIfIndex() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual bool SetMtu(uint16_t const mtu);

    virtual uint16_t GetMtu() const;

    virtual void SetAddress(ns3::Address address);

    virtual ns3::Address GetAddress() const;

    virtual bool IsLinkUp() const;

    virtual bool IsBroadcast() const;

    virtual ns3::Address GetBroadcast() const;

    virtual bool IsMulticast() const;

    virtual bool IsPointToPoint() const;

    virtual bool IsBridge() const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual bool NeedsArp() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address addr) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SupportsSendFrom() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteNetDevice__PythonHelper")
        .SetParent< ns3::LteNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LteUeNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteUeNetDevice;


extern PyTypeObject PyNs3LteUeNetDevice_Type;

class PyNs3LteUeNetDevice__PythonHelper : public ns3::LteUeNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3LteUeNetDevice__PythonHelper()
        : ns3::LteUeNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteUeNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteUeNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteUeNetDevice *self);
    inline void DoInitialize__parent_caller()
    { ns3::LteUeNetDevice::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteUeNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual void DoInitialize();

    virtual ns3::Address GetMulticast(ns3::Ipv4Address addr) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual bool IsPointToPoint() const;

    virtual bool NeedsArp() const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool IsBroadcast() const;

    virtual uint16_t GetMtu() const;

    virtual bool IsBridge() const;

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual ns3::Address GetAddress() const;

    virtual bool IsLinkUp() const;

    virtual void SetIfIndex(uint32_t const index);

    virtual void SetAddress(ns3::Address address);

    virtual ns3::Address GetBroadcast() const;

    virtual uint32_t GetIfIndex() const;

    virtual bool IsMulticast() const;

    virtual bool SetMtu(uint16_t const mtu);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteUeNetDevice__PythonHelper")
        .SetParent< ns3::LteUeNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteUeNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MeasurementReportHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MeasurementReportHeader;


extern PyTypeObject PyNs3MeasurementReportHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionReconfigurationCompleteHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionReconfigurationCompleteHeader;


extern PyTypeObject PyNs3RrcConnectionReconfigurationCompleteHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionReconfigurationHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionReconfigurationHeader;


extern PyTypeObject PyNs3RrcConnectionReconfigurationHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionReestablishmentCompleteHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionReestablishmentCompleteHeader;


extern PyTypeObject PyNs3RrcConnectionReestablishmentCompleteHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionReestablishmentHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionReestablishmentHeader;


extern PyTypeObject PyNs3RrcConnectionReestablishmentHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionReestablishmentRejectHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionReestablishmentRejectHeader;


extern PyTypeObject PyNs3RrcConnectionReestablishmentRejectHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionReestablishmentRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionReestablishmentRequestHeader;


extern PyTypeObject PyNs3RrcConnectionReestablishmentRequestHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionRejectHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionRejectHeader;


extern PyTypeObject PyNs3RrcConnectionRejectHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionReleaseHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionReleaseHeader;


extern PyTypeObject PyNs3RrcConnectionReleaseHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionRequestHeader;


extern PyTypeObject PyNs3RrcConnectionRequestHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionSetupCompleteHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionSetupCompleteHeader;


extern PyTypeObject PyNs3RrcConnectionSetupCompleteHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::RrcConnectionSetupHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RrcConnectionSetupHeader;


extern PyTypeObject PyNs3RrcConnectionSetupHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::LteEnbNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LteEnbNetDevice;


extern PyTypeObject PyNs3LteEnbNetDevice_Type;

class PyNs3LteEnbNetDevice__PythonHelper : public ns3::LteEnbNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3LteEnbNetDevice__PythonHelper()
        : ns3::LteEnbNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LteEnbNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LteEnbNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3LteEnbNetDevice *self);
    inline void DoInitialize__parent_caller()
    { ns3::LteEnbNetDevice::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LteEnbNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual void DoInitialize();

    virtual ns3::Address GetMulticast(ns3::Ipv4Address addr) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual bool IsPointToPoint() const;

    virtual bool NeedsArp() const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool IsBroadcast() const;

    virtual uint16_t GetMtu() const;

    virtual bool IsBridge() const;

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual ns3::Address GetAddress() const;

    virtual bool IsLinkUp() const;

    virtual void SetIfIndex(uint32_t const index);

    virtual void SetAddress(ns3::Address address);

    virtual ns3::Address GetBroadcast() const;

    virtual uint32_t GetIfIndex() const;

    virtual bool IsMulticast() const;

    virtual bool SetMtu(uint16_t const mtu);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LteEnbNetDevice__PythonHelper")
        .SetParent< ns3::LteEnbNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LteEnbNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    std::vector< ns3::CeBitmap_e > *obj;
} Pystd__vector__lt___ns3__CeBitmap_e___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__CeBitmap_e___gt__ *container;
    std::vector< ns3::CeBitmap_e >::iterator *iterator;
} Pystd__vector__lt___ns3__CeBitmap_e___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__CeBitmap_e___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__CeBitmap_e___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__CeBitmap_e___gt__(PyObject *arg, std::vector< ns3::CeBitmap_e > *container);

typedef struct {
    PyObject_HEAD
    std::vector< unsigned char > *obj;
} Pystd__vector__lt___unsigned_char___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___unsigned_char___gt__ *container;
    std::vector< unsigned char >::iterator *iterator;
} Pystd__vector__lt___unsigned_char___gt__Iter;


extern PyTypeObject Pystd__vector__lt___unsigned_char___gt___Type;
extern PyTypeObject Pystd__vector__lt___unsigned_char___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___unsigned_char___gt__(PyObject *arg, std::vector< unsigned char > *container);

typedef struct {
    PyObject_HEAD
    std::vector< unsigned short > *obj;
} Pystd__vector__lt___unsigned_short___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___unsigned_short___gt__ *container;
    std::vector< unsigned short >::iterator *iterator;
} Pystd__vector__lt___unsigned_short___gt__Iter;


extern PyTypeObject Pystd__vector__lt___unsigned_short___gt___Type;
extern PyTypeObject Pystd__vector__lt___unsigned_short___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___unsigned_short___gt__(PyObject *arg, std::vector< unsigned short > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::DlInfoListElement_s::HarqStatus_e > *obj;
} Pystd__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt__ *container;
    std::vector< ns3::DlInfoListElement_s::HarqStatus_e >::iterator *iterator;
} Pystd__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__DlInfoListElement_s__HarqStatus_e___gt__(PyObject *arg, std::vector< ns3::DlInfoListElement_s::HarqStatus_e > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::EpcEnbS1SapProvider::BearerToBeSwitched > *obj;
} Pystd__list__lt___ns3__EpcEnbS1SapProvider__BearerToBeSwitched___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__EpcEnbS1SapProvider__BearerToBeSwitched___gt__ *container;
    std::list< ns3::EpcEnbS1SapProvider::BearerToBeSwitched >::iterator *iterator;
} Pystd__list__lt___ns3__EpcEnbS1SapProvider__BearerToBeSwitched___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__EpcEnbS1SapProvider__BearerToBeSwitched___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__EpcEnbS1SapProvider__BearerToBeSwitched___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__EpcEnbS1SapProvider__BearerToBeSwitched___gt__(PyObject *arg, std::list< ns3::EpcEnbS1SapProvider::BearerToBeSwitched > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::EpcS11SapMme::BearerContextCreated > *obj;
} Pystd__list__lt___ns3__EpcS11SapMme__BearerContextCreated___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__EpcS11SapMme__BearerContextCreated___gt__ *container;
    std::list< ns3::EpcS11SapMme::BearerContextCreated >::iterator *iterator;
} Pystd__list__lt___ns3__EpcS11SapMme__BearerContextCreated___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__EpcS11SapMme__BearerContextCreated___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__EpcS11SapMme__BearerContextCreated___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__EpcS11SapMme__BearerContextCreated___gt__(PyObject *arg, std::list< ns3::EpcS11SapMme::BearerContextCreated > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::EpcS11SapMme::BearerContextRemoved > *obj;
} Pystd__list__lt___ns3__EpcS11SapMme__BearerContextRemoved___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__EpcS11SapMme__BearerContextRemoved___gt__ *container;
    std::list< ns3::EpcS11SapMme::BearerContextRemoved >::iterator *iterator;
} Pystd__list__lt___ns3__EpcS11SapMme__BearerContextRemoved___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__EpcS11SapMme__BearerContextRemoved___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__EpcS11SapMme__BearerContextRemoved___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__EpcS11SapMme__BearerContextRemoved___gt__(PyObject *arg, std::list< ns3::EpcS11SapMme::BearerContextRemoved > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::EpcS11SapSgw::BearerContextToBeCreated > *obj;
} Pystd__list__lt___ns3__EpcS11SapSgw__BearerContextToBeCreated___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__EpcS11SapSgw__BearerContextToBeCreated___gt__ *container;
    std::list< ns3::EpcS11SapSgw::BearerContextToBeCreated >::iterator *iterator;
} Pystd__list__lt___ns3__EpcS11SapSgw__BearerContextToBeCreated___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__EpcS11SapSgw__BearerContextToBeCreated___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__EpcS11SapSgw__BearerContextToBeCreated___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__EpcS11SapSgw__BearerContextToBeCreated___gt__(PyObject *arg, std::list< ns3::EpcS11SapSgw::BearerContextToBeCreated > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::EpcS11SapSgw::BearerContextToBeRemoved > *obj;
} Pystd__list__lt___ns3__EpcS11SapSgw__BearerContextToBeRemoved___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__EpcS11SapSgw__BearerContextToBeRemoved___gt__ *container;
    std::list< ns3::EpcS11SapSgw::BearerContextToBeRemoved >::iterator *iterator;
} Pystd__list__lt___ns3__EpcS11SapSgw__BearerContextToBeRemoved___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__EpcS11SapSgw__BearerContextToBeRemoved___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__EpcS11SapSgw__BearerContextToBeRemoved___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__EpcS11SapSgw__BearerContextToBeRemoved___gt__(PyObject *arg, std::list< ns3::EpcS11SapSgw::BearerContextToBeRemoved > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::EpcS11SapSgw::BearerContextRemovedSgwPgw > *obj;
} Pystd__list__lt___ns3__EpcS11SapSgw__BearerContextRemovedSgwPgw___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__EpcS11SapSgw__BearerContextRemovedSgwPgw___gt__ *container;
    std::list< ns3::EpcS11SapSgw::BearerContextRemovedSgwPgw >::iterator *iterator;
} Pystd__list__lt___ns3__EpcS11SapSgw__BearerContextRemovedSgwPgw___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__EpcS11SapSgw__BearerContextRemovedSgwPgw___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__EpcS11SapSgw__BearerContextRemovedSgwPgw___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__EpcS11SapSgw__BearerContextRemovedSgwPgw___gt__(PyObject *arg, std::list< ns3::EpcS11SapSgw::BearerContextRemovedSgwPgw > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::EpcS1apSapEnb::ErabToBeSetupItem > *obj;
} Pystd__list__lt___ns3__EpcS1apSapEnb__ErabToBeSetupItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__EpcS1apSapEnb__ErabToBeSetupItem___gt__ *container;
    std::list< ns3::EpcS1apSapEnb::ErabToBeSetupItem >::iterator *iterator;
} Pystd__list__lt___ns3__EpcS1apSapEnb__ErabToBeSetupItem___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__EpcS1apSapEnb__ErabToBeSetupItem___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__EpcS1apSapEnb__ErabToBeSetupItem___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__EpcS1apSapEnb__ErabToBeSetupItem___gt__(PyObject *arg, std::list< ns3::EpcS1apSapEnb::ErabToBeSetupItem > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::EpcS1apSapEnb::ErabSwitchedInUplinkItem > *obj;
} Pystd__list__lt___ns3__EpcS1apSapEnb__ErabSwitchedInUplinkItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__EpcS1apSapEnb__ErabSwitchedInUplinkItem___gt__ *container;
    std::list< ns3::EpcS1apSapEnb::ErabSwitchedInUplinkItem >::iterator *iterator;
} Pystd__list__lt___ns3__EpcS1apSapEnb__ErabSwitchedInUplinkItem___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__EpcS1apSapEnb__ErabSwitchedInUplinkItem___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__EpcS1apSapEnb__ErabSwitchedInUplinkItem___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__EpcS1apSapEnb__ErabSwitchedInUplinkItem___gt__(PyObject *arg, std::list< ns3::EpcS1apSapEnb::ErabSwitchedInUplinkItem > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::EpcS1apSapMme::ErabToBeReleasedIndication > *obj;
} Pystd__list__lt___ns3__EpcS1apSapMme__ErabToBeReleasedIndication___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__EpcS1apSapMme__ErabToBeReleasedIndication___gt__ *container;
    std::list< ns3::EpcS1apSapMme::ErabToBeReleasedIndication >::iterator *iterator;
} Pystd__list__lt___ns3__EpcS1apSapMme__ErabToBeReleasedIndication___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__EpcS1apSapMme__ErabToBeReleasedIndication___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__EpcS1apSapMme__ErabToBeReleasedIndication___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__EpcS1apSapMme__ErabToBeReleasedIndication___gt__(PyObject *arg, std::list< ns3::EpcS1apSapMme::ErabToBeReleasedIndication > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::EpcS1apSapMme::ErabSetupItem > *obj;
} Pystd__list__lt___ns3__EpcS1apSapMme__ErabSetupItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__EpcS1apSapMme__ErabSetupItem___gt__ *container;
    std::list< ns3::EpcS1apSapMme::ErabSetupItem >::iterator *iterator;
} Pystd__list__lt___ns3__EpcS1apSapMme__ErabSetupItem___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__EpcS1apSapMme__ErabSetupItem___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__EpcS1apSapMme__ErabSetupItem___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__EpcS1apSapMme__ErabSetupItem___gt__(PyObject *arg, std::list< ns3::EpcS1apSapMme::ErabSetupItem > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::EpcS1apSapMme::ErabSwitchedInDownlinkItem > *obj;
} Pystd__list__lt___ns3__EpcS1apSapMme__ErabSwitchedInDownlinkItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__EpcS1apSapMme__ErabSwitchedInDownlinkItem___gt__ *container;
    std::list< ns3::EpcS1apSapMme::ErabSwitchedInDownlinkItem >::iterator *iterator;
} Pystd__list__lt___ns3__EpcS1apSapMme__ErabSwitchedInDownlinkItem___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__EpcS1apSapMme__ErabSwitchedInDownlinkItem___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__EpcS1apSapMme__ErabSwitchedInDownlinkItem___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__EpcS1apSapMme__ErabSwitchedInDownlinkItem___gt__(PyObject *arg, std::list< ns3::EpcS1apSapMme::ErabSwitchedInDownlinkItem > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::UlInterferenceOverloadIndicationItem > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__UlInterferenceOverloadIndicationItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__UlInterferenceOverloadIndicationItem___gt__ *container;
    std::vector< ns3::EpcX2Sap::UlInterferenceOverloadIndicationItem >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__UlInterferenceOverloadIndicationItem___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__UlInterferenceOverloadIndicationItem___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__UlInterferenceOverloadIndicationItem___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__UlInterferenceOverloadIndicationItem___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::UlInterferenceOverloadIndicationItem > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::UlHighInterferenceInformationItem > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__UlHighInterferenceInformationItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__UlHighInterferenceInformationItem___gt__ *container;
    std::vector< ns3::EpcX2Sap::UlHighInterferenceInformationItem >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__UlHighInterferenceInformationItem___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__UlHighInterferenceInformationItem___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__UlHighInterferenceInformationItem___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__UlHighInterferenceInformationItem___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::UlHighInterferenceInformationItem > *container);

typedef struct {
    PyObject_HEAD
    std::vector< bool > *obj;
} Pystd__vector__lt___bool___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___bool___gt__ *container;
    std::vector< bool >::iterator *iterator;
} Pystd__vector__lt___bool___gt__Iter;


extern PyTypeObject Pystd__vector__lt___bool___gt___Type;
extern PyTypeObject Pystd__vector__lt___bool___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___bool___gt__(PyObject *arg, std::vector< bool > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::ErabToBeSetupItem > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__ErabToBeSetupItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__ErabToBeSetupItem___gt__ *container;
    std::vector< ns3::EpcX2Sap::ErabToBeSetupItem >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__ErabToBeSetupItem___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__ErabToBeSetupItem___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__ErabToBeSetupItem___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__ErabToBeSetupItem___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::ErabToBeSetupItem > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::ErabAdmittedItem > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__ErabAdmittedItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__ErabAdmittedItem___gt__ *container;
    std::vector< ns3::EpcX2Sap::ErabAdmittedItem >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__ErabAdmittedItem___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__ErabAdmittedItem___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__ErabAdmittedItem___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__ErabAdmittedItem___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::ErabAdmittedItem > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::ErabNotAdmittedItem > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__ErabNotAdmittedItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__ErabNotAdmittedItem___gt__ *container;
    std::vector< ns3::EpcX2Sap::ErabNotAdmittedItem >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__ErabNotAdmittedItem___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__ErabNotAdmittedItem___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__ErabNotAdmittedItem___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__ErabNotAdmittedItem___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::ErabNotAdmittedItem > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__ErabsSubjectToStatusTransferItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__ErabsSubjectToStatusTransferItem___gt__ *container;
    std::vector< ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__ErabsSubjectToStatusTransferItem___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__ErabsSubjectToStatusTransferItem___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__ErabsSubjectToStatusTransferItem___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__ErabsSubjectToStatusTransferItem___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::CellInformationItem > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__CellInformationItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__CellInformationItem___gt__ *container;
    std::vector< ns3::EpcX2Sap::CellInformationItem >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__CellInformationItem___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__CellInformationItem___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__CellInformationItem___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__CellInformationItem___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::CellInformationItem > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::EpcX2Sap::CellMeasurementResultItem > *obj;
} Pystd__vector__lt___ns3__EpcX2Sap__CellMeasurementResultItem___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__EpcX2Sap__CellMeasurementResultItem___gt__ *container;
    std::vector< ns3::EpcX2Sap::CellMeasurementResultItem >::iterator *iterator;
} Pystd__vector__lt___ns3__EpcX2Sap__CellMeasurementResultItem___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__CellMeasurementResultItem___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__EpcX2Sap__CellMeasurementResultItem___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__EpcX2Sap__CellMeasurementResultItem___gt__(PyObject *arg, std::vector< ns3::EpcX2Sap::CellMeasurementResultItem > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::VendorSpecificListElement_s > *obj;
} Pystd__vector__lt___ns3__VendorSpecificListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__VendorSpecificListElement_s___gt__ *container;
    std::vector< ns3::VendorSpecificListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__VendorSpecificListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__VendorSpecificListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__VendorSpecificListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__VendorSpecificListElement_s___gt__(PyObject *arg, std::vector< ns3::VendorSpecificListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::LogicalChannelConfigListElement_s > *obj;
} Pystd__vector__lt___ns3__LogicalChannelConfigListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__LogicalChannelConfigListElement_s___gt__ *container;
    std::vector< ns3::LogicalChannelConfigListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__LogicalChannelConfigListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__LogicalChannelConfigListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__LogicalChannelConfigListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__LogicalChannelConfigListElement_s___gt__(PyObject *arg, std::vector< ns3::LogicalChannelConfigListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::PagingInfoListElement_s > *obj;
} Pystd__vector__lt___ns3__PagingInfoListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__PagingInfoListElement_s___gt__ *container;
    std::vector< ns3::PagingInfoListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__PagingInfoListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__PagingInfoListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__PagingInfoListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__PagingInfoListElement_s___gt__(PyObject *arg, std::vector< ns3::PagingInfoListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::DlInfoListElement_s > *obj;
} Pystd__vector__lt___ns3__DlInfoListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__DlInfoListElement_s___gt__ *container;
    std::vector< ns3::DlInfoListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__DlInfoListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__DlInfoListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__DlInfoListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__DlInfoListElement_s___gt__(PyObject *arg, std::vector< ns3::DlInfoListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::RachListElement_s > *obj;
} Pystd__vector__lt___ns3__RachListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__RachListElement_s___gt__ *container;
    std::vector< ns3::RachListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__RachListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__RachListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__RachListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__RachListElement_s___gt__(PyObject *arg, std::vector< ns3::RachListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::CqiListElement_s > *obj;
} Pystd__vector__lt___ns3__CqiListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__CqiListElement_s___gt__ *container;
    std::vector< ns3::CqiListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__CqiListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__CqiListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__CqiListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__CqiListElement_s___gt__(PyObject *arg, std::vector< ns3::CqiListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::UlInfoListElement_s > *obj;
} Pystd__vector__lt___ns3__UlInfoListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__UlInfoListElement_s___gt__ *container;
    std::vector< ns3::UlInfoListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__UlInfoListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__UlInfoListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__UlInfoListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__UlInfoListElement_s___gt__(PyObject *arg, std::vector< ns3::UlInfoListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::SrListElement_s > *obj;
} Pystd__vector__lt___ns3__SrListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__SrListElement_s___gt__ *container;
    std::vector< ns3::SrListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__SrListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__SrListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__SrListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__SrListElement_s___gt__(PyObject *arg, std::vector< ns3::SrListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::MacCeListElement_s > *obj;
} Pystd__vector__lt___ns3__MacCeListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__MacCeListElement_s___gt__ *container;
    std::vector< ns3::MacCeListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__MacCeListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__MacCeListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__MacCeListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__MacCeListElement_s___gt__(PyObject *arg, std::vector< ns3::MacCeListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::BuildDataListElement_s > *obj;
} Pystd__vector__lt___ns3__BuildDataListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__BuildDataListElement_s___gt__ *container;
    std::vector< ns3::BuildDataListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__BuildDataListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__BuildDataListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__BuildDataListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__BuildDataListElement_s___gt__(PyObject *arg, std::vector< ns3::BuildDataListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::BuildRarListElement_s > *obj;
} Pystd__vector__lt___ns3__BuildRarListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__BuildRarListElement_s___gt__ *container;
    std::vector< ns3::BuildRarListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__BuildRarListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__BuildRarListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__BuildRarListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__BuildRarListElement_s___gt__(PyObject *arg, std::vector< ns3::BuildRarListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::BuildBroadcastListElement_s > *obj;
} Pystd__vector__lt___ns3__BuildBroadcastListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__BuildBroadcastListElement_s___gt__ *container;
    std::vector< ns3::BuildBroadcastListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__BuildBroadcastListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__BuildBroadcastListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__BuildBroadcastListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__BuildBroadcastListElement_s___gt__(PyObject *arg, std::vector< ns3::BuildBroadcastListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::UlDciListElement_s > *obj;
} Pystd__vector__lt___ns3__UlDciListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__UlDciListElement_s___gt__ *container;
    std::vector< ns3::UlDciListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__UlDciListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__UlDciListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__UlDciListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__UlDciListElement_s___gt__(PyObject *arg, std::vector< ns3::UlDciListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::PhichListElement_s > *obj;
} Pystd__vector__lt___ns3__PhichListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__PhichListElement_s___gt__ *container;
    std::vector< ns3::PhichListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__PhichListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__PhichListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__PhichListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__PhichListElement_s___gt__(PyObject *arg, std::vector< ns3::PhichListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< int > *obj;
} Pystd__vector__lt___int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___int___gt__ *container;
    std::vector< int >::iterator *iterator;
} Pystd__vector__lt___int___gt__Iter;


extern PyTypeObject Pystd__vector__lt___int___gt___Type;
extern PyTypeObject Pystd__vector__lt___int___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___int___gt__(PyObject *arg, std::vector< int > *container);

typedef struct {
    PyObject_HEAD
    ns3::HarqProcessInfoList_t *obj;
} Pyns3__HarqProcessInfoList_t;


typedef struct {
    PyObject_HEAD
    Pyns3__HarqProcessInfoList_t *container;
    ns3::HarqProcessInfoList_t::iterator *iterator;
} Pyns3__HarqProcessInfoList_tIter;


extern PyTypeObject Pyns3__HarqProcessInfoList_t_Type;
extern PyTypeObject Pyns3__HarqProcessInfoList_tIter_Type;

int _wrap_convert_py2c__ns3__HarqProcessInfoList_t(PyObject *arg, ns3::HarqProcessInfoList_t *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::SrbToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__SrbToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__SrbToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::SrbToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__SrbToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__SrbToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__SrbToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__SrbToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::SrbToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::DrbToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__DrbToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__DrbToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::DrbToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__DrbToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__DrbToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__DrbToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__DrbToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::DrbToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< unsigned char > *obj;
} Pystd__list__lt___unsigned_char___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___unsigned_char___gt__ *container;
    std::list< unsigned char >::iterator *iterator;
} Pystd__list__lt___unsigned_char___gt__Iter;


extern PyTypeObject Pystd__list__lt___unsigned_char___gt___Type;
extern PyTypeObject Pystd__list__lt___unsigned_char___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___unsigned_char___gt__(PyObject *arg, std::list< unsigned char > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::CellsToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__CellsToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__CellsToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::CellsToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__CellsToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__CellsToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__CellsToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__CellsToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::CellsToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::BlackCellsToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::BlackCellsToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__BlackCellsToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::BlackCellsToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::MeasObjectToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::MeasObjectToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__MeasObjectToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::MeasObjectToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::ReportConfigToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::ReportConfigToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__ReportConfigToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::ReportConfigToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::MeasIdToAddMod > *obj;
} Pystd__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt__ *container;
    std::list< ns3::LteRrcSap::MeasIdToAddMod >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__MeasIdToAddMod___gt__(PyObject *arg, std::list< ns3::LteRrcSap::MeasIdToAddMod > *container);

typedef struct {
    PyObject_HEAD
    std::list< unsigned int > *obj;
} Pystd__list__lt___unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___unsigned_int___gt__ *container;
    std::list< unsigned int >::iterator *iterator;
} Pystd__list__lt___unsigned_int___gt__Iter;


extern PyTypeObject Pystd__list__lt___unsigned_int___gt___Type;
extern PyTypeObject Pystd__list__lt___unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___unsigned_int___gt__(PyObject *arg, std::list< unsigned int > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::LteRrcSap::MeasResultEutra > *obj;
} Pystd__list__lt___ns3__LteRrcSap__MeasResultEutra___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__LteRrcSap__MeasResultEutra___gt__ *container;
    std::list< ns3::LteRrcSap::MeasResultEutra >::iterator *iterator;
} Pystd__list__lt___ns3__LteRrcSap__MeasResultEutra___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasResultEutra___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__LteRrcSap__MeasResultEutra___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__LteRrcSap__MeasResultEutra___gt__(PyObject *arg, std::list< ns3::LteRrcSap::MeasResultEutra > *container);

typedef struct {
    PyObject_HEAD
    std::map< int, double > *obj;
} Pystd__map__lt___int__double___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___int__double___gt__ *container;
    std::map< int, double >::iterator *iterator;
} Pystd__map__lt___int__double___gt__Iter;


extern PyTypeObject Pystd__map__lt___int__double___gt___Type;
extern PyTypeObject Pystd__map__lt___int__double___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___int__double___gt__(PyObject *arg, std::map< int, double > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::LteUeCphySapUser::UeMeasurementsElement > *obj;
} Pystd__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt__ *container;
    std::vector< ns3::LteUeCphySapUser::UeMeasurementsElement >::iterator *iterator;
} Pystd__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__LteUeCphySapUser__UeMeasurementsElement___gt__(PyObject *arg, std::vector< ns3::LteUeCphySapUser::UeMeasurementsElement > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::HigherLayerSelected_s > *obj;
} Pystd__vector__lt___ns3__HigherLayerSelected_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__HigherLayerSelected_s___gt__ *container;
    std::vector< ns3::HigherLayerSelected_s >::iterator *iterator;
} Pystd__vector__lt___ns3__HigherLayerSelected_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__HigherLayerSelected_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__HigherLayerSelected_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__HigherLayerSelected_s___gt__(PyObject *arg, std::vector< ns3::HigherLayerSelected_s > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::SiMessageListElement_s > *obj;
} Pystd__vector__lt___ns3__SiMessageListElement_s___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__SiMessageListElement_s___gt__ *container;
    std::vector< ns3::SiMessageListElement_s >::iterator *iterator;
} Pystd__vector__lt___ns3__SiMessageListElement_s___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__SiMessageListElement_s___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__SiMessageListElement_s___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__SiMessageListElement_s___gt__(PyObject *arg, std::vector< ns3::SiMessageListElement_s > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::Ptr< ns3::Packet > > *obj;
} Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__ *container;
    std::list< ns3::Ptr< ns3::Packet > >::iterator *iterator;
} Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__Packet___gt_____gt__(PyObject *arg, std::list< ns3::Ptr< ns3::Packet > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ipv6Address > *obj;
} Pystd__vector__lt___ns3__Ipv6Address___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ipv6Address___gt__ *container;
    std::vector< ns3::Ipv6Address >::iterator *iterator;
} Pystd__vector__lt___ns3__Ipv6Address___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ipv6Address___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ipv6Address___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ipv6Address___gt__(PyObject *arg, std::vector< ns3::Ipv6Address > *container);

typedef struct {
    PyObject_HEAD
    std::vector< double > *obj;
} Pystd__vector__lt___double___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___double___gt__ *container;
    std::vector< double >::iterator *iterator;
} Pystd__vector__lt___double___gt__Iter;


extern PyTypeObject Pystd__vector__lt___double___gt___Type;
extern PyTypeObject Pystd__vector__lt___double___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___double___gt__(PyObject *arg, std::vector< double > *container);

typedef struct {
    PyObject_HEAD
    ns3::Bands *obj;
} Pyns3__Bands;


typedef struct {
    PyObject_HEAD
    Pyns3__Bands *container;
    ns3::Bands::iterator *iterator;
} Pyns3__BandsIter;


extern PyTypeObject Pyns3__Bands_Type;
extern PyTypeObject Pyns3__BandsIter_Type;

int _wrap_convert_py2c__ns3__Bands(PyObject *arg, ns3::Bands *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned int, unsigned int > *obj;
} Pystd__map__lt___unsigned_int__unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_int__unsigned_int___gt__ *container;
    std::map< unsigned int, unsigned int >::iterator *iterator;
} Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_int__unsigned_int___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_int__unsigned_int___gt__(PyObject *arg, std::map< unsigned int, unsigned int > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::Ptr< ns3::LteControlMessage > > *obj;
} Pystd__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt__ *container;
    std::list< ns3::Ptr< ns3::LteControlMessage > >::iterator *iterator;
} Pystd__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__Ptr__lt___ns3__LteControlMessage___gt_____gt__(PyObject *arg, std::list< ns3::Ptr< ns3::LteControlMessage > > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::UlDciLteControlMessage > *obj;
} Pystd__list__lt___ns3__UlDciLteControlMessage___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__UlDciLteControlMessage___gt__ *container;
    std::list< ns3::UlDciLteControlMessage >::iterator *iterator;
} Pystd__list__lt___ns3__UlDciLteControlMessage___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__UlDciLteControlMessage___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__UlDciLteControlMessage___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__UlDciLteControlMessage___gt__(PyObject *arg, std::list< ns3::UlDciLteControlMessage > *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Config::MatchContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConfigMatchContainer;


extern PyTypeObject *_PyNs3ConfigMatchContainer_Type;
#define PyNs3ConfigMatchContainer_Type (*_PyNs3ConfigMatchContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3ConfigMatchContainer_wrapper_registry;
#define PyNs3ConfigMatchContainer_wrapper_registry (*_PyNs3ConfigMatchContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ptr< ns3::Object > > *obj;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__ *container;
    std::vector< ns3::Ptr< ns3::Object > >::iterator *iterator;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::Object > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< std::string > *obj;
} Pystd__vector__lt___std__string___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___std__string___gt__ *container;
    std::vector< std::string >::iterator *iterator;
} Pystd__vector__lt___std__string___gt__Iter;


extern PyTypeObject Pystd__vector__lt___std__string___gt___Type;
extern PyTypeObject Pystd__vector__lt___std__string___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___std__string___gt__(PyObject *arg, std::vector< std::string > *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Implementation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashImplementation;


extern PyTypeObject *_PyNs3HashImplementation_Type;
#define PyNs3HashImplementation_Type (*_PyNs3HashImplementation_Type)

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Fnv1a *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionFnv1a;


extern PyTypeObject *_PyNs3HashFunctionFnv1a_Type;
#define PyNs3HashFunctionFnv1a_Type (*_PyNs3HashFunctionFnv1a_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash32 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash32;


extern PyTypeObject *_PyNs3HashFunctionHash32_Type;
#define PyNs3HashFunctionHash32_Type (*_PyNs3HashFunctionHash32_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash64 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash64;


extern PyTypeObject *_PyNs3HashFunctionHash64_Type;
#define PyNs3HashFunctionHash64_Type (*_PyNs3HashFunctionHash64_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Murmur3 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionMurmur3;


extern PyTypeObject *_PyNs3HashFunctionMurmur3_Type;
#define PyNs3HashFunctionMurmur3_Type (*_PyNs3HashFunctionMurmur3_Type)


class PythonCallbackImpl0 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl0(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl0()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl0 *other = dynamic_cast<const PythonCallbackImpl0*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(N)", py_Packet);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl1 : public ns3::CallbackImpl<void, unsigned short, ns3::Ptr<ns3::SpectrumValue>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl1(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl1()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl1 *other = dynamic_cast<const PythonCallbackImpl1*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned short arg1, ns3::Ptr< ns3::SpectrumValue > arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3SpectrumValue *py_SpectrumValue;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::SpectrumValue *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_SpectrumValue = NULL;
        } else {
            py_SpectrumValue = (PyNs3SpectrumValue *) wrapper_lookup_iter->second;
            Py_INCREF(py_SpectrumValue);
        }

        if (py_SpectrumValue == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::SpectrumValue *> (ns3::PeekPointer (arg2))), &PyNs3SpectrumValue_Type);
            py_SpectrumValue = PyObject_New(PyNs3SpectrumValue, wrapper_type);

            py_SpectrumValue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::SpectrumValue *> (ns3::PeekPointer (arg2))->Ref();
            py_SpectrumValue->obj = const_cast<ns3::SpectrumValue *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_SpectrumValue->obj] = (PyObject *) py_SpectrumValue;
        }
        args = Py_BuildValue((char *) "(iN)", (int) arg1, py_SpectrumValue);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl2 : public ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl2(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl2()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl2 *other = dynamic_cast<const PythonCallbackImpl2*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()()
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "()");
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl3 : public ns3::CallbackImpl<void, ns3::UlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl3(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl3()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl3 *other = dynamic_cast<const PythonCallbackImpl3*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::UlInfoListElement_s arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3UlInfoListElement_s *py_UlInfoListElement_s;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_UlInfoListElement_s = PyObject_New(PyNs3UlInfoListElement_s, &PyNs3UlInfoListElement_s_Type);
        py_UlInfoListElement_s->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_UlInfoListElement_s->obj = new ns3::UlInfoListElement_s(arg1);
        PyNs3UlInfoListElement_s_wrapper_registry[(void *) py_UlInfoListElement_s->obj] = (PyObject *) py_UlInfoListElement_s;
        args = Py_BuildValue((char *) "(N)", py_UlInfoListElement_s);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl4 : public ns3::CallbackImpl<void, ns3::DlInfoListElement_s, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl4(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl4()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl4 *other = dynamic_cast<const PythonCallbackImpl4*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::DlInfoListElement_s arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3DlInfoListElement_s *py_DlInfoListElement_s;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_DlInfoListElement_s = PyObject_New(PyNs3DlInfoListElement_s, &PyNs3DlInfoListElement_s_Type);
        py_DlInfoListElement_s->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_DlInfoListElement_s->obj = new ns3::DlInfoListElement_s(arg1);
        PyNs3DlInfoListElement_s_wrapper_registry[(void *) py_DlInfoListElement_s->obj] = (PyObject *) py_DlInfoListElement_s;
        args = Py_BuildValue((char *) "(N)", py_DlInfoListElement_s);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl6 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl6(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl6()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl6 *other = dynamic_cast<const PythonCallbackImpl6*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
        {
            py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_NetDevice);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_NetDevice = NULL;
            } else {
                py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
                Py_INCREF(py_NetDevice);
            }

            if (py_NetDevice == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
                py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
                py_NetDevice->inst_dict = NULL;

                py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
                py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
            }
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl7 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl7(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl7()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl7 *other = dynamic_cast<const PythonCallbackImpl7*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
        {
            py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_NetDevice);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_NetDevice = NULL;
            } else {
                py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
                Py_INCREF(py_NetDevice);
            }

            if (py_NetDevice == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
                py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
                py_NetDevice->inst_dict = NULL;

                py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
                py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
            }
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NNiN)", py_NetDevice, py_Packet, (int) arg3, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl8 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::Packet>, ns3::Address const&, ns3::Address const&, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl8(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl8()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl8 *other = dynamic_cast<const PythonCallbackImpl8*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::Packet > arg1, ns3::Address const & arg2, ns3::Address const & arg3, unsigned short arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg2);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg3);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNNi)", py_Packet, py_Address, py_Address2, (int) arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl9 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl9(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl9()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl9 *other = dynamic_cast<const PythonCallbackImpl9*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3NetDevice__PythonHelper).name())
        {
            py_NetDevice = (PyNs3NetDevice*) (((PyNs3NetDevice__PythonHelper*) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_NetDevice);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_NetDevice = NULL;
            } else {
                py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
                Py_INCREF(py_NetDevice);
            }

            if (py_NetDevice == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
                py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
                py_NetDevice->inst_dict = NULL;

                py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
                py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
            }
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl10 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl10(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl10()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl10 *other = dynamic_cast<const PythonCallbackImpl10*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        args = Py_BuildValue((char *) "(N)", py_Socket);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl11 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl11(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl11()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl11 *other = dynamic_cast<const PythonCallbackImpl11*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1, unsigned int arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        args = Py_BuildValue((char *) "(NN)", py_Socket, PyLong_FromUnsignedLong(arg2));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl12 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl12(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl12()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl12 *other = dynamic_cast<const PythonCallbackImpl12*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1, ns3::Address const & arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Address *py_Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg2);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NN)", py_Socket, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl13 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl13(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl13()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl13 *other = dynamic_cast<const PythonCallbackImpl13*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::Socket > arg1, ns3::Address const & arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        if (typeid(*(const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))).name() == typeid(PyNs3Socket__PythonHelper).name())
        {
            py_Socket = (PyNs3Socket*) (((PyNs3Socket__PythonHelper*) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)))->m_pyself);
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            Py_INCREF(py_Socket);
        } else {
            wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
            if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
                py_Socket = NULL;
            } else {
                py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
                Py_INCREF(py_Socket);
            }

            if (py_Socket == NULL)
            {
                wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
                py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
                py_Socket->inst_dict = NULL;

                py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
                const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
                py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
                PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
            }
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg2);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NN)", py_Socket, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl14 : public ns3::CallbackImpl<unsigned char, ns3::Ptr<ns3::QueueItem>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl14(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl14()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl14 *other = dynamic_cast<const PythonCallbackImpl14*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    unsigned char
    operator()(ns3::Ptr< ns3::QueueItem > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        unsigned char retval;
        PyNs3QueueItem *py_QueueItem;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;
        int tmp;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::QueueItem *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_QueueItem = NULL;
        } else {
            py_QueueItem = (PyNs3QueueItem *) wrapper_lookup_iter->second;
            Py_INCREF(py_QueueItem);
        }

        if (py_QueueItem == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::QueueItem *> (ns3::PeekPointer (arg1))), &PyNs3QueueItem_Type);
            py_QueueItem = PyObject_New(PyNs3QueueItem, wrapper_type);

            py_QueueItem->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::QueueItem *> (ns3::PeekPointer (arg1))->Ref();
            py_QueueItem->obj = const_cast<ns3::QueueItem *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_QueueItem->obj] = (PyObject *) py_QueueItem;
        }
        args = Py_BuildValue((char *) "(N)", py_QueueItem);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return 0;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return 0;
        }
        if (tmp > 0xff) {
            PyErr_SetString(PyExc_ValueError, "Out of range");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return 0;
        }
        retval = tmp;
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__Object___gt__(PyObject *value, ns3::Ptr< ns3::Object > *address);


int _wrap_convert_py2c__std__string(PyObject *value, std::string *address);


PyObject* _wrap_convert_c2py__ns3__SequenceNumber10(ns3::SequenceNumber10 *cvalue);


int _wrap_convert_py2c__ns3__SequenceNumber10(PyObject *value, ns3::SequenceNumber10 *address);


int _wrap_convert_py2c__uint16_t(PyObject *value, uint16_t *address);


int _wrap_convert_py2c__ns3__CeBitmap_e(PyObject *value, ns3::CeBitmap_e *address);


int _wrap_convert_py2c__unsigned_char(PyObject *value, unsigned char *address);


int _wrap_convert_py2c__short_unsigned_int(PyObject *value, short unsigned int *address);


int _wrap_convert_py2c__ns3__DlInfoListElement_s__HarqStatus_e(PyObject *value, ns3::DlInfoListElement_s::HarqStatus_e *address);


int _wrap_convert_py2c__ns3__EpcEnbS1SapProvider__BearerToBeSwitched(PyObject *value, ns3::EpcEnbS1SapProvider::BearerToBeSwitched *address);


int _wrap_convert_py2c__ns3__EpcS11SapMme__BearerContextCreated(PyObject *value, ns3::EpcS11SapMme::BearerContextCreated *address);


int _wrap_convert_py2c__ns3__EpcS11SapMme__BearerContextRemoved(PyObject *value, ns3::EpcS11SapMme::BearerContextRemoved *address);


int _wrap_convert_py2c__ns3__EpcS11SapSgw__BearerContextToBeCreated(PyObject *value, ns3::EpcS11SapSgw::BearerContextToBeCreated *address);


int _wrap_convert_py2c__ns3__EpcS11SapSgw__BearerContextToBeRemoved(PyObject *value, ns3::EpcS11SapSgw::BearerContextToBeRemoved *address);


int _wrap_convert_py2c__ns3__EpcS11SapSgw__BearerContextRemovedSgwPgw(PyObject *value, ns3::EpcS11SapSgw::BearerContextRemovedSgwPgw *address);


int _wrap_convert_py2c__ns3__EpcS1apSapEnb__ErabToBeSetupItem(PyObject *value, ns3::EpcS1apSapEnb::ErabToBeSetupItem *address);


int _wrap_convert_py2c__ns3__EpcS1apSapEnb__ErabSwitchedInUplinkItem(PyObject *value, ns3::EpcS1apSapEnb::ErabSwitchedInUplinkItem *address);


int _wrap_convert_py2c__ns3__EpcS1apSapMme__ErabToBeReleasedIndication(PyObject *value, ns3::EpcS1apSapMme::ErabToBeReleasedIndication *address);


int _wrap_convert_py2c__ns3__EpcS1apSapMme__ErabSetupItem(PyObject *value, ns3::EpcS1apSapMme::ErabSetupItem *address);


int _wrap_convert_py2c__ns3__EpcS1apSapMme__ErabSwitchedInDownlinkItem(PyObject *value, ns3::EpcS1apSapMme::ErabSwitchedInDownlinkItem *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__UlInterferenceOverloadIndicationItem(PyObject *value, ns3::EpcX2Sap::UlInterferenceOverloadIndicationItem *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__UlHighInterferenceInformationItem(PyObject *value, ns3::EpcX2Sap::UlHighInterferenceInformationItem *address);


int _wrap_convert_py2c__bool(PyObject *value, bool *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__ErabToBeSetupItem(PyObject *value, ns3::EpcX2Sap::ErabToBeSetupItem *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__ErabAdmittedItem(PyObject *value, ns3::EpcX2Sap::ErabAdmittedItem *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__ErabNotAdmittedItem(PyObject *value, ns3::EpcX2Sap::ErabNotAdmittedItem *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__ErabsSubjectToStatusTransferItem(PyObject *value, ns3::EpcX2Sap::ErabsSubjectToStatusTransferItem *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__CellInformationItem(PyObject *value, ns3::EpcX2Sap::CellInformationItem *address);


int _wrap_convert_py2c__ns3__EpcX2Sap__CellMeasurementResultItem(PyObject *value, ns3::EpcX2Sap::CellMeasurementResultItem *address);


int _wrap_convert_py2c__ns3__VendorSpecificListElement_s(PyObject *value, ns3::VendorSpecificListElement_s *address);


int _wrap_convert_py2c__ns3__LogicalChannelConfigListElement_s(PyObject *value, ns3::LogicalChannelConfigListElement_s *address);


int _wrap_convert_py2c__ns3__PagingInfoListElement_s(PyObject *value, ns3::PagingInfoListElement_s *address);


int _wrap_convert_py2c__ns3__DlInfoListElement_s(PyObject *value, ns3::DlInfoListElement_s *address);


int _wrap_convert_py2c__ns3__RachListElement_s(PyObject *value, ns3::RachListElement_s *address);


int _wrap_convert_py2c__ns3__CqiListElement_s(PyObject *value, ns3::CqiListElement_s *address);


int _wrap_convert_py2c__ns3__UlInfoListElement_s(PyObject *value, ns3::UlInfoListElement_s *address);


int _wrap_convert_py2c__ns3__SrListElement_s(PyObject *value, ns3::SrListElement_s *address);


int _wrap_convert_py2c__ns3__MacCeListElement_s(PyObject *value, ns3::MacCeListElement_s *address);


int _wrap_convert_py2c__ns3__BuildDataListElement_s(PyObject *value, ns3::BuildDataListElement_s *address);


int _wrap_convert_py2c__ns3__BuildRarListElement_s(PyObject *value, ns3::BuildRarListElement_s *address);


int _wrap_convert_py2c__ns3__BuildBroadcastListElement_s(PyObject *value, ns3::BuildBroadcastListElement_s *address);


int _wrap_convert_py2c__ns3__UlDciListElement_s(PyObject *value, ns3::UlDciListElement_s *address);


int _wrap_convert_py2c__ns3__PhichListElement_s(PyObject *value, ns3::PhichListElement_s *address);


int _wrap_convert_py2c__int(PyObject *value, int *address);


int _wrap_convert_py2c__ns3__HarqProcessInfoElement_t(PyObject *value, ns3::HarqProcessInfoElement_t *address);


int _wrap_convert_py2c__ns3__LteRrcSap__SrbToAddMod(PyObject *value, ns3::LteRrcSap::SrbToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__DrbToAddMod(PyObject *value, ns3::LteRrcSap::DrbToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__CellsToAddMod(PyObject *value, ns3::LteRrcSap::CellsToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__BlackCellsToAddMod(PyObject *value, ns3::LteRrcSap::BlackCellsToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__MeasObjectToAddMod(PyObject *value, ns3::LteRrcSap::MeasObjectToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__ReportConfigToAddMod(PyObject *value, ns3::LteRrcSap::ReportConfigToAddMod *address);


int _wrap_convert_py2c__ns3__LteRrcSap__MeasIdToAddMod(PyObject *value, ns3::LteRrcSap::MeasIdToAddMod *address);


int _wrap_convert_py2c__unsigned_int(PyObject *value, unsigned int *address);


int _wrap_convert_py2c__ns3__LteRrcSap__MeasResultEutra(PyObject *value, ns3::LteRrcSap::MeasResultEutra *address);


int _wrap_convert_py2c__double(PyObject *value, double *address);


int _wrap_convert_py2c__ns3__LteUeCphySapUser__UeMeasurementsElement(PyObject *value, ns3::LteUeCphySapUser::UeMeasurementsElement *address);


int _wrap_convert_py2c__ns3__HigherLayerSelected_s(PyObject *value, ns3::HigherLayerSelected_s *address);


int _wrap_convert_py2c__ns3__SiMessageListElement_s(PyObject *value, ns3::SiMessageListElement_s *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__Packet___gt__(PyObject *value, ns3::Ptr< ns3::Packet > *address);


int _wrap_convert_py2c__ns3__Ipv6Address(PyObject *value, ns3::Ipv6Address *address);


int _wrap_convert_py2c__ns3__BandInfo(PyObject *value, ns3::BandInfo *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__LteControlMessage___gt__(PyObject *value, ns3::Ptr< ns3::LteControlMessage > *address);


int _wrap_convert_py2c__ns3__UlDciLteControlMessage(PyObject *value, ns3::UlDciLteControlMessage *address);

