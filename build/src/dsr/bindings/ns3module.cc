#include "ns3module.h"
static PyMethodDef dsr_FatalImpl_functions[] = {
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef dsr_FatalImpl_moduledef = {
    PyModuleDef_HEAD_INIT,
    "dsr.FatalImpl",
    NULL,
    -1,
    dsr_FatalImpl_functions,
};
#endif

static PyObject *
initdsr_FatalImpl(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&dsr_FatalImpl_moduledef);
    #else
    m = Py_InitModule3((char *) "dsr.FatalImpl", dsr_FatalImpl_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    return m;
}
static PyMethodDef dsr_Hash_Function_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyNs3HashFunctionFnv1a_Type;


PyTypeObject *_PyNs3HashFunctionHash32_Type;


PyTypeObject *_PyNs3HashFunctionHash64_Type;


PyTypeObject *_PyNs3HashFunctionMurmur3_Type;

#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef dsr_Hash_Function_moduledef = {
    PyModuleDef_HEAD_INIT,
    "dsr.Hash.Function",
    NULL,
    -1,
    dsr_Hash_Function_functions,
};
#endif

static PyObject *
initdsr_Hash_Function(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&dsr_Hash_Function_moduledef);
    #else
    m = Py_InitModule3((char *) "dsr.Hash.Function", dsr_Hash_Function_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    /* Import the 'ns3::Hash::Function::Fnv1a' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionFnv1a_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Fnv1a");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Hash::Function::Hash32' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionHash32_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Hash32");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Hash::Function::Hash64' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionHash64_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Hash64");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Hash::Function::Murmur3' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionMurmur3_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Murmur3");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    return m;
}
static PyMethodDef dsr_Hash_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyNs3HashImplementation_Type;

#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef dsr_Hash_moduledef = {
    PyModuleDef_HEAD_INIT,
    "dsr.Hash",
    NULL,
    -1,
    dsr_Hash_functions,
};
#endif

static PyObject *
initdsr_Hash(void)
{
    PyObject *m;
    PyObject *submodule;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&dsr_Hash_moduledef);
    #else
    m = Py_InitModule3((char *) "dsr.Hash", dsr_Hash_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    /* Import the 'ns3::Hash::Implementation' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashImplementation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Implementation");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    submodule = initdsr_Hash_Function();
    if (submodule == NULL) {
        return NULL;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "Function", submodule);
    return m;
}
static PyMethodDef dsr_TracedValueCallback_functions[] = {
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef dsr_TracedValueCallback_moduledef = {
    PyModuleDef_HEAD_INIT,
    "dsr.TracedValueCallback",
    NULL,
    -1,
    dsr_TracedValueCallback_functions,
};
#endif

static PyObject *
initdsr_TracedValueCallback(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&dsr_TracedValueCallback_moduledef);
    #else
    m = Py_InitModule3((char *) "dsr.TracedValueCallback", dsr_TracedValueCallback_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    return m;
}
static PyMethodDef dsr_dsr_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


std::map<void*, PyObject*> PyNs3DsrBlackList_wrapper_registry;
static PyObject* _wrap_PyNs3DsrBlackList__get_m_expireTime(PyNs3DsrBlackList *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(self->obj->m_expireTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}
static int _wrap_PyNs3DsrBlackList__set_m_expireTime(PyNs3DsrBlackList *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_expireTime = *tmp_Time->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrBlackList__get_m_linkStates(PyNs3DsrBlackList *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->m_linkStates);
    return py_retval;
}
static int _wrap_PyNs3DsrBlackList__set_m_linkStates(PyNs3DsrBlackList *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->m_linkStates)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrBlackList__get_m_neighborAddress(PyNs3DsrBlackList *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->m_neighborAddress);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3DsrBlackList__set_m_neighborAddress(PyNs3DsrBlackList *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_neighborAddress = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3DsrBlackList__getsets[] = {
    {
        (char*) "m_linkStates", /* attribute name */
        (getter) _wrap_PyNs3DsrBlackList__get_m_linkStates, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrBlackList__set_m_linkStates, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_expireTime", /* attribute name */
        (getter) _wrap_PyNs3DsrBlackList__get_m_expireTime, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrBlackList__set_m_expireTime, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_neighborAddress", /* attribute name */
        (getter) _wrap_PyNs3DsrBlackList__get_m_neighborAddress, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrBlackList__set_m_neighborAddress, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3DsrBlackList__tp_init__0(PyNs3DsrBlackList *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrBlackList *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrBlackList_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::BlackList(*((PyNs3DsrBlackList *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrBlackList__tp_init__1(PyNs3DsrBlackList *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Ipv4Address *ip;
    PyNs3Time *t;
    const char *keywords[] = {"ip", "t", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &ip, &PyNs3Time_Type, &t)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::BlackList(*((PyNs3Ipv4Address *) ip)->obj, *((PyNs3Time *) t)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrBlackList__tp_init(PyNs3DsrBlackList *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrBlackList__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrBlackList__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3DsrBlackList__copy__(PyNs3DsrBlackList *self)
{

    PyNs3DsrBlackList *py_copy;
    py_copy = PyObject_New(PyNs3DsrBlackList, &PyNs3DsrBlackList_Type);
    py_copy->obj = new ns3::dsr::BlackList(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrBlackList_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrBlackList_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrBlackList__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrBlackList__tp_dealloc(PyNs3DsrBlackList *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrBlackList_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrBlackList_wrapper_registry.end()) {
        PyNs3DsrBlackList_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::BlackList *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrBlackList__tp_richcompare (PyNs3DsrBlackList *PYBINDGEN_UNUSED(self), PyNs3DsrBlackList *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrBlackList_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrBlackList_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.BlackList",            /* tp_name */
    sizeof(PyNs3DsrBlackList),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrBlackList__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "BlackList(ip, t)\nBlackList(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrBlackList__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrBlackList_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3DsrBlackList__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrBlackList__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrDsrErrorBuffEntry_wrapper_registry;


static int
_wrap_PyNs3DsrDsrErrorBuffEntry__tp_init__0(PyNs3DsrDsrErrorBuffEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrErrorBuffEntry *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrErrorBuffEntry_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrErrorBuffEntry(*((PyNs3DsrDsrErrorBuffEntry *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrErrorBuffEntry__tp_init__1(PyNs3DsrDsrErrorBuffEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Packet *pa = NULL;
    ns3::Packet *pa_ptr;
    PyNs3Ipv4Address *d = NULL;
    PyNs3Ipv4Address *s = NULL;
    PyNs3Ipv4Address *n = NULL;
    PyNs3Time *exp = NULL;
    int p = 0;
    const char *keywords[] = {"pa", "d", "s", "n", "exp", "p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O!O!O!O!O!i", (char **) keywords, &PyNs3Packet_Type, &pa, &PyNs3Ipv4Address_Type, &d, &PyNs3Ipv4Address_Type, &s, &PyNs3Ipv4Address_Type, &n, &PyNs3Time_Type, &exp, &p)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    pa_ptr = (pa ? pa->obj : NULL);
    if (p > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrErrorBuffEntry(ns3::Ptr< ns3::Packet  > (pa_ptr), (d ? (*((PyNs3Ipv4Address *) d)->obj) : ns3::Ipv4Address()), (s ? (*((PyNs3Ipv4Address *) s)->obj) : ns3::Ipv4Address()), (n ? (*((PyNs3Ipv4Address *) n)->obj) : ns3::Ipv4Address()), (exp ? (*((PyNs3Time *) exp)->obj) : ns3::Simulator::Now( )), p);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrErrorBuffEntry__tp_init(PyNs3DsrDsrErrorBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrErrorBuffEntry__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrErrorBuffEntry__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffEntry_SetPacket(PyNs3DsrDsrErrorBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *p;
    ns3::Packet *p_ptr;
    const char *keywords[] = {"p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &p)) {
        return NULL;
    }
    p_ptr = (p ? p->obj : NULL);
    self->obj->SetPacket(ns3::Ptr< ns3::Packet  > (p_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffEntry_SetNextHop(PyNs3DsrDsrErrorBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *n;
    const char *keywords[] = {"n", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &n)) {
        return NULL;
    }
    self->obj->SetNextHop(*((PyNs3Ipv4Address *) n)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffEntry_SetProtocol(PyNs3DsrDsrErrorBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int p;
    const char *keywords[] = {"p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &p)) {
        return NULL;
    }
    if (p > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetProtocol(p);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffEntry_SetDestination(PyNs3DsrDsrErrorBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *d;
    const char *keywords[] = {"d", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &d)) {
        return NULL;
    }
    self->obj->SetDestination(*((PyNs3Ipv4Address *) d)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffEntry_GetNextHop(PyNs3DsrDsrErrorBuffEntry *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetNextHop();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffEntry_GetProtocol(PyNs3DsrDsrErrorBuffEntry *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetProtocol();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffEntry_GetPacket(PyNs3DsrDsrErrorBuffEntry *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet const > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPacket();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffEntry_SetExpireTime(PyNs3DsrDsrErrorBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *exp;
    const char *keywords[] = {"exp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &exp)) {
        return NULL;
    }
    self->obj->SetExpireTime(*((PyNs3Time *) exp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffEntry_GetSource(PyNs3DsrDsrErrorBuffEntry *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetSource();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffEntry_GetExpireTime(PyNs3DsrDsrErrorBuffEntry *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetExpireTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffEntry_GetDestination(PyNs3DsrDsrErrorBuffEntry *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetDestination();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffEntry_SetSource(PyNs3DsrDsrErrorBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *s;
    const char *keywords[] = {"s", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &s)) {
        return NULL;
    }
    self->obj->SetSource(*((PyNs3Ipv4Address *) s)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrErrorBuffEntry__copy__(PyNs3DsrDsrErrorBuffEntry *self)
{

    PyNs3DsrDsrErrorBuffEntry *py_copy;
    py_copy = PyObject_New(PyNs3DsrDsrErrorBuffEntry, &PyNs3DsrDsrErrorBuffEntry_Type);
    py_copy->obj = new ns3::dsr::DsrErrorBuffEntry(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrDsrErrorBuffEntry_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrErrorBuffEntry_methods[] = {
    {(char *) "SetPacket", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffEntry_SetPacket, METH_KEYWORDS|METH_VARARGS, "SetPacket(p)\n\ntype: p: ns3::Ptr< ns3::Packet const >" },
    {(char *) "SetNextHop", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffEntry_SetNextHop, METH_KEYWORDS|METH_VARARGS, "SetNextHop(n)\n\ntype: n: ns3::Ipv4Address" },
    {(char *) "SetProtocol", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffEntry_SetProtocol, METH_KEYWORDS|METH_VARARGS, "SetProtocol(p)\n\ntype: p: uint8_t" },
    {(char *) "SetDestination", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffEntry_SetDestination, METH_KEYWORDS|METH_VARARGS, "SetDestination(d)\n\ntype: d: ns3::Ipv4Address" },
    {(char *) "GetNextHop", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffEntry_GetNextHop, METH_NOARGS, "GetNextHop()\n\n" },
    {(char *) "GetProtocol", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffEntry_GetProtocol, METH_NOARGS, "GetProtocol()\n\n" },
    {(char *) "GetPacket", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffEntry_GetPacket, METH_NOARGS, "GetPacket()\n\n" },
    {(char *) "SetExpireTime", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffEntry_SetExpireTime, METH_KEYWORDS|METH_VARARGS, "SetExpireTime(exp)\n\ntype: exp: ns3::Time" },
    {(char *) "GetSource", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffEntry_GetSource, METH_NOARGS, "GetSource()\n\n" },
    {(char *) "GetExpireTime", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffEntry_GetExpireTime, METH_NOARGS, "GetExpireTime()\n\n" },
    {(char *) "GetDestination", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffEntry_GetDestination, METH_NOARGS, "GetDestination()\n\n" },
    {(char *) "SetSource", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffEntry_SetSource, METH_KEYWORDS|METH_VARARGS, "SetSource(s)\n\ntype: s: ns3::Ipv4Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffEntry__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrDsrErrorBuffEntry__tp_dealloc(PyNs3DsrDsrErrorBuffEntry *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrDsrErrorBuffEntry_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrDsrErrorBuffEntry_wrapper_registry.end()) {
        PyNs3DsrDsrErrorBuffEntry_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::DsrErrorBuffEntry *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrErrorBuffEntry__tp_richcompare (PyNs3DsrDsrErrorBuffEntry *PYBINDGEN_UNUSED(self), PyNs3DsrDsrErrorBuffEntry *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrErrorBuffEntry_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrErrorBuffEntry_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrErrorBuffEntry",            /* tp_name */
    sizeof(PyNs3DsrDsrErrorBuffEntry),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrErrorBuffEntry__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsrErrorBuffEntry(pa, d, s, n, exp, p)\nDsrErrorBuffEntry(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrErrorBuffEntry__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrErrorBuffEntry_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrErrorBuffEntry__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrDsrErrorBuffer_wrapper_registry;


static int
_wrap_PyNs3DsrDsrErrorBuffer__tp_init__0(PyNs3DsrDsrErrorBuffer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrErrorBuffer *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrErrorBuffer_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrErrorBuffer(*((PyNs3DsrDsrErrorBuffer *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrErrorBuffer__tp_init__1(PyNs3DsrDsrErrorBuffer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrErrorBuffer();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrErrorBuffer__tp_init(PyNs3DsrDsrErrorBuffer *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrErrorBuffer__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrErrorBuffer__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffer_GetErrorBufferTimeout(PyNs3DsrDsrErrorBuffer *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetErrorBufferTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffer_GetMaxQueueLen(PyNs3DsrDsrErrorBuffer *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMaxQueueLen();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffer_DropPacketForErrLink(PyNs3DsrDsrErrorBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Address *nextHop;
    const char *keywords[] = {"source", "nextHop", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Address_Type, &nextHop)) {
        return NULL;
    }
    self->obj->DropPacketForErrLink(*((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Address *) nextHop)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffer_Dequeue(PyNs3DsrDsrErrorBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *dst;
    PyNs3DsrDsrErrorBuffEntry *entry;
    const char *keywords[] = {"dst", "entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &dst, &PyNs3DsrDsrErrorBuffEntry_Type, &entry)) {
        return NULL;
    }
    retval = self->obj->Dequeue(*((PyNs3Ipv4Address *) dst)->obj, *((PyNs3DsrDsrErrorBuffEntry *) entry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffer_SetMaxQueueLen(PyNs3DsrDsrErrorBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int len;
    const char *keywords[] = {"len", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &len)) {
        return NULL;
    }
    self->obj->SetMaxQueueLen(len);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffer_GetSize(PyNs3DsrDsrErrorBuffer *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffer_Enqueue(PyNs3DsrDsrErrorBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3DsrDsrErrorBuffEntry *entry;
    const char *keywords[] = {"entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrErrorBuffEntry_Type, &entry)) {
        return NULL;
    }
    retval = self->obj->Enqueue(*((PyNs3DsrDsrErrorBuffEntry *) entry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffer_SetErrorBufferTimeout(PyNs3DsrDsrErrorBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *t;
    const char *keywords[] = {"t", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &t)) {
        return NULL;
    }
    self->obj->SetErrorBufferTimeout(*((PyNs3Time *) t)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffer_GetBuffer(PyNs3DsrDsrErrorBuffer *self)
{
    PyObject *py_retval;
    std::vector< ns3::dsr::DsrErrorBuffEntry > retval;
    Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__ *py_std__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__;
    
    retval = self->obj->GetBuffer();
    py_std__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__ = PyObject_New(Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__, &Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt___Type);
    py_std__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__->obj = new std::vector< ns3::dsr::DsrErrorBuffEntry >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrErrorBuffer_Find(PyNs3DsrDsrErrorBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *dst;
    const char *keywords[] = {"dst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &dst)) {
        return NULL;
    }
    retval = self->obj->Find(*((PyNs3Ipv4Address *) dst)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrErrorBuffer__copy__(PyNs3DsrDsrErrorBuffer *self)
{

    PyNs3DsrDsrErrorBuffer *py_copy;
    py_copy = PyObject_New(PyNs3DsrDsrErrorBuffer, &PyNs3DsrDsrErrorBuffer_Type);
    py_copy->obj = new ns3::dsr::DsrErrorBuffer(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrDsrErrorBuffer_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrErrorBuffer_methods[] = {
    {(char *) "GetErrorBufferTimeout", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffer_GetErrorBufferTimeout, METH_NOARGS, "GetErrorBufferTimeout()\n\n" },
    {(char *) "GetMaxQueueLen", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffer_GetMaxQueueLen, METH_NOARGS, "GetMaxQueueLen()\n\n" },
    {(char *) "DropPacketForErrLink", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffer_DropPacketForErrLink, METH_KEYWORDS|METH_VARARGS, "DropPacketForErrLink(source, nextHop)\n\ntype: source: ns3::Ipv4Address\ntype: nextHop: ns3::Ipv4Address" },
    {(char *) "Dequeue", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffer_Dequeue, METH_KEYWORDS|METH_VARARGS, "Dequeue(dst, entry)\n\ntype: dst: ns3::Ipv4Address\ntype: entry: ns3::dsr::DsrErrorBuffEntry &" },
    {(char *) "SetMaxQueueLen", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffer_SetMaxQueueLen, METH_KEYWORDS|METH_VARARGS, "SetMaxQueueLen(len)\n\ntype: len: uint32_t" },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffer_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffer_Enqueue, METH_KEYWORDS|METH_VARARGS, "Enqueue(entry)\n\ntype: entry: ns3::dsr::DsrErrorBuffEntry &" },
    {(char *) "SetErrorBufferTimeout", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffer_SetErrorBufferTimeout, METH_KEYWORDS|METH_VARARGS, "SetErrorBufferTimeout(t)\n\ntype: t: ns3::Time" },
    {(char *) "GetBuffer", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffer_GetBuffer, METH_NOARGS, "GetBuffer()\n\n" },
    {(char *) "Find", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffer_Find, METH_KEYWORDS|METH_VARARGS, "Find(dst)\n\ntype: dst: ns3::Ipv4Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrErrorBuffer__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrDsrErrorBuffer__tp_dealloc(PyNs3DsrDsrErrorBuffer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrDsrErrorBuffer_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrDsrErrorBuffer_wrapper_registry.end()) {
        PyNs3DsrDsrErrorBuffer_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::DsrErrorBuffer *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrErrorBuffer__tp_richcompare (PyNs3DsrDsrErrorBuffer *PYBINDGEN_UNUSED(self), PyNs3DsrDsrErrorBuffer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrErrorBuffer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrErrorBuffer_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrErrorBuffer",            /* tp_name */
    sizeof(PyNs3DsrDsrErrorBuffer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrErrorBuffer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsrErrorBuffer(arg0)\nDsrErrorBuffer()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrErrorBuffer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrErrorBuffer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrErrorBuffer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrFsHeader__tp_init__0(PyNs3DsrDsrFsHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrFsHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrFsHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrFsHeader(*((PyNs3DsrDsrFsHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrFsHeader__tp_init__1(PyNs3DsrDsrFsHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrFsHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrFsHeader__tp_init(PyNs3DsrDsrFsHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrFsHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrFsHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrFsHeader_SetMessageType(PyNs3DsrDsrFsHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int messageType;
    const char *keywords[] = {"messageType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &messageType)) {
        return NULL;
    }
    if (messageType > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMessageType(messageType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrFsHeader_Deserialize(PyNs3DsrDsrFsHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrFsHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrFsHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrFsHeader_Serialize(PyNs3DsrDsrFsHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrFsHeader_GetNextHeader(PyNs3DsrDsrFsHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNextHeader();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrFsHeader_GetDestId(PyNs3DsrDsrFsHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetDestId();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrFsHeader_SetNextHeader(PyNs3DsrDsrFsHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int protocol;
    const char *keywords[] = {"protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &protocol)) {
        return NULL;
    }
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNextHeader(protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrFsHeader_SetSourceId(PyNs3DsrDsrFsHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int sourceId;
    const char *keywords[] = {"sourceId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &sourceId)) {
        return NULL;
    }
    if (sourceId > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSourceId(sourceId);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrFsHeader_GetInstanceTypeId(PyNs3DsrDsrFsHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrFsHeader_GetSerializedSize(PyNs3DsrDsrFsHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrFsHeader_GetPayloadLength(PyNs3DsrDsrFsHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetPayloadLength();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrFsHeader_GetSourceId(PyNs3DsrDsrFsHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSourceId();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrFsHeader_SetDestId(PyNs3DsrDsrFsHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int destId;
    const char *keywords[] = {"destId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &destId)) {
        return NULL;
    }
    if (destId > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetDestId(destId);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrFsHeader_SetPayloadLength(PyNs3DsrDsrFsHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int length;
    const char *keywords[] = {"length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &length)) {
        return NULL;
    }
    if (length > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPayloadLength(length);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrFsHeader_GetMessageType(PyNs3DsrDsrFsHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetMessageType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrFsHeader__copy__(PyNs3DsrDsrFsHeader *self)
{

    PyNs3DsrDsrFsHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrFsHeader, &PyNs3DsrDsrFsHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::dsr::DsrFsHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrFsHeader_methods[] = {
    {(char *) "SetMessageType", (PyCFunction) _wrap_PyNs3DsrDsrFsHeader_SetMessageType, METH_KEYWORDS|METH_VARARGS, "SetMessageType(messageType)\n\ntype: messageType: uint8_t" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsrDsrFsHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrFsHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsrDsrFsHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetNextHeader", (PyCFunction) _wrap_PyNs3DsrDsrFsHeader_GetNextHeader, METH_NOARGS, "GetNextHeader()\n\n" },
    {(char *) "GetDestId", (PyCFunction) _wrap_PyNs3DsrDsrFsHeader_GetDestId, METH_NOARGS, "GetDestId()\n\n" },
    {(char *) "SetNextHeader", (PyCFunction) _wrap_PyNs3DsrDsrFsHeader_SetNextHeader, METH_KEYWORDS|METH_VARARGS, "SetNextHeader(protocol)\n\ntype: protocol: uint8_t" },
    {(char *) "SetSourceId", (PyCFunction) _wrap_PyNs3DsrDsrFsHeader_SetSourceId, METH_KEYWORDS|METH_VARARGS, "SetSourceId(sourceId)\n\ntype: sourceId: uint16_t" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrFsHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsrDsrFsHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetPayloadLength", (PyCFunction) _wrap_PyNs3DsrDsrFsHeader_GetPayloadLength, METH_NOARGS, "GetPayloadLength()\n\n" },
    {(char *) "GetSourceId", (PyCFunction) _wrap_PyNs3DsrDsrFsHeader_GetSourceId, METH_NOARGS, "GetSourceId()\n\n" },
    {(char *) "SetDestId", (PyCFunction) _wrap_PyNs3DsrDsrFsHeader_SetDestId, METH_KEYWORDS|METH_VARARGS, "SetDestId(destId)\n\ntype: destId: uint16_t" },
    {(char *) "SetPayloadLength", (PyCFunction) _wrap_PyNs3DsrDsrFsHeader_SetPayloadLength, METH_KEYWORDS|METH_VARARGS, "SetPayloadLength(length)\n\ntype: length: uint16_t" },
    {(char *) "GetMessageType", (PyCFunction) _wrap_PyNs3DsrDsrFsHeader_GetMessageType, METH_NOARGS, "GetMessageType()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrFsHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrFsHeader__tp_clear(PyNs3DsrDsrFsHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dsr::DsrFsHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DsrDsrFsHeader__tp_traverse(PyNs3DsrDsrFsHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrFsHeader__tp_dealloc(PyNs3DsrDsrFsHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrFsHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrFsHeader__tp_richcompare (PyNs3DsrDsrFsHeader *PYBINDGEN_UNUSED(self), PyNs3DsrDsrFsHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrFsHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrFsHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrFsHeader",            /* tp_name */
    sizeof(PyNs3DsrDsrFsHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrFsHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrFsHeader(arg0)\nDsrFsHeader()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrFsHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrFsHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrFsHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrFsHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrFsHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrFsHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrGraReply__tp_init__0(PyNs3DsrDsrGraReply *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrGraReply *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrGraReply_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrGraReply(*((PyNs3DsrDsrGraReply *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrGraReply__tp_init__1(PyNs3DsrDsrGraReply *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrGraReply();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrGraReply__tp_init(PyNs3DsrDsrGraReply *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrGraReply__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrGraReply__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrGraReply_GetGraTableSize(PyNs3DsrDsrGraReply *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetGraTableSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrGraReply_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrGraReply::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrGraReply_Purge(PyNs3DsrDsrGraReply *self)
{
    PyObject *py_retval;
    
    self->obj->Purge();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrGraReply_FindAndUpdate(PyNs3DsrDsrGraReply *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *replyTo;
    PyNs3Ipv4Address *replyFrom;
    PyNs3Time *gratReplyHoldoff;
    const char *keywords[] = {"replyTo", "replyFrom", "gratReplyHoldoff", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &replyTo, &PyNs3Ipv4Address_Type, &replyFrom, &PyNs3Time_Type, &gratReplyHoldoff)) {
        return NULL;
    }
    retval = self->obj->FindAndUpdate(*((PyNs3Ipv4Address *) replyTo)->obj, *((PyNs3Ipv4Address *) replyFrom)->obj, *((PyNs3Time *) gratReplyHoldoff)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrGraReply_SetGraTableSize(PyNs3DsrDsrGraReply *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int g;
    const char *keywords[] = {"g", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &g)) {
        return NULL;
    }
    self->obj->SetGraTableSize(g);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrGraReply_AddEntry(PyNs3DsrDsrGraReply *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3DsrGraReplyEntry *graTableEntry;
    const char *keywords[] = {"graTableEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrGraReplyEntry_Type, &graTableEntry)) {
        return NULL;
    }
    retval = self->obj->AddEntry(*((PyNs3DsrGraReplyEntry *) graTableEntry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrGraReply_Clear(PyNs3DsrDsrGraReply *self)
{
    PyObject *py_retval;
    
    self->obj->Clear();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrGraReply__copy__(PyNs3DsrDsrGraReply *self)
{

    PyNs3DsrDsrGraReply *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrGraReply, &PyNs3DsrDsrGraReply_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::dsr::DsrGraReply(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrGraReply_methods[] = {
    {(char *) "GetGraTableSize", (PyCFunction) _wrap_PyNs3DsrDsrGraReply_GetGraTableSize, METH_NOARGS, "GetGraTableSize()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrGraReply_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Purge", (PyCFunction) _wrap_PyNs3DsrDsrGraReply_Purge, METH_NOARGS, "Purge()\n\n" },
    {(char *) "FindAndUpdate", (PyCFunction) _wrap_PyNs3DsrDsrGraReply_FindAndUpdate, METH_KEYWORDS|METH_VARARGS, "FindAndUpdate(replyTo, replyFrom, gratReplyHoldoff)\n\ntype: replyTo: ns3::Ipv4Address\ntype: replyFrom: ns3::Ipv4Address\ntype: gratReplyHoldoff: ns3::Time" },
    {(char *) "SetGraTableSize", (PyCFunction) _wrap_PyNs3DsrDsrGraReply_SetGraTableSize, METH_KEYWORDS|METH_VARARGS, "SetGraTableSize(g)\n\ntype: g: uint32_t" },
    {(char *) "AddEntry", (PyCFunction) _wrap_PyNs3DsrDsrGraReply_AddEntry, METH_KEYWORDS|METH_VARARGS, "AddEntry(graTableEntry)\n\ntype: graTableEntry: ns3::dsr::GraReplyEntry &" },
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3DsrDsrGraReply_Clear, METH_NOARGS, "Clear()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrGraReply__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrGraReply__tp_clear(PyNs3DsrDsrGraReply *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dsr::DsrGraReply *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DsrDsrGraReply__tp_traverse(PyNs3DsrDsrGraReply *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrGraReply__tp_dealloc(PyNs3DsrDsrGraReply *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrGraReply__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrGraReply__tp_richcompare (PyNs3DsrDsrGraReply *PYBINDGEN_UNUSED(self), PyNs3DsrDsrGraReply *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrGraReply_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrGraReply_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrGraReply",            /* tp_name */
    sizeof(PyNs3DsrDsrGraReply),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrGraReply__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrGraReply(arg0)\nDsrGraReply()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrGraReply__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrGraReply__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrGraReply__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrGraReply_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrGraReply, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrGraReply__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrDsrLinkStab_wrapper_registry;


static int
_wrap_PyNs3DsrDsrLinkStab__tp_init__0(PyNs3DsrDsrLinkStab *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrLinkStab *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrLinkStab_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrLinkStab(*((PyNs3DsrDsrLinkStab *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrLinkStab__tp_init__1(PyNs3DsrDsrLinkStab *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Time *linkStab = NULL;
    const char *keywords[] = {"linkStab", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O!", (char **) keywords, &PyNs3Time_Type, &linkStab)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrLinkStab((linkStab ? (*((PyNs3Time *) linkStab)->obj) : ns3::Simulator::Now( )));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrLinkStab__tp_init(PyNs3DsrDsrLinkStab *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrLinkStab__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrLinkStab__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrLinkStab_Print(PyNs3DsrDsrLinkStab *self)
{
    PyObject *py_retval;
    
    self->obj->Print();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrLinkStab_SetLinkStability(PyNs3DsrDsrLinkStab *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *linkStab;
    const char *keywords[] = {"linkStab", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &linkStab)) {
        return NULL;
    }
    self->obj->SetLinkStability(*((PyNs3Time *) linkStab)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrLinkStab_GetLinkStability(PyNs3DsrDsrLinkStab *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetLinkStability();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrLinkStab__copy__(PyNs3DsrDsrLinkStab *self)
{

    PyNs3DsrDsrLinkStab *py_copy;
    py_copy = PyObject_New(PyNs3DsrDsrLinkStab, &PyNs3DsrDsrLinkStab_Type);
    py_copy->obj = new ns3::dsr::DsrLinkStab(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrDsrLinkStab_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrLinkStab_methods[] = {
    {(char *) "Print", (PyCFunction) _wrap_PyNs3DsrDsrLinkStab_Print, METH_NOARGS, "Print()\n\n" },
    {(char *) "SetLinkStability", (PyCFunction) _wrap_PyNs3DsrDsrLinkStab_SetLinkStability, METH_KEYWORDS|METH_VARARGS, "SetLinkStability(linkStab)\n\ntype: linkStab: ns3::Time" },
    {(char *) "GetLinkStability", (PyCFunction) _wrap_PyNs3DsrDsrLinkStab_GetLinkStability, METH_NOARGS, "GetLinkStability()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrLinkStab__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrDsrLinkStab__tp_dealloc(PyNs3DsrDsrLinkStab *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrDsrLinkStab_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrDsrLinkStab_wrapper_registry.end()) {
        PyNs3DsrDsrLinkStab_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::DsrLinkStab *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrLinkStab__tp_richcompare (PyNs3DsrDsrLinkStab *PYBINDGEN_UNUSED(self), PyNs3DsrDsrLinkStab *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrLinkStab_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrLinkStab_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrLinkStab",            /* tp_name */
    sizeof(PyNs3DsrDsrLinkStab),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrLinkStab__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsrLinkStab(linkStab)\nDsrLinkStab(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrLinkStab__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrLinkStab_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrLinkStab__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrDsrMaintainBuffEntry_wrapper_registry;


static int
_wrap_PyNs3DsrDsrMaintainBuffEntry__tp_init__0(PyNs3DsrDsrMaintainBuffEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrMaintainBuffEntry *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrMaintainBuffEntry_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrMaintainBuffEntry(*((PyNs3DsrDsrMaintainBuffEntry *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrMaintainBuffEntry__tp_init__1(PyNs3DsrDsrMaintainBuffEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Packet *pa = NULL;
    ns3::Packet *pa_ptr;
    PyNs3Ipv4Address *us = NULL;
    PyNs3Ipv4Address *n = NULL;
    PyNs3Ipv4Address *s = NULL;
    PyNs3Ipv4Address *dst = NULL;
    int ackId = 0;
    int segs = 0;
    PyNs3Time *exp = NULL;
    const char *keywords[] = {"pa", "us", "n", "s", "dst", "ackId", "segs", "exp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O!O!O!O!O!iiO!", (char **) keywords, &PyNs3Packet_Type, &pa, &PyNs3Ipv4Address_Type, &us, &PyNs3Ipv4Address_Type, &n, &PyNs3Ipv4Address_Type, &s, &PyNs3Ipv4Address_Type, &dst, &ackId, &segs, &PyNs3Time_Type, &exp)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    pa_ptr = (pa ? pa->obj : NULL);
    if (ackId > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (segs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrMaintainBuffEntry(ns3::Ptr< ns3::Packet  > (pa_ptr), (us ? (*((PyNs3Ipv4Address *) us)->obj) : ns3::Ipv4Address()), (n ? (*((PyNs3Ipv4Address *) n)->obj) : ns3::Ipv4Address()), (s ? (*((PyNs3Ipv4Address *) s)->obj) : ns3::Ipv4Address()), (dst ? (*((PyNs3Ipv4Address *) dst)->obj) : ns3::Ipv4Address()), ackId, segs, (exp ? (*((PyNs3Time *) exp)->obj) : ns3::Simulator::Now( )));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrMaintainBuffEntry__tp_init(PyNs3DsrDsrMaintainBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrMaintainBuffEntry__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrMaintainBuffEntry__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffEntry_SetPacket(PyNs3DsrDsrMaintainBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *p;
    ns3::Packet *p_ptr;
    const char *keywords[] = {"p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &p)) {
        return NULL;
    }
    p_ptr = (p ? p->obj : NULL);
    self->obj->SetPacket(ns3::Ptr< ns3::Packet  > (p_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffEntry_SetSegsLeft(PyNs3DsrDsrMaintainBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int segs;
    const char *keywords[] = {"segs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &segs)) {
        return NULL;
    }
    if (segs > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSegsLeft(segs);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffEntry_SetSrc(PyNs3DsrDsrMaintainBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *s;
    const char *keywords[] = {"s", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &s)) {
        return NULL;
    }
    self->obj->SetSrc(*((PyNs3Ipv4Address *) s)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffEntry_SetNextHop(PyNs3DsrDsrMaintainBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *n;
    const char *keywords[] = {"n", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &n)) {
        return NULL;
    }
    self->obj->SetNextHop(*((PyNs3Ipv4Address *) n)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffEntry_GetSegsLeft(PyNs3DsrDsrMaintainBuffEntry *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSegsLeft();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffEntry_GetSrc(PyNs3DsrDsrMaintainBuffEntry *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetSrc();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffEntry_SetDst(PyNs3DsrDsrMaintainBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *n;
    const char *keywords[] = {"n", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &n)) {
        return NULL;
    }
    self->obj->SetDst(*((PyNs3Ipv4Address *) n)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffEntry_GetNextHop(PyNs3DsrDsrMaintainBuffEntry *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetNextHop();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffEntry_GetDst(PyNs3DsrDsrMaintainBuffEntry *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetDst();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffEntry_SetAckId(PyNs3DsrDsrMaintainBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ackId;
    const char *keywords[] = {"ackId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ackId)) {
        return NULL;
    }
    if (ackId > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetAckId(ackId);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffEntry_GetPacket(PyNs3DsrDsrMaintainBuffEntry *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet const > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPacket();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffEntry_SetOurAdd(PyNs3DsrDsrMaintainBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *us;
    const char *keywords[] = {"us", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &us)) {
        return NULL;
    }
    self->obj->SetOurAdd(*((PyNs3Ipv4Address *) us)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffEntry_SetExpireTime(PyNs3DsrDsrMaintainBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *exp;
    const char *keywords[] = {"exp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &exp)) {
        return NULL;
    }
    self->obj->SetExpireTime(*((PyNs3Time *) exp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffEntry_GetAckId(PyNs3DsrDsrMaintainBuffEntry *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetAckId();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffEntry_GetOurAdd(PyNs3DsrDsrMaintainBuffEntry *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetOurAdd();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffEntry_GetExpireTime(PyNs3DsrDsrMaintainBuffEntry *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetExpireTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrMaintainBuffEntry__copy__(PyNs3DsrDsrMaintainBuffEntry *self)
{

    PyNs3DsrDsrMaintainBuffEntry *py_copy;
    py_copy = PyObject_New(PyNs3DsrDsrMaintainBuffEntry, &PyNs3DsrDsrMaintainBuffEntry_Type);
    py_copy->obj = new ns3::dsr::DsrMaintainBuffEntry(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrDsrMaintainBuffEntry_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrMaintainBuffEntry_methods[] = {
    {(char *) "SetPacket", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry_SetPacket, METH_KEYWORDS|METH_VARARGS, "SetPacket(p)\n\ntype: p: ns3::Ptr< ns3::Packet const >" },
    {(char *) "SetSegsLeft", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry_SetSegsLeft, METH_KEYWORDS|METH_VARARGS, "SetSegsLeft(segs)\n\ntype: segs: uint8_t" },
    {(char *) "SetSrc", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry_SetSrc, METH_KEYWORDS|METH_VARARGS, "SetSrc(s)\n\ntype: s: ns3::Ipv4Address" },
    {(char *) "SetNextHop", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry_SetNextHop, METH_KEYWORDS|METH_VARARGS, "SetNextHop(n)\n\ntype: n: ns3::Ipv4Address" },
    {(char *) "GetSegsLeft", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry_GetSegsLeft, METH_NOARGS, "GetSegsLeft()\n\n" },
    {(char *) "GetSrc", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry_GetSrc, METH_NOARGS, "GetSrc()\n\n" },
    {(char *) "SetDst", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry_SetDst, METH_KEYWORDS|METH_VARARGS, "SetDst(n)\n\ntype: n: ns3::Ipv4Address" },
    {(char *) "GetNextHop", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry_GetNextHop, METH_NOARGS, "GetNextHop()\n\n" },
    {(char *) "GetDst", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry_GetDst, METH_NOARGS, "GetDst()\n\n" },
    {(char *) "SetAckId", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry_SetAckId, METH_KEYWORDS|METH_VARARGS, "SetAckId(ackId)\n\ntype: ackId: uint16_t" },
    {(char *) "GetPacket", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry_GetPacket, METH_NOARGS, "GetPacket()\n\n" },
    {(char *) "SetOurAdd", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry_SetOurAdd, METH_KEYWORDS|METH_VARARGS, "SetOurAdd(us)\n\ntype: us: ns3::Ipv4Address" },
    {(char *) "SetExpireTime", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry_SetExpireTime, METH_KEYWORDS|METH_VARARGS, "SetExpireTime(exp)\n\ntype: exp: ns3::Time" },
    {(char *) "GetAckId", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry_GetAckId, METH_NOARGS, "GetAckId()\n\n" },
    {(char *) "GetOurAdd", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry_GetOurAdd, METH_NOARGS, "GetOurAdd()\n\n" },
    {(char *) "GetExpireTime", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry_GetExpireTime, METH_NOARGS, "GetExpireTime()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffEntry__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrDsrMaintainBuffEntry__tp_dealloc(PyNs3DsrDsrMaintainBuffEntry *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrDsrMaintainBuffEntry_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrDsrMaintainBuffEntry_wrapper_registry.end()) {
        PyNs3DsrDsrMaintainBuffEntry_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::DsrMaintainBuffEntry *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrMaintainBuffEntry__tp_richcompare (PyNs3DsrDsrMaintainBuffEntry *PYBINDGEN_UNUSED(self), PyNs3DsrDsrMaintainBuffEntry *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrMaintainBuffEntry_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrMaintainBuffEntry_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrMaintainBuffEntry",            /* tp_name */
    sizeof(PyNs3DsrDsrMaintainBuffEntry),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrMaintainBuffEntry__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsrMaintainBuffEntry(pa, us, n, s, dst, ackId, segs, exp)\nDsrMaintainBuffEntry(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrMaintainBuffEntry__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrMaintainBuffEntry_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrMaintainBuffEntry__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrDsrMaintainBuffer_wrapper_registry;


static int
_wrap_PyNs3DsrDsrMaintainBuffer__tp_init__0(PyNs3DsrDsrMaintainBuffer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrMaintainBuffer *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrMaintainBuffer_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrMaintainBuffer(*((PyNs3DsrDsrMaintainBuffer *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrMaintainBuffer__tp_init__1(PyNs3DsrDsrMaintainBuffer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrMaintainBuffer();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrMaintainBuffer__tp_init(PyNs3DsrDsrMaintainBuffer *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrMaintainBuffer__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrMaintainBuffer__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffer_DropPacketWithNextHop(PyNs3DsrDsrMaintainBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *nextHop;
    const char *keywords[] = {"nextHop", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &nextHop)) {
        return NULL;
    }
    self->obj->DropPacketWithNextHop(*((PyNs3Ipv4Address *) nextHop)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffer_GetMaintainBufferTimeout(PyNs3DsrDsrMaintainBuffer *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetMaintainBufferTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffer_SetMaintainBufferTimeout(PyNs3DsrDsrMaintainBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *t;
    const char *keywords[] = {"t", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &t)) {
        return NULL;
    }
    self->obj->SetMaintainBufferTimeout(*((PyNs3Time *) t)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffer_NetworkEqual(PyNs3DsrDsrMaintainBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3DsrDsrMaintainBuffEntry *entry;
    const char *keywords[] = {"entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrMaintainBuffEntry_Type, &entry)) {
        return NULL;
    }
    retval = self->obj->NetworkEqual(*((PyNs3DsrDsrMaintainBuffEntry *) entry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffer_LinkEqual(PyNs3DsrDsrMaintainBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3DsrDsrMaintainBuffEntry *entry;
    const char *keywords[] = {"entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrMaintainBuffEntry_Type, &entry)) {
        return NULL;
    }
    retval = self->obj->LinkEqual(*((PyNs3DsrDsrMaintainBuffEntry *) entry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffer_Dequeue(PyNs3DsrDsrMaintainBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *dst;
    PyNs3DsrDsrMaintainBuffEntry *entry;
    const char *keywords[] = {"dst", "entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &dst, &PyNs3DsrDsrMaintainBuffEntry_Type, &entry)) {
        return NULL;
    }
    retval = self->obj->Dequeue(*((PyNs3Ipv4Address *) dst)->obj, *((PyNs3DsrDsrMaintainBuffEntry *) entry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffer_PromiscEqual(PyNs3DsrDsrMaintainBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3DsrDsrMaintainBuffEntry *entry;
    const char *keywords[] = {"entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrMaintainBuffEntry_Type, &entry)) {
        return NULL;
    }
    retval = self->obj->PromiscEqual(*((PyNs3DsrDsrMaintainBuffEntry *) entry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffer_GetMaxQueueLen(PyNs3DsrDsrMaintainBuffer *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMaxQueueLen();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffer_SetMaxQueueLen(PyNs3DsrDsrMaintainBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int len;
    const char *keywords[] = {"len", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &len)) {
        return NULL;
    }
    self->obj->SetMaxQueueLen(len);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffer_GetSize(PyNs3DsrDsrMaintainBuffer *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffer_Enqueue(PyNs3DsrDsrMaintainBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3DsrDsrMaintainBuffEntry *entry;
    const char *keywords[] = {"entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrMaintainBuffEntry_Type, &entry)) {
        return NULL;
    }
    retval = self->obj->Enqueue(*((PyNs3DsrDsrMaintainBuffEntry *) entry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffer_AllEqual(PyNs3DsrDsrMaintainBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3DsrDsrMaintainBuffEntry *entry;
    const char *keywords[] = {"entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrMaintainBuffEntry_Type, &entry)) {
        return NULL;
    }
    retval = self->obj->AllEqual(*((PyNs3DsrDsrMaintainBuffEntry *) entry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrMaintainBuffer_Find(PyNs3DsrDsrMaintainBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *nextHop;
    const char *keywords[] = {"nextHop", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &nextHop)) {
        return NULL;
    }
    retval = self->obj->Find(*((PyNs3Ipv4Address *) nextHop)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrMaintainBuffer__copy__(PyNs3DsrDsrMaintainBuffer *self)
{

    PyNs3DsrDsrMaintainBuffer *py_copy;
    py_copy = PyObject_New(PyNs3DsrDsrMaintainBuffer, &PyNs3DsrDsrMaintainBuffer_Type);
    py_copy->obj = new ns3::dsr::DsrMaintainBuffer(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrDsrMaintainBuffer_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrMaintainBuffer_methods[] = {
    {(char *) "DropPacketWithNextHop", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffer_DropPacketWithNextHop, METH_KEYWORDS|METH_VARARGS, "DropPacketWithNextHop(nextHop)\n\ntype: nextHop: ns3::Ipv4Address" },
    {(char *) "GetMaintainBufferTimeout", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffer_GetMaintainBufferTimeout, METH_NOARGS, "GetMaintainBufferTimeout()\n\n" },
    {(char *) "SetMaintainBufferTimeout", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffer_SetMaintainBufferTimeout, METH_KEYWORDS|METH_VARARGS, "SetMaintainBufferTimeout(t)\n\ntype: t: ns3::Time" },
    {(char *) "NetworkEqual", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffer_NetworkEqual, METH_KEYWORDS|METH_VARARGS, "NetworkEqual(entry)\n\ntype: entry: ns3::dsr::DsrMaintainBuffEntry &" },
    {(char *) "LinkEqual", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffer_LinkEqual, METH_KEYWORDS|METH_VARARGS, "LinkEqual(entry)\n\ntype: entry: ns3::dsr::DsrMaintainBuffEntry &" },
    {(char *) "Dequeue", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffer_Dequeue, METH_KEYWORDS|METH_VARARGS, "Dequeue(dst, entry)\n\ntype: dst: ns3::Ipv4Address\ntype: entry: ns3::dsr::DsrMaintainBuffEntry &" },
    {(char *) "PromiscEqual", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffer_PromiscEqual, METH_KEYWORDS|METH_VARARGS, "PromiscEqual(entry)\n\ntype: entry: ns3::dsr::DsrMaintainBuffEntry &" },
    {(char *) "GetMaxQueueLen", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffer_GetMaxQueueLen, METH_NOARGS, "GetMaxQueueLen()\n\n" },
    {(char *) "SetMaxQueueLen", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffer_SetMaxQueueLen, METH_KEYWORDS|METH_VARARGS, "SetMaxQueueLen(len)\n\ntype: len: uint32_t" },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffer_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffer_Enqueue, METH_KEYWORDS|METH_VARARGS, "Enqueue(entry)\n\ntype: entry: ns3::dsr::DsrMaintainBuffEntry &" },
    {(char *) "AllEqual", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffer_AllEqual, METH_KEYWORDS|METH_VARARGS, "AllEqual(entry)\n\ntype: entry: ns3::dsr::DsrMaintainBuffEntry &" },
    {(char *) "Find", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffer_Find, METH_KEYWORDS|METH_VARARGS, "Find(nextHop)\n\ntype: nextHop: ns3::Ipv4Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrMaintainBuffer__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrDsrMaintainBuffer__tp_dealloc(PyNs3DsrDsrMaintainBuffer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrDsrMaintainBuffer_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrDsrMaintainBuffer_wrapper_registry.end()) {
        PyNs3DsrDsrMaintainBuffer_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::DsrMaintainBuffer *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrMaintainBuffer__tp_richcompare (PyNs3DsrDsrMaintainBuffer *PYBINDGEN_UNUSED(self), PyNs3DsrDsrMaintainBuffer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrMaintainBuffer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrMaintainBuffer_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrMaintainBuffer",            /* tp_name */
    sizeof(PyNs3DsrDsrMaintainBuffer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrMaintainBuffer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsrMaintainBuffer(arg0)\nDsrMaintainBuffer()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrMaintainBuffer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrMaintainBuffer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrMaintainBuffer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrNetworkQueue__tp_init__0(PyNs3DsrDsrNetworkQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrNetworkQueue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrNetworkQueue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrNetworkQueue(*((PyNs3DsrDsrNetworkQueue *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrNetworkQueue__tp_init__1(PyNs3DsrDsrNetworkQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrNetworkQueue();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrNetworkQueue__tp_init__2(PyNs3DsrDsrNetworkQueue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    unsigned int maxLen;
    PyNs3Time *maxDelay;
    const char *keywords[] = {"maxLen", "maxDelay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!", (char **) keywords, &maxLen, &PyNs3Time_Type, &maxDelay)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrNetworkQueue(maxLen, *((PyNs3Time *) maxDelay)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrNetworkQueue__tp_init(PyNs3DsrDsrNetworkQueue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3DsrDsrNetworkQueue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrNetworkQueue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrNetworkQueue__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueue_Dequeue(PyNs3DsrDsrNetworkQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3DsrDsrNetworkQueueEntry *entry;
    const char *keywords[] = {"entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrNetworkQueueEntry_Type, &entry)) {
        return NULL;
    }
    retval = self->obj->Dequeue(*((PyNs3DsrDsrNetworkQueueEntry *) entry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueue_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrNetworkQueue::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueue_SetMaxNetworkDelay(PyNs3DsrDsrNetworkQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *delay;
    const char *keywords[] = {"delay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &delay)) {
        return NULL;
    }
    self->obj->SetMaxNetworkDelay(*((PyNs3Time *) delay)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueue_GetMaxNetworkSize(PyNs3DsrDsrNetworkQueue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMaxNetworkSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueue_GetSize(PyNs3DsrDsrNetworkQueue *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueue_Enqueue(PyNs3DsrDsrNetworkQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3DsrDsrNetworkQueueEntry *entry;
    const char *keywords[] = {"entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrNetworkQueueEntry_Type, &entry)) {
        return NULL;
    }
    retval = self->obj->Enqueue(*((PyNs3DsrDsrNetworkQueueEntry *) entry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueue_FindPacketWithNexthop(PyNs3DsrDsrNetworkQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *nextHop;
    PyNs3DsrDsrNetworkQueueEntry *entry;
    const char *keywords[] = {"nextHop", "entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &nextHop, &PyNs3DsrDsrNetworkQueueEntry_Type, &entry)) {
        return NULL;
    }
    retval = self->obj->FindPacketWithNexthop(*((PyNs3Ipv4Address *) nextHop)->obj, *((PyNs3DsrDsrNetworkQueueEntry *) entry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueue_SetMaxNetworkSize(PyNs3DsrDsrNetworkQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int maxSize;
    const char *keywords[] = {"maxSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &maxSize)) {
        return NULL;
    }
    self->obj->SetMaxNetworkSize(maxSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueue_Flush(PyNs3DsrDsrNetworkQueue *self)
{
    PyObject *py_retval;
    
    self->obj->Flush();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueue_GetQueue(PyNs3DsrDsrNetworkQueue *self)
{
    PyObject *py_retval;
    std::vector< ns3::dsr::DsrNetworkQueueEntry > retval;
    Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__ *py_std__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__;
    
    retval = self->obj->GetQueue();
    py_std__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__ = PyObject_New(Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__, &Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt___Type);
    py_std__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__->obj = new std::vector< ns3::dsr::DsrNetworkQueueEntry >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueue_Find(PyNs3DsrDsrNetworkQueue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *nextHop;
    const char *keywords[] = {"nextHop", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &nextHop)) {
        return NULL;
    }
    retval = self->obj->Find(*((PyNs3Ipv4Address *) nextHop)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueue_GetMaxNetworkDelay(PyNs3DsrDsrNetworkQueue *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetMaxNetworkDelay();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrNetworkQueue__copy__(PyNs3DsrDsrNetworkQueue *self)
{

    PyNs3DsrDsrNetworkQueue *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrNetworkQueue, &PyNs3DsrDsrNetworkQueue_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::dsr::DsrNetworkQueue(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrNetworkQueue_methods[] = {
    {(char *) "Dequeue", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueue_Dequeue, METH_KEYWORDS|METH_VARARGS, "Dequeue(entry)\n\ntype: entry: ns3::dsr::DsrNetworkQueueEntry &" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueue_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetMaxNetworkDelay", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueue_SetMaxNetworkDelay, METH_KEYWORDS|METH_VARARGS, "SetMaxNetworkDelay(delay)\n\ntype: delay: ns3::Time" },
    {(char *) "GetMaxNetworkSize", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueue_GetMaxNetworkSize, METH_NOARGS, "GetMaxNetworkSize()\n\n" },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueue_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueue_Enqueue, METH_KEYWORDS|METH_VARARGS, "Enqueue(entry)\n\ntype: entry: ns3::dsr::DsrNetworkQueueEntry &" },
    {(char *) "FindPacketWithNexthop", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueue_FindPacketWithNexthop, METH_KEYWORDS|METH_VARARGS, "FindPacketWithNexthop(nextHop, entry)\n\ntype: nextHop: ns3::Ipv4Address\ntype: entry: ns3::dsr::DsrNetworkQueueEntry &" },
    {(char *) "SetMaxNetworkSize", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueue_SetMaxNetworkSize, METH_KEYWORDS|METH_VARARGS, "SetMaxNetworkSize(maxSize)\n\ntype: maxSize: uint32_t" },
    {(char *) "Flush", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueue_Flush, METH_NOARGS, "Flush()\n\n" },
    {(char *) "GetQueue", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueue_GetQueue, METH_NOARGS, "GetQueue()\n\n" },
    {(char *) "Find", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueue_Find, METH_KEYWORDS|METH_VARARGS, "Find(nextHop)\n\ntype: nextHop: ns3::Ipv4Address" },
    {(char *) "GetMaxNetworkDelay", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueue_GetMaxNetworkDelay, METH_NOARGS, "GetMaxNetworkDelay()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrNetworkQueue__tp_clear(PyNs3DsrDsrNetworkQueue *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dsr::DsrNetworkQueue *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DsrDsrNetworkQueue__tp_traverse(PyNs3DsrDsrNetworkQueue *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrNetworkQueue__tp_dealloc(PyNs3DsrDsrNetworkQueue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrNetworkQueue__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrNetworkQueue__tp_richcompare (PyNs3DsrDsrNetworkQueue *PYBINDGEN_UNUSED(self), PyNs3DsrDsrNetworkQueue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrNetworkQueue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrNetworkQueue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrNetworkQueue",            /* tp_name */
    sizeof(PyNs3DsrDsrNetworkQueue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrNetworkQueue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrNetworkQueue(maxLen, maxDelay)\nDsrNetworkQueue(arg0)\nDsrNetworkQueue()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrNetworkQueue__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrNetworkQueue__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrNetworkQueue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrNetworkQueue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrNetworkQueue, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrNetworkQueue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrDsrNetworkQueueEntry_wrapper_registry;


static int
_wrap_PyNs3DsrDsrNetworkQueueEntry__tp_init__0(PyNs3DsrDsrNetworkQueueEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrNetworkQueueEntry *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrNetworkQueueEntry_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrNetworkQueueEntry(*((PyNs3DsrDsrNetworkQueueEntry *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrNetworkQueueEntry__tp_init__1(PyNs3DsrDsrNetworkQueueEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Packet *pa = NULL;
    ns3::Packet *pa_ptr;
    PyNs3Ipv4Address *s = NULL;
    PyNs3Ipv4Address *n = NULL;
    PyNs3Time *exp = NULL;
    PyNs3Ipv4Route *r = NULL;
    ns3::Ipv4Route *r_ptr;
    const char *keywords[] = {"pa", "s", "n", "exp", "r", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O!O!O!O!O!", (char **) keywords, &PyNs3Packet_Type, &pa, &PyNs3Ipv4Address_Type, &s, &PyNs3Ipv4Address_Type, &n, &PyNs3Time_Type, &exp, &PyNs3Ipv4Route_Type, &r)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    pa_ptr = (pa ? pa->obj : NULL);
    r_ptr = (r ? r->obj : NULL);
    self->obj = new ns3::dsr::DsrNetworkQueueEntry(ns3::Ptr< ns3::Packet  > (pa_ptr), (s ? (*((PyNs3Ipv4Address *) s)->obj) : ns3::Ipv4Address()), (n ? (*((PyNs3Ipv4Address *) n)->obj) : ns3::Ipv4Address()), (exp ? (*((PyNs3Time *) exp)->obj) : ns3::Simulator::Now( )), ns3::Ptr< ns3::Ipv4Route  > (r_ptr));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrNetworkQueueEntry__tp_init(PyNs3DsrDsrNetworkQueueEntry *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrNetworkQueueEntry__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrNetworkQueueEntry__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueueEntry_SetInsertedTimeStamp(PyNs3DsrDsrNetworkQueueEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *time;
    const char *keywords[] = {"time", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &time)) {
        return NULL;
    }
    self->obj->SetInsertedTimeStamp(*((PyNs3Time *) time)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueueEntry_SetSourceAddress(PyNs3DsrDsrNetworkQueueEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *addr;
    const char *keywords[] = {"addr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &addr)) {
        return NULL;
    }
    self->obj->SetSourceAddress(*((PyNs3Ipv4Address *) addr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueueEntry_GetInsertedTimeStamp(PyNs3DsrDsrNetworkQueueEntry *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetInsertedTimeStamp();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueueEntry_SetPacket(PyNs3DsrDsrNetworkQueueEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *p;
    ns3::Packet *p_ptr;
    const char *keywords[] = {"p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &p)) {
        return NULL;
    }
    p_ptr = (p ? p->obj : NULL);
    self->obj->SetPacket(ns3::Ptr< ns3::Packet  > (p_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueueEntry_GetNextHopAddress(PyNs3DsrDsrNetworkQueueEntry *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetNextHopAddress();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueueEntry_SetNextHopAddress(PyNs3DsrDsrNetworkQueueEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *addr;
    const char *keywords[] = {"addr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &addr)) {
        return NULL;
    }
    self->obj->SetNextHopAddress(*((PyNs3Ipv4Address *) addr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueueEntry_GetIpv4Route(PyNs3DsrDsrNetworkQueueEntry *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Ipv4Route > retval;
    PyNs3Ipv4Route *py_Ipv4Route;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetIpv4Route();
    if (!(const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Ipv4Route = NULL;
    } else {
        py_Ipv4Route = (PyNs3Ipv4Route *) wrapper_lookup_iter->second;
        Py_INCREF(py_Ipv4Route);
    }
    
    if (py_Ipv4Route == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (retval)))), &PyNs3Ipv4Route_Type);
        py_Ipv4Route = PyObject_New(PyNs3Ipv4Route, wrapper_type);
    
        py_Ipv4Route->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (retval))->Ref();
        py_Ipv4Route->obj = const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Ipv4Route->obj] = (PyObject *) py_Ipv4Route;
    }
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Route);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueueEntry_GetPacket(PyNs3DsrDsrNetworkQueueEntry *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet const > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPacket();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueueEntry_SetIpv4Route(PyNs3DsrDsrNetworkQueueEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Route *route;
    ns3::Ipv4Route *route_ptr;
    const char *keywords[] = {"route", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Route_Type, &route)) {
        return NULL;
    }
    route_ptr = (route ? route->obj : NULL);
    self->obj->SetIpv4Route(ns3::Ptr< ns3::Ipv4Route  > (route_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNetworkQueueEntry_GetSourceAddress(PyNs3DsrDsrNetworkQueueEntry *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetSourceAddress();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrNetworkQueueEntry__copy__(PyNs3DsrDsrNetworkQueueEntry *self)
{

    PyNs3DsrDsrNetworkQueueEntry *py_copy;
    py_copy = PyObject_New(PyNs3DsrDsrNetworkQueueEntry, &PyNs3DsrDsrNetworkQueueEntry_Type);
    py_copy->obj = new ns3::dsr::DsrNetworkQueueEntry(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrDsrNetworkQueueEntry_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrNetworkQueueEntry_methods[] = {
    {(char *) "SetInsertedTimeStamp", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueueEntry_SetInsertedTimeStamp, METH_KEYWORDS|METH_VARARGS, "SetInsertedTimeStamp(time)\n\ntype: time: ns3::Time" },
    {(char *) "SetSourceAddress", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueueEntry_SetSourceAddress, METH_KEYWORDS|METH_VARARGS, "SetSourceAddress(addr)\n\ntype: addr: ns3::Ipv4Address" },
    {(char *) "GetInsertedTimeStamp", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueueEntry_GetInsertedTimeStamp, METH_NOARGS, "GetInsertedTimeStamp()\n\n" },
    {(char *) "SetPacket", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueueEntry_SetPacket, METH_KEYWORDS|METH_VARARGS, "SetPacket(p)\n\ntype: p: ns3::Ptr< ns3::Packet const >" },
    {(char *) "GetNextHopAddress", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueueEntry_GetNextHopAddress, METH_NOARGS, "GetNextHopAddress()\n\n" },
    {(char *) "SetNextHopAddress", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueueEntry_SetNextHopAddress, METH_KEYWORDS|METH_VARARGS, "SetNextHopAddress(addr)\n\ntype: addr: ns3::Ipv4Address" },
    {(char *) "GetIpv4Route", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueueEntry_GetIpv4Route, METH_NOARGS, "GetIpv4Route()\n\n" },
    {(char *) "GetPacket", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueueEntry_GetPacket, METH_NOARGS, "GetPacket()\n\n" },
    {(char *) "SetIpv4Route", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueueEntry_SetIpv4Route, METH_KEYWORDS|METH_VARARGS, "SetIpv4Route(route)\n\ntype: route: ns3::Ptr< ns3::Ipv4Route >" },
    {(char *) "GetSourceAddress", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueueEntry_GetSourceAddress, METH_NOARGS, "GetSourceAddress()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrNetworkQueueEntry__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrDsrNetworkQueueEntry__tp_dealloc(PyNs3DsrDsrNetworkQueueEntry *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrDsrNetworkQueueEntry_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrDsrNetworkQueueEntry_wrapper_registry.end()) {
        PyNs3DsrDsrNetworkQueueEntry_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::DsrNetworkQueueEntry *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrNetworkQueueEntry__tp_richcompare (PyNs3DsrDsrNetworkQueueEntry *PYBINDGEN_UNUSED(self), PyNs3DsrDsrNetworkQueueEntry *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrNetworkQueueEntry_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrNetworkQueueEntry_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrNetworkQueueEntry",            /* tp_name */
    sizeof(PyNs3DsrDsrNetworkQueueEntry),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrNetworkQueueEntry__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsrNetworkQueueEntry(pa, s, n, exp, r)\nDsrNetworkQueueEntry(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrNetworkQueueEntry__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrNetworkQueueEntry_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrNetworkQueueEntry__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrDsrNodeStab_wrapper_registry;


static int
_wrap_PyNs3DsrDsrNodeStab__tp_init__0(PyNs3DsrDsrNodeStab *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrNodeStab *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrNodeStab_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrNodeStab(*((PyNs3DsrDsrNodeStab *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrNodeStab__tp_init__1(PyNs3DsrDsrNodeStab *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Time *nodeStab = NULL;
    const char *keywords[] = {"nodeStab", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O!", (char **) keywords, &PyNs3Time_Type, &nodeStab)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrNodeStab((nodeStab ? (*((PyNs3Time *) nodeStab)->obj) : ns3::Simulator::Now( )));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrNodeStab__tp_init(PyNs3DsrDsrNodeStab *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrNodeStab__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrNodeStab__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrNodeStab_GetNodeStability(PyNs3DsrDsrNodeStab *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetNodeStability();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrNodeStab_SetNodeStability(PyNs3DsrDsrNodeStab *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *nodeStab;
    const char *keywords[] = {"nodeStab", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &nodeStab)) {
        return NULL;
    }
    self->obj->SetNodeStability(*((PyNs3Time *) nodeStab)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrNodeStab__copy__(PyNs3DsrDsrNodeStab *self)
{

    PyNs3DsrDsrNodeStab *py_copy;
    py_copy = PyObject_New(PyNs3DsrDsrNodeStab, &PyNs3DsrDsrNodeStab_Type);
    py_copy->obj = new ns3::dsr::DsrNodeStab(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrDsrNodeStab_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrNodeStab_methods[] = {
    {(char *) "GetNodeStability", (PyCFunction) _wrap_PyNs3DsrDsrNodeStab_GetNodeStability, METH_NOARGS, "GetNodeStability()\n\n" },
    {(char *) "SetNodeStability", (PyCFunction) _wrap_PyNs3DsrDsrNodeStab_SetNodeStability, METH_KEYWORDS|METH_VARARGS, "SetNodeStability(nodeStab)\n\ntype: nodeStab: ns3::Time" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrNodeStab__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrDsrNodeStab__tp_dealloc(PyNs3DsrDsrNodeStab *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrDsrNodeStab_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrDsrNodeStab_wrapper_registry.end()) {
        PyNs3DsrDsrNodeStab_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::DsrNodeStab *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrNodeStab__tp_richcompare (PyNs3DsrDsrNodeStab *PYBINDGEN_UNUSED(self), PyNs3DsrDsrNodeStab *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrNodeStab_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrNodeStab_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrNodeStab",            /* tp_name */
    sizeof(PyNs3DsrDsrNodeStab),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrNodeStab__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsrNodeStab(nodeStab)\nDsrNodeStab(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrNodeStab__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrNodeStab_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrNodeStab__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrDsrOptionField_wrapper_registry;


static int
_wrap_PyNs3DsrDsrOptionField__tp_init__0(PyNs3DsrDsrOptionField *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionField *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionField_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionField(*((PyNs3DsrDsrOptionField *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionField__tp_init__1(PyNs3DsrDsrOptionField *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    unsigned int optionsOffset;
    const char *keywords[] = {"optionsOffset", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &optionsOffset)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionField(optionsOffset);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrOptionField__tp_init(PyNs3DsrDsrOptionField *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionField__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionField__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionField_GetDsrOptionBuffer(PyNs3DsrDsrOptionField *self)
{
    PyObject *py_retval;
    PyNs3Buffer *py_Buffer;
    
    ns3::Buffer retval = self->obj->GetDsrOptionBuffer();
    py_Buffer = PyObject_New(PyNs3Buffer, &PyNs3Buffer_Type);
    py_Buffer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Buffer->obj = new ns3::Buffer(retval);
    PyNs3Buffer_wrapper_registry[(void *) py_Buffer->obj] = (PyObject *) py_Buffer;
    py_retval = Py_BuildValue((char *) "N", py_Buffer);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionField_Deserialize(PyNs3DsrDsrOptionField *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    unsigned int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!I", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionField_GetDsrOptionsOffset(PyNs3DsrDsrOptionField *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetDsrOptionsOffset();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionField_Serialize(PyNs3DsrDsrOptionField *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionField_GetSerializedSize(PyNs3DsrDsrOptionField *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionField_AddDsrOption(PyNs3DsrDsrOptionField *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionHeader *option;
    const char *keywords[] = {"option", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionHeader_Type, &option)) {
        return NULL;
    }
    self->obj->AddDsrOption(*((PyNs3DsrDsrOptionHeader *) option)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionField__copy__(PyNs3DsrDsrOptionField *self)
{

    PyNs3DsrDsrOptionField *py_copy;
    py_copy = PyObject_New(PyNs3DsrDsrOptionField, &PyNs3DsrDsrOptionField_Type);
    py_copy->obj = new ns3::dsr::DsrOptionField(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrDsrOptionField_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionField_methods[] = {
    {(char *) "GetDsrOptionBuffer", (PyCFunction) _wrap_PyNs3DsrDsrOptionField_GetDsrOptionBuffer, METH_NOARGS, "GetDsrOptionBuffer()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionField_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start, length)\n\ntype: start: ns3::Buffer::Iterator\ntype: length: uint32_t" },
    {(char *) "GetDsrOptionsOffset", (PyCFunction) _wrap_PyNs3DsrDsrOptionField_GetDsrOptionsOffset, METH_NOARGS, "GetDsrOptionsOffset()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionField_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsrDsrOptionField_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "AddDsrOption", (PyCFunction) _wrap_PyNs3DsrDsrOptionField_AddDsrOption, METH_KEYWORDS|METH_VARARGS, "AddDsrOption(option)\n\ntype: option: ns3::dsr::DsrOptionHeader const &" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionField__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrDsrOptionField__tp_dealloc(PyNs3DsrDsrOptionField *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrDsrOptionField_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrDsrOptionField_wrapper_registry.end()) {
        PyNs3DsrDsrOptionField_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::DsrOptionField *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionField__tp_richcompare (PyNs3DsrDsrOptionField *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionField *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionField_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionField_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionField",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionField),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionField__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsrOptionField(optionsOffset)\nDsrOptionField(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionField__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionField_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionField__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrOptionHeader__tp_init__0(PyNs3DsrDsrOptionHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionHeader(*((PyNs3DsrDsrOptionHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionHeader__tp_init__1(PyNs3DsrDsrOptionHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrOptionHeader__tp_init(PyNs3DsrDsrOptionHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionHeader_Serialize(PyNs3DsrDsrOptionHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionHeader_Deserialize(PyNs3DsrDsrOptionHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionHeader_GetLength(PyNs3DsrDsrOptionHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetLength();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionHeader_GetType(PyNs3DsrDsrOptionHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionHeader_GetInstanceTypeId(PyNs3DsrDsrOptionHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionHeader_GetSerializedSize(PyNs3DsrDsrOptionHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionHeader_GetAlignment(PyNs3DsrDsrOptionHeader *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionHeaderAlignment *py_Alignment;
    
    ns3::dsr::DsrOptionHeader::Alignment retval = self->obj->GetAlignment();
    py_Alignment = PyObject_New(PyNs3DsrDsrOptionHeaderAlignment, &PyNs3DsrDsrOptionHeaderAlignment_Type);
    py_Alignment->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Alignment->obj = new ns3::dsr::DsrOptionHeader::Alignment(retval);
    PyNs3DsrDsrOptionHeaderAlignment_wrapper_registry[(void *) py_Alignment->obj] = (PyObject *) py_Alignment;
    py_retval = Py_BuildValue((char *) "N", py_Alignment);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionHeader_SetLength(PyNs3DsrDsrOptionHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int length;
    const char *keywords[] = {"length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetLength(length);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionHeader_SetType(PyNs3DsrDsrOptionHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    if (type > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetType(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionHeader__copy__(PyNs3DsrDsrOptionHeader *self)
{

    PyNs3DsrDsrOptionHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionHeader, &PyNs3DsrDsrOptionHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::dsr::DsrOptionHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionHeader_methods[] = {
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetLength", (PyCFunction) _wrap_PyNs3DsrDsrOptionHeader_GetLength, METH_NOARGS, "GetLength()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetType", (PyCFunction) _wrap_PyNs3DsrDsrOptionHeader_GetType, METH_NOARGS, "GetType()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsrDsrOptionHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetAlignment", (PyCFunction) _wrap_PyNs3DsrDsrOptionHeader_GetAlignment, METH_NOARGS, "GetAlignment()\n\n" },
    {(char *) "SetLength", (PyCFunction) _wrap_PyNs3DsrDsrOptionHeader_SetLength, METH_KEYWORDS|METH_VARARGS, "SetLength(length)\n\ntype: length: uint8_t" },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3DsrDsrOptionHeader_SetType, METH_KEYWORDS|METH_VARARGS, "SetType(type)\n\ntype: type: uint8_t" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionHeader__tp_clear(PyNs3DsrDsrOptionHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dsr::DsrOptionHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DsrDsrOptionHeader__tp_traverse(PyNs3DsrDsrOptionHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionHeader__tp_dealloc(PyNs3DsrDsrOptionHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionHeader__tp_richcompare (PyNs3DsrDsrOptionHeader *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionHeader",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionHeader(arg0)\nDsrOptionHeader()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrDsrOptionHeaderAlignment_wrapper_registry;
static PyObject* _wrap_PyNs3DsrDsrOptionHeaderAlignment__get_factor(PyNs3DsrDsrOptionHeaderAlignment *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->factor);
    return py_retval;
}
static int _wrap_PyNs3DsrDsrOptionHeaderAlignment__set_factor(PyNs3DsrDsrOptionHeaderAlignment *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->factor = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrDsrOptionHeaderAlignment__get_offset(PyNs3DsrDsrOptionHeaderAlignment *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->offset);
    return py_retval;
}
static int _wrap_PyNs3DsrDsrOptionHeaderAlignment__set_offset(PyNs3DsrDsrOptionHeaderAlignment *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->offset = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3DsrDsrOptionHeaderAlignment__getsets[] = {
    {
        (char*) "offset", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrOptionHeaderAlignment__get_offset, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrDsrOptionHeaderAlignment__set_offset, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "factor", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrOptionHeaderAlignment__get_factor, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrDsrOptionHeaderAlignment__set_factor, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3DsrDsrOptionHeaderAlignment__tp_init__0(PyNs3DsrDsrOptionHeaderAlignment *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionHeader::Alignment();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionHeaderAlignment__tp_init__1(PyNs3DsrDsrOptionHeaderAlignment *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionHeaderAlignment *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionHeaderAlignment_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionHeader::Alignment(*((PyNs3DsrDsrOptionHeaderAlignment *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrOptionHeaderAlignment__tp_init(PyNs3DsrDsrOptionHeaderAlignment *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionHeaderAlignment__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionHeaderAlignment__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionHeaderAlignment__copy__(PyNs3DsrDsrOptionHeaderAlignment *self)
{

    PyNs3DsrDsrOptionHeaderAlignment *py_copy;
    py_copy = PyObject_New(PyNs3DsrDsrOptionHeaderAlignment, &PyNs3DsrDsrOptionHeaderAlignment_Type);
    py_copy->obj = new ns3::dsr::DsrOptionHeader::Alignment(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrDsrOptionHeaderAlignment_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionHeaderAlignment_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionHeaderAlignment__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrDsrOptionHeaderAlignment__tp_dealloc(PyNs3DsrDsrOptionHeaderAlignment *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrDsrOptionHeaderAlignment_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrDsrOptionHeaderAlignment_wrapper_registry.end()) {
        PyNs3DsrDsrOptionHeaderAlignment_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::DsrOptionHeader::Alignment *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionHeaderAlignment__tp_richcompare (PyNs3DsrDsrOptionHeaderAlignment *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionHeaderAlignment *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionHeaderAlignment_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionHeaderAlignment_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionHeader.Alignment",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionHeaderAlignment),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionHeaderAlignment__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "Alignment(arg0)\nAlignment()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionHeaderAlignment__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionHeaderAlignment_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3DsrDsrOptionHeaderAlignment__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionHeaderAlignment__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrOptionPad1Header__tp_init__0(PyNs3DsrDsrOptionPad1Header *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionPad1Header *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionPad1Header_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionPad1Header(*((PyNs3DsrDsrOptionPad1Header *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionPad1Header__tp_init__1(PyNs3DsrDsrOptionPad1Header *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionPad1Header();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrOptionPad1Header__tp_init(PyNs3DsrDsrOptionPad1Header *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionPad1Header__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionPad1Header__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionPad1Header_GetSerializedSize(PyNs3DsrDsrOptionPad1Header *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionPad1Header_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionPad1Header::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionPad1Header_Serialize(PyNs3DsrDsrOptionPad1Header *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionPad1Header_Deserialize(PyNs3DsrDsrOptionPad1Header *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionPad1Header_GetInstanceTypeId(PyNs3DsrDsrOptionPad1Header *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionPad1Header__copy__(PyNs3DsrDsrOptionPad1Header *self)
{

    PyNs3DsrDsrOptionPad1Header *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionPad1Header, &PyNs3DsrDsrOptionPad1Header_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::dsr::DsrOptionPad1Header(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionPad1Header_methods[] = {
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsrDsrOptionPad1Header_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionPad1Header_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionPad1Header_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionPad1Header_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionPad1Header_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionPad1Header__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionPad1Header__tp_clear(PyNs3DsrDsrOptionPad1Header *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dsr::DsrOptionPad1Header *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DsrDsrOptionPad1Header__tp_traverse(PyNs3DsrDsrOptionPad1Header *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionPad1Header__tp_dealloc(PyNs3DsrDsrOptionPad1Header *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionPad1Header__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionPad1Header__tp_richcompare (PyNs3DsrDsrOptionPad1Header *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionPad1Header *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionPad1Header_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionPad1Header_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionPad1Header",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionPad1Header),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionPad1Header__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionPad1Header(arg0)\nDsrOptionPad1Header()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionPad1Header__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionPad1Header__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionPad1Header__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionPad1Header_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionPad1Header, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionPad1Header__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrOptionPadnHeader__tp_init__0(PyNs3DsrDsrOptionPadnHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionPadnHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionPadnHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionPadnHeader(*((PyNs3DsrDsrOptionPadnHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionPadnHeader__tp_init__1(PyNs3DsrDsrOptionPadnHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    unsigned int pad = 2;
    const char *keywords[] = {"pad", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|I", (char **) keywords, &pad)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionPadnHeader(pad);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrOptionPadnHeader__tp_init(PyNs3DsrDsrOptionPadnHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionPadnHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionPadnHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionPadnHeader_GetSerializedSize(PyNs3DsrDsrOptionPadnHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionPadnHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionPadnHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionPadnHeader_Serialize(PyNs3DsrDsrOptionPadnHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionPadnHeader_Deserialize(PyNs3DsrDsrOptionPadnHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionPadnHeader_GetInstanceTypeId(PyNs3DsrDsrOptionPadnHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionPadnHeader__copy__(PyNs3DsrDsrOptionPadnHeader *self)
{

    PyNs3DsrDsrOptionPadnHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionPadnHeader, &PyNs3DsrDsrOptionPadnHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::dsr::DsrOptionPadnHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionPadnHeader_methods[] = {
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsrDsrOptionPadnHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionPadnHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionPadnHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionPadnHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionPadnHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionPadnHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionPadnHeader__tp_clear(PyNs3DsrDsrOptionPadnHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dsr::DsrOptionPadnHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DsrDsrOptionPadnHeader__tp_traverse(PyNs3DsrDsrOptionPadnHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionPadnHeader__tp_dealloc(PyNs3DsrDsrOptionPadnHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionPadnHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionPadnHeader__tp_richcompare (PyNs3DsrDsrOptionPadnHeader *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionPadnHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionPadnHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionPadnHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionPadnHeader",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionPadnHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionPadnHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionPadnHeader(arg0)\nDsrOptionPadnHeader(pad)",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionPadnHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionPadnHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionPadnHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionPadnHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionPadnHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionPadnHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrOptionRerrHeader__tp_init__0(PyNs3DsrDsrOptionRerrHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionRerrHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionRerrHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionRerrHeader(*((PyNs3DsrDsrOptionRerrHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionRerrHeader__tp_init__1(PyNs3DsrDsrOptionRerrHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionRerrHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrOptionRerrHeader__tp_init(PyNs3DsrDsrOptionRerrHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionRerrHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionRerrHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrHeader_GetErrorType(PyNs3DsrDsrOptionRerrHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetErrorType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrHeader_GetErrorSrc(PyNs3DsrDsrOptionRerrHeader *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetErrorSrc();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrHeader_Deserialize(PyNs3DsrDsrOptionRerrHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionRerrHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrHeader_GetAlignment(PyNs3DsrDsrOptionRerrHeader *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionHeaderAlignment *py_Alignment;
    
    ns3::dsr::DsrOptionHeader::Alignment retval = self->obj->GetAlignment();
    py_Alignment = PyObject_New(PyNs3DsrDsrOptionHeaderAlignment, &PyNs3DsrDsrOptionHeaderAlignment_Type);
    py_Alignment->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Alignment->obj = new ns3::dsr::DsrOptionHeader::Alignment(retval);
    PyNs3DsrDsrOptionHeaderAlignment_wrapper_registry[(void *) py_Alignment->obj] = (PyObject *) py_Alignment;
    py_retval = Py_BuildValue((char *) "N", py_Alignment);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrHeader_GetSalvage(PyNs3DsrDsrOptionRerrHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSalvage();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrHeader_SetErrorType(PyNs3DsrDsrOptionRerrHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int errorType;
    const char *keywords[] = {"errorType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &errorType)) {
        return NULL;
    }
    if (errorType > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetErrorType(errorType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrHeader_SetErrorDst(PyNs3DsrDsrOptionRerrHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *errorDstAddress;
    const char *keywords[] = {"errorDstAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &errorDstAddress)) {
        return NULL;
    }
    self->obj->SetErrorDst(*((PyNs3Ipv4Address *) errorDstAddress)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrHeader_SetSalvage(PyNs3DsrDsrOptionRerrHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int salvage;
    const char *keywords[] = {"salvage", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &salvage)) {
        return NULL;
    }
    if (salvage > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSalvage(salvage);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrHeader_GetErrorDst(PyNs3DsrDsrOptionRerrHeader *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetErrorDst();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrHeader_GetInstanceTypeId(PyNs3DsrDsrOptionRerrHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrHeader_GetSerializedSize(PyNs3DsrDsrOptionRerrHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrHeader_Serialize(PyNs3DsrDsrOptionRerrHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrHeader_SetErrorSrc(PyNs3DsrDsrOptionRerrHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *errorSrcAddress;
    const char *keywords[] = {"errorSrcAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &errorSrcAddress)) {
        return NULL;
    }
    self->obj->SetErrorSrc(*((PyNs3Ipv4Address *) errorSrcAddress)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionRerrHeader__copy__(PyNs3DsrDsrOptionRerrHeader *self)
{

    PyNs3DsrDsrOptionRerrHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionRerrHeader, &PyNs3DsrDsrOptionRerrHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::dsr::DsrOptionRerrHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionRerrHeader_methods[] = {
    {(char *) "GetErrorType", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrHeader_GetErrorType, METH_NOARGS, "GetErrorType()\n\n" },
    {(char *) "GetErrorSrc", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrHeader_GetErrorSrc, METH_NOARGS, "GetErrorSrc()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetAlignment", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrHeader_GetAlignment, METH_NOARGS, "GetAlignment()\n\n" },
    {(char *) "GetSalvage", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrHeader_GetSalvage, METH_NOARGS, "GetSalvage()\n\n" },
    {(char *) "SetErrorType", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrHeader_SetErrorType, METH_KEYWORDS|METH_VARARGS, "SetErrorType(errorType)\n\ntype: errorType: uint8_t" },
    {(char *) "SetErrorDst", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrHeader_SetErrorDst, METH_KEYWORDS|METH_VARARGS, "SetErrorDst(errorDstAddress)\n\ntype: errorDstAddress: ns3::Ipv4Address" },
    {(char *) "SetSalvage", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrHeader_SetSalvage, METH_KEYWORDS|METH_VARARGS, "SetSalvage(salvage)\n\ntype: salvage: uint8_t" },
    {(char *) "GetErrorDst", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrHeader_GetErrorDst, METH_NOARGS, "GetErrorDst()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetErrorSrc", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrHeader_SetErrorSrc, METH_KEYWORDS|METH_VARARGS, "SetErrorSrc(errorSrcAddress)\n\ntype: errorSrcAddress: ns3::Ipv4Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionRerrHeader__tp_clear(PyNs3DsrDsrOptionRerrHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dsr::DsrOptionRerrHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DsrDsrOptionRerrHeader__tp_traverse(PyNs3DsrDsrOptionRerrHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionRerrHeader__tp_dealloc(PyNs3DsrDsrOptionRerrHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionRerrHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionRerrHeader__tp_richcompare (PyNs3DsrDsrOptionRerrHeader *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionRerrHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionRerrHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionRerrHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionRerrHeader",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionRerrHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionRerrHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionRerrHeader(arg0)\nDsrOptionRerrHeader()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionRerrHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionRerrHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionRerrHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionRerrHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionRerrHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionRerrHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader__tp_init__0(PyNs3DsrDsrOptionRerrUnreachHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionRerrUnreachHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionRerrUnreachHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionRerrUnreachHeader(*((PyNs3DsrDsrOptionRerrUnreachHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader__tp_init__1(PyNs3DsrDsrOptionRerrUnreachHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionRerrUnreachHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrOptionRerrUnreachHeader__tp_init(PyNs3DsrDsrOptionRerrUnreachHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionRerrUnreachHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionRerrUnreachHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetOriginalDst(PyNs3DsrDsrOptionRerrUnreachHeader *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetOriginalDst();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader_SetErrorDst(PyNs3DsrDsrOptionRerrUnreachHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *errorDstAddress;
    const char *keywords[] = {"errorDstAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &errorDstAddress)) {
        return NULL;
    }
    self->obj->SetErrorDst(*((PyNs3Ipv4Address *) errorDstAddress)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetErrorSrc(PyNs3DsrDsrOptionRerrUnreachHeader *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetErrorSrc();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader_Deserialize(PyNs3DsrDsrOptionRerrUnreachHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader_SetOriginalDst(PyNs3DsrDsrOptionRerrUnreachHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *originalDst;
    const char *keywords[] = {"originalDst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &originalDst)) {
        return NULL;
    }
    self->obj->SetOriginalDst(*((PyNs3Ipv4Address *) originalDst)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionRerrUnreachHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetAlignment(PyNs3DsrDsrOptionRerrUnreachHeader *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionHeaderAlignment *py_Alignment;
    
    ns3::dsr::DsrOptionHeader::Alignment retval = self->obj->GetAlignment();
    py_Alignment = PyObject_New(PyNs3DsrDsrOptionHeaderAlignment, &PyNs3DsrDsrOptionHeaderAlignment_Type);
    py_Alignment->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Alignment->obj = new ns3::dsr::DsrOptionHeader::Alignment(retval);
    PyNs3DsrDsrOptionHeaderAlignment_wrapper_registry[(void *) py_Alignment->obj] = (PyObject *) py_Alignment;
    py_retval = Py_BuildValue((char *) "N", py_Alignment);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetSalvage(PyNs3DsrDsrOptionRerrUnreachHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSalvage();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetUnreachNode(PyNs3DsrDsrOptionRerrUnreachHeader *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetUnreachNode();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader_SetSalvage(PyNs3DsrDsrOptionRerrUnreachHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int salvage;
    const char *keywords[] = {"salvage", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &salvage)) {
        return NULL;
    }
    if (salvage > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSalvage(salvage);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetErrorDst(PyNs3DsrDsrOptionRerrUnreachHeader *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetErrorDst();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetInstanceTypeId(PyNs3DsrDsrOptionRerrUnreachHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetSerializedSize(PyNs3DsrDsrOptionRerrUnreachHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader_SetUnreachNode(PyNs3DsrDsrOptionRerrUnreachHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *unreachNode;
    const char *keywords[] = {"unreachNode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &unreachNode)) {
        return NULL;
    }
    self->obj->SetUnreachNode(*((PyNs3Ipv4Address *) unreachNode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader_Serialize(PyNs3DsrDsrOptionRerrUnreachHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader_SetErrorSrc(PyNs3DsrDsrOptionRerrUnreachHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *errorSrcAddress;
    const char *keywords[] = {"errorSrcAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &errorSrcAddress)) {
        return NULL;
    }
    self->obj->SetErrorSrc(*((PyNs3Ipv4Address *) errorSrcAddress)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader__copy__(PyNs3DsrDsrOptionRerrUnreachHeader *self)
{

    PyNs3DsrDsrOptionRerrUnreachHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionRerrUnreachHeader, &PyNs3DsrDsrOptionRerrUnreachHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::dsr::DsrOptionRerrUnreachHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionRerrUnreachHeader_methods[] = {
    {(char *) "GetOriginalDst", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetOriginalDst, METH_NOARGS, "GetOriginalDst()\n\n" },
    {(char *) "SetErrorDst", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader_SetErrorDst, METH_KEYWORDS|METH_VARARGS, "SetErrorDst(errorDstAddress)\n\ntype: errorDstAddress: ns3::Ipv4Address" },
    {(char *) "GetErrorSrc", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetErrorSrc, METH_NOARGS, "GetErrorSrc()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetOriginalDst", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader_SetOriginalDst, METH_KEYWORDS|METH_VARARGS, "SetOriginalDst(originalDst)\n\ntype: originalDst: ns3::Ipv4Address" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetAlignment", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetAlignment, METH_NOARGS, "GetAlignment()\n\n" },
    {(char *) "GetSalvage", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetSalvage, METH_NOARGS, "GetSalvage()\n\n" },
    {(char *) "GetUnreachNode", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetUnreachNode, METH_NOARGS, "GetUnreachNode()\n\n" },
    {(char *) "SetSalvage", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader_SetSalvage, METH_KEYWORDS|METH_VARARGS, "SetSalvage(salvage)\n\ntype: salvage: uint8_t" },
    {(char *) "GetErrorDst", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetErrorDst, METH_NOARGS, "GetErrorDst()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetUnreachNode", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader_SetUnreachNode, METH_KEYWORDS|METH_VARARGS, "SetUnreachNode(unreachNode)\n\ntype: unreachNode: ns3::Ipv4Address" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetErrorSrc", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader_SetErrorSrc, METH_KEYWORDS|METH_VARARGS, "SetErrorSrc(errorSrcAddress)\n\ntype: errorSrcAddress: ns3::Ipv4Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnreachHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionRerrUnreachHeader__tp_clear(PyNs3DsrDsrOptionRerrUnreachHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dsr::DsrOptionRerrUnreachHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DsrDsrOptionRerrUnreachHeader__tp_traverse(PyNs3DsrDsrOptionRerrUnreachHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader__tp_dealloc(PyNs3DsrDsrOptionRerrUnreachHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionRerrUnreachHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionRerrUnreachHeader__tp_richcompare (PyNs3DsrDsrOptionRerrUnreachHeader *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionRerrUnreachHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionRerrUnreachHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionRerrUnreachHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionRerrUnreachHeader",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionRerrUnreachHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionRerrUnreachHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionRerrUnreachHeader(arg0)\nDsrOptionRerrUnreachHeader()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionRerrUnreachHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionRerrUnreachHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionRerrUnreachHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionRerrUnreachHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionRerrUnreachHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionRerrUnreachHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader__tp_init__0(PyNs3DsrDsrOptionRerrUnsupportHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionRerrUnsupportHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionRerrUnsupportHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionRerrUnsupportHeader(*((PyNs3DsrDsrOptionRerrUnsupportHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader__tp_init__1(PyNs3DsrDsrOptionRerrUnsupportHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionRerrUnsupportHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader__tp_init(PyNs3DsrDsrOptionRerrUnsupportHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_SetUnsupported(PyNs3DsrDsrOptionRerrUnsupportHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int optionType;
    const char *keywords[] = {"optionType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &optionType)) {
        return NULL;
    }
    if (optionType > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetUnsupported(optionType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_GetErrorSrc(PyNs3DsrDsrOptionRerrUnsupportHeader *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetErrorSrc();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_Deserialize(PyNs3DsrDsrOptionRerrUnsupportHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionRerrUnsupportHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_GetAlignment(PyNs3DsrDsrOptionRerrUnsupportHeader *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionHeaderAlignment *py_Alignment;
    
    ns3::dsr::DsrOptionHeader::Alignment retval = self->obj->GetAlignment();
    py_Alignment = PyObject_New(PyNs3DsrDsrOptionHeaderAlignment, &PyNs3DsrDsrOptionHeaderAlignment_Type);
    py_Alignment->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Alignment->obj = new ns3::dsr::DsrOptionHeader::Alignment(retval);
    PyNs3DsrDsrOptionHeaderAlignment_wrapper_registry[(void *) py_Alignment->obj] = (PyObject *) py_Alignment;
    py_retval = Py_BuildValue((char *) "N", py_Alignment);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_GetUnsupported(PyNs3DsrDsrOptionRerrUnsupportHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetUnsupported();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_GetSalvage(PyNs3DsrDsrOptionRerrUnsupportHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSalvage();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_SetErrorDst(PyNs3DsrDsrOptionRerrUnsupportHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *errorDstAddress;
    const char *keywords[] = {"errorDstAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &errorDstAddress)) {
        return NULL;
    }
    self->obj->SetErrorDst(*((PyNs3Ipv4Address *) errorDstAddress)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_SetSalvage(PyNs3DsrDsrOptionRerrUnsupportHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int salvage;
    const char *keywords[] = {"salvage", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &salvage)) {
        return NULL;
    }
    if (salvage > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSalvage(salvage);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_GetErrorDst(PyNs3DsrDsrOptionRerrUnsupportHeader *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetErrorDst();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_GetInstanceTypeId(PyNs3DsrDsrOptionRerrUnsupportHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_GetSerializedSize(PyNs3DsrDsrOptionRerrUnsupportHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_Serialize(PyNs3DsrDsrOptionRerrUnsupportHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_SetErrorSrc(PyNs3DsrDsrOptionRerrUnsupportHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *errorSrcAddress;
    const char *keywords[] = {"errorSrcAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &errorSrcAddress)) {
        return NULL;
    }
    self->obj->SetErrorSrc(*((PyNs3Ipv4Address *) errorSrcAddress)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader__copy__(PyNs3DsrDsrOptionRerrUnsupportHeader *self)
{

    PyNs3DsrDsrOptionRerrUnsupportHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionRerrUnsupportHeader, &PyNs3DsrDsrOptionRerrUnsupportHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::dsr::DsrOptionRerrUnsupportHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionRerrUnsupportHeader_methods[] = {
    {(char *) "SetUnsupported", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_SetUnsupported, METH_KEYWORDS|METH_VARARGS, "SetUnsupported(optionType)\n\ntype: optionType: uint16_t" },
    {(char *) "GetErrorSrc", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_GetErrorSrc, METH_NOARGS, "GetErrorSrc()\n\n" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetAlignment", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_GetAlignment, METH_NOARGS, "GetAlignment()\n\n" },
    {(char *) "GetUnsupported", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_GetUnsupported, METH_NOARGS, "GetUnsupported()\n\n" },
    {(char *) "GetSalvage", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_GetSalvage, METH_NOARGS, "GetSalvage()\n\n" },
    {(char *) "SetErrorDst", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_SetErrorDst, METH_KEYWORDS|METH_VARARGS, "SetErrorDst(errorDstAddress)\n\ntype: errorDstAddress: ns3::Ipv4Address" },
    {(char *) "SetSalvage", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_SetSalvage, METH_KEYWORDS|METH_VARARGS, "SetSalvage(salvage)\n\ntype: salvage: uint8_t" },
    {(char *) "GetErrorDst", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_GetErrorDst, METH_NOARGS, "GetErrorDst()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetErrorSrc", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader_SetErrorSrc, METH_KEYWORDS|METH_VARARGS, "SetErrorSrc(errorSrcAddress)\n\ntype: errorSrcAddress: ns3::Ipv4Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerrUnsupportHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionRerrUnsupportHeader__tp_clear(PyNs3DsrDsrOptionRerrUnsupportHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dsr::DsrOptionRerrUnsupportHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DsrDsrOptionRerrUnsupportHeader__tp_traverse(PyNs3DsrDsrOptionRerrUnsupportHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader__tp_dealloc(PyNs3DsrDsrOptionRerrUnsupportHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionRerrUnsupportHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader__tp_richcompare (PyNs3DsrDsrOptionRerrUnsupportHeader *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionRerrUnsupportHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionRerrUnsupportHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionRerrUnsupportHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionRerrUnsupportHeader",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionRerrUnsupportHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionRerrUnsupportHeader(arg0)\nDsrOptionRerrUnsupportHeader()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionRerrUnsupportHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionRerrUnsupportHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionRerrUnsupportHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionRerrUnsupportHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionRerrUnsupportHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrOptionRrepHeader__tp_init__0(PyNs3DsrDsrOptionRrepHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionRrepHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionRrepHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionRrepHeader(*((PyNs3DsrDsrOptionRrepHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionRrepHeader__tp_init__1(PyNs3DsrDsrOptionRrepHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionRrepHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrOptionRrepHeader__tp_init(PyNs3DsrDsrOptionRrepHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionRrepHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionRrepHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRrepHeader_Serialize(PyNs3DsrDsrOptionRrepHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRrepHeader_SetNodesAddress(PyNs3DsrDsrOptionRrepHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > ipv4Address_value;
    const char *keywords[] = {"ipv4Address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &ipv4Address_value)) {
        return NULL;
    }
    self->obj->SetNodesAddress(ipv4Address_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRrepHeader_Deserialize(PyNs3DsrDsrOptionRrepHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRrepHeader_SetNumberAddress(PyNs3DsrDsrOptionRrepHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int n;
    const char *keywords[] = {"n", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &n)) {
        return NULL;
    }
    if (n > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNumberAddress(n);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRrepHeader_GetNodesAddress(PyNs3DsrDsrOptionRrepHeader *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > retval;
    Pystd__vector__lt___ns3__Ipv4Address___gt__ *py_std__vector__lt___ns3__Ipv4Address___gt__;
    
    retval = self->obj->GetNodesAddress();
    py_std__vector__lt___ns3__Ipv4Address___gt__ = PyObject_New(Pystd__vector__lt___ns3__Ipv4Address___gt__, &Pystd__vector__lt___ns3__Ipv4Address___gt___Type);
    py_std__vector__lt___ns3__Ipv4Address___gt__->obj = new std::vector< ns3::Ipv4Address >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__Ipv4Address___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRrepHeader_GetAlignment(PyNs3DsrDsrOptionRrepHeader *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionHeaderAlignment *py_Alignment;
    
    ns3::dsr::DsrOptionHeader::Alignment retval = self->obj->GetAlignment();
    py_Alignment = PyObject_New(PyNs3DsrDsrOptionHeaderAlignment, &PyNs3DsrDsrOptionHeaderAlignment_Type);
    py_Alignment->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Alignment->obj = new ns3::dsr::DsrOptionHeader::Alignment(retval);
    PyNs3DsrDsrOptionHeaderAlignment_wrapper_registry[(void *) py_Alignment->obj] = (PyObject *) py_Alignment;
    py_retval = Py_BuildValue((char *) "N", py_Alignment);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRrepHeader_GetTargetAddress(PyNs3DsrDsrOptionRrepHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > ipv4Address_value;
    const char *keywords[] = {"ipv4Address", NULL};
    PyNs3Ipv4Address *py_Ipv4Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &ipv4Address_value)) {
        return NULL;
    }
    ns3::Ipv4Address retval = self->obj->GetTargetAddress(ipv4Address_value);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRrepHeader_GetNodeAddress(PyNs3DsrDsrOptionRrepHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int index;
    const char *keywords[] = {"index", NULL};
    PyNs3Ipv4Address *py_Ipv4Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &index)) {
        return NULL;
    }
    if (index > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::Ipv4Address retval = self->obj->GetNodeAddress(index);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRrepHeader_GetInstanceTypeId(PyNs3DsrDsrOptionRrepHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRrepHeader_GetSerializedSize(PyNs3DsrDsrOptionRrepHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRrepHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionRrepHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRrepHeader_SetNodeAddress(PyNs3DsrDsrOptionRrepHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int index;
    PyNs3Ipv4Address *addr;
    const char *keywords[] = {"index", "addr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &index, &PyNs3Ipv4Address_Type, &addr)) {
        return NULL;
    }
    if (index > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNodeAddress(index, *((PyNs3Ipv4Address *) addr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionRrepHeader__copy__(PyNs3DsrDsrOptionRrepHeader *self)
{

    PyNs3DsrDsrOptionRrepHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionRrepHeader, &PyNs3DsrDsrOptionRrepHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::dsr::DsrOptionRrepHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionRrepHeader_methods[] = {
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrepHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetNodesAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrepHeader_SetNodesAddress, METH_KEYWORDS|METH_VARARGS, "SetNodesAddress(ipv4Address)\n\ntype: ipv4Address: std::vector< ns3::Ipv4Address >" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrepHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetNumberAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrepHeader_SetNumberAddress, METH_KEYWORDS|METH_VARARGS, "SetNumberAddress(n)\n\ntype: n: uint8_t" },
    {(char *) "GetNodesAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrepHeader_GetNodesAddress, METH_NOARGS, "GetNodesAddress()\n\n" },
    {(char *) "GetAlignment", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrepHeader_GetAlignment, METH_NOARGS, "GetAlignment()\n\n" },
    {(char *) "GetTargetAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrepHeader_GetTargetAddress, METH_KEYWORDS|METH_VARARGS, "GetTargetAddress(ipv4Address)\n\ntype: ipv4Address: std::vector< ns3::Ipv4Address >" },
    {(char *) "GetNodeAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrepHeader_GetNodeAddress, METH_KEYWORDS|METH_VARARGS, "GetNodeAddress(index)\n\ntype: index: uint8_t" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrepHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrepHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrepHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetNodeAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrepHeader_SetNodeAddress, METH_KEYWORDS|METH_VARARGS, "SetNodeAddress(index, addr)\n\ntype: index: uint8_t\ntype: addr: ns3::Ipv4Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrepHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionRrepHeader__tp_clear(PyNs3DsrDsrOptionRrepHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dsr::DsrOptionRrepHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DsrDsrOptionRrepHeader__tp_traverse(PyNs3DsrDsrOptionRrepHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionRrepHeader__tp_dealloc(PyNs3DsrDsrOptionRrepHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionRrepHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionRrepHeader__tp_richcompare (PyNs3DsrDsrOptionRrepHeader *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionRrepHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionRrepHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionRrepHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionRrepHeader",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionRrepHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionRrepHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionRrepHeader(arg0)\nDsrOptionRrepHeader()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionRrepHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionRrepHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionRrepHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionRrepHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionRrepHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionRrepHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrOptionRreqHeader__tp_init__0(PyNs3DsrDsrOptionRreqHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionRreqHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionRreqHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionRreqHeader(*((PyNs3DsrDsrOptionRreqHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionRreqHeader__tp_init__1(PyNs3DsrDsrOptionRreqHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionRreqHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrOptionRreqHeader__tp_init(PyNs3DsrDsrOptionRreqHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionRreqHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionRreqHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_Serialize(PyNs3DsrDsrOptionRreqHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_SetNodesAddress(PyNs3DsrDsrOptionRreqHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > ipv4Address_value;
    const char *keywords[] = {"ipv4Address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &ipv4Address_value)) {
        return NULL;
    }
    self->obj->SetNodesAddress(ipv4Address_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_Deserialize(PyNs3DsrDsrOptionRreqHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_SetNumberAddress(PyNs3DsrDsrOptionRreqHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int n;
    const char *keywords[] = {"n", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &n)) {
        return NULL;
    }
    if (n > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNumberAddress(n);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_GetNodesNumber(PyNs3DsrDsrOptionRreqHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNodesNumber();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_GetAlignment(PyNs3DsrDsrOptionRreqHeader *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionHeaderAlignment *py_Alignment;
    
    ns3::dsr::DsrOptionHeader::Alignment retval = self->obj->GetAlignment();
    py_Alignment = PyObject_New(PyNs3DsrDsrOptionHeaderAlignment, &PyNs3DsrDsrOptionHeaderAlignment_Type);
    py_Alignment->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Alignment->obj = new ns3::dsr::DsrOptionHeader::Alignment(retval);
    PyNs3DsrDsrOptionHeaderAlignment_wrapper_registry[(void *) py_Alignment->obj] = (PyObject *) py_Alignment;
    py_retval = Py_BuildValue((char *) "N", py_Alignment);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_SetTarget(PyNs3DsrDsrOptionRreqHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *target;
    const char *keywords[] = {"target", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &target)) {
        return NULL;
    }
    self->obj->SetTarget(*((PyNs3Ipv4Address *) target)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_GetId(PyNs3DsrDsrOptionRreqHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetId();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_AddNodeAddress(PyNs3DsrDsrOptionRreqHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *ipv4;
    const char *keywords[] = {"ipv4", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &ipv4)) {
        return NULL;
    }
    self->obj->AddNodeAddress(*((PyNs3Ipv4Address *) ipv4)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_GetNodeAddress(PyNs3DsrDsrOptionRreqHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int index;
    const char *keywords[] = {"index", NULL};
    PyNs3Ipv4Address *py_Ipv4Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &index)) {
        return NULL;
    }
    if (index > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::Ipv4Address retval = self->obj->GetNodeAddress(index);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_GetInstanceTypeId(PyNs3DsrDsrOptionRreqHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_GetSerializedSize(PyNs3DsrDsrOptionRreqHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_SetId(PyNs3DsrDsrOptionRreqHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int identification;
    const char *keywords[] = {"identification", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &identification)) {
        return NULL;
    }
    if (identification > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetId(identification);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_GetTarget(PyNs3DsrDsrOptionRreqHeader *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetTarget();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_GetNodesAddresses(PyNs3DsrDsrOptionRreqHeader *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > retval;
    Pystd__vector__lt___ns3__Ipv4Address___gt__ *py_std__vector__lt___ns3__Ipv4Address___gt__;
    
    retval = self->obj->GetNodesAddresses();
    py_std__vector__lt___ns3__Ipv4Address___gt__ = PyObject_New(Pystd__vector__lt___ns3__Ipv4Address___gt__, &Pystd__vector__lt___ns3__Ipv4Address___gt___Type);
    py_std__vector__lt___ns3__Ipv4Address___gt__->obj = new std::vector< ns3::Ipv4Address >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__Ipv4Address___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionRreqHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreqHeader_SetNodeAddress(PyNs3DsrDsrOptionRreqHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int index;
    PyNs3Ipv4Address *addr;
    const char *keywords[] = {"index", "addr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &index, &PyNs3Ipv4Address_Type, &addr)) {
        return NULL;
    }
    if (index > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNodeAddress(index, *((PyNs3Ipv4Address *) addr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionRreqHeader__copy__(PyNs3DsrDsrOptionRreqHeader *self)
{

    PyNs3DsrDsrOptionRreqHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionRreqHeader, &PyNs3DsrDsrOptionRreqHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::dsr::DsrOptionRreqHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionRreqHeader_methods[] = {
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetNodesAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_SetNodesAddress, METH_KEYWORDS|METH_VARARGS, "SetNodesAddress(ipv4Address)\n\ntype: ipv4Address: std::vector< ns3::Ipv4Address >" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetNumberAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_SetNumberAddress, METH_KEYWORDS|METH_VARARGS, "SetNumberAddress(n)\n\ntype: n: uint8_t" },
    {(char *) "GetNodesNumber", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_GetNodesNumber, METH_NOARGS, "GetNodesNumber()\n\n" },
    {(char *) "GetAlignment", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_GetAlignment, METH_NOARGS, "GetAlignment()\n\n" },
    {(char *) "SetTarget", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_SetTarget, METH_KEYWORDS|METH_VARARGS, "SetTarget(target)\n\ntype: target: ns3::Ipv4Address" },
    {(char *) "GetId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_GetId, METH_NOARGS, "GetId()\n\n" },
    {(char *) "AddNodeAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_AddNodeAddress, METH_KEYWORDS|METH_VARARGS, "AddNodeAddress(ipv4)\n\ntype: ipv4: ns3::Ipv4Address" },
    {(char *) "GetNodeAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_GetNodeAddress, METH_KEYWORDS|METH_VARARGS, "GetNodeAddress(index)\n\ntype: index: uint8_t" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_SetId, METH_KEYWORDS|METH_VARARGS, "SetId(identification)\n\ntype: identification: uint16_t" },
    {(char *) "GetTarget", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_GetTarget, METH_NOARGS, "GetTarget()\n\n" },
    {(char *) "GetNodesAddresses", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_GetNodesAddresses, METH_NOARGS, "GetNodesAddresses()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetNodeAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader_SetNodeAddress, METH_KEYWORDS|METH_VARARGS, "SetNodeAddress(index, addr)\n\ntype: index: uint8_t\ntype: addr: ns3::Ipv4Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreqHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionRreqHeader__tp_clear(PyNs3DsrDsrOptionRreqHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dsr::DsrOptionRreqHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DsrDsrOptionRreqHeader__tp_traverse(PyNs3DsrDsrOptionRreqHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionRreqHeader__tp_dealloc(PyNs3DsrDsrOptionRreqHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionRreqHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionRreqHeader__tp_richcompare (PyNs3DsrDsrOptionRreqHeader *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionRreqHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionRreqHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionRreqHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionRreqHeader",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionRreqHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionRreqHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionRreqHeader(arg0)\nDsrOptionRreqHeader()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionRreqHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionRreqHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionRreqHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionRreqHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionRreqHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionRreqHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrOptionSRHeader__tp_init__0(PyNs3DsrDsrOptionSRHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionSRHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionSRHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionSRHeader(*((PyNs3DsrDsrOptionSRHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionSRHeader__tp_init__1(PyNs3DsrDsrOptionSRHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionSRHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrOptionSRHeader__tp_init(PyNs3DsrDsrOptionSRHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionSRHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionSRHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader_Serialize(PyNs3DsrDsrOptionSRHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader_SetNodesAddress(PyNs3DsrDsrOptionSRHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > ipv4Address_value;
    const char *keywords[] = {"ipv4Address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &ipv4Address_value)) {
        return NULL;
    }
    self->obj->SetNodesAddress(ipv4Address_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader_Deserialize(PyNs3DsrDsrOptionSRHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader_SetNumberAddress(PyNs3DsrDsrOptionSRHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int n;
    const char *keywords[] = {"n", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &n)) {
        return NULL;
    }
    if (n > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNumberAddress(n);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader_GetNodesAddress(PyNs3DsrDsrOptionSRHeader *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > retval;
    Pystd__vector__lt___ns3__Ipv4Address___gt__ *py_std__vector__lt___ns3__Ipv4Address___gt__;
    
    retval = self->obj->GetNodesAddress();
    py_std__vector__lt___ns3__Ipv4Address___gt__ = PyObject_New(Pystd__vector__lt___ns3__Ipv4Address___gt__, &Pystd__vector__lt___ns3__Ipv4Address___gt___Type);
    py_std__vector__lt___ns3__Ipv4Address___gt__->obj = new std::vector< ns3::Ipv4Address >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__Ipv4Address___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader_GetAlignment(PyNs3DsrDsrOptionSRHeader *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionHeaderAlignment *py_Alignment;
    
    ns3::dsr::DsrOptionHeader::Alignment retval = self->obj->GetAlignment();
    py_Alignment = PyObject_New(PyNs3DsrDsrOptionHeaderAlignment, &PyNs3DsrDsrOptionHeaderAlignment_Type);
    py_Alignment->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Alignment->obj = new ns3::dsr::DsrOptionHeader::Alignment(retval);
    PyNs3DsrDsrOptionHeaderAlignment_wrapper_registry[(void *) py_Alignment->obj] = (PyObject *) py_Alignment;
    py_retval = Py_BuildValue((char *) "N", py_Alignment);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader_GetSalvage(PyNs3DsrDsrOptionSRHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSalvage();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader_SetSalvage(PyNs3DsrDsrOptionSRHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int salvage;
    const char *keywords[] = {"salvage", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &salvage)) {
        return NULL;
    }
    if (salvage > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSalvage(salvage);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader_GetNodeListSize(PyNs3DsrDsrOptionSRHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNodeListSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader_GetNodeAddress(PyNs3DsrDsrOptionSRHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int index;
    const char *keywords[] = {"index", NULL};
    PyNs3Ipv4Address *py_Ipv4Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &index)) {
        return NULL;
    }
    if (index > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::Ipv4Address retval = self->obj->GetNodeAddress(index);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader_GetInstanceTypeId(PyNs3DsrDsrOptionSRHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader_GetSerializedSize(PyNs3DsrDsrOptionSRHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader_GetSegmentsLeft(PyNs3DsrDsrOptionSRHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSegmentsLeft();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionSRHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader_SetSegmentsLeft(PyNs3DsrDsrOptionSRHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int segmentsLeft;
    const char *keywords[] = {"segmentsLeft", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &segmentsLeft)) {
        return NULL;
    }
    if (segmentsLeft > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSegmentsLeft(segmentsLeft);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader_SetNodeAddress(PyNs3DsrDsrOptionSRHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int index;
    PyNs3Ipv4Address *addr;
    const char *keywords[] = {"index", "addr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &index, &PyNs3Ipv4Address_Type, &addr)) {
        return NULL;
    }
    if (index > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNodeAddress(index, *((PyNs3Ipv4Address *) addr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionSRHeader__copy__(PyNs3DsrDsrOptionSRHeader *self)
{

    PyNs3DsrDsrOptionSRHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionSRHeader, &PyNs3DsrDsrOptionSRHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::dsr::DsrOptionSRHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionSRHeader_methods[] = {
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetNodesAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader_SetNodesAddress, METH_KEYWORDS|METH_VARARGS, "SetNodesAddress(ipv4Address)\n\ntype: ipv4Address: std::vector< ns3::Ipv4Address >" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetNumberAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader_SetNumberAddress, METH_KEYWORDS|METH_VARARGS, "SetNumberAddress(n)\n\ntype: n: uint8_t" },
    {(char *) "GetNodesAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader_GetNodesAddress, METH_NOARGS, "GetNodesAddress()\n\n" },
    {(char *) "GetAlignment", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader_GetAlignment, METH_NOARGS, "GetAlignment()\n\n" },
    {(char *) "GetSalvage", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader_GetSalvage, METH_NOARGS, "GetSalvage()\n\n" },
    {(char *) "SetSalvage", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader_SetSalvage, METH_KEYWORDS|METH_VARARGS, "SetSalvage(salvage)\n\ntype: salvage: uint8_t" },
    {(char *) "GetNodeListSize", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader_GetNodeListSize, METH_NOARGS, "GetNodeListSize()\n\n" },
    {(char *) "GetNodeAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader_GetNodeAddress, METH_KEYWORDS|METH_VARARGS, "GetNodeAddress(index)\n\ntype: index: uint8_t" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetSegmentsLeft", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader_GetSegmentsLeft, METH_NOARGS, "GetSegmentsLeft()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetSegmentsLeft", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader_SetSegmentsLeft, METH_KEYWORDS|METH_VARARGS, "SetSegmentsLeft(segmentsLeft)\n\ntype: segmentsLeft: uint8_t" },
    {(char *) "SetNodeAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader_SetNodeAddress, METH_KEYWORDS|METH_VARARGS, "SetNodeAddress(index, addr)\n\ntype: index: uint8_t\ntype: addr: ns3::Ipv4Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionSRHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionSRHeader__tp_clear(PyNs3DsrDsrOptionSRHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dsr::DsrOptionSRHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DsrDsrOptionSRHeader__tp_traverse(PyNs3DsrDsrOptionSRHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionSRHeader__tp_dealloc(PyNs3DsrDsrOptionSRHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionSRHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3DsrDsrOptionSRHeader__tp_str(PyNs3DsrDsrOptionSRHeader *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3DsrDsrOptionSRHeader__tp_richcompare (PyNs3DsrDsrOptionSRHeader *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionSRHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionSRHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionSRHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionSRHeader",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionSRHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionSRHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3DsrDsrOptionSRHeader__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionSRHeader(arg0)\nDsrOptionSRHeader()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionSRHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionSRHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionSRHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionSRHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionSRHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionSRHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3DsrDsrOptions__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3DsrDsrOptions *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptions__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptions__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptions__PythonHelper::_wrap_DoInitialize(PyNs3DsrDsrOptions *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptions__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptions__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptions__PythonHelper::_wrap_NotifyNewAggregate(PyNs3DsrDsrOptions *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptions__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptions__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptions__PythonHelper::_wrap_DoDispose(PyNs3DsrDsrOptions *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptions__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptions__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint8_t
PyNs3DsrDsrOptions__PythonHelper::GetOptionNumber() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptions *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetOptionNumber"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = const_cast< ns3::dsr::DsrOptions* >((const ns3::dsr::DsrOptions*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetOptionNumber", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint8_t
PyNs3DsrDsrOptions__PythonHelper::Process(ns3::Ptr< ns3::Packet > packet, ns3::Ptr< ns3::Packet > dsrP, ns3::Ipv4Address ipv4Address, ns3::Ipv4Address source, ns3::Ipv4Header const & ipv4Header, uint8_t protocol, bool & isPromisc, ns3::Ipv4Address promiscSource)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptions *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Packet *py_Packet2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Header *py_Ipv4Header;
    PyNs3Ipv4Address *py_Ipv4Address3;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Process"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = (ns3::dsr::DsrOptions*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Packet2 = NULL;
    } else {
        py_Packet2 = (PyNs3Packet *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Packet2);
    }
    
    if (py_Packet2 == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))), &PyNs3Packet_Type);
        py_Packet2 = PyObject_New(PyNs3Packet, wrapper_type2);
    
        py_Packet2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))->Ref();
        py_Packet2->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP));
        PyNs3Empty_wrapper_registry[(void *) py_Packet2->obj] = (PyObject *) py_Packet2;
    }
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(ipv4Address);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(source);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_Ipv4Header = PyObject_GC_New(PyNs3Ipv4Header, &PyNs3Ipv4Header_Type);
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Header->obj = new ns3::Ipv4Header(ipv4Header);
    PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4Header->obj] = (PyObject *) py_Ipv4Header;
    py_Ipv4Address3 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address3->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address3->obj = new ns3::Ipv4Address(promiscSource);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address3->obj] = (PyObject *) py_Ipv4Address3;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Process", (char *) "NNNNNiNN", py_Packet, py_Packet2, py_Ipv4Address, py_Ipv4Address2, py_Ipv4Header, (int) protocol, PyBool_FromLong(isPromisc), py_Ipv4Address3);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Ipv4Route >
PyNs3DsrDsrOptions__PythonHelper::SetRoute(ns3::Ipv4Address nextHop, ns3::Ipv4Address srcAddress)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptions *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Ipv4Route > retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Route *tmp_Ipv4Route;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetRoute"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = (ns3::dsr::DsrOptions*) this;
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(nextHop);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(srcAddress);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetRoute", (char *) "NN", py_Ipv4Address, py_Ipv4Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Route_Type, &tmp_Ipv4Route)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Ipv4Route  > (tmp_Ipv4Route->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3DsrDsrOptions__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3DsrDsrOptions__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptions__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptions__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptions__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3DsrDsrOptions__tp_init__0(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptions *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptions_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptions_Type)
    {
        self->obj = new PyNs3DsrDsrOptions__PythonHelper(*((PyNs3DsrDsrOptions *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptions__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'DsrOptions' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptions__tp_init__1(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptions_Type)
    {
        self->obj = new PyNs3DsrDsrOptions__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptions__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'DsrOptions' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3DsrDsrOptions__tp_init(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptions__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptions__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_SearchNextHop(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *ipv4Address;
    std::vector< ns3::Ipv4Address > vec_value;
    const char *keywords[] = {"ipv4Address", "vec", NULL};
    PyNs3Ipv4Address *py_Ipv4Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O&", (char **) keywords, &PyNs3Ipv4Address_Type, &ipv4Address, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &vec_value)) {
        return NULL;
    }
    ns3::Ipv4Address retval = self->obj->SearchNextHop(*((PyNs3Ipv4Address *) ipv4Address)->obj, vec_value);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_ReverseRoutes(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    std::vector< ns3::Ipv4Address > vec_value;
    const char *keywords[] = {"vec", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &vec_value)) {
        return NULL;
    }
    retval = self->obj->ReverseRoutes(vec_value);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_SetNode(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *keywords[] = {"node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    self->obj->SetNode(ns3::Ptr< ns3::Node  > (node_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_SetRoute(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Ipv4Route > retval;
    PyNs3Ipv4Address *nextHop;
    PyNs3Ipv4Address *srcAddress;
    PyNs3DsrDsrOptions__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptions__PythonHelper*> (self->obj);
    const char *keywords[] = {"nextHop", "srcAddress", NULL};
    PyNs3Ipv4Route *py_Ipv4Route;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &nextHop, &PyNs3Ipv4Address_Type, &srcAddress)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->SetRoute(*((PyNs3Ipv4Address *) nextHop)->obj, *((PyNs3Ipv4Address *) srcAddress)->obj)) : (self->obj->ns3::dsr::DsrOptions::SetRoute(*((PyNs3Ipv4Address *) nextHop)->obj, *((PyNs3Ipv4Address *) srcAddress)->obj));
    if (!(const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Ipv4Route = NULL;
    } else {
        py_Ipv4Route = (PyNs3Ipv4Route *) wrapper_lookup_iter->second;
        Py_INCREF(py_Ipv4Route);
    }
    
    if (py_Ipv4Route == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (retval)))), &PyNs3Ipv4Route_Type);
        py_Ipv4Route = PyObject_New(PyNs3Ipv4Route, wrapper_type);
    
        py_Ipv4Route->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (retval))->Ref();
        py_Ipv4Route->obj = const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Ipv4Route->obj] = (PyObject *) py_Ipv4Route;
    }
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Route);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_ReverseSearchNextHop(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *ipv4Address;
    std::vector< ns3::Ipv4Address > vec_value;
    const char *keywords[] = {"ipv4Address", "vec", NULL};
    PyNs3Ipv4Address *py_Ipv4Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O&", (char **) keywords, &PyNs3Ipv4Address_Type, &ipv4Address, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &vec_value)) {
        return NULL;
    }
    ns3::Ipv4Address retval = self->obj->ReverseSearchNextHop(*((PyNs3Ipv4Address *) ipv4Address)->obj, vec_value);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_CutRoute(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *ipv4Address;
    std::vector< ns3::Ipv4Address > nodeList_value;
    const char *keywords[] = {"ipv4Address", "nodeList", NULL};
    std::vector< ns3::Ipv4Address > retval;
    Pystd__vector__lt___ns3__Ipv4Address___gt__ *py_std__vector__lt___ns3__Ipv4Address___gt__;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O&", (char **) keywords, &PyNs3Ipv4Address_Type, &ipv4Address, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &nodeList_value)) {
        return NULL;
    }
    retval = self->obj->CutRoute(*((PyNs3Ipv4Address *) ipv4Address)->obj, nodeList_value);
    py_std__vector__lt___ns3__Ipv4Address___gt__ = PyObject_New(Pystd__vector__lt___ns3__Ipv4Address___gt__, &Pystd__vector__lt___ns3__Ipv4Address___gt___Type);
    py_std__vector__lt___ns3__Ipv4Address___gt__->obj = new std::vector< ns3::Ipv4Address >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__Ipv4Address___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_Process(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Packet *dsrP;
    ns3::Packet *dsrP_ptr;
    PyNs3Ipv4Address *ipv4Address;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Header *ipv4Header;
    int protocol;
    bool isPromisc;
    PyObject *py_isPromisc;
    PyNs3Ipv4Address *promiscSource;
    const char *keywords[] = {"packet", "dsrP", "ipv4Address", "source", "ipv4Header", "protocol", "isPromisc", "promiscSource", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!O!iOO!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Packet_Type, &dsrP, &PyNs3Ipv4Address_Type, &ipv4Address, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Header_Type, &ipv4Header, &protocol, &py_isPromisc, &PyNs3Ipv4Address_Type, &promiscSource)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    dsrP_ptr = (dsrP ? dsrP->obj : NULL);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    isPromisc = PyObject_IsTrue(py_isPromisc);
    retval = self->obj->Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptions::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_PrintVector(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > vec_value;
    const char *keywords[] = {"vec", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &vec_value)) {
        return NULL;
    }
    self->obj->PrintVector(vec_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_ReverseSearchNextTwoHop(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *ipv4Address;
    std::vector< ns3::Ipv4Address > vec_value;
    const char *keywords[] = {"ipv4Address", "vec", NULL};
    PyNs3Ipv4Address *py_Ipv4Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O&", (char **) keywords, &PyNs3Ipv4Address_Type, &ipv4Address, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &vec_value)) {
        return NULL;
    }
    ns3::Ipv4Address retval = self->obj->ReverseSearchNextTwoHop(*((PyNs3Ipv4Address *) ipv4Address)->obj, vec_value);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_GetNodeWithAddress(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3Ipv4Address *ipv4Address;
    const char *keywords[] = {"ipv4Address", NULL};
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &ipv4Address)) {
        return NULL;
    }
    retval = self->obj->GetNodeWithAddress(*((PyNs3Ipv4Address *) ipv4Address)->obj);
    if (!(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Node__PythonHelper).name())
    {
        py_Node = reinterpret_cast< PyNs3Node* >(reinterpret_cast< PyNs3Node__PythonHelper* >(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
    
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (retval))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_CheckDuplicates(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *ipv4Address;
    std::vector< ns3::Ipv4Address > vec_value;
    const char *keywords[] = {"ipv4Address", "vec", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O&", (char **) keywords, &PyNs3Ipv4Address_Type, &ipv4Address, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &vec_value)) {
        return NULL;
    }
    retval = self->obj->CheckDuplicates(*((PyNs3Ipv4Address *) ipv4Address)->obj, vec_value);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_IfDuplicates(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    std::vector< ns3::Ipv4Address > vec_value;
    std::vector< ns3::Ipv4Address > vec2_value;
    const char *keywords[] = {"vec", "vec2", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &vec_value, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &vec2_value)) {
        return NULL;
    }
    retval = self->obj->IfDuplicates(vec_value, vec2_value);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_GetOptionNumber(PyNs3DsrDsrOptions *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetOptionNumber();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_RemoveDuplicates(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > vec_value;
    const char *keywords[] = {"vec", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &vec_value)) {
        return NULL;
    }
    self->obj->RemoveDuplicates(vec_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_GetIDfromIP(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Ipv4Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->GetIDfromIP(*((PyNs3Ipv4Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_ContainAddressAfter(PyNs3DsrDsrOptions *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *ipv4Address;
    PyNs3Ipv4Address *destAddress;
    std::vector< ns3::Ipv4Address > nodeList_value;
    const char *keywords[] = {"ipv4Address", "destAddress", "nodeList", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O&", (char **) keywords, &PyNs3Ipv4Address_Type, &ipv4Address, &PyNs3Ipv4Address_Type, &destAddress, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &nodeList_value)) {
        return NULL;
    }
    retval = self->obj->ContainAddressAfter(*((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) destAddress)->obj, nodeList_value);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptions_GetNode(PyNs3DsrDsrOptions *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetNode();
    if (!(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Node__PythonHelper).name())
    {
        py_Node = reinterpret_cast< PyNs3Node* >(reinterpret_cast< PyNs3Node__PythonHelper* >(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
    
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (retval))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}

static PyMethodDef PyNs3DsrDsrOptions_methods[] = {
    {(char *) "SearchNextHop", (PyCFunction) _wrap_PyNs3DsrDsrOptions_SearchNextHop, METH_KEYWORDS|METH_VARARGS, "SearchNextHop(ipv4Address, vec)\n\ntype: ipv4Address: ns3::Ipv4Address\ntype: vec: std::vector< ns3::Ipv4Address > &" },
    {(char *) "ReverseRoutes", (PyCFunction) _wrap_PyNs3DsrDsrOptions_ReverseRoutes, METH_KEYWORDS|METH_VARARGS, "ReverseRoutes(vec)\n\ntype: vec: std::vector< ns3::Ipv4Address > &" },
    {(char *) "SetNode", (PyCFunction) _wrap_PyNs3DsrDsrOptions_SetNode, METH_KEYWORDS|METH_VARARGS, "SetNode(node)\n\ntype: node: ns3::Ptr< ns3::Node >" },
    {(char *) "SetRoute", (PyCFunction) _wrap_PyNs3DsrDsrOptions_SetRoute, METH_KEYWORDS|METH_VARARGS, "SetRoute(nextHop, srcAddress)\n\ntype: nextHop: ns3::Ipv4Address\ntype: srcAddress: ns3::Ipv4Address" },
    {(char *) "ReverseSearchNextHop", (PyCFunction) _wrap_PyNs3DsrDsrOptions_ReverseSearchNextHop, METH_KEYWORDS|METH_VARARGS, "ReverseSearchNextHop(ipv4Address, vec)\n\ntype: ipv4Address: ns3::Ipv4Address\ntype: vec: std::vector< ns3::Ipv4Address > &" },
    {(char *) "CutRoute", (PyCFunction) _wrap_PyNs3DsrDsrOptions_CutRoute, METH_KEYWORDS|METH_VARARGS, "CutRoute(ipv4Address, nodeList)\n\ntype: ipv4Address: ns3::Ipv4Address\ntype: nodeList: std::vector< ns3::Ipv4Address > &" },
    {(char *) "Process", (PyCFunction) _wrap_PyNs3DsrDsrOptions_Process, METH_KEYWORDS|METH_VARARGS, "Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: dsrP: ns3::Ptr< ns3::Packet >\ntype: ipv4Address: ns3::Ipv4Address\ntype: source: ns3::Ipv4Address\ntype: ipv4Header: ns3::Ipv4Header const &\ntype: protocol: uint8_t\ntype: isPromisc: bool &\ntype: promiscSource: ns3::Ipv4Address" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptions_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "PrintVector", (PyCFunction) _wrap_PyNs3DsrDsrOptions_PrintVector, METH_KEYWORDS|METH_VARARGS, "PrintVector(vec)\n\ntype: vec: std::vector< ns3::Ipv4Address > &" },
    {(char *) "ReverseSearchNextTwoHop", (PyCFunction) _wrap_PyNs3DsrDsrOptions_ReverseSearchNextTwoHop, METH_KEYWORDS|METH_VARARGS, "ReverseSearchNextTwoHop(ipv4Address, vec)\n\ntype: ipv4Address: ns3::Ipv4Address\ntype: vec: std::vector< ns3::Ipv4Address > &" },
    {(char *) "GetNodeWithAddress", (PyCFunction) _wrap_PyNs3DsrDsrOptions_GetNodeWithAddress, METH_KEYWORDS|METH_VARARGS, "GetNodeWithAddress(ipv4Address)\n\ntype: ipv4Address: ns3::Ipv4Address" },
    {(char *) "CheckDuplicates", (PyCFunction) _wrap_PyNs3DsrDsrOptions_CheckDuplicates, METH_KEYWORDS|METH_VARARGS, "CheckDuplicates(ipv4Address, vec)\n\ntype: ipv4Address: ns3::Ipv4Address\ntype: vec: std::vector< ns3::Ipv4Address > &" },
    {(char *) "IfDuplicates", (PyCFunction) _wrap_PyNs3DsrDsrOptions_IfDuplicates, METH_KEYWORDS|METH_VARARGS, "IfDuplicates(vec, vec2)\n\ntype: vec: std::vector< ns3::Ipv4Address > &\ntype: vec2: std::vector< ns3::Ipv4Address > &" },
    {(char *) "GetOptionNumber", (PyCFunction) _wrap_PyNs3DsrDsrOptions_GetOptionNumber, METH_NOARGS, "GetOptionNumber()\n\n" },
    {(char *) "RemoveDuplicates", (PyCFunction) _wrap_PyNs3DsrDsrOptions_RemoveDuplicates, METH_KEYWORDS|METH_VARARGS, "RemoveDuplicates(vec)\n\ntype: vec: std::vector< ns3::Ipv4Address > &" },
    {(char *) "GetIDfromIP", (PyCFunction) _wrap_PyNs3DsrDsrOptions_GetIDfromIP, METH_KEYWORDS|METH_VARARGS, "GetIDfromIP(address)\n\ntype: address: ns3::Ipv4Address" },
    {(char *) "ContainAddressAfter", (PyCFunction) _wrap_PyNs3DsrDsrOptions_ContainAddressAfter, METH_KEYWORDS|METH_VARARGS, "ContainAddressAfter(ipv4Address, destAddress, nodeList)\n\ntype: ipv4Address: ns3::Ipv4Address\ntype: destAddress: ns3::Ipv4Address\ntype: nodeList: std::vector< ns3::Ipv4Address > &" },
    {(char *) "GetNode", (PyCFunction) _wrap_PyNs3DsrDsrOptions_GetNode, METH_NOARGS, "GetNode()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3DsrDsrOptions__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3DsrDsrOptions__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3DsrDsrOptions__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3DsrDsrOptions__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptions__tp_clear(PyNs3DsrDsrOptions *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dsr::DsrOptions *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DsrDsrOptions__tp_traverse(PyNs3DsrDsrOptions *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3DsrDsrOptions__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3DsrDsrOptions__tp_dealloc(PyNs3DsrDsrOptions *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptions__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptions__tp_richcompare (PyNs3DsrDsrOptions *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptions *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptions_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptions_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptions",            /* tp_name */
    sizeof(PyNs3DsrDsrOptions),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptions__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptions(arg0)\nDsrOptions()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptions__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptions__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptions__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptions_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptions, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptions__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrDsrPassiveBuffEntry_wrapper_registry;


static int
_wrap_PyNs3DsrDsrPassiveBuffEntry__tp_init__0(PyNs3DsrDsrPassiveBuffEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrPassiveBuffEntry *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrPassiveBuffEntry_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrPassiveBuffEntry(*((PyNs3DsrDsrPassiveBuffEntry *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrPassiveBuffEntry__tp_init__1(PyNs3DsrDsrPassiveBuffEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Packet *pa = NULL;
    ns3::Packet *pa_ptr;
    PyNs3Ipv4Address *d = NULL;
    PyNs3Ipv4Address *s = NULL;
    PyNs3Ipv4Address *n = NULL;
    int i = 0;
    int f = 0;
    int seg = 0;
    PyNs3Time *exp = NULL;
    int p = 0;
    const char *keywords[] = {"pa", "d", "s", "n", "i", "f", "seg", "exp", "p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O!O!O!O!iiiO!i", (char **) keywords, &PyNs3Packet_Type, &pa, &PyNs3Ipv4Address_Type, &d, &PyNs3Ipv4Address_Type, &s, &PyNs3Ipv4Address_Type, &n, &i, &f, &seg, &PyNs3Time_Type, &exp, &p)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    pa_ptr = (pa ? pa->obj : NULL);
    if (i > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (f > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (seg > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (p > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrPassiveBuffEntry(ns3::Ptr< ns3::Packet  > (pa_ptr), (d ? (*((PyNs3Ipv4Address *) d)->obj) : ns3::Ipv4Address()), (s ? (*((PyNs3Ipv4Address *) s)->obj) : ns3::Ipv4Address()), (n ? (*((PyNs3Ipv4Address *) n)->obj) : ns3::Ipv4Address()), i, f, seg, (exp ? (*((PyNs3Time *) exp)->obj) : ns3::Simulator::Now( )), p);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrPassiveBuffEntry__tp_init(PyNs3DsrDsrPassiveBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrPassiveBuffEntry__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrPassiveBuffEntry__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_SetFragmentOffset(PyNs3DsrDsrPassiveBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int f;
    const char *keywords[] = {"f", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &f)) {
        return NULL;
    }
    if (f > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFragmentOffset(f);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_SetPacket(PyNs3DsrDsrPassiveBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *p;
    ns3::Packet *p_ptr;
    const char *keywords[] = {"p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &p)) {
        return NULL;
    }
    p_ptr = (p ? p->obj : NULL);
    self->obj->SetPacket(ns3::Ptr< ns3::Packet  > (p_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_SetSegsLeft(PyNs3DsrDsrPassiveBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seg;
    const char *keywords[] = {"seg", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seg)) {
        return NULL;
    }
    if (seg > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSegsLeft(seg);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_SetNextHop(PyNs3DsrDsrPassiveBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *n;
    const char *keywords[] = {"n", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &n)) {
        return NULL;
    }
    self->obj->SetNextHop(*((PyNs3Ipv4Address *) n)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_GetSegsLeft(PyNs3DsrDsrPassiveBuffEntry *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetSegsLeft();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_SetProtocol(PyNs3DsrDsrPassiveBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int p;
    const char *keywords[] = {"p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &p)) {
        return NULL;
    }
    if (p > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetProtocol(p);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_SetIdentification(PyNs3DsrDsrPassiveBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &i)) {
        return NULL;
    }
    if (i > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetIdentification(i);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_GetFragmentOffset(PyNs3DsrDsrPassiveBuffEntry *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetFragmentOffset();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_SetDestination(PyNs3DsrDsrPassiveBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *d;
    const char *keywords[] = {"d", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &d)) {
        return NULL;
    }
    self->obj->SetDestination(*((PyNs3Ipv4Address *) d)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_GetIdentification(PyNs3DsrDsrPassiveBuffEntry *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetIdentification();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_GetNextHop(PyNs3DsrDsrPassiveBuffEntry *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetNextHop();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_GetProtocol(PyNs3DsrDsrPassiveBuffEntry *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetProtocol();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_GetPacket(PyNs3DsrDsrPassiveBuffEntry *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet const > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPacket();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_SetExpireTime(PyNs3DsrDsrPassiveBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *exp;
    const char *keywords[] = {"exp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &exp)) {
        return NULL;
    }
    self->obj->SetExpireTime(*((PyNs3Time *) exp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_GetDestination(PyNs3DsrDsrPassiveBuffEntry *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetDestination();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_GetExpireTime(PyNs3DsrDsrPassiveBuffEntry *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetExpireTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_GetSource(PyNs3DsrDsrPassiveBuffEntry *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetSource();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffEntry_SetSource(PyNs3DsrDsrPassiveBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *s;
    const char *keywords[] = {"s", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &s)) {
        return NULL;
    }
    self->obj->SetSource(*((PyNs3Ipv4Address *) s)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrPassiveBuffEntry__copy__(PyNs3DsrDsrPassiveBuffEntry *self)
{

    PyNs3DsrDsrPassiveBuffEntry *py_copy;
    py_copy = PyObject_New(PyNs3DsrDsrPassiveBuffEntry, &PyNs3DsrDsrPassiveBuffEntry_Type);
    py_copy->obj = new ns3::dsr::DsrPassiveBuffEntry(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrDsrPassiveBuffEntry_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrPassiveBuffEntry_methods[] = {
    {(char *) "SetFragmentOffset", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_SetFragmentOffset, METH_KEYWORDS|METH_VARARGS, "SetFragmentOffset(f)\n\ntype: f: uint16_t" },
    {(char *) "SetPacket", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_SetPacket, METH_KEYWORDS|METH_VARARGS, "SetPacket(p)\n\ntype: p: ns3::Ptr< ns3::Packet const >" },
    {(char *) "SetSegsLeft", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_SetSegsLeft, METH_KEYWORDS|METH_VARARGS, "SetSegsLeft(seg)\n\ntype: seg: uint8_t" },
    {(char *) "SetNextHop", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_SetNextHop, METH_KEYWORDS|METH_VARARGS, "SetNextHop(n)\n\ntype: n: ns3::Ipv4Address" },
    {(char *) "GetSegsLeft", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_GetSegsLeft, METH_NOARGS, "GetSegsLeft()\n\n" },
    {(char *) "SetProtocol", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_SetProtocol, METH_KEYWORDS|METH_VARARGS, "SetProtocol(p)\n\ntype: p: uint8_t" },
    {(char *) "SetIdentification", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_SetIdentification, METH_KEYWORDS|METH_VARARGS, "SetIdentification(i)\n\ntype: i: uint16_t" },
    {(char *) "GetFragmentOffset", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_GetFragmentOffset, METH_NOARGS, "GetFragmentOffset()\n\n" },
    {(char *) "SetDestination", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_SetDestination, METH_KEYWORDS|METH_VARARGS, "SetDestination(d)\n\ntype: d: ns3::Ipv4Address" },
    {(char *) "GetIdentification", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_GetIdentification, METH_NOARGS, "GetIdentification()\n\n" },
    {(char *) "GetNextHop", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_GetNextHop, METH_NOARGS, "GetNextHop()\n\n" },
    {(char *) "GetProtocol", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_GetProtocol, METH_NOARGS, "GetProtocol()\n\n" },
    {(char *) "GetPacket", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_GetPacket, METH_NOARGS, "GetPacket()\n\n" },
    {(char *) "SetExpireTime", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_SetExpireTime, METH_KEYWORDS|METH_VARARGS, "SetExpireTime(exp)\n\ntype: exp: ns3::Time" },
    {(char *) "GetDestination", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_GetDestination, METH_NOARGS, "GetDestination()\n\n" },
    {(char *) "GetExpireTime", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_GetExpireTime, METH_NOARGS, "GetExpireTime()\n\n" },
    {(char *) "GetSource", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_GetSource, METH_NOARGS, "GetSource()\n\n" },
    {(char *) "SetSource", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry_SetSource, METH_KEYWORDS|METH_VARARGS, "SetSource(s)\n\ntype: s: ns3::Ipv4Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffEntry__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrDsrPassiveBuffEntry__tp_dealloc(PyNs3DsrDsrPassiveBuffEntry *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrDsrPassiveBuffEntry_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrDsrPassiveBuffEntry_wrapper_registry.end()) {
        PyNs3DsrDsrPassiveBuffEntry_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::DsrPassiveBuffEntry *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrPassiveBuffEntry__tp_richcompare (PyNs3DsrDsrPassiveBuffEntry *PYBINDGEN_UNUSED(self), PyNs3DsrDsrPassiveBuffEntry *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrPassiveBuffEntry_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrPassiveBuffEntry_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrPassiveBuffEntry",            /* tp_name */
    sizeof(PyNs3DsrDsrPassiveBuffEntry),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrPassiveBuffEntry__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsrPassiveBuffEntry(pa, d, s, n, i, f, seg, exp, p)\nDsrPassiveBuffEntry(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrPassiveBuffEntry__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrPassiveBuffEntry_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrPassiveBuffEntry__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrPassiveBuffer__tp_init__0(PyNs3DsrDsrPassiveBuffer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrPassiveBuffer *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrPassiveBuffer_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrPassiveBuffer(*((PyNs3DsrDsrPassiveBuffer *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrPassiveBuffer__tp_init__1(PyNs3DsrDsrPassiveBuffer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrPassiveBuffer();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrPassiveBuffer__tp_init(PyNs3DsrDsrPassiveBuffer *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrPassiveBuffer__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrPassiveBuffer__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffer_GetPassiveBufferTimeout(PyNs3DsrDsrPassiveBuffer *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetPassiveBufferTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffer_GetMaxQueueLen(PyNs3DsrDsrPassiveBuffer *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMaxQueueLen();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffer_Dequeue(PyNs3DsrDsrPassiveBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *dst;
    PyNs3DsrDsrPassiveBuffEntry *entry;
    const char *keywords[] = {"dst", "entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &dst, &PyNs3DsrDsrPassiveBuffEntry_Type, &entry)) {
        return NULL;
    }
    retval = self->obj->Dequeue(*((PyNs3Ipv4Address *) dst)->obj, *((PyNs3DsrDsrPassiveBuffEntry *) entry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffer_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrPassiveBuffer::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffer_SetMaxQueueLen(PyNs3DsrDsrPassiveBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int len;
    const char *keywords[] = {"len", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &len)) {
        return NULL;
    }
    self->obj->SetMaxQueueLen(len);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffer_GetSize(PyNs3DsrDsrPassiveBuffer *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffer_Enqueue(PyNs3DsrDsrPassiveBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3DsrDsrPassiveBuffEntry *entry;
    const char *keywords[] = {"entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrPassiveBuffEntry_Type, &entry)) {
        return NULL;
    }
    retval = self->obj->Enqueue(*((PyNs3DsrDsrPassiveBuffEntry *) entry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffer_SetPassiveBufferTimeout(PyNs3DsrDsrPassiveBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *t;
    const char *keywords[] = {"t", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &t)) {
        return NULL;
    }
    self->obj->SetPassiveBufferTimeout(*((PyNs3Time *) t)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffer_AllEqual(PyNs3DsrDsrPassiveBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3DsrDsrPassiveBuffEntry *entry;
    const char *keywords[] = {"entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrPassiveBuffEntry_Type, &entry)) {
        return NULL;
    }
    retval = self->obj->AllEqual(*((PyNs3DsrDsrPassiveBuffEntry *) entry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrPassiveBuffer_Find(PyNs3DsrDsrPassiveBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *dst;
    const char *keywords[] = {"dst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &dst)) {
        return NULL;
    }
    retval = self->obj->Find(*((PyNs3Ipv4Address *) dst)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrPassiveBuffer__copy__(PyNs3DsrDsrPassiveBuffer *self)
{

    PyNs3DsrDsrPassiveBuffer *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrPassiveBuffer, &PyNs3DsrDsrPassiveBuffer_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::dsr::DsrPassiveBuffer(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrPassiveBuffer_methods[] = {
    {(char *) "GetPassiveBufferTimeout", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffer_GetPassiveBufferTimeout, METH_NOARGS, "GetPassiveBufferTimeout()\n\n" },
    {(char *) "GetMaxQueueLen", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffer_GetMaxQueueLen, METH_NOARGS, "GetMaxQueueLen()\n\n" },
    {(char *) "Dequeue", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffer_Dequeue, METH_KEYWORDS|METH_VARARGS, "Dequeue(dst, entry)\n\ntype: dst: ns3::Ipv4Address\ntype: entry: ns3::dsr::DsrPassiveBuffEntry &" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffer_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "SetMaxQueueLen", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffer_SetMaxQueueLen, METH_KEYWORDS|METH_VARARGS, "SetMaxQueueLen(len)\n\ntype: len: uint32_t" },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffer_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffer_Enqueue, METH_KEYWORDS|METH_VARARGS, "Enqueue(entry)\n\ntype: entry: ns3::dsr::DsrPassiveBuffEntry &" },
    {(char *) "SetPassiveBufferTimeout", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffer_SetPassiveBufferTimeout, METH_KEYWORDS|METH_VARARGS, "SetPassiveBufferTimeout(t)\n\ntype: t: ns3::Time" },
    {(char *) "AllEqual", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffer_AllEqual, METH_KEYWORDS|METH_VARARGS, "AllEqual(entry)\n\ntype: entry: ns3::dsr::DsrPassiveBuffEntry &" },
    {(char *) "Find", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffer_Find, METH_KEYWORDS|METH_VARARGS, "Find(dst)\n\ntype: dst: ns3::Ipv4Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrPassiveBuffer__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrPassiveBuffer__tp_clear(PyNs3DsrDsrPassiveBuffer *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dsr::DsrPassiveBuffer *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DsrDsrPassiveBuffer__tp_traverse(PyNs3DsrDsrPassiveBuffer *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrPassiveBuffer__tp_dealloc(PyNs3DsrDsrPassiveBuffer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrPassiveBuffer__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrPassiveBuffer__tp_richcompare (PyNs3DsrDsrPassiveBuffer *PYBINDGEN_UNUSED(self), PyNs3DsrDsrPassiveBuffer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrPassiveBuffer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrPassiveBuffer_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrPassiveBuffer",            /* tp_name */
    sizeof(PyNs3DsrDsrPassiveBuffer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrPassiveBuffer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrPassiveBuffer(arg0)\nDsrPassiveBuffer()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrPassiveBuffer__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrPassiveBuffer__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrPassiveBuffer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrPassiveBuffer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrPassiveBuffer, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrPassiveBuffer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrDsrReceivedRreqEntry_wrapper_registry;


static int
_wrap_PyNs3DsrDsrReceivedRreqEntry__tp_init__0(PyNs3DsrDsrReceivedRreqEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrReceivedRreqEntry *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrReceivedRreqEntry_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrReceivedRreqEntry(*((PyNs3DsrDsrReceivedRreqEntry *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrReceivedRreqEntry__tp_init__1(PyNs3DsrDsrReceivedRreqEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Ipv4Address *d = NULL;
    int i = 0;
    const char *keywords[] = {"d", "i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O!i", (char **) keywords, &PyNs3Ipv4Address_Type, &d, &i)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (i > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrReceivedRreqEntry((d ? (*((PyNs3Ipv4Address *) d)->obj) : ns3::Ipv4Address()), i);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrReceivedRreqEntry__tp_init(PyNs3DsrDsrReceivedRreqEntry *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrReceivedRreqEntry__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrReceivedRreqEntry__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrReceivedRreqEntry_SetIdentification(PyNs3DsrDsrReceivedRreqEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &i)) {
        return NULL;
    }
    if (i > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetIdentification(i);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrReceivedRreqEntry_SetDestination(PyNs3DsrDsrReceivedRreqEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *d;
    const char *keywords[] = {"d", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &d)) {
        return NULL;
    }
    self->obj->SetDestination(*((PyNs3Ipv4Address *) d)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrReceivedRreqEntry_GetIdentification(PyNs3DsrDsrReceivedRreqEntry *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetIdentification();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrReceivedRreqEntry_SetExpireTime(PyNs3DsrDsrReceivedRreqEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *exp;
    const char *keywords[] = {"exp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &exp)) {
        return NULL;
    }
    self->obj->SetExpireTime(*((PyNs3Time *) exp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrReceivedRreqEntry_GetDestination(PyNs3DsrDsrReceivedRreqEntry *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetDestination();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrReceivedRreqEntry_GetExpireTime(PyNs3DsrDsrReceivedRreqEntry *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetExpireTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrReceivedRreqEntry_GetSource(PyNs3DsrDsrReceivedRreqEntry *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetSource();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrReceivedRreqEntry_SetSource(PyNs3DsrDsrReceivedRreqEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *s;
    const char *keywords[] = {"s", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &s)) {
        return NULL;
    }
    self->obj->SetSource(*((PyNs3Ipv4Address *) s)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrReceivedRreqEntry__copy__(PyNs3DsrDsrReceivedRreqEntry *self)
{

    PyNs3DsrDsrReceivedRreqEntry *py_copy;
    py_copy = PyObject_New(PyNs3DsrDsrReceivedRreqEntry, &PyNs3DsrDsrReceivedRreqEntry_Type);
    py_copy->obj = new ns3::dsr::DsrReceivedRreqEntry(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrDsrReceivedRreqEntry_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrReceivedRreqEntry_methods[] = {
    {(char *) "SetIdentification", (PyCFunction) _wrap_PyNs3DsrDsrReceivedRreqEntry_SetIdentification, METH_KEYWORDS|METH_VARARGS, "SetIdentification(i)\n\ntype: i: uint16_t" },
    {(char *) "SetDestination", (PyCFunction) _wrap_PyNs3DsrDsrReceivedRreqEntry_SetDestination, METH_KEYWORDS|METH_VARARGS, "SetDestination(d)\n\ntype: d: ns3::Ipv4Address" },
    {(char *) "GetIdentification", (PyCFunction) _wrap_PyNs3DsrDsrReceivedRreqEntry_GetIdentification, METH_NOARGS, "GetIdentification()\n\n" },
    {(char *) "SetExpireTime", (PyCFunction) _wrap_PyNs3DsrDsrReceivedRreqEntry_SetExpireTime, METH_KEYWORDS|METH_VARARGS, "SetExpireTime(exp)\n\ntype: exp: ns3::Time" },
    {(char *) "GetDestination", (PyCFunction) _wrap_PyNs3DsrDsrReceivedRreqEntry_GetDestination, METH_NOARGS, "GetDestination()\n\n" },
    {(char *) "GetExpireTime", (PyCFunction) _wrap_PyNs3DsrDsrReceivedRreqEntry_GetExpireTime, METH_NOARGS, "GetExpireTime()\n\n" },
    {(char *) "GetSource", (PyCFunction) _wrap_PyNs3DsrDsrReceivedRreqEntry_GetSource, METH_NOARGS, "GetSource()\n\n" },
    {(char *) "SetSource", (PyCFunction) _wrap_PyNs3DsrDsrReceivedRreqEntry_SetSource, METH_KEYWORDS|METH_VARARGS, "SetSource(s)\n\ntype: s: ns3::Ipv4Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrReceivedRreqEntry__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrDsrReceivedRreqEntry__tp_dealloc(PyNs3DsrDsrReceivedRreqEntry *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrDsrReceivedRreqEntry_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrDsrReceivedRreqEntry_wrapper_registry.end()) {
        PyNs3DsrDsrReceivedRreqEntry_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::DsrReceivedRreqEntry *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrReceivedRreqEntry__tp_richcompare (PyNs3DsrDsrReceivedRreqEntry *PYBINDGEN_UNUSED(self), PyNs3DsrDsrReceivedRreqEntry *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrReceivedRreqEntry_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrReceivedRreqEntry_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrReceivedRreqEntry",            /* tp_name */
    sizeof(PyNs3DsrDsrReceivedRreqEntry),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrReceivedRreqEntry__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsrReceivedRreqEntry(arg0)\nDsrReceivedRreqEntry(d, i)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrReceivedRreqEntry__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrReceivedRreqEntry_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrReceivedRreqEntry__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyNs3DsrDsrRouteCache__get_m_arp(PyNs3DsrDsrRouteCache *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    std::vector< ns3::Ptr< ns3::ArpCache > > retval;
    Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__ *py_std__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__;
    
    py_std__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__ = PyObject_New(Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__, &Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt___Type);
    py_std__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__->obj = new std::vector< ns3::Ptr< ns3::ArpCache > >(self->obj->m_arp);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__);
    return py_retval;
}
static int _wrap_PyNs3DsrDsrRouteCache__set_m_arp(PyNs3DsrDsrRouteCache *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    std::vector< ns3::Ptr< ns3::ArpCache > > retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__, &self->obj->m_arp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrDsrRouteCache__get_m_delay(PyNs3DsrDsrRouteCache *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(self->obj->m_delay);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}
static int _wrap_PyNs3DsrDsrRouteCache__set_m_delay(PyNs3DsrDsrRouteCache *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_delay = *tmp_Time->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrDsrRouteCache__get_m_nb(PyNs3DsrDsrRouteCache *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    std::vector< ns3::dsr::DsrRouteCache::Neighbor > retval;
    Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__ *py_std__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__;
    
    py_std__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__ = PyObject_New(Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__, &Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt___Type);
    py_std__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__->obj = new std::vector< ns3::dsr::DsrRouteCache::Neighbor >(self->obj->m_nb);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__);
    return py_retval;
}
static int _wrap_PyNs3DsrDsrRouteCache__set_m_nb(PyNs3DsrDsrRouteCache *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    std::vector< ns3::dsr::DsrRouteCache::Neighbor > retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__std__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__, &self->obj->m_nb)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrDsrRouteCache__get_m_ntimer(PyNs3DsrDsrRouteCache *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Timer *py_Timer;
    
    py_Timer = PyObject_New(PyNs3Timer, &PyNs3Timer_Type);
    py_Timer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Timer->obj = new ns3::Timer(self->obj->m_ntimer);
    PyNs3Timer_wrapper_registry[(void *) py_Timer->obj] = (PyObject *) py_Timer;
    py_retval = Py_BuildValue((char *) "N", py_Timer);
    return py_retval;
}
static int _wrap_PyNs3DsrDsrRouteCache__set_m_ntimer(PyNs3DsrDsrRouteCache *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Timer *tmp_Timer;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Timer_Type, &tmp_Timer)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_ntimer = *tmp_Timer->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3DsrDsrRouteCache__getsets[] = {
    {
        (char*) "m_ntimer", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrRouteCache__get_m_ntimer, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrDsrRouteCache__set_m_ntimer, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_delay", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrRouteCache__get_m_delay, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrDsrRouteCache__set_m_delay, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_nb", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrRouteCache__get_m_nb, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrDsrRouteCache__set_m_nb, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_arp", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrRouteCache__get_m_arp, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrDsrRouteCache__set_m_arp, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3DsrDsrRouteCache__tp_init__0(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrRouteCache *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrRouteCache_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrRouteCache(*((PyNs3DsrDsrRouteCache *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrRouteCache__tp_init__1(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrRouteCache();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrRouteCache__tp_init(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrRouteCache__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrRouteCache__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_SetMaxCacheLen(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int len;
    const char *keywords[] = {"len", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &len)) {
        return NULL;
    }
    self->obj->SetMaxCacheLen(len);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_SetMaxEntriesEachDst(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int entries;
    const char *keywords[] = {"entries", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &entries)) {
        return NULL;
    }
    self->obj->SetMaxEntriesEachDst(entries);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_SetMinLifeTime(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *minLifeTime;
    const char *keywords[] = {"minLifeTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &minLifeTime)) {
        return NULL;
    }
    self->obj->SetMinLifeTime(*((PyNs3Time *) minLifeTime)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_GetStabilityDecrFactor(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetStabilityDecrFactor();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_FindSameRoute(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3DsrDsrRouteCacheEntry *rt;
    std::list< ns3::dsr::DsrRouteCacheEntry > rtVector_value;
    const char *keywords[] = {"rt", "rtVector", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O&", (char **) keywords, &PyNs3DsrDsrRouteCacheEntry_Type, &rt, _wrap_convert_py2c__std__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__, &rtVector_value)) {
        return NULL;
    }
    retval = self->obj->FindSameRoute(*((PyNs3DsrDsrRouteCacheEntry *) rt)->obj, rtVector_value);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrRouteCache::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_RemoveLastEntry(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::list< ns3::dsr::DsrRouteCacheEntry > rtVector_value;
    const char *keywords[] = {"rtVector", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__, &rtVector_value)) {
        return NULL;
    }
    self->obj->RemoveLastEntry(rtVector_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_IsLinkCache(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsLinkCache();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_PurgeMac(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    
    self->obj->PurgeMac();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_DeleteRoute(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *dst;
    const char *keywords[] = {"dst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &dst)) {
        return NULL;
    }
    retval = self->obj->DeleteRoute(*((PyNs3Ipv4Address *) dst)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_CheckUniqueAckId(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint16_t retval;
    PyNs3Ipv4Address *nextHop;
    const char *keywords[] = {"nextHop", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &nextHop)) {
        return NULL;
    }
    retval = self->obj->CheckUniqueAckId(*((PyNs3Ipv4Address *) nextHop)->obj);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_PrintVector(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > vec_value;
    const char *keywords[] = {"vec", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &vec_value)) {
        return NULL;
    }
    self->obj->PrintVector(vec_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_GetCacheTimeout(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetCacheTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_GetExpireTime(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *addr;
    const char *keywords[] = {"addr", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &addr)) {
        return NULL;
    }
    ns3::Time retval = self->obj->GetExpireTime(*((PyNs3Ipv4Address *) addr)->obj);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_LookupMacAddress(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *arg0;
    const char *keywords[] = {"arg0", NULL};
    PyNs3Mac48Address *py_Mac48Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &arg0)) {
        return NULL;
    }
    ns3::Mac48Address retval = self->obj->LookupMacAddress(*((PyNs3Ipv4Address *) arg0)->obj);
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_UpdateRouteEntry(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *dst;
    const char *keywords[] = {"dst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &dst)) {
        return NULL;
    }
    retval = self->obj->UpdateRouteEntry(*((PyNs3Ipv4Address *) dst)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_AddArpCache(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ArpCache *arg0;
    ns3::ArpCache *arg0_ptr;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ArpCache_Type, &arg0)) {
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    self->obj->AddArpCache(ns3::Ptr< ns3::ArpCache  > (arg0_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_GetSubRoute(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->GetSubRoute();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_PrintRouteVector(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::list< ns3::dsr::DsrRouteCacheEntry > route_value;
    const char *keywords[] = {"route", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__, &route_value)) {
        return NULL;
    }
    self->obj->PrintRouteVector(route_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_GetBadLinkLifetime(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetBadLinkLifetime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_SetInitStability(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *initStability;
    const char *keywords[] = {"initStability", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &initStability)) {
        return NULL;
    }
    self->obj->SetInitStability(*((PyNs3Time *) initStability)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_PurgeLinkNode(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    
    self->obj->PurgeLinkNode();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_GetInitStability(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetInitStability();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_GetMinLifeTime(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetMinLifeTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_ScheduleTimer(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    
    self->obj->ScheduleTimer();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_SetUseExtends(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *useExtends;
    const char *keywords[] = {"useExtends", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &useExtends)) {
        return NULL;
    }
    self->obj->SetUseExtends(*((PyNs3Time *) useExtends)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_AddRoute_Link(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    std::vector< ns3::Ipv4Address > nodelist_value;
    PyNs3Ipv4Address *node;
    const char *keywords[] = {"nodelist", "node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &nodelist_value, &PyNs3Ipv4Address_Type, &node)) {
        return NULL;
    }
    retval = self->obj->AddRoute_Link(nodelist_value, *((PyNs3Ipv4Address *) node)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_AddRoute(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3DsrDsrRouteCacheEntry *rt;
    const char *keywords[] = {"rt", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrRouteCacheEntry_Type, &rt)) {
        return NULL;
    }
    retval = self->obj->AddRoute(*((PyNs3DsrDsrRouteCacheEntry *) rt)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_DeleteAllRoutesIncludeLink(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *errorSrc;
    PyNs3Ipv4Address *unreachNode;
    PyNs3Ipv4Address *node;
    const char *keywords[] = {"errorSrc", "unreachNode", "node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &errorSrc, &PyNs3Ipv4Address_Type, &unreachNode, &PyNs3Ipv4Address_Type, &node)) {
        return NULL;
    }
    self->obj->DeleteAllRoutesIncludeLink(*((PyNs3Ipv4Address *) errorSrc)->obj, *((PyNs3Ipv4Address *) unreachNode)->obj, *((PyNs3Ipv4Address *) node)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_GetMaxCacheLen(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMaxCacheLen();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_SetStabilityDecrFactor(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t decrFactor;
    const char *keywords[] = {"decrFactor", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &decrFactor)) {
        return NULL;
    }
    self->obj->SetStabilityDecrFactor(decrFactor);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_AddNeighbor(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > nodeList_value;
    PyNs3Ipv4Address *ownAddress;
    PyNs3Time *expire;
    const char *keywords[] = {"nodeList", "ownAddress", "expire", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &nodeList_value, &PyNs3Ipv4Address_Type, &ownAddress, &PyNs3Time_Type, &expire)) {
        return NULL;
    }
    self->obj->AddNeighbor(nodeList_value, *((PyNs3Ipv4Address *) ownAddress)->obj, *((PyNs3Time *) expire)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_SetBadLinkLifetime(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *t;
    const char *keywords[] = {"t", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &t)) {
        return NULL;
    }
    self->obj->SetBadLinkLifetime(*((PyNs3Time *) t)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_Clear(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    
    self->obj->Clear();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_GetStabilityIncrFactor(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetStabilityIncrFactor();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_GetAckSize(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetAckSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_Purge(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    
    self->obj->Purge();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_UseExtends(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > rt_value;
    const char *keywords[] = {"rt", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &rt_value)) {
        return NULL;
    }
    self->obj->UseExtends(rt_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_GetMaxEntriesEachDst(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMaxEntriesEachDst();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_SetSubRoute(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool subRoute;
    PyObject *py_subRoute;
    const char *keywords[] = {"subRoute", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_subRoute)) {
        return NULL;
    }
    subRoute = (bool) PyObject_IsTrue(py_subRoute);
    self->obj->SetSubRoute(subRoute);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_RebuildBestRouteTable(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *source;
    const char *keywords[] = {"source", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &source)) {
        return NULL;
    }
    self->obj->RebuildBestRouteTable(*((PyNs3Ipv4Address *) source)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_SetStabilityIncrFactor(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t incrFactor;
    const char *keywords[] = {"incrFactor", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &incrFactor)) {
        return NULL;
    }
    self->obj->SetStabilityIncrFactor(incrFactor);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_SetCacheTimeout(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *t;
    const char *keywords[] = {"t", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &t)) {
        return NULL;
    }
    self->obj->SetCacheTimeout(*((PyNs3Time *) t)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_SetCacheType(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *type;
    Py_ssize_t type_len;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &type, &type_len)) {
        return NULL;
    }
    self->obj->SetCacheType(std::string(type, type_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_UpdateNetGraph(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    
    self->obj->UpdateNetGraph();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_ClearMac(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    
    self->obj->ClearMac();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_IsNeighbor(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *addr;
    const char *keywords[] = {"addr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &addr)) {
        return NULL;
    }
    retval = self->obj->IsNeighbor(*((PyNs3Ipv4Address *) addr)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_LookupRoute(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *id;
    PyNs3DsrDsrRouteCacheEntry *rt;
    const char *keywords[] = {"id", "rt", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &id, &PyNs3DsrDsrRouteCacheEntry_Type, &rt)) {
        return NULL;
    }
    retval = self->obj->LookupRoute(*((PyNs3Ipv4Address *) id)->obj, *((PyNs3DsrDsrRouteCacheEntry *) rt)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_DelArpCache(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ArpCache *arg0;
    ns3::ArpCache *arg0_ptr;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ArpCache_Type, &arg0)) {
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    self->obj->DelArpCache(ns3::Ptr< ns3::ArpCache  > (arg0_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_UpdateNeighbor(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > nodeList_value;
    PyNs3Time *expire;
    const char *keywords[] = {"nodeList", "expire", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &nodeList_value, &PyNs3Time_Type, &expire)) {
        return NULL;
    }
    self->obj->UpdateNeighbor(nodeList_value, *((PyNs3Time *) expire)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_ProcessTxError(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &arg0)) {
        return NULL;
    }
    self->obj->ProcessTxError(*((PyNs3WifiMacHeader *) arg0)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_SetCallback(PyNs3DsrDsrRouteCache *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl3> cb_cb_impl;
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl3> (cb);
    self->obj->SetCallback(ns3::Callback<void, ns3::Ipv4Address, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCache_GetUseExtends(PyNs3DsrDsrRouteCache *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetUseExtends();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrRouteCache__copy__(PyNs3DsrDsrRouteCache *self)
{

    PyNs3DsrDsrRouteCache *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrRouteCache, &PyNs3DsrDsrRouteCache_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::dsr::DsrRouteCache(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrRouteCache_methods[] = {
    {(char *) "SetMaxCacheLen", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_SetMaxCacheLen, METH_KEYWORDS|METH_VARARGS, "SetMaxCacheLen(len)\n\ntype: len: uint32_t" },
    {(char *) "SetMaxEntriesEachDst", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_SetMaxEntriesEachDst, METH_KEYWORDS|METH_VARARGS, "SetMaxEntriesEachDst(entries)\n\ntype: entries: uint32_t" },
    {(char *) "SetMinLifeTime", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_SetMinLifeTime, METH_KEYWORDS|METH_VARARGS, "SetMinLifeTime(minLifeTime)\n\ntype: minLifeTime: ns3::Time" },
    {(char *) "GetStabilityDecrFactor", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_GetStabilityDecrFactor, METH_NOARGS, "GetStabilityDecrFactor()\n\n" },
    {(char *) "FindSameRoute", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_FindSameRoute, METH_KEYWORDS|METH_VARARGS, "FindSameRoute(rt, rtVector)\n\ntype: rt: ns3::dsr::DsrRouteCacheEntry &\ntype: rtVector: std::list< ns3::dsr::DsrRouteCacheEntry > &" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "RemoveLastEntry", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_RemoveLastEntry, METH_KEYWORDS|METH_VARARGS, "RemoveLastEntry(rtVector)\n\ntype: rtVector: std::list< ns3::dsr::DsrRouteCacheEntry > &" },
    {(char *) "IsLinkCache", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_IsLinkCache, METH_NOARGS, "IsLinkCache()\n\n" },
    {(char *) "PurgeMac", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_PurgeMac, METH_NOARGS, "PurgeMac()\n\n" },
    {(char *) "DeleteRoute", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_DeleteRoute, METH_KEYWORDS|METH_VARARGS, "DeleteRoute(dst)\n\ntype: dst: ns3::Ipv4Address" },
    {(char *) "CheckUniqueAckId", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_CheckUniqueAckId, METH_KEYWORDS|METH_VARARGS, "CheckUniqueAckId(nextHop)\n\ntype: nextHop: ns3::Ipv4Address" },
    {(char *) "PrintVector", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_PrintVector, METH_KEYWORDS|METH_VARARGS, "PrintVector(vec)\n\ntype: vec: std::vector< ns3::Ipv4Address > &" },
    {(char *) "GetCacheTimeout", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_GetCacheTimeout, METH_NOARGS, "GetCacheTimeout()\n\n" },
    {(char *) "GetExpireTime", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_GetExpireTime, METH_KEYWORDS|METH_VARARGS, "GetExpireTime(addr)\n\ntype: addr: ns3::Ipv4Address" },
    {(char *) "LookupMacAddress", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_LookupMacAddress, METH_KEYWORDS|METH_VARARGS, "LookupMacAddress(arg0)\n\ntype: arg0: ns3::Ipv4Address" },
    {(char *) "UpdateRouteEntry", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_UpdateRouteEntry, METH_KEYWORDS|METH_VARARGS, "UpdateRouteEntry(dst)\n\ntype: dst: ns3::Ipv4Address" },
    {(char *) "AddArpCache", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_AddArpCache, METH_KEYWORDS|METH_VARARGS, "AddArpCache(arg0)\n\ntype: arg0: ns3::Ptr< ns3::ArpCache >" },
    {(char *) "GetSubRoute", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_GetSubRoute, METH_NOARGS, "GetSubRoute()\n\n" },
    {(char *) "PrintRouteVector", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_PrintRouteVector, METH_KEYWORDS|METH_VARARGS, "PrintRouteVector(route)\n\ntype: route: std::list< ns3::dsr::DsrRouteCacheEntry >" },
    {(char *) "GetBadLinkLifetime", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_GetBadLinkLifetime, METH_NOARGS, "GetBadLinkLifetime()\n\n" },
    {(char *) "SetInitStability", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_SetInitStability, METH_KEYWORDS|METH_VARARGS, "SetInitStability(initStability)\n\ntype: initStability: ns3::Time" },
    {(char *) "PurgeLinkNode", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_PurgeLinkNode, METH_NOARGS, "PurgeLinkNode()\n\n" },
    {(char *) "GetInitStability", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_GetInitStability, METH_NOARGS, "GetInitStability()\n\n" },
    {(char *) "GetMinLifeTime", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_GetMinLifeTime, METH_NOARGS, "GetMinLifeTime()\n\n" },
    {(char *) "ScheduleTimer", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_ScheduleTimer, METH_NOARGS, "ScheduleTimer()\n\n" },
    {(char *) "SetUseExtends", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_SetUseExtends, METH_KEYWORDS|METH_VARARGS, "SetUseExtends(useExtends)\n\ntype: useExtends: ns3::Time" },
    {(char *) "AddRoute_Link", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_AddRoute_Link, METH_KEYWORDS|METH_VARARGS, "AddRoute_Link(nodelist, node)\n\ntype: nodelist: std::vector< ns3::Ipv4Address >\ntype: node: ns3::Ipv4Address" },
    {(char *) "AddRoute", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_AddRoute, METH_KEYWORDS|METH_VARARGS, "AddRoute(rt)\n\ntype: rt: ns3::dsr::DsrRouteCacheEntry &" },
    {(char *) "DeleteAllRoutesIncludeLink", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_DeleteAllRoutesIncludeLink, METH_KEYWORDS|METH_VARARGS, "DeleteAllRoutesIncludeLink(errorSrc, unreachNode, node)\n\ntype: errorSrc: ns3::Ipv4Address\ntype: unreachNode: ns3::Ipv4Address\ntype: node: ns3::Ipv4Address" },
    {(char *) "GetMaxCacheLen", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_GetMaxCacheLen, METH_NOARGS, "GetMaxCacheLen()\n\n" },
    {(char *) "SetStabilityDecrFactor", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_SetStabilityDecrFactor, METH_KEYWORDS|METH_VARARGS, "SetStabilityDecrFactor(decrFactor)\n\ntype: decrFactor: uint64_t" },
    {(char *) "AddNeighbor", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_AddNeighbor, METH_KEYWORDS|METH_VARARGS, "AddNeighbor(nodeList, ownAddress, expire)\n\ntype: nodeList: std::vector< ns3::Ipv4Address >\ntype: ownAddress: ns3::Ipv4Address\ntype: expire: ns3::Time" },
    {(char *) "SetBadLinkLifetime", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_SetBadLinkLifetime, METH_KEYWORDS|METH_VARARGS, "SetBadLinkLifetime(t)\n\ntype: t: ns3::Time" },
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_Clear, METH_NOARGS, "Clear()\n\n" },
    {(char *) "GetStabilityIncrFactor", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_GetStabilityIncrFactor, METH_NOARGS, "GetStabilityIncrFactor()\n\n" },
    {(char *) "GetAckSize", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_GetAckSize, METH_NOARGS, "GetAckSize()\n\n" },
    {(char *) "Purge", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_Purge, METH_NOARGS, "Purge()\n\n" },
    {(char *) "UseExtends", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_UseExtends, METH_KEYWORDS|METH_VARARGS, "UseExtends(rt)\n\ntype: rt: std::vector< ns3::Ipv4Address >" },
    {(char *) "GetMaxEntriesEachDst", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_GetMaxEntriesEachDst, METH_NOARGS, "GetMaxEntriesEachDst()\n\n" },
    {(char *) "SetSubRoute", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_SetSubRoute, METH_KEYWORDS|METH_VARARGS, "SetSubRoute(subRoute)\n\ntype: subRoute: bool" },
    {(char *) "RebuildBestRouteTable", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_RebuildBestRouteTable, METH_KEYWORDS|METH_VARARGS, "RebuildBestRouteTable(source)\n\ntype: source: ns3::Ipv4Address" },
    {(char *) "SetStabilityIncrFactor", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_SetStabilityIncrFactor, METH_KEYWORDS|METH_VARARGS, "SetStabilityIncrFactor(incrFactor)\n\ntype: incrFactor: uint64_t" },
    {(char *) "SetCacheTimeout", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_SetCacheTimeout, METH_KEYWORDS|METH_VARARGS, "SetCacheTimeout(t)\n\ntype: t: ns3::Time" },
    {(char *) "SetCacheType", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_SetCacheType, METH_KEYWORDS|METH_VARARGS, "SetCacheType(type)\n\ntype: type: std::string" },
    {(char *) "UpdateNetGraph", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_UpdateNetGraph, METH_NOARGS, "UpdateNetGraph()\n\n" },
    {(char *) "ClearMac", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_ClearMac, METH_NOARGS, "ClearMac()\n\n" },
    {(char *) "IsNeighbor", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_IsNeighbor, METH_KEYWORDS|METH_VARARGS, "IsNeighbor(addr)\n\ntype: addr: ns3::Ipv4Address" },
    {(char *) "LookupRoute", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_LookupRoute, METH_KEYWORDS|METH_VARARGS, "LookupRoute(id, rt)\n\ntype: id: ns3::Ipv4Address\ntype: rt: ns3::dsr::DsrRouteCacheEntry &" },
    {(char *) "DelArpCache", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_DelArpCache, METH_KEYWORDS|METH_VARARGS, "DelArpCache(arg0)\n\ntype: arg0: ns3::Ptr< ns3::ArpCache >" },
    {(char *) "UpdateNeighbor", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_UpdateNeighbor, METH_KEYWORDS|METH_VARARGS, "UpdateNeighbor(nodeList, expire)\n\ntype: nodeList: std::vector< ns3::Ipv4Address >\ntype: expire: ns3::Time" },
    {(char *) "ProcessTxError", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_ProcessTxError, METH_KEYWORDS|METH_VARARGS, "ProcessTxError(arg0)\n\ntype: arg0: ns3::WifiMacHeader const &" },
    {(char *) "SetCallback", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_SetCallback, METH_KEYWORDS|METH_VARARGS, "SetCallback(cb)\n\ntype: cb: ns3::Callback< void, ns3::Ipv4Address, unsigned char, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "GetUseExtends", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache_GetUseExtends, METH_NOARGS, "GetUseExtends()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrRouteCache__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrRouteCache__tp_clear(PyNs3DsrDsrRouteCache *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dsr::DsrRouteCache *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DsrDsrRouteCache__tp_traverse(PyNs3DsrDsrRouteCache *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrRouteCache__tp_dealloc(PyNs3DsrDsrRouteCache *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrRouteCache__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrRouteCache__tp_richcompare (PyNs3DsrDsrRouteCache *PYBINDGEN_UNUSED(self), PyNs3DsrDsrRouteCache *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrRouteCache_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrRouteCache_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrRouteCache",            /* tp_name */
    sizeof(PyNs3DsrDsrRouteCache),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrRouteCache__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrRouteCache(arg0)\nDsrRouteCache()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrRouteCache__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrRouteCache__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrRouteCache__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrRouteCache_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3DsrDsrRouteCache__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrRouteCache, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrRouteCache__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrDsrRouteCacheNeighbor_wrapper_registry;
static PyObject* _wrap_PyNs3DsrDsrRouteCacheNeighbor__get_close(PyNs3DsrDsrRouteCacheNeighbor *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->close));
    return py_retval;
}
static int _wrap_PyNs3DsrDsrRouteCacheNeighbor__set_close(PyNs3DsrDsrRouteCacheNeighbor *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->close = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrDsrRouteCacheNeighbor__get_m_expireTime(PyNs3DsrDsrRouteCacheNeighbor *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(self->obj->m_expireTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}
static int _wrap_PyNs3DsrDsrRouteCacheNeighbor__set_m_expireTime(PyNs3DsrDsrRouteCacheNeighbor *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_expireTime = *tmp_Time->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrDsrRouteCacheNeighbor__get_m_hardwareAddress(PyNs3DsrDsrRouteCacheNeighbor *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(self->obj->m_hardwareAddress);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}
static int _wrap_PyNs3DsrDsrRouteCacheNeighbor__set_m_hardwareAddress(PyNs3DsrDsrRouteCacheNeighbor *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_hardwareAddress = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrDsrRouteCacheNeighbor__get_m_neighborAddress(PyNs3DsrDsrRouteCacheNeighbor *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->m_neighborAddress);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3DsrDsrRouteCacheNeighbor__set_m_neighborAddress(PyNs3DsrDsrRouteCacheNeighbor *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_neighborAddress = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3DsrDsrRouteCacheNeighbor__getsets[] = {
    {
        (char*) "close", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrRouteCacheNeighbor__get_close, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrDsrRouteCacheNeighbor__set_close, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_neighborAddress", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrRouteCacheNeighbor__get_m_neighborAddress, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrDsrRouteCacheNeighbor__set_m_neighborAddress, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_expireTime", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrRouteCacheNeighbor__get_m_expireTime, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrDsrRouteCacheNeighbor__set_m_expireTime, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_hardwareAddress", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrRouteCacheNeighbor__get_m_hardwareAddress, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrDsrRouteCacheNeighbor__set_m_hardwareAddress, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3DsrDsrRouteCacheNeighbor__tp_init__0(PyNs3DsrDsrRouteCacheNeighbor *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrRouteCacheNeighbor *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrRouteCacheNeighbor_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrRouteCache::Neighbor(*((PyNs3DsrDsrRouteCacheNeighbor *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrRouteCacheNeighbor__tp_init__1(PyNs3DsrDsrRouteCacheNeighbor *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Ipv4Address *ip;
    PyNs3Mac48Address *mac;
    PyNs3Time *t;
    const char *keywords[] = {"ip", "mac", "t", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &ip, &PyNs3Mac48Address_Type, &mac, &PyNs3Time_Type, &t)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrRouteCache::Neighbor(*((PyNs3Ipv4Address *) ip)->obj, *((PyNs3Mac48Address *) mac)->obj, *((PyNs3Time *) t)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrRouteCacheNeighbor__tp_init__2(PyNs3DsrDsrRouteCacheNeighbor *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrRouteCache::Neighbor();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrRouteCacheNeighbor__tp_init(PyNs3DsrDsrRouteCacheNeighbor *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3DsrDsrRouteCacheNeighbor__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrRouteCacheNeighbor__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrRouteCacheNeighbor__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3DsrDsrRouteCacheNeighbor__copy__(PyNs3DsrDsrRouteCacheNeighbor *self)
{

    PyNs3DsrDsrRouteCacheNeighbor *py_copy;
    py_copy = PyObject_New(PyNs3DsrDsrRouteCacheNeighbor, &PyNs3DsrDsrRouteCacheNeighbor_Type);
    py_copy->obj = new ns3::dsr::DsrRouteCache::Neighbor(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrDsrRouteCacheNeighbor_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrRouteCacheNeighbor_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrRouteCacheNeighbor__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrDsrRouteCacheNeighbor__tp_dealloc(PyNs3DsrDsrRouteCacheNeighbor *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrDsrRouteCacheNeighbor_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrDsrRouteCacheNeighbor_wrapper_registry.end()) {
        PyNs3DsrDsrRouteCacheNeighbor_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::DsrRouteCache::Neighbor *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrRouteCacheNeighbor__tp_richcompare (PyNs3DsrDsrRouteCacheNeighbor *PYBINDGEN_UNUSED(self), PyNs3DsrDsrRouteCacheNeighbor *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrRouteCacheNeighbor_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrRouteCacheNeighbor_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrRouteCache.Neighbor",            /* tp_name */
    sizeof(PyNs3DsrDsrRouteCacheNeighbor),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrRouteCacheNeighbor__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "Neighbor(ip, mac, t)\nNeighbor(arg0)\nNeighbor()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrRouteCacheNeighbor__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrRouteCacheNeighbor_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3DsrDsrRouteCacheNeighbor__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrRouteCacheNeighbor__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrDsrRouteCacheEntry_wrapper_registry;


static int
_wrap_PyNs3DsrDsrRouteCacheEntry__tp_init__0(PyNs3DsrDsrRouteCacheEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrRouteCacheEntry *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrRouteCacheEntry_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrRouteCacheEntry(*((PyNs3DsrDsrRouteCacheEntry *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrRouteCacheEntry__tp_init__1(PyNs3DsrDsrRouteCacheEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector< ns3::Ipv4Address > ip_value = std::vector<ns3::Ipv4Address, std::allocator<ns3::Ipv4Address> >();
    PyNs3Ipv4Address *dst = NULL;
    PyNs3Time *exp = NULL;
    const char *keywords[] = {"ip", "dst", "exp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O&O!O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &ip_value, &PyNs3Ipv4Address_Type, &dst, &PyNs3Time_Type, &exp)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrRouteCacheEntry(ip_value, (dst ? (*((PyNs3Ipv4Address *) dst)->obj) : ns3::Ipv4Address()), (exp ? (*((PyNs3Time *) exp)->obj) : ns3::Simulator::Now( )));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrRouteCacheEntry__tp_init(PyNs3DsrDsrRouteCacheEntry *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrRouteCacheEntry__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrRouteCacheEntry__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCacheEntry_Invalidate(PyNs3DsrDsrRouteCacheEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *badLinkLifetime;
    const char *keywords[] = {"badLinkLifetime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &badLinkLifetime)) {
        return NULL;
    }
    self->obj->Invalidate(*((PyNs3Time *) badLinkLifetime)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCacheEntry_IsUnidirectional(PyNs3DsrDsrRouteCacheEntry *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsUnidirectional();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCacheEntry_SetUnidirectional(PyNs3DsrDsrRouteCacheEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool u;
    PyObject *py_u;
    const char *keywords[] = {"u", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_u)) {
        return NULL;
    }
    u = (bool) PyObject_IsTrue(py_u);
    self->obj->SetUnidirectional(u);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCacheEntry_SetDestination(PyNs3DsrDsrRouteCacheEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *d;
    const char *keywords[] = {"d", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &d)) {
        return NULL;
    }
    self->obj->SetDestination(*((PyNs3Ipv4Address *) d)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCacheEntry_GetVector(PyNs3DsrDsrRouteCacheEntry *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > retval;
    Pystd__vector__lt___ns3__Ipv4Address___gt__ *py_std__vector__lt___ns3__Ipv4Address___gt__;
    
    retval = self->obj->GetVector();
    py_std__vector__lt___ns3__Ipv4Address___gt__ = PyObject_New(Pystd__vector__lt___ns3__Ipv4Address___gt__, &Pystd__vector__lt___ns3__Ipv4Address___gt___Type);
    py_std__vector__lt___ns3__Ipv4Address___gt__->obj = new std::vector< ns3::Ipv4Address >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__Ipv4Address___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCacheEntry_SetBlacklistTimeout(PyNs3DsrDsrRouteCacheEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *t;
    const char *keywords[] = {"t", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &t)) {
        return NULL;
    }
    self->obj->SetBlacklistTimeout(*((PyNs3Time *) t)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCacheEntry_SetExpireTime(PyNs3DsrDsrRouteCacheEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *exp;
    const char *keywords[] = {"exp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &exp)) {
        return NULL;
    }
    self->obj->SetExpireTime(*((PyNs3Time *) exp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCacheEntry_GetDestination(PyNs3DsrDsrRouteCacheEntry *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetDestination();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCacheEntry_GetExpireTime(PyNs3DsrDsrRouteCacheEntry *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetExpireTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCacheEntry_SetVector(PyNs3DsrDsrRouteCacheEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > v_value;
    const char *keywords[] = {"v", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &v_value)) {
        return NULL;
    }
    self->obj->SetVector(v_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouteCacheEntry_GetBlacklistTimeout(PyNs3DsrDsrRouteCacheEntry *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetBlacklistTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrRouteCacheEntry__copy__(PyNs3DsrDsrRouteCacheEntry *self)
{

    PyNs3DsrDsrRouteCacheEntry *py_copy;
    py_copy = PyObject_New(PyNs3DsrDsrRouteCacheEntry, &PyNs3DsrDsrRouteCacheEntry_Type);
    py_copy->obj = new ns3::dsr::DsrRouteCacheEntry(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrDsrRouteCacheEntry_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrRouteCacheEntry_methods[] = {
    {(char *) "Invalidate", (PyCFunction) _wrap_PyNs3DsrDsrRouteCacheEntry_Invalidate, METH_KEYWORDS|METH_VARARGS, "Invalidate(badLinkLifetime)\n\ntype: badLinkLifetime: ns3::Time" },
    {(char *) "IsUnidirectional", (PyCFunction) _wrap_PyNs3DsrDsrRouteCacheEntry_IsUnidirectional, METH_NOARGS, "IsUnidirectional()\n\n" },
    {(char *) "SetUnidirectional", (PyCFunction) _wrap_PyNs3DsrDsrRouteCacheEntry_SetUnidirectional, METH_KEYWORDS|METH_VARARGS, "SetUnidirectional(u)\n\ntype: u: bool" },
    {(char *) "SetDestination", (PyCFunction) _wrap_PyNs3DsrDsrRouteCacheEntry_SetDestination, METH_KEYWORDS|METH_VARARGS, "SetDestination(d)\n\ntype: d: ns3::Ipv4Address" },
    {(char *) "GetVector", (PyCFunction) _wrap_PyNs3DsrDsrRouteCacheEntry_GetVector, METH_NOARGS, "GetVector()\n\n" },
    {(char *) "SetBlacklistTimeout", (PyCFunction) _wrap_PyNs3DsrDsrRouteCacheEntry_SetBlacklistTimeout, METH_KEYWORDS|METH_VARARGS, "SetBlacklistTimeout(t)\n\ntype: t: ns3::Time" },
    {(char *) "SetExpireTime", (PyCFunction) _wrap_PyNs3DsrDsrRouteCacheEntry_SetExpireTime, METH_KEYWORDS|METH_VARARGS, "SetExpireTime(exp)\n\ntype: exp: ns3::Time" },
    {(char *) "GetDestination", (PyCFunction) _wrap_PyNs3DsrDsrRouteCacheEntry_GetDestination, METH_NOARGS, "GetDestination()\n\n" },
    {(char *) "GetExpireTime", (PyCFunction) _wrap_PyNs3DsrDsrRouteCacheEntry_GetExpireTime, METH_NOARGS, "GetExpireTime()\n\n" },
    {(char *) "SetVector", (PyCFunction) _wrap_PyNs3DsrDsrRouteCacheEntry_SetVector, METH_KEYWORDS|METH_VARARGS, "SetVector(v)\n\ntype: v: std::vector< ns3::Ipv4Address >" },
    {(char *) "GetBlacklistTimeout", (PyCFunction) _wrap_PyNs3DsrDsrRouteCacheEntry_GetBlacklistTimeout, METH_NOARGS, "GetBlacklistTimeout()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrRouteCacheEntry__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrDsrRouteCacheEntry__tp_dealloc(PyNs3DsrDsrRouteCacheEntry *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrDsrRouteCacheEntry_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrDsrRouteCacheEntry_wrapper_registry.end()) {
        PyNs3DsrDsrRouteCacheEntry_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::DsrRouteCacheEntry *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrRouteCacheEntry__tp_richcompare (PyNs3DsrDsrRouteCacheEntry *PYBINDGEN_UNUSED(self), PyNs3DsrDsrRouteCacheEntry *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrRouteCacheEntry_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrRouteCacheEntry_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrRouteCacheEntry",            /* tp_name */
    sizeof(PyNs3DsrDsrRouteCacheEntry),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrRouteCacheEntry__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsrRouteCacheEntry(ip, dst, exp)\nDsrRouteCacheEntry(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrRouteCacheEntry__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrRouteCacheEntry_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrRouteCacheEntry__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyNs3DsrDsrRouting__get_PROT_NUMBER(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)ns3::dsr::DsrRouting::PROT_NUMBER);
    return py_retval;
}
static PyGetSetDef Ns3DsrDsrRoutingMeta__getsets[] = {
    {
        (char*) "PROT_NUMBER", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrRouting__get_PROT_NUMBER, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyNs3DsrDsrRoutingMeta_Type = {
        PyVarObject_HEAD_INIT(NULL, 0)
	(char *) "Ns3DsrDsrRoutingMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	Ns3DsrDsrRoutingMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};



static int
_wrap_PyNs3DsrDsrRouting__tp_init__0(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrRouting *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrRouting_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrRouting(*((PyNs3DsrDsrRouting *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrRouting__tp_init__1(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrRouting();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrRouting__tp_init(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrRouting__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrRouting__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_CancelPacketTimerNextHop(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *nextHop;
    int protocol;
    const char *keywords[] = {"nextHop", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Ipv4Address_Type, &nextHop, &protocol)) {
        return NULL;
    }
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->CancelPacketTimerNextHop(*((PyNs3Ipv4Address *) nextHop)->obj, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_CancelRreqTimer(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *dst;
    bool isRemove;
    PyObject *py_isRemove;
    const char *keywords[] = {"dst", "isRemove", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O", (char **) keywords, &PyNs3Ipv4Address_Type, &dst, &py_isRemove)) {
        return NULL;
    }
    isRemove = (bool) PyObject_IsTrue(py_isRemove);
    self->obj->CancelRreqTimer(*((PyNs3Ipv4Address *) dst)->obj, isRemove);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_GetPassiveBuffer(PyNs3DsrDsrRouting *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::dsr::DsrPassiveBuffer > retval;
    PyNs3DsrDsrPassiveBuffer *py_DsrPassiveBuffer;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPassiveBuffer();
    if (!(const_cast<ns3::dsr::DsrPassiveBuffer *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::dsr::DsrPassiveBuffer *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_DsrPassiveBuffer = NULL;
    } else {
        py_DsrPassiveBuffer = (PyNs3DsrDsrPassiveBuffer *) wrapper_lookup_iter->second;
        Py_INCREF(py_DsrPassiveBuffer);
    }
    
    if (py_DsrPassiveBuffer == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::dsr::DsrPassiveBuffer *> (ns3::PeekPointer (retval)))), &PyNs3DsrDsrPassiveBuffer_Type);
        py_DsrPassiveBuffer = PyObject_GC_New(PyNs3DsrDsrPassiveBuffer, wrapper_type);
        py_DsrPassiveBuffer->inst_dict = NULL;
    
        py_DsrPassiveBuffer->inst_dict = NULL;
        py_DsrPassiveBuffer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::dsr::DsrPassiveBuffer *> (ns3::PeekPointer (retval))->Ref();
        py_DsrPassiveBuffer->obj = const_cast<ns3::dsr::DsrPassiveBuffer *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_DsrPassiveBuffer->obj] = (PyObject *) py_DsrPassiveBuffer;
    }
    py_retval = Py_BuildValue((char *) "N", py_DsrPassiveBuffer);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_PassiveEntryCheck(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Address *destination;
    int segsLeft;
    int fragmentOffset;
    int identification;
    bool saveEntry;
    PyObject *py_saveEntry;
    const char *keywords[] = {"packet", "source", "destination", "segsLeft", "fragmentOffset", "identification", "saveEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!iiiO", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Address_Type, &destination, &segsLeft, &fragmentOffset, &identification, &py_saveEntry)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (segsLeft > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (fragmentOffset > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (identification > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    saveEntry = (bool) PyObject_IsTrue(py_saveEntry);
    retval = self->obj->PassiveEntryCheck(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Address *) destination)->obj, segsLeft, fragmentOffset, identification, saveEntry);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrRouting::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_PrintVector(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > vec_value;
    const char *keywords[] = {"vec", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &vec_value)) {
        return NULL;
    }
    self->obj->PrintVector(vec_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_IsLinkCache(PyNs3DsrDsrRouting *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsLinkCache();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_CancelPassiveTimer(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Address *destination;
    int segsLeft;
    const char *keywords[] = {"packet", "source", "destination", "segsLeft", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!i", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Address_Type, &destination, &segsLeft)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (segsLeft > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->CancelPassiveTimer(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Address *) destination)->obj, segsLeft);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SendInitialRequest(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Address *destination;
    int protocol;
    const char *keywords[] = {"source", "destination", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!i", (char **) keywords, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Address_Type, &destination, &protocol)) {
        return NULL;
    }
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SendInitialRequest(*((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Address *) destination)->obj, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_GetNodeWithAddress(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3Ipv4Address *ipv4Address;
    const char *keywords[] = {"ipv4Address", NULL};
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &ipv4Address)) {
        return NULL;
    }
    retval = self->obj->GetNodeWithAddress(*((PyNs3Ipv4Address *) ipv4Address)->obj);
    if (!(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Node__PythonHelper).name())
    {
        py_Node = reinterpret_cast< PyNs3Node* >(reinterpret_cast< PyNs3Node__PythonHelper* >(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
    
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (retval))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SetNode(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *keywords[] = {"node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    self->obj->SetNode(ns3::Ptr< ns3::Node  > (node_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SearchNextHop(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *ipv4Address;
    std::vector< ns3::Ipv4Address > vec_value;
    const char *keywords[] = {"ipv4Address", "vec", NULL};
    PyNs3Ipv4Address *py_Ipv4Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O&", (char **) keywords, &PyNs3Ipv4Address_Type, &ipv4Address, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &vec_value)) {
        return NULL;
    }
    ns3::Ipv4Address retval = self->obj->SearchNextHop(*((PyNs3Ipv4Address *) ipv4Address)->obj, vec_value);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_Scheduler(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int priority;
    const char *keywords[] = {"priority", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &priority)) {
        return NULL;
    }
    self->obj->Scheduler(priority);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_NetworkScheduleTimerExpire(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrMaintainBuffEntry *mb;
    int protocol;
    const char *keywords[] = {"mb", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3DsrDsrMaintainBuffEntry_Type, &mb, &protocol)) {
        return NULL;
    }
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->NetworkScheduleTimerExpire(*((PyNs3DsrDsrMaintainBuffEntry *) mb)->obj, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_CancelPassivePacketTimer(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrMaintainBuffEntry *mb;
    const char *keywords[] = {"mb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrMaintainBuffEntry_Type, &mb)) {
        return NULL;
    }
    self->obj->CancelPassivePacketTimer(*((PyNs3DsrDsrMaintainBuffEntry *) mb)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_GetIDfromIP(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint16_t retval;
    PyNs3Ipv4Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->GetIDfromIP(*((PyNs3Ipv4Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_ScheduleCachedReply(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Address *destination;
    PyNs3Ipv4Route *route;
    ns3::Ipv4Route *route_ptr;
    double hops;
    const char *keywords[] = {"packet", "source", "destination", "route", "hops", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!d", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Address_Type, &destination, &PyNs3Ipv4Route_Type, &route, &hops)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    route_ptr = (route ? route->obj : NULL);
    self->obj->ScheduleCachedReply(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Address *) destination)->obj, ns3::Ptr< ns3::Ipv4Route  > (route_ptr), hops);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_FindSourceEntry(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *src;
    PyNs3Ipv4Address *dst;
    int id;
    const char *keywords[] = {"src", "dst", "id", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!i", (char **) keywords, &PyNs3Ipv4Address_Type, &src, &PyNs3Ipv4Address_Type, &dst, &id)) {
        return NULL;
    }
    if (id > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->FindSourceEntry(*((PyNs3Ipv4Address *) src)->obj, *((PyNs3Ipv4Address *) dst)->obj, id);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_UpdateRouteEntry(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *dst;
    const char *keywords[] = {"dst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &dst)) {
        return NULL;
    }
    retval = self->obj->UpdateRouteEntry(*((PyNs3Ipv4Address *) dst)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_GetNode(PyNs3DsrDsrRouting *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetNode();
    if (!(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Node__PythonHelper).name())
    {
        py_Node = reinterpret_cast< PyNs3Node* >(reinterpret_cast< PyNs3Node__PythonHelper* >(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
    
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (retval))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SalvagePacket(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Address *dst;
    int protocol;
    const char *keywords[] = {"packet", "source", "dst", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!i", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Address_Type, &dst, &protocol)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SalvagePacket(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Address *) dst)->obj, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SendRealDown(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3DsrDsrNetworkQueueEntry *newEntry;
    const char *keywords[] = {"newEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrNetworkQueueEntry_Type, &newEntry)) {
        return NULL;
    }
    retval = self->obj->SendRealDown(*((PyNs3DsrDsrNetworkQueueEntry *) newEntry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SendGratuitousReply(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *replyTo;
    PyNs3Ipv4Address *replyFrom;
    std::vector< ns3::Ipv4Address > nodeList_value;
    int protocol;
    const char *keywords[] = {"replyTo", "replyFrom", "nodeList", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O&i", (char **) keywords, &PyNs3Ipv4Address_Type, &replyTo, &PyNs3Ipv4Address_Type, &replyFrom, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &nodeList_value, &protocol)) {
        return NULL;
    }
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SendGratuitousReply(*((PyNs3Ipv4Address *) replyTo)->obj, *((PyNs3Ipv4Address *) replyFrom)->obj, nodeList_value, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_CancelPacketAllTimer(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrMaintainBuffEntry *mb;
    const char *keywords[] = {"mb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrMaintainBuffEntry_Type, &mb)) {
        return NULL;
    }
    self->obj->CancelPacketAllTimer(*((PyNs3DsrDsrMaintainBuffEntry *) mb)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_GetPriority(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    ns3::dsr::DsrMessageType messageType;
    const char *keywords[] = {"messageType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &messageType)) {
        return NULL;
    }
    retval = self->obj->GetPriority(messageType);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_LinkScheduleTimerExpire(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrMaintainBuffEntry *mb;
    int protocol;
    const char *keywords[] = {"mb", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3DsrDsrMaintainBuffEntry_Type, &mb, &protocol)) {
        return NULL;
    }
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->LinkScheduleTimerExpire(*((PyNs3DsrDsrMaintainBuffEntry *) mb)->obj, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_ScheduleLinkPacketRetry(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrMaintainBuffEntry *mb;
    int protocol;
    const char *keywords[] = {"mb", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3DsrDsrMaintainBuffEntry_Type, &mb, &protocol)) {
        return NULL;
    }
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->ScheduleLinkPacketRetry(*((PyNs3DsrDsrMaintainBuffEntry *) mb)->obj, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_GetNetDeviceFromContext(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    const char *context;
    Py_ssize_t context_len;
    const char *keywords[] = {"context", NULL};
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &context, &context_len)) {
        return NULL;
    }
    retval = self->obj->GetNetDeviceFromContext(std::string(context, context_len));
    if (!(const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_NetDevice = NULL;
    } else {
        py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
        Py_INCREF(py_NetDevice);
    }
    
    if (py_NetDevice == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))), &PyNs3NetDevice_Type);
        py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
        py_NetDevice->inst_dict = NULL;
    
        py_NetDevice->inst_dict = NULL;
        py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval))->Ref();
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
    }
    py_retval = Py_BuildValue((char *) "N", py_NetDevice);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SetPassiveBuffer(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrPassiveBuffer *r;
    ns3::dsr::DsrPassiveBuffer *r_ptr;
    const char *keywords[] = {"r", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrPassiveBuffer_Type, &r)) {
        return NULL;
    }
    r_ptr = (r ? r->obj : NULL);
    self->obj->SetPassiveBuffer(ns3::Ptr< ns3::dsr::DsrPassiveBuffer  > (r_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SendReply(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Address *nextHop;
    PyNs3Ipv4Route *route;
    ns3::Ipv4Route *route_ptr;
    const char *keywords[] = {"packet", "source", "nextHop", "route", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Address_Type, &nextHop, &PyNs3Ipv4Route_Type, &route)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    route_ptr = (route ? route->obj : NULL);
    self->obj->SendReply(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Address *) nextHop)->obj, ns3::Ptr< ns3::Ipv4Route  > (route_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SendErrorRequest(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRerrUnreachHeader *rerr;
    int protocol;
    const char *keywords[] = {"rerr", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3DsrDsrOptionRerrUnreachHeader_Type, &rerr, &protocol)) {
        return NULL;
    }
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SendErrorRequest(*((PyNs3DsrDsrOptionRerrUnreachHeader *) rerr)->obj, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_ForwardErrPacket(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRerrUnreachHeader *rerr;
    PyNs3DsrDsrOptionSRHeader *sourceRoute;
    PyNs3Ipv4Address *nextHop;
    int protocol;
    PyNs3Ipv4Route *route;
    ns3::Ipv4Route *route_ptr;
    const char *keywords[] = {"rerr", "sourceRoute", "nextHop", "protocol", "route", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!iO!", (char **) keywords, &PyNs3DsrDsrOptionRerrUnreachHeader_Type, &rerr, &PyNs3DsrDsrOptionSRHeader_Type, &sourceRoute, &PyNs3Ipv4Address_Type, &nextHop, &protocol, &PyNs3Ipv4Route_Type, &route)) {
        return NULL;
    }
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    route_ptr = (route ? route->obj : NULL);
    self->obj->ForwardErrPacket(*((PyNs3DsrDsrOptionRerrUnreachHeader *) rerr)->obj, *((PyNs3DsrDsrOptionSRHeader *) sourceRoute)->obj, *((PyNs3Ipv4Address *) nextHop)->obj, protocol, ns3::Ptr< ns3::Ipv4Route  > (route_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_GetOption(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::dsr::DsrOptions > retval;
    int optionNumber;
    const char *keywords[] = {"optionNumber", NULL};
    PyNs3DsrDsrOptions *py_DsrOptions;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &optionNumber)) {
        return NULL;
    }
    retval = self->obj->GetOption(optionNumber);
    if (!(const_cast<ns3::dsr::DsrOptions *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::dsr::DsrOptions *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3DsrDsrOptions__PythonHelper).name())
    {
        py_DsrOptions = reinterpret_cast< PyNs3DsrDsrOptions* >(reinterpret_cast< PyNs3DsrDsrOptions__PythonHelper* >(const_cast<ns3::dsr::DsrOptions *> (ns3::PeekPointer (retval)))->m_pyself);
        py_DsrOptions->obj = const_cast<ns3::dsr::DsrOptions *> (ns3::PeekPointer (retval));
        Py_INCREF(py_DsrOptions);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::dsr::DsrOptions *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_DsrOptions = NULL;
        } else {
            py_DsrOptions = (PyNs3DsrDsrOptions *) wrapper_lookup_iter->second;
            Py_INCREF(py_DsrOptions);
        }
    
        if (py_DsrOptions == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::dsr::DsrOptions *> (ns3::PeekPointer (retval)))), &PyNs3DsrDsrOptions_Type);
            py_DsrOptions = PyObject_GC_New(PyNs3DsrDsrOptions, wrapper_type);
            py_DsrOptions->inst_dict = NULL;
    
            py_DsrOptions->inst_dict = NULL;
            py_DsrOptions->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::dsr::DsrOptions *> (ns3::PeekPointer (retval))->Ref();
            py_DsrOptions->obj = const_cast<ns3::dsr::DsrOptions *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_DsrOptions->obj] = (PyObject *) py_DsrOptions;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_DsrOptions);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_AddRoute_Link(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    std::vector< ns3::Ipv4Address > nodelist_value;
    PyNs3Ipv4Address *source;
    const char *keywords[] = {"nodelist", "source", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O!", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &nodelist_value, &PyNs3Ipv4Address_Type, &source)) {
        return NULL;
    }
    retval = self->obj->AddRoute_Link(nodelist_value, *((PyNs3Ipv4Address *) source)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_AddRoute(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3DsrDsrRouteCacheEntry *rt;
    const char *keywords[] = {"rt", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrRouteCacheEntry_Type, &rt)) {
        return NULL;
    }
    retval = self->obj->AddRoute(*((PyNs3DsrDsrRouteCacheEntry *) rt)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_DeleteAllRoutesIncludeLink(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *errorSrc;
    PyNs3Ipv4Address *unreachNode;
    PyNs3Ipv4Address *node;
    const char *keywords[] = {"errorSrc", "unreachNode", "node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &errorSrc, &PyNs3Ipv4Address_Type, &unreachNode, &PyNs3Ipv4Address_Type, &node)) {
        return NULL;
    }
    self->obj->DeleteAllRoutesIncludeLink(*((PyNs3Ipv4Address *) errorSrc)->obj, *((PyNs3Ipv4Address *) unreachNode)->obj, *((PyNs3Ipv4Address *) node)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SetRequestTable(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrRreqTable *r;
    ns3::dsr::DsrRreqTable *r_ptr;
    const char *keywords[] = {"r", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrRreqTable_Type, &r)) {
        return NULL;
    }
    r_ptr = (r ? r->obj : NULL);
    self->obj->SetRequestTable(ns3::Ptr< ns3::dsr::DsrRreqTable  > (r_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SendPacketFromBuffer(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionSRHeader *sourceRoute;
    PyNs3Ipv4Address *nextHop;
    int protocol;
    const char *keywords[] = {"sourceRoute", "nextHop", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!i", (char **) keywords, &PyNs3DsrDsrOptionSRHeader_Type, &sourceRoute, &PyNs3Ipv4Address_Type, &nextHop, &protocol)) {
        return NULL;
    }
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SendPacketFromBuffer(*((PyNs3DsrDsrOptionSRHeader *) sourceRoute)->obj, *((PyNs3Ipv4Address *) nextHop)->obj, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_Insert(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptions *option;
    ns3::dsr::DsrOptions *option_ptr;
    const char *keywords[] = {"option", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptions_Type, &option)) {
        return NULL;
    }
    option_ptr = (option ? option->obj : NULL);
    self->obj->Insert(ns3::Ptr< ns3::dsr::DsrOptions  > (option_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SendUnreachError(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *unreachNode;
    PyNs3Ipv4Address *destination;
    PyNs3Ipv4Address *originalDst;
    int salvage;
    int protocol;
    const char *keywords[] = {"unreachNode", "destination", "originalDst", "salvage", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!ii", (char **) keywords, &PyNs3Ipv4Address_Type, &unreachNode, &PyNs3Ipv4Address_Type, &destination, &PyNs3Ipv4Address_Type, &originalDst, &salvage, &protocol)) {
        return NULL;
    }
    if (salvage > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SendUnreachError(*((PyNs3Ipv4Address *) unreachNode)->obj, *((PyNs3Ipv4Address *) destination)->obj, *((PyNs3Ipv4Address *) originalDst)->obj, salvage, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_ScheduleInitialReply(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Address *nextHop;
    PyNs3Ipv4Route *route;
    ns3::Ipv4Route *route_ptr;
    const char *keywords[] = {"packet", "source", "nextHop", "route", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Address_Type, &nextHop, &PyNs3Ipv4Route_Type, &route)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    route_ptr = (route ? route->obj : NULL);
    self->obj->ScheduleInitialReply(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Address *) nextHop)->obj, ns3::Ptr< ns3::Ipv4Route  > (route_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_PassiveScheduleTimerExpire(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrMaintainBuffEntry *mb;
    int protocol;
    const char *keywords[] = {"mb", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3DsrDsrMaintainBuffEntry_Type, &mb, &protocol)) {
        return NULL;
    }
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->PassiveScheduleTimerExpire(*((PyNs3DsrDsrMaintainBuffEntry *) mb)->obj, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SchedulePassivePacketRetry(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrMaintainBuffEntry *mb;
    int protocol;
    const char *keywords[] = {"mb", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3DsrDsrMaintainBuffEntry_Type, &mb, &protocol)) {
        return NULL;
    }
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SchedulePassivePacketRetry(*((PyNs3DsrDsrMaintainBuffEntry *) mb)->obj, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_IncreaseRetransTimer(PyNs3DsrDsrRouting *self)
{
    PyObject *py_retval;
    
    self->obj->IncreaseRetransTimer();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_Receive(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::IpL4Protocol::RxStatus retval;
    PyNs3Packet *p;
    ns3::Packet *p_ptr;
    PyNs3Ipv4Header *header;
    PyNs3Ipv4Interface *incomingInterface;
    ns3::Ipv4Interface *incomingInterface_ptr;
    const char *keywords[] = {"p", "header", "incomingInterface", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &p, &PyNs3Ipv4Header_Type, &header, &PyNs3Ipv4Interface_Type, &incomingInterface)) {
        return NULL;
    }
    p_ptr = (p ? p->obj : NULL);
    incomingInterface_ptr = (incomingInterface ? incomingInterface->obj : NULL);
    retval = self->obj->Receive(ns3::Ptr< ns3::Packet  > (p_ptr), *((PyNs3Ipv4Header *) header)->obj, ns3::Ptr< ns3::Ipv4Interface  > (incomingInterface_ptr));
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_GetRequestTable(PyNs3DsrDsrRouting *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::dsr::DsrRreqTable > retval;
    PyNs3DsrDsrRreqTable *py_DsrRreqTable;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetRequestTable();
    if (!(const_cast<ns3::dsr::DsrRreqTable *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::dsr::DsrRreqTable *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_DsrRreqTable = NULL;
    } else {
        py_DsrRreqTable = (PyNs3DsrDsrRreqTable *) wrapper_lookup_iter->second;
        Py_INCREF(py_DsrRreqTable);
    }
    
    if (py_DsrRreqTable == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::dsr::DsrRreqTable *> (ns3::PeekPointer (retval)))), &PyNs3DsrDsrRreqTable_Type);
        py_DsrRreqTable = PyObject_GC_New(PyNs3DsrDsrRreqTable, wrapper_type);
        py_DsrRreqTable->inst_dict = NULL;
    
        py_DsrRreqTable->inst_dict = NULL;
        py_DsrRreqTable->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::dsr::DsrRreqTable *> (ns3::PeekPointer (retval))->Ref();
        py_DsrRreqTable->obj = const_cast<ns3::dsr::DsrRreqTable *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_DsrRreqTable->obj] = (PyObject *) py_DsrRreqTable;
    }
    py_retval = Py_BuildValue((char *) "N", py_DsrRreqTable);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_RouteRequestTimerExpire(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    std::vector< ns3::Ipv4Address > address_value;
    unsigned int requestId;
    int protocol;
    const char *keywords[] = {"packet", "address", "requestId", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O&Ii", (char **) keywords, &PyNs3Packet_Type, &packet, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &address_value, &requestId, &protocol)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->RouteRequestTimerExpire(ns3::Ptr< ns3::Packet  > (packet_ptr), address_value, requestId, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_CancelLinkPacketTimer(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrMaintainBuffEntry *mb;
    const char *keywords[] = {"mb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrMaintainBuffEntry_Type, &mb)) {
        return NULL;
    }
    self->obj->CancelLinkPacketTimer(*((PyNs3DsrDsrMaintainBuffEntry *) mb)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SetRouteCache(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrRouteCache *r;
    ns3::dsr::DsrRouteCache *r_ptr;
    const char *keywords[] = {"r", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrRouteCache_Type, &r)) {
        return NULL;
    }
    r_ptr = (r ? r->obj : NULL);
    self->obj->SetRouteCache(ns3::Ptr< ns3::dsr::DsrRouteCache  > (r_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_ScheduleNetworkPacketRetry(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrMaintainBuffEntry *mb;
    bool isFirst;
    PyObject *py_isFirst;
    int protocol;
    const char *keywords[] = {"mb", "isFirst", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!Oi", (char **) keywords, &PyNs3DsrDsrMaintainBuffEntry_Type, &mb, &py_isFirst, &protocol)) {
        return NULL;
    }
    isFirst = (bool) PyObject_IsTrue(py_isFirst);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->ScheduleNetworkPacketRetry(*((PyNs3DsrDsrMaintainBuffEntry *) mb)->obj, isFirst, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_GetElementsFromContext(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *context;
    Py_ssize_t context_len;
    const char *keywords[] = {"context", NULL};
    std::vector< std::string > retval;
    Pystd__vector__lt___std__string___gt__ *py_std__vector__lt___std__string___gt__;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &context, &context_len)) {
        return NULL;
    }
    retval = self->obj->GetElementsFromContext(std::string(context, context_len));
    py_std__vector__lt___std__string___gt__ = PyObject_New(Pystd__vector__lt___std__string___gt__, &Pystd__vector__lt___std__string___gt___Type);
    py_std__vector__lt___std__string___gt__->obj = new std::vector< std::string >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___std__string___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_GetIPfromID(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int id;
    const char *keywords[] = {"id", NULL};
    PyNs3Ipv4Address *py_Ipv4Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &id)) {
        return NULL;
    }
    if (id > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::Ipv4Address retval = self->obj->GetIPfromID(id);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_Send(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Address *destination;
    int protocol;
    PyNs3Ipv4Route *route;
    ns3::Ipv4Route *route_ptr;
    const char *keywords[] = {"packet", "source", "destination", "protocol", "route", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!iO!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Address_Type, &destination, &protocol, &PyNs3Ipv4Route_Type, &route)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    route_ptr = (route ? route->obj : NULL);
    self->obj->Send(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Address *) destination)->obj, protocol, ns3::Ptr< ns3::Ipv4Route  > (route_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_ScheduleInterRequest(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->ScheduleInterRequest(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SendPacket(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Address *nextHop;
    int protocol;
    const char *keywords[] = {"packet", "source", "nextHop", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!i", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Address_Type, &nextHop, &protocol)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SendPacket(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Address *) nextHop)->obj, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SendRequest(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Ipv4Address *source;
    const char *keywords[] = {"packet", "source", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Ipv4Address_Type, &source)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->SendRequest(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Ipv4Address *) source)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_ForwardPacket(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3DsrDsrOptionSRHeader *sourceRoute;
    PyNs3Ipv4Header *ipv4Header;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Address *destination;
    PyNs3Ipv4Address *targetAddress;
    int protocol;
    PyNs3Ipv4Route *route;
    ns3::Ipv4Route *route_ptr;
    const char *keywords[] = {"packet", "sourceRoute", "ipv4Header", "source", "destination", "targetAddress", "protocol", "route", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!O!O!iO!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3DsrDsrOptionSRHeader_Type, &sourceRoute, &PyNs3Ipv4Header_Type, &ipv4Header, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Address_Type, &destination, &PyNs3Ipv4Address_Type, &targetAddress, &protocol, &PyNs3Ipv4Route_Type, &route)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    route_ptr = (route ? route->obj : NULL);
    self->obj->ForwardPacket(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3DsrDsrOptionSRHeader *) sourceRoute)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Address *) destination)->obj, *((PyNs3Ipv4Address *) targetAddress)->obj, protocol, ns3::Ptr< ns3::Ipv4Route  > (route_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_CheckSendBuffer(PyNs3DsrDsrRouting *self)
{
    PyObject *py_retval;
    
    self->obj->CheckSendBuffer();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_ScheduleRreqRetry(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    std::vector< ns3::Ipv4Address > address_value;
    bool nonProp;
    PyObject *py_nonProp;
    unsigned int requestId;
    int protocol;
    const char *keywords[] = {"packet", "address", "nonProp", "requestId", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O&OIi", (char **) keywords, &PyNs3Packet_Type, &packet, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &address_value, &py_nonProp, &requestId, &protocol)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    nonProp = (bool) PyObject_IsTrue(py_nonProp);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->ScheduleRreqRetry(ns3::Ptr< ns3::Packet  > (packet_ptr), address_value, nonProp, requestId, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3DsrDsrRouting_SendBuffTimerExpire(PyNs3DsrDsrRouting *self)
{
    PyObject *py_retval;
    
    self->obj->SendBuffTimerExpire();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_GetRouteCache(PyNs3DsrDsrRouting *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::dsr::DsrRouteCache > retval;
    PyNs3DsrDsrRouteCache *py_DsrRouteCache;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetRouteCache();
    if (!(const_cast<ns3::dsr::DsrRouteCache *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::dsr::DsrRouteCache *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_DsrRouteCache = NULL;
    } else {
        py_DsrRouteCache = (PyNs3DsrDsrRouteCache *) wrapper_lookup_iter->second;
        Py_INCREF(py_DsrRouteCache);
    }
    
    if (py_DsrRouteCache == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::dsr::DsrRouteCache *> (ns3::PeekPointer (retval)))), &PyNs3DsrDsrRouteCache_Type);
        py_DsrRouteCache = PyObject_GC_New(PyNs3DsrDsrRouteCache, wrapper_type);
        py_DsrRouteCache->inst_dict = NULL;
    
        py_DsrRouteCache->inst_dict = NULL;
        py_DsrRouteCache->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::dsr::DsrRouteCache *> (ns3::PeekPointer (retval))->Ref();
        py_DsrRouteCache->obj = const_cast<ns3::dsr::DsrRouteCache *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_DsrRouteCache->obj] = (PyObject *) py_DsrRouteCache;
    }
    py_retval = Py_BuildValue((char *) "N", py_DsrRouteCache);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SetRoute(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Ipv4Route > retval;
    PyNs3Ipv4Address *nextHop;
    PyNs3Ipv4Address *srcAddress;
    const char *keywords[] = {"nextHop", "srcAddress", NULL};
    PyNs3Ipv4Route *py_Ipv4Route;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &nextHop, &PyNs3Ipv4Address_Type, &srcAddress)) {
        return NULL;
    }
    retval = self->obj->SetRoute(*((PyNs3Ipv4Address *) nextHop)->obj, *((PyNs3Ipv4Address *) srcAddress)->obj);
    if (!(const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Ipv4Route = NULL;
    } else {
        py_Ipv4Route = (PyNs3Ipv4Route *) wrapper_lookup_iter->second;
        Py_INCREF(py_Ipv4Route);
    }
    
    if (py_Ipv4Route == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (retval)))), &PyNs3Ipv4Route_Type);
        py_Ipv4Route = PyObject_New(PyNs3Ipv4Route, wrapper_type);
    
        py_Ipv4Route->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (retval))->Ref();
        py_Ipv4Route->obj = const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Ipv4Route->obj] = (PyObject *) py_Ipv4Route;
    }
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Route);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_GetProtocolNumber(PyNs3DsrDsrRouting *self)
{
    PyObject *py_retval;
    int retval;
    
    retval = self->obj->GetProtocolNumber();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_LookupRoute(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *id;
    PyNs3DsrDsrRouteCacheEntry *rt;
    const char *keywords[] = {"id", "rt", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &id, &PyNs3DsrDsrRouteCacheEntry_Type, &rt)) {
        return NULL;
    }
    retval = self->obj->LookupRoute(*((PyNs3Ipv4Address *) id)->obj, *((PyNs3DsrDsrRouteCacheEntry *) rt)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_UseExtends(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address > rt_value;
    const char *keywords[] = {"rt", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__, &rt_value)) {
        return NULL;
    }
    self->obj->UseExtends(rt_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_CancelNetworkPacketTimer(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrMaintainBuffEntry *mb;
    const char *keywords[] = {"mb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrMaintainBuffEntry_Type, &mb)) {
        return NULL;
    }
    self->obj->CancelNetworkPacketTimer(*((PyNs3DsrDsrMaintainBuffEntry *) mb)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_CallCancelPacketTimer(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ackId;
    PyNs3Ipv4Header *ipv4Header;
    PyNs3Ipv4Address *realSrc;
    PyNs3Ipv4Address *realDst;
    const char *keywords[] = {"ackId", "ipv4Header", "realSrc", "realDst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!O!O!", (char **) keywords, &ackId, &PyNs3Ipv4Header_Type, &ipv4Header, &PyNs3Ipv4Address_Type, &realSrc, &PyNs3Ipv4Address_Type, &realDst)) {
        return NULL;
    }
    if (ackId > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->CallCancelPacketTimer(ackId, *((PyNs3Ipv4Header *) ipv4Header)->obj, *((PyNs3Ipv4Address *) realSrc)->obj, *((PyNs3Ipv4Address *) realDst)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_PriorityScheduler(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int priority;
    bool continueWithFirst;
    PyObject *py_continueWithFirst;
    const char *keywords[] = {"priority", "continueWithFirst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO", (char **) keywords, &priority, &py_continueWithFirst)) {
        return NULL;
    }
    continueWithFirst = (bool) PyObject_IsTrue(py_continueWithFirst);
    self->obj->PriorityScheduler(priority, continueWithFirst);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_AssignStreams(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int64_t retval;
    int64_t stream;
    const char *keywords[] = {"stream", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "L", (char **) keywords, &stream)) {
        return NULL;
    }
    retval = self->obj->AssignStreams(stream);
    py_retval = Py_BuildValue((char *) "L", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SendAck(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int ackId;
    PyNs3Ipv4Address *destination;
    PyNs3Ipv4Address *realSrc;
    PyNs3Ipv4Address *realDst;
    int protocol;
    PyNs3Ipv4Route *route;
    ns3::Ipv4Route *route_ptr;
    const char *keywords[] = {"ackId", "destination", "realSrc", "realDst", "protocol", "route", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!O!O!iO!", (char **) keywords, &ackId, &PyNs3Ipv4Address_Type, &destination, &PyNs3Ipv4Address_Type, &realSrc, &PyNs3Ipv4Address_Type, &realDst, &protocol, &PyNs3Ipv4Route_Type, &route)) {
        return NULL;
    }
    if (ackId > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    route_ptr = (route ? route->obj : NULL);
    self->obj->SendAck(ackId, *((PyNs3Ipv4Address *) destination)->obj, *((PyNs3Ipv4Address *) realSrc)->obj, *((PyNs3Ipv4Address *) realDst)->obj, protocol, ns3::Ptr< ns3::Ipv4Route  > (route_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_SetDownTarget(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl7> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl7> (callback);
    self->obj->SetDownTarget(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr<ns3::Ipv4Route>, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_PacketNewRoute(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Address *destination;
    int protocol;
    const char *keywords[] = {"packet", "source", "destination", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!i", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Address_Type, &destination, &protocol)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->PacketNewRoute(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Address *) destination)->obj, protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRouting_GetIPfromMAC(PyNs3DsrDsrRouting *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    PyNs3Ipv4Address *py_Ipv4Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    ns3::Ipv4Address retval = self->obj->GetIPfromMAC(*((PyNs3Mac48Address *) address)->obj);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrRouting__copy__(PyNs3DsrDsrRouting *self)
{

    PyNs3DsrDsrRouting *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrRouting, &PyNs3DsrDsrRouting_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::dsr::DsrRouting(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrRouting_methods[] = {
    {(char *) "CancelPacketTimerNextHop", (PyCFunction) _wrap_PyNs3DsrDsrRouting_CancelPacketTimerNextHop, METH_KEYWORDS|METH_VARARGS, "CancelPacketTimerNextHop(nextHop, protocol)\n\ntype: nextHop: ns3::Ipv4Address\ntype: protocol: uint8_t" },
    {(char *) "CancelRreqTimer", (PyCFunction) _wrap_PyNs3DsrDsrRouting_CancelRreqTimer, METH_KEYWORDS|METH_VARARGS, "CancelRreqTimer(dst, isRemove)\n\ntype: dst: ns3::Ipv4Address\ntype: isRemove: bool" },
    {(char *) "GetPassiveBuffer", (PyCFunction) _wrap_PyNs3DsrDsrRouting_GetPassiveBuffer, METH_NOARGS, "GetPassiveBuffer()\n\n" },
    {(char *) "PassiveEntryCheck", (PyCFunction) _wrap_PyNs3DsrDsrRouting_PassiveEntryCheck, METH_KEYWORDS|METH_VARARGS, "PassiveEntryCheck(packet, source, destination, segsLeft, fragmentOffset, identification, saveEntry)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: source: ns3::Ipv4Address\ntype: destination: ns3::Ipv4Address\ntype: segsLeft: uint8_t\ntype: fragmentOffset: uint16_t\ntype: identification: uint16_t\ntype: saveEntry: bool" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrRouting_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "PrintVector", (PyCFunction) _wrap_PyNs3DsrDsrRouting_PrintVector, METH_KEYWORDS|METH_VARARGS, "PrintVector(vec)\n\ntype: vec: std::vector< ns3::Ipv4Address > &" },
    {(char *) "IsLinkCache", (PyCFunction) _wrap_PyNs3DsrDsrRouting_IsLinkCache, METH_NOARGS, "IsLinkCache()\n\n" },
    {(char *) "CancelPassiveTimer", (PyCFunction) _wrap_PyNs3DsrDsrRouting_CancelPassiveTimer, METH_KEYWORDS|METH_VARARGS, "CancelPassiveTimer(packet, source, destination, segsLeft)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: source: ns3::Ipv4Address\ntype: destination: ns3::Ipv4Address\ntype: segsLeft: uint8_t" },
    {(char *) "SendInitialRequest", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SendInitialRequest, METH_KEYWORDS|METH_VARARGS, "SendInitialRequest(source, destination, protocol)\n\ntype: source: ns3::Ipv4Address\ntype: destination: ns3::Ipv4Address\ntype: protocol: uint8_t" },
    {(char *) "GetNodeWithAddress", (PyCFunction) _wrap_PyNs3DsrDsrRouting_GetNodeWithAddress, METH_KEYWORDS|METH_VARARGS, "GetNodeWithAddress(ipv4Address)\n\ntype: ipv4Address: ns3::Ipv4Address" },
    {(char *) "SetNode", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SetNode, METH_KEYWORDS|METH_VARARGS, "SetNode(node)\n\ntype: node: ns3::Ptr< ns3::Node >" },
    {(char *) "SearchNextHop", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SearchNextHop, METH_KEYWORDS|METH_VARARGS, "SearchNextHop(ipv4Address, vec)\n\ntype: ipv4Address: ns3::Ipv4Address\ntype: vec: std::vector< ns3::Ipv4Address > &" },
    {(char *) "Scheduler", (PyCFunction) _wrap_PyNs3DsrDsrRouting_Scheduler, METH_KEYWORDS|METH_VARARGS, "Scheduler(priority)\n\ntype: priority: uint32_t" },
    {(char *) "NetworkScheduleTimerExpire", (PyCFunction) _wrap_PyNs3DsrDsrRouting_NetworkScheduleTimerExpire, METH_KEYWORDS|METH_VARARGS, "NetworkScheduleTimerExpire(mb, protocol)\n\ntype: mb: ns3::dsr::DsrMaintainBuffEntry &\ntype: protocol: uint8_t" },
    {(char *) "CancelPassivePacketTimer", (PyCFunction) _wrap_PyNs3DsrDsrRouting_CancelPassivePacketTimer, METH_KEYWORDS|METH_VARARGS, "CancelPassivePacketTimer(mb)\n\ntype: mb: ns3::dsr::DsrMaintainBuffEntry &" },
    {(char *) "GetIDfromIP", (PyCFunction) _wrap_PyNs3DsrDsrRouting_GetIDfromIP, METH_KEYWORDS|METH_VARARGS, "GetIDfromIP(address)\n\ntype: address: ns3::Ipv4Address" },
    {(char *) "ScheduleCachedReply", (PyCFunction) _wrap_PyNs3DsrDsrRouting_ScheduleCachedReply, METH_KEYWORDS|METH_VARARGS, "ScheduleCachedReply(packet, source, destination, route, hops)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: source: ns3::Ipv4Address\ntype: destination: ns3::Ipv4Address\ntype: route: ns3::Ptr< ns3::Ipv4Route >\ntype: hops: double" },
    {(char *) "FindSourceEntry", (PyCFunction) _wrap_PyNs3DsrDsrRouting_FindSourceEntry, METH_KEYWORDS|METH_VARARGS, "FindSourceEntry(src, dst, id)\n\ntype: src: ns3::Ipv4Address\ntype: dst: ns3::Ipv4Address\ntype: id: uint16_t" },
    {(char *) "UpdateRouteEntry", (PyCFunction) _wrap_PyNs3DsrDsrRouting_UpdateRouteEntry, METH_KEYWORDS|METH_VARARGS, "UpdateRouteEntry(dst)\n\ntype: dst: ns3::Ipv4Address" },
    {(char *) "GetNode", (PyCFunction) _wrap_PyNs3DsrDsrRouting_GetNode, METH_NOARGS, "GetNode()\n\n" },
    {(char *) "SalvagePacket", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SalvagePacket, METH_KEYWORDS|METH_VARARGS, "SalvagePacket(packet, source, dst, protocol)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: source: ns3::Ipv4Address\ntype: dst: ns3::Ipv4Address\ntype: protocol: uint8_t" },
    {(char *) "SendRealDown", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SendRealDown, METH_KEYWORDS|METH_VARARGS, "SendRealDown(newEntry)\n\ntype: newEntry: ns3::dsr::DsrNetworkQueueEntry &" },
    {(char *) "SendGratuitousReply", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SendGratuitousReply, METH_KEYWORDS|METH_VARARGS, "SendGratuitousReply(replyTo, replyFrom, nodeList, protocol)\n\ntype: replyTo: ns3::Ipv4Address\ntype: replyFrom: ns3::Ipv4Address\ntype: nodeList: std::vector< ns3::Ipv4Address > &\ntype: protocol: uint8_t" },
    {(char *) "CancelPacketAllTimer", (PyCFunction) _wrap_PyNs3DsrDsrRouting_CancelPacketAllTimer, METH_KEYWORDS|METH_VARARGS, "CancelPacketAllTimer(mb)\n\ntype: mb: ns3::dsr::DsrMaintainBuffEntry &" },
    {(char *) "GetPriority", (PyCFunction) _wrap_PyNs3DsrDsrRouting_GetPriority, METH_KEYWORDS|METH_VARARGS, "GetPriority(messageType)\n\ntype: messageType: ns3::dsr::DsrMessageType" },
    {(char *) "LinkScheduleTimerExpire", (PyCFunction) _wrap_PyNs3DsrDsrRouting_LinkScheduleTimerExpire, METH_KEYWORDS|METH_VARARGS, "LinkScheduleTimerExpire(mb, protocol)\n\ntype: mb: ns3::dsr::DsrMaintainBuffEntry &\ntype: protocol: uint8_t" },
    {(char *) "ScheduleLinkPacketRetry", (PyCFunction) _wrap_PyNs3DsrDsrRouting_ScheduleLinkPacketRetry, METH_KEYWORDS|METH_VARARGS, "ScheduleLinkPacketRetry(mb, protocol)\n\ntype: mb: ns3::dsr::DsrMaintainBuffEntry &\ntype: protocol: uint8_t" },
    {(char *) "GetNetDeviceFromContext", (PyCFunction) _wrap_PyNs3DsrDsrRouting_GetNetDeviceFromContext, METH_KEYWORDS|METH_VARARGS, "GetNetDeviceFromContext(context)\n\ntype: context: std::string" },
    {(char *) "SetPassiveBuffer", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SetPassiveBuffer, METH_KEYWORDS|METH_VARARGS, "SetPassiveBuffer(r)\n\ntype: r: ns3::Ptr< ns3::dsr::DsrPassiveBuffer >" },
    {(char *) "SendReply", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SendReply, METH_KEYWORDS|METH_VARARGS, "SendReply(packet, source, nextHop, route)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: source: ns3::Ipv4Address\ntype: nextHop: ns3::Ipv4Address\ntype: route: ns3::Ptr< ns3::Ipv4Route >" },
    {(char *) "SendErrorRequest", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SendErrorRequest, METH_KEYWORDS|METH_VARARGS, "SendErrorRequest(rerr, protocol)\n\ntype: rerr: ns3::dsr::DsrOptionRerrUnreachHeader &\ntype: protocol: uint8_t" },
    {(char *) "ForwardErrPacket", (PyCFunction) _wrap_PyNs3DsrDsrRouting_ForwardErrPacket, METH_KEYWORDS|METH_VARARGS, "ForwardErrPacket(rerr, sourceRoute, nextHop, protocol, route)\n\ntype: rerr: ns3::dsr::DsrOptionRerrUnreachHeader &\ntype: sourceRoute: ns3::dsr::DsrOptionSRHeader &\ntype: nextHop: ns3::Ipv4Address\ntype: protocol: uint8_t\ntype: route: ns3::Ptr< ns3::Ipv4Route >" },
    {(char *) "GetOption", (PyCFunction) _wrap_PyNs3DsrDsrRouting_GetOption, METH_KEYWORDS|METH_VARARGS, "GetOption(optionNumber)\n\ntype: optionNumber: int" },
    {(char *) "AddRoute_Link", (PyCFunction) _wrap_PyNs3DsrDsrRouting_AddRoute_Link, METH_KEYWORDS|METH_VARARGS, "AddRoute_Link(nodelist, source)\n\ntype: nodelist: std::vector< ns3::Ipv4Address >\ntype: source: ns3::Ipv4Address" },
    {(char *) "AddRoute", (PyCFunction) _wrap_PyNs3DsrDsrRouting_AddRoute, METH_KEYWORDS|METH_VARARGS, "AddRoute(rt)\n\ntype: rt: ns3::dsr::DsrRouteCacheEntry &" },
    {(char *) "DeleteAllRoutesIncludeLink", (PyCFunction) _wrap_PyNs3DsrDsrRouting_DeleteAllRoutesIncludeLink, METH_KEYWORDS|METH_VARARGS, "DeleteAllRoutesIncludeLink(errorSrc, unreachNode, node)\n\ntype: errorSrc: ns3::Ipv4Address\ntype: unreachNode: ns3::Ipv4Address\ntype: node: ns3::Ipv4Address" },
    {(char *) "SetRequestTable", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SetRequestTable, METH_KEYWORDS|METH_VARARGS, "SetRequestTable(r)\n\ntype: r: ns3::Ptr< ns3::dsr::DsrRreqTable >" },
    {(char *) "SendPacketFromBuffer", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SendPacketFromBuffer, METH_KEYWORDS|METH_VARARGS, "SendPacketFromBuffer(sourceRoute, nextHop, protocol)\n\ntype: sourceRoute: ns3::dsr::DsrOptionSRHeader const &\ntype: nextHop: ns3::Ipv4Address\ntype: protocol: uint8_t" },
    {(char *) "Insert", (PyCFunction) _wrap_PyNs3DsrDsrRouting_Insert, METH_KEYWORDS|METH_VARARGS, "Insert(option)\n\ntype: option: ns3::Ptr< ns3::dsr::DsrOptions >" },
    {(char *) "SendUnreachError", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SendUnreachError, METH_KEYWORDS|METH_VARARGS, "SendUnreachError(unreachNode, destination, originalDst, salvage, protocol)\n\ntype: unreachNode: ns3::Ipv4Address\ntype: destination: ns3::Ipv4Address\ntype: originalDst: ns3::Ipv4Address\ntype: salvage: uint8_t\ntype: protocol: uint8_t" },
    {(char *) "ScheduleInitialReply", (PyCFunction) _wrap_PyNs3DsrDsrRouting_ScheduleInitialReply, METH_KEYWORDS|METH_VARARGS, "ScheduleInitialReply(packet, source, nextHop, route)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: source: ns3::Ipv4Address\ntype: nextHop: ns3::Ipv4Address\ntype: route: ns3::Ptr< ns3::Ipv4Route >" },
    {(char *) "PassiveScheduleTimerExpire", (PyCFunction) _wrap_PyNs3DsrDsrRouting_PassiveScheduleTimerExpire, METH_KEYWORDS|METH_VARARGS, "PassiveScheduleTimerExpire(mb, protocol)\n\ntype: mb: ns3::dsr::DsrMaintainBuffEntry &\ntype: protocol: uint8_t" },
    {(char *) "SchedulePassivePacketRetry", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SchedulePassivePacketRetry, METH_KEYWORDS|METH_VARARGS, "SchedulePassivePacketRetry(mb, protocol)\n\ntype: mb: ns3::dsr::DsrMaintainBuffEntry &\ntype: protocol: uint8_t" },
    {(char *) "IncreaseRetransTimer", (PyCFunction) _wrap_PyNs3DsrDsrRouting_IncreaseRetransTimer, METH_NOARGS, "IncreaseRetransTimer()\n\n" },
    {(char *) "Receive", (PyCFunction) _wrap_PyNs3DsrDsrRouting_Receive, METH_KEYWORDS|METH_VARARGS, "Receive(p, header, incomingInterface)\n\ntype: p: ns3::Ptr< ns3::Packet >\ntype: header: ns3::Ipv4Header const &\ntype: incomingInterface: ns3::Ptr< ns3::Ipv4Interface >" },
    {(char *) "GetRequestTable", (PyCFunction) _wrap_PyNs3DsrDsrRouting_GetRequestTable, METH_NOARGS, "GetRequestTable()\n\n" },
    {(char *) "RouteRequestTimerExpire", (PyCFunction) _wrap_PyNs3DsrDsrRouting_RouteRequestTimerExpire, METH_KEYWORDS|METH_VARARGS, "RouteRequestTimerExpire(packet, address, requestId, protocol)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: address: std::vector< ns3::Ipv4Address >\ntype: requestId: uint32_t\ntype: protocol: uint8_t" },
    {(char *) "CancelLinkPacketTimer", (PyCFunction) _wrap_PyNs3DsrDsrRouting_CancelLinkPacketTimer, METH_KEYWORDS|METH_VARARGS, "CancelLinkPacketTimer(mb)\n\ntype: mb: ns3::dsr::DsrMaintainBuffEntry &" },
    {(char *) "SetRouteCache", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SetRouteCache, METH_KEYWORDS|METH_VARARGS, "SetRouteCache(r)\n\ntype: r: ns3::Ptr< ns3::dsr::DsrRouteCache >" },
    {(char *) "ScheduleNetworkPacketRetry", (PyCFunction) _wrap_PyNs3DsrDsrRouting_ScheduleNetworkPacketRetry, METH_KEYWORDS|METH_VARARGS, "ScheduleNetworkPacketRetry(mb, isFirst, protocol)\n\ntype: mb: ns3::dsr::DsrMaintainBuffEntry &\ntype: isFirst: bool\ntype: protocol: uint8_t" },
    {(char *) "GetElementsFromContext", (PyCFunction) _wrap_PyNs3DsrDsrRouting_GetElementsFromContext, METH_KEYWORDS|METH_VARARGS, "GetElementsFromContext(context)\n\ntype: context: std::string" },
    {(char *) "GetIPfromID", (PyCFunction) _wrap_PyNs3DsrDsrRouting_GetIPfromID, METH_KEYWORDS|METH_VARARGS, "GetIPfromID(id)\n\ntype: id: uint16_t" },
    {(char *) "Send", (PyCFunction) _wrap_PyNs3DsrDsrRouting_Send, METH_KEYWORDS|METH_VARARGS, "Send(packet, source, destination, protocol, route)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: source: ns3::Ipv4Address\ntype: destination: ns3::Ipv4Address\ntype: protocol: uint8_t\ntype: route: ns3::Ptr< ns3::Ipv4Route >" },
    {(char *) "ScheduleInterRequest", (PyCFunction) _wrap_PyNs3DsrDsrRouting_ScheduleInterRequest, METH_KEYWORDS|METH_VARARGS, "ScheduleInterRequest(packet)\n\ntype: packet: ns3::Ptr< ns3::Packet >" },
    {(char *) "SendPacket", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SendPacket, METH_KEYWORDS|METH_VARARGS, "SendPacket(packet, source, nextHop, protocol)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: source: ns3::Ipv4Address\ntype: nextHop: ns3::Ipv4Address\ntype: protocol: uint8_t" },
    {(char *) "SendRequest", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SendRequest, METH_KEYWORDS|METH_VARARGS, "SendRequest(packet, source)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: source: ns3::Ipv4Address" },
    {(char *) "ForwardPacket", (PyCFunction) _wrap_PyNs3DsrDsrRouting_ForwardPacket, METH_KEYWORDS|METH_VARARGS, "ForwardPacket(packet, sourceRoute, ipv4Header, source, destination, targetAddress, protocol, route)\n\ntype: packet: ns3::Ptr< ns3::Packet const >\ntype: sourceRoute: ns3::dsr::DsrOptionSRHeader &\ntype: ipv4Header: ns3::Ipv4Header const &\ntype: source: ns3::Ipv4Address\ntype: destination: ns3::Ipv4Address\ntype: targetAddress: ns3::Ipv4Address\ntype: protocol: uint8_t\ntype: route: ns3::Ptr< ns3::Ipv4Route >" },
    {(char *) "CheckSendBuffer", (PyCFunction) _wrap_PyNs3DsrDsrRouting_CheckSendBuffer, METH_NOARGS, "CheckSendBuffer()\n\n" },
    {(char *) "ScheduleRreqRetry", (PyCFunction) _wrap_PyNs3DsrDsrRouting_ScheduleRreqRetry, METH_KEYWORDS|METH_VARARGS, "ScheduleRreqRetry(packet, address, nonProp, requestId, protocol)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: address: std::vector< ns3::Ipv4Address >\ntype: nonProp: bool\ntype: requestId: uint32_t\ntype: protocol: uint8_t" },
    {(char *) "SendBuffTimerExpire", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SendBuffTimerExpire, METH_NOARGS, "SendBuffTimerExpire()\n\n" },
    {(char *) "GetRouteCache", (PyCFunction) _wrap_PyNs3DsrDsrRouting_GetRouteCache, METH_NOARGS, "GetRouteCache()\n\n" },
    {(char *) "SetRoute", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SetRoute, METH_KEYWORDS|METH_VARARGS, "SetRoute(nextHop, srcAddress)\n\ntype: nextHop: ns3::Ipv4Address\ntype: srcAddress: ns3::Ipv4Address" },
    {(char *) "GetProtocolNumber", (PyCFunction) _wrap_PyNs3DsrDsrRouting_GetProtocolNumber, METH_NOARGS, "GetProtocolNumber()\n\n" },
    {(char *) "LookupRoute", (PyCFunction) _wrap_PyNs3DsrDsrRouting_LookupRoute, METH_KEYWORDS|METH_VARARGS, "LookupRoute(id, rt)\n\ntype: id: ns3::Ipv4Address\ntype: rt: ns3::dsr::DsrRouteCacheEntry &" },
    {(char *) "UseExtends", (PyCFunction) _wrap_PyNs3DsrDsrRouting_UseExtends, METH_KEYWORDS|METH_VARARGS, "UseExtends(rt)\n\ntype: rt: std::vector< ns3::Ipv4Address >" },
    {(char *) "CancelNetworkPacketTimer", (PyCFunction) _wrap_PyNs3DsrDsrRouting_CancelNetworkPacketTimer, METH_KEYWORDS|METH_VARARGS, "CancelNetworkPacketTimer(mb)\n\ntype: mb: ns3::dsr::DsrMaintainBuffEntry &" },
    {(char *) "CallCancelPacketTimer", (PyCFunction) _wrap_PyNs3DsrDsrRouting_CallCancelPacketTimer, METH_KEYWORDS|METH_VARARGS, "CallCancelPacketTimer(ackId, ipv4Header, realSrc, realDst)\n\ntype: ackId: uint16_t\ntype: ipv4Header: ns3::Ipv4Header const &\ntype: realSrc: ns3::Ipv4Address\ntype: realDst: ns3::Ipv4Address" },
    {(char *) "PriorityScheduler", (PyCFunction) _wrap_PyNs3DsrDsrRouting_PriorityScheduler, METH_KEYWORDS|METH_VARARGS, "PriorityScheduler(priority, continueWithFirst)\n\ntype: priority: uint32_t\ntype: continueWithFirst: bool" },
    {(char *) "AssignStreams", (PyCFunction) _wrap_PyNs3DsrDsrRouting_AssignStreams, METH_KEYWORDS|METH_VARARGS, "AssignStreams(stream)\n\ntype: stream: int64_t" },
    {(char *) "SendAck", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SendAck, METH_KEYWORDS|METH_VARARGS, "SendAck(ackId, destination, realSrc, realDst, protocol, route)\n\ntype: ackId: uint16_t\ntype: destination: ns3::Ipv4Address\ntype: realSrc: ns3::Ipv4Address\ntype: realDst: ns3::Ipv4Address\ntype: protocol: uint8_t\ntype: route: ns3::Ptr< ns3::Ipv4Route >" },
    {(char *) "SetDownTarget", (PyCFunction) _wrap_PyNs3DsrDsrRouting_SetDownTarget, METH_KEYWORDS|METH_VARARGS, "SetDownTarget(callback)\n\ntype: callback: ns3::Callback< void, ns3::Ptr< ns3::Packet >, ns3::Ipv4Address, ns3::Ipv4Address, unsigned char, ns3::Ptr< ns3::Ipv4Route >, ns3::empty, ns3::empty, ns3::empty, ns3::empty >" },
    {(char *) "PacketNewRoute", (PyCFunction) _wrap_PyNs3DsrDsrRouting_PacketNewRoute, METH_KEYWORDS|METH_VARARGS, "PacketNewRoute(packet, source, destination, protocol)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: source: ns3::Ipv4Address\ntype: destination: ns3::Ipv4Address\ntype: protocol: uint8_t" },
    {(char *) "GetIPfromMAC", (PyCFunction) _wrap_PyNs3DsrDsrRouting_GetIPfromMAC, METH_KEYWORDS|METH_VARARGS, "GetIPfromMAC(address)\n\ntype: address: ns3::Mac48Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrRouting__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrRouting__tp_clear(PyNs3DsrDsrRouting *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dsr::DsrRouting *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DsrDsrRouting__tp_traverse(PyNs3DsrDsrRouting *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrRouting__tp_dealloc(PyNs3DsrDsrRouting *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrRouting__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrRouting__tp_richcompare (PyNs3DsrDsrRouting *PYBINDGEN_UNUSED(self), PyNs3DsrDsrRouting *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrRouting_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrRouting_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrRouting",            /* tp_name */
    sizeof(PyNs3DsrDsrRouting),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrRouting__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrRouting(arg0)\nDsrRouting()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrRouting__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrRouting__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrRouting__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrRouting_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrRouting, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrRouting__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrRoutingHeader__tp_init__0(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrRoutingHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrRoutingHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrRoutingHeader(*((PyNs3DsrDsrRoutingHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrRoutingHeader__tp_init__1(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrRoutingHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrRoutingHeader__tp_init(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrRoutingHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrRoutingHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_GetSerializedSize(PyNs3DsrDsrRoutingHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrRoutingHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_Serialize(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_Deserialize(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_GetInstanceTypeId(PyNs3DsrDsrRoutingHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_GetDsrOptionsOffset(PyNs3DsrDsrRoutingHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetDsrOptionsOffset();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_SetMessageType(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int messageType;
    const char *keywords[] = {"messageType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &messageType)) {
        return NULL;
    }
    if (messageType > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMessageType(messageType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_SetAttribute(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3AttributeValue *value;
    const char *keywords[] = {"name", "value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3AttributeValue_Type, &value)) {
        return NULL;
    }
    self->obj->SetAttribute(std::string(name, name_len), *((PyNs3AttributeValue *) value)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_GetPayloadLength(PyNs3DsrDsrRoutingHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetPayloadLength();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_GetAttribute(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3AttributeValue *value;
    const char *keywords[] = {"name", "value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3AttributeValue_Type, &value)) {
        return NULL;
    }
    self->obj->GetAttribute(std::string(name, name_len), *((PyNs3AttributeValue *) value)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_SetDestId(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int destId;
    const char *keywords[] = {"destId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &destId)) {
        return NULL;
    }
    if (destId > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetDestId(destId);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_TraceDisconnect(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *name;
    Py_ssize_t name_len;
    const char *context;
    Py_ssize_t context_len;
    PyNs3CallbackBase *cb;
    const char *keywords[] = {"name", "context", "cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#O!", (char **) keywords, &name, &name_len, &context, &context_len, &PyNs3CallbackBase_Type, &cb)) {
        return NULL;
    }
    retval = self->obj->TraceDisconnect(std::string(name, name_len), std::string(context, context_len), *((PyNs3CallbackBase *) cb)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_SetAttributeFailSafe(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3AttributeValue *value;
    const char *keywords[] = {"name", "value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3AttributeValue_Type, &value)) {
        return NULL;
    }
    retval = self->obj->SetAttributeFailSafe(std::string(name, name_len), *((PyNs3AttributeValue *) value)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_GetDsrOptionBuffer(PyNs3DsrDsrRoutingHeader *self)
{
    PyObject *py_retval;
    PyNs3Buffer *py_Buffer;
    
    ns3::Buffer retval = self->obj->GetDsrOptionBuffer();
    py_Buffer = PyObject_New(PyNs3Buffer, &PyNs3Buffer_Type);
    py_Buffer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Buffer->obj = new ns3::Buffer(retval);
    PyNs3Buffer_wrapper_registry[(void *) py_Buffer->obj] = (PyObject *) py_Buffer;
    py_retval = Py_BuildValue((char *) "N", py_Buffer);
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_TraceDisconnectWithoutContext(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3CallbackBase *cb;
    const char *keywords[] = {"name", "cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3CallbackBase_Type, &cb)) {
        return NULL;
    }
    retval = self->obj->TraceDisconnectWithoutContext(std::string(name, name_len), *((PyNs3CallbackBase *) cb)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_SetNextHeader(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int protocol;
    const char *keywords[] = {"protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &protocol)) {
        return NULL;
    }
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNextHeader(protocol);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_TraceConnect(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *name;
    Py_ssize_t name_len;
    const char *context;
    Py_ssize_t context_len;
    PyNs3CallbackBase *cb;
    const char *keywords[] = {"name", "context", "cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#O!", (char **) keywords, &name, &name_len, &context, &context_len, &PyNs3CallbackBase_Type, &cb)) {
        return NULL;
    }
    retval = self->obj->TraceConnect(std::string(name, name_len), std::string(context, context_len), *((PyNs3CallbackBase *) cb)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_TraceConnectWithoutContext(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3CallbackBase *cb;
    const char *keywords[] = {"name", "cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3CallbackBase_Type, &cb)) {
        return NULL;
    }
    retval = self->obj->TraceConnectWithoutContext(std::string(name, name_len), *((PyNs3CallbackBase *) cb)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_SetPayloadLength(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int length;
    const char *keywords[] = {"length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &length)) {
        return NULL;
    }
    if (length > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetPayloadLength(length);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_AddDsrOption(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionHeader *option;
    const char *keywords[] = {"option", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionHeader_Type, &option)) {
        return NULL;
    }
    self->obj->AddDsrOption(*((PyNs3DsrDsrOptionHeader *) option)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_SetSourceId(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int sourceId;
    const char *keywords[] = {"sourceId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &sourceId)) {
        return NULL;
    }
    if (sourceId > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSourceId(sourceId);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_GetAttributeFailSafe(PyNs3DsrDsrRoutingHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3AttributeValue *value;
    const char *keywords[] = {"name", "value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3AttributeValue_Type, &value)) {
        return NULL;
    }
    retval = self->obj->GetAttributeFailSafe(std::string(name, name_len), *((PyNs3AttributeValue *) value)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_GetNextHeader(PyNs3DsrDsrRoutingHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNextHeader();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_GetDestId(PyNs3DsrDsrRoutingHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetDestId();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_GetSourceId(PyNs3DsrDsrRoutingHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSourceId();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}

PyObject *
_wrap_PyNs3DsrDsrRoutingHeader_GetMessageType(PyNs3DsrDsrRoutingHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetMessageType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrRoutingHeader__copy__(PyNs3DsrDsrRoutingHeader *self)
{

    PyNs3DsrDsrRoutingHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrRoutingHeader, &PyNs3DsrDsrRoutingHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::dsr::DsrRoutingHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrRoutingHeader_methods[] = {
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetDsrOptionsOffset", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_GetDsrOptionsOffset, METH_NOARGS, "GetDsrOptionsOffset()\n\n" },
    {(char *) "SetMessageType", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_SetMessageType, METH_KEYWORDS|METH_VARARGS, "SetMessageType(messageType)\n\ntype: messageType: uint8_t" },
    {(char *) "SetAttribute", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_SetAttribute, METH_KEYWORDS|METH_VARARGS, "SetAttribute(name, value)\n\ntype: name: std::string\ntype: value: ns3::AttributeValue const &" },
    {(char *) "GetPayloadLength", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_GetPayloadLength, METH_NOARGS, "GetPayloadLength()\n\n" },
    {(char *) "GetAttribute", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_GetAttribute, METH_KEYWORDS|METH_VARARGS, "GetAttribute(name, value)\n\ntype: name: std::string\ntype: value: ns3::AttributeValue &" },
    {(char *) "SetDestId", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_SetDestId, METH_KEYWORDS|METH_VARARGS, "SetDestId(destId)\n\ntype: destId: uint16_t" },
    {(char *) "TraceDisconnect", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_TraceDisconnect, METH_KEYWORDS|METH_VARARGS, "TraceDisconnect(name, context, cb)\n\ntype: name: std::string\ntype: context: std::string\ntype: cb: ns3::CallbackBase const &" },
    {(char *) "SetAttributeFailSafe", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_SetAttributeFailSafe, METH_KEYWORDS|METH_VARARGS, "SetAttributeFailSafe(name, value)\n\ntype: name: std::string\ntype: value: ns3::AttributeValue const &" },
    {(char *) "GetDsrOptionBuffer", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_GetDsrOptionBuffer, METH_NOARGS, "GetDsrOptionBuffer()\n\n" },
    {(char *) "TraceDisconnectWithoutContext", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_TraceDisconnectWithoutContext, METH_KEYWORDS|METH_VARARGS, "TraceDisconnectWithoutContext(name, cb)\n\ntype: name: std::string\ntype: cb: ns3::CallbackBase const &" },
    {(char *) "SetNextHeader", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_SetNextHeader, METH_KEYWORDS|METH_VARARGS, "SetNextHeader(protocol)\n\ntype: protocol: uint8_t" },
    {(char *) "TraceConnect", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_TraceConnect, METH_KEYWORDS|METH_VARARGS, "TraceConnect(name, context, cb)\n\ntype: name: std::string\ntype: context: std::string\ntype: cb: ns3::CallbackBase const &" },
    {(char *) "TraceConnectWithoutContext", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_TraceConnectWithoutContext, METH_KEYWORDS|METH_VARARGS, "TraceConnectWithoutContext(name, cb)\n\ntype: name: std::string\ntype: cb: ns3::CallbackBase const &" },
    {(char *) "SetPayloadLength", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_SetPayloadLength, METH_KEYWORDS|METH_VARARGS, "SetPayloadLength(length)\n\ntype: length: uint16_t" },
    {(char *) "AddDsrOption", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_AddDsrOption, METH_KEYWORDS|METH_VARARGS, "AddDsrOption(option)\n\ntype: option: ns3::dsr::DsrOptionHeader const &" },
    {(char *) "SetSourceId", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_SetSourceId, METH_KEYWORDS|METH_VARARGS, "SetSourceId(sourceId)\n\ntype: sourceId: uint16_t" },
    {(char *) "GetAttributeFailSafe", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_GetAttributeFailSafe, METH_KEYWORDS|METH_VARARGS, "GetAttributeFailSafe(name, value)\n\ntype: name: std::string\ntype: value: ns3::AttributeValue &" },
    {(char *) "GetNextHeader", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_GetNextHeader, METH_NOARGS, "GetNextHeader()\n\n" },
    {(char *) "GetDestId", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_GetDestId, METH_NOARGS, "GetDestId()\n\n" },
    {(char *) "GetSourceId", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_GetSourceId, METH_NOARGS, "GetSourceId()\n\n" },
    {(char *) "GetMessageType", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader_GetMessageType, METH_NOARGS, "GetMessageType()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrRoutingHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrRoutingHeader__tp_clear(PyNs3DsrDsrRoutingHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dsr::DsrRoutingHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DsrDsrRoutingHeader__tp_traverse(PyNs3DsrDsrRoutingHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrRoutingHeader__tp_dealloc(PyNs3DsrDsrRoutingHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrRoutingHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3DsrDsrRoutingHeader__tp_str(PyNs3DsrDsrRoutingHeader *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3DsrDsrRoutingHeader__tp_richcompare (PyNs3DsrDsrRoutingHeader *PYBINDGEN_UNUSED(self), PyNs3DsrDsrRoutingHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrRoutingHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrRoutingHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrRoutingHeader",            /* tp_name */
    sizeof(PyNs3DsrDsrRoutingHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrRoutingHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3DsrDsrRoutingHeader__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrRoutingHeader(arg0)\nDsrRoutingHeader()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrRoutingHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrRoutingHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrRoutingHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrRoutingHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrRoutingHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrRoutingHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrRreqTable__tp_init__0(PyNs3DsrDsrRreqTable *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrRreqTable *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrRreqTable_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrRreqTable(*((PyNs3DsrDsrRreqTable *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrRreqTable__tp_init__1(PyNs3DsrDsrRreqTable *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrRreqTable();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrRreqTable__tp_init(PyNs3DsrDsrRreqTable *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrRreqTable__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrRreqTable__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_Invalidate(PyNs3DsrDsrRreqTable *self)
{
    PyObject *py_retval;
    
    self->obj->Invalidate();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_GetRreqSize(PyNs3DsrDsrRreqTable *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetRreqSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_RemoveLeastExpire(PyNs3DsrDsrRreqTable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::map< ns3::Ipv4Address, ns3::dsr::RreqTableEntry > rreqDstMap_value;
    const char *keywords[] = {"rreqDstMap", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&", (char **) keywords, _wrap_convert_py2c__std__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__, &rreqDstMap_value)) {
        return NULL;
    }
    self->obj->RemoveLeastExpire(rreqDstMap_value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_SetInitHopLimit(PyNs3DsrDsrRreqTable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int hl;
    const char *keywords[] = {"hl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &hl)) {
        return NULL;
    }
    self->obj->SetInitHopLimit(hl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_CheckUniqueRreqId(PyNs3DsrDsrRreqTable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Ipv4Address *dst;
    const char *keywords[] = {"dst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &dst)) {
        return NULL;
    }
    retval = self->obj->CheckUniqueRreqId(*((PyNs3Ipv4Address *) dst)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrRreqTable::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_GetRreqTableSize(PyNs3DsrDsrRreqTable *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetRreqTableSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_MarkLinkAsUnidirectional(PyNs3DsrDsrRreqTable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *neighbor;
    PyNs3Time *blacklistTimeout;
    const char *keywords[] = {"neighbor", "blacklistTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &neighbor, &PyNs3Time_Type, &blacklistTimeout)) {
        return NULL;
    }
    retval = self->obj->MarkLinkAsUnidirectional(*((PyNs3Ipv4Address *) neighbor)->obj, *((PyNs3Time *) blacklistTimeout)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_FindAndUpdate(PyNs3DsrDsrRreqTable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *dst;
    const char *keywords[] = {"dst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &dst)) {
        return NULL;
    }
    self->obj->FindAndUpdate(*((PyNs3Ipv4Address *) dst)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_GetInitHopLimit(PyNs3DsrDsrRreqTable *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetInitHopLimit();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_GetUniqueRreqIdSize(PyNs3DsrDsrRreqTable *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetUniqueRreqIdSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_RemoveRreqEntry(PyNs3DsrDsrRreqTable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *dst;
    const char *keywords[] = {"dst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &dst)) {
        return NULL;
    }
    self->obj->RemoveRreqEntry(*((PyNs3Ipv4Address *) dst)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_SetRreqTableSize(PyNs3DsrDsrRreqTable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int rt;
    const char *keywords[] = {"rt", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &rt)) {
        return NULL;
    }
    self->obj->SetRreqTableSize(rt);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_GetRreqCnt(PyNs3DsrDsrRreqTable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Ipv4Address *dst;
    const char *keywords[] = {"dst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &dst)) {
        return NULL;
    }
    retval = self->obj->GetRreqCnt(*((PyNs3Ipv4Address *) dst)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_SetUniqueRreqIdSize(PyNs3DsrDsrRreqTable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int uid;
    const char *keywords[] = {"uid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &uid)) {
        return NULL;
    }
    self->obj->SetUniqueRreqIdSize(uid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_SetRreqIdSize(PyNs3DsrDsrRreqTable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int id;
    const char *keywords[] = {"id", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &id)) {
        return NULL;
    }
    self->obj->SetRreqIdSize(id);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_FindSourceEntry(PyNs3DsrDsrRreqTable *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *src;
    PyNs3Ipv4Address *dst;
    int id;
    const char *keywords[] = {"src", "dst", "id", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!i", (char **) keywords, &PyNs3Ipv4Address_Type, &src, &PyNs3Ipv4Address_Type, &dst, &id)) {
        return NULL;
    }
    if (id > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->FindSourceEntry(*((PyNs3Ipv4Address *) src)->obj, *((PyNs3Ipv4Address *) dst)->obj, id);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_PurgeNeighbor(PyNs3DsrDsrRreqTable *self)
{
    PyObject *py_retval;
    
    self->obj->PurgeNeighbor();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrRreqTable_GetRreqIdSize(PyNs3DsrDsrRreqTable *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetRreqIdSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrRreqTable__copy__(PyNs3DsrDsrRreqTable *self)
{

    PyNs3DsrDsrRreqTable *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrRreqTable, &PyNs3DsrDsrRreqTable_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::dsr::DsrRreqTable(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrRreqTable_methods[] = {
    {(char *) "Invalidate", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_Invalidate, METH_NOARGS, "Invalidate()\n\n" },
    {(char *) "GetRreqSize", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_GetRreqSize, METH_NOARGS, "GetRreqSize()\n\n" },
    {(char *) "RemoveLeastExpire", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_RemoveLeastExpire, METH_KEYWORDS|METH_VARARGS, "RemoveLeastExpire(rreqDstMap)\n\ntype: rreqDstMap: std::map< ns3::Ipv4Address, ns3::dsr::RreqTableEntry > &" },
    {(char *) "SetInitHopLimit", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_SetInitHopLimit, METH_KEYWORDS|METH_VARARGS, "SetInitHopLimit(hl)\n\ntype: hl: uint32_t" },
    {(char *) "CheckUniqueRreqId", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_CheckUniqueRreqId, METH_KEYWORDS|METH_VARARGS, "CheckUniqueRreqId(dst)\n\ntype: dst: ns3::Ipv4Address" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetRreqTableSize", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_GetRreqTableSize, METH_NOARGS, "GetRreqTableSize()\n\n" },
    {(char *) "MarkLinkAsUnidirectional", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_MarkLinkAsUnidirectional, METH_KEYWORDS|METH_VARARGS, "MarkLinkAsUnidirectional(neighbor, blacklistTimeout)\n\ntype: neighbor: ns3::Ipv4Address\ntype: blacklistTimeout: ns3::Time" },
    {(char *) "FindAndUpdate", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_FindAndUpdate, METH_KEYWORDS|METH_VARARGS, "FindAndUpdate(dst)\n\ntype: dst: ns3::Ipv4Address" },
    {(char *) "GetInitHopLimit", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_GetInitHopLimit, METH_NOARGS, "GetInitHopLimit()\n\n" },
    {(char *) "GetUniqueRreqIdSize", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_GetUniqueRreqIdSize, METH_NOARGS, "GetUniqueRreqIdSize()\n\n" },
    {(char *) "RemoveRreqEntry", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_RemoveRreqEntry, METH_KEYWORDS|METH_VARARGS, "RemoveRreqEntry(dst)\n\ntype: dst: ns3::Ipv4Address" },
    {(char *) "SetRreqTableSize", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_SetRreqTableSize, METH_KEYWORDS|METH_VARARGS, "SetRreqTableSize(rt)\n\ntype: rt: uint32_t" },
    {(char *) "GetRreqCnt", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_GetRreqCnt, METH_KEYWORDS|METH_VARARGS, "GetRreqCnt(dst)\n\ntype: dst: ns3::Ipv4Address" },
    {(char *) "SetUniqueRreqIdSize", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_SetUniqueRreqIdSize, METH_KEYWORDS|METH_VARARGS, "SetUniqueRreqIdSize(uid)\n\ntype: uid: uint32_t" },
    {(char *) "SetRreqIdSize", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_SetRreqIdSize, METH_KEYWORDS|METH_VARARGS, "SetRreqIdSize(id)\n\ntype: id: uint32_t" },
    {(char *) "FindSourceEntry", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_FindSourceEntry, METH_KEYWORDS|METH_VARARGS, "FindSourceEntry(src, dst, id)\n\ntype: src: ns3::Ipv4Address\ntype: dst: ns3::Ipv4Address\ntype: id: uint16_t" },
    {(char *) "PurgeNeighbor", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_PurgeNeighbor, METH_NOARGS, "PurgeNeighbor()\n\n" },
    {(char *) "GetRreqIdSize", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable_GetRreqIdSize, METH_NOARGS, "GetRreqIdSize()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrRreqTable__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrRreqTable__tp_clear(PyNs3DsrDsrRreqTable *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dsr::DsrRreqTable *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DsrDsrRreqTable__tp_traverse(PyNs3DsrDsrRreqTable *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrRreqTable__tp_dealloc(PyNs3DsrDsrRreqTable *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrRreqTable__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrRreqTable__tp_richcompare (PyNs3DsrDsrRreqTable *PYBINDGEN_UNUSED(self), PyNs3DsrDsrRreqTable *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrRreqTable_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrRreqTable_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrRreqTable",            /* tp_name */
    sizeof(PyNs3DsrDsrRreqTable),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrRreqTable__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrRreqTable(arg0)\nDsrRreqTable()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrRreqTable__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrRreqTable__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrRreqTable__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrRreqTable_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrRreqTable, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrRreqTable__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrDsrSendBuffEntry_wrapper_registry;


static int
_wrap_PyNs3DsrDsrSendBuffEntry__tp_init__0(PyNs3DsrDsrSendBuffEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrSendBuffEntry *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrSendBuffEntry_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrSendBuffEntry(*((PyNs3DsrDsrSendBuffEntry *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrSendBuffEntry__tp_init__1(PyNs3DsrDsrSendBuffEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Packet *pa = NULL;
    ns3::Packet *pa_ptr;
    PyNs3Ipv4Address *d = NULL;
    PyNs3Time *exp = NULL;
    int p = 0;
    const char *keywords[] = {"pa", "d", "exp", "p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O!O!O!i", (char **) keywords, &PyNs3Packet_Type, &pa, &PyNs3Ipv4Address_Type, &d, &PyNs3Time_Type, &exp, &p)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    pa_ptr = (pa ? pa->obj : NULL);
    if (p > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrSendBuffEntry(ns3::Ptr< ns3::Packet  > (pa_ptr), (d ? (*((PyNs3Ipv4Address *) d)->obj) : ns3::Ipv4Address()), (exp ? (*((PyNs3Time *) exp)->obj) : ns3::Simulator::Now( )), p);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrSendBuffEntry__tp_init(PyNs3DsrDsrSendBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrSendBuffEntry__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrSendBuffEntry__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffEntry_SetPacket(PyNs3DsrDsrSendBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *p;
    ns3::Packet *p_ptr;
    const char *keywords[] = {"p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &p)) {
        return NULL;
    }
    p_ptr = (p ? p->obj : NULL);
    self->obj->SetPacket(ns3::Ptr< ns3::Packet  > (p_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffEntry_SetProtocol(PyNs3DsrDsrSendBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int p;
    const char *keywords[] = {"p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &p)) {
        return NULL;
    }
    if (p > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetProtocol(p);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffEntry_SetDestination(PyNs3DsrDsrSendBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *d;
    const char *keywords[] = {"d", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &d)) {
        return NULL;
    }
    self->obj->SetDestination(*((PyNs3Ipv4Address *) d)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffEntry_GetProtocol(PyNs3DsrDsrSendBuffEntry *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetProtocol();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffEntry_GetPacket(PyNs3DsrDsrSendBuffEntry *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet const > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPacket();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffEntry_SetExpireTime(PyNs3DsrDsrSendBuffEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *exp;
    const char *keywords[] = {"exp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &exp)) {
        return NULL;
    }
    self->obj->SetExpireTime(*((PyNs3Time *) exp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffEntry_GetDestination(PyNs3DsrDsrSendBuffEntry *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetDestination();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffEntry_GetExpireTime(PyNs3DsrDsrSendBuffEntry *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetExpireTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrSendBuffEntry__copy__(PyNs3DsrDsrSendBuffEntry *self)
{

    PyNs3DsrDsrSendBuffEntry *py_copy;
    py_copy = PyObject_New(PyNs3DsrDsrSendBuffEntry, &PyNs3DsrDsrSendBuffEntry_Type);
    py_copy->obj = new ns3::dsr::DsrSendBuffEntry(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrDsrSendBuffEntry_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrSendBuffEntry_methods[] = {
    {(char *) "SetPacket", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffEntry_SetPacket, METH_KEYWORDS|METH_VARARGS, "SetPacket(p)\n\ntype: p: ns3::Ptr< ns3::Packet const >" },
    {(char *) "SetProtocol", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffEntry_SetProtocol, METH_KEYWORDS|METH_VARARGS, "SetProtocol(p)\n\ntype: p: uint8_t" },
    {(char *) "SetDestination", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffEntry_SetDestination, METH_KEYWORDS|METH_VARARGS, "SetDestination(d)\n\ntype: d: ns3::Ipv4Address" },
    {(char *) "GetProtocol", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffEntry_GetProtocol, METH_NOARGS, "GetProtocol()\n\n" },
    {(char *) "GetPacket", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffEntry_GetPacket, METH_NOARGS, "GetPacket()\n\n" },
    {(char *) "SetExpireTime", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffEntry_SetExpireTime, METH_KEYWORDS|METH_VARARGS, "SetExpireTime(exp)\n\ntype: exp: ns3::Time" },
    {(char *) "GetDestination", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffEntry_GetDestination, METH_NOARGS, "GetDestination()\n\n" },
    {(char *) "GetExpireTime", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffEntry_GetExpireTime, METH_NOARGS, "GetExpireTime()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffEntry__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrDsrSendBuffEntry__tp_dealloc(PyNs3DsrDsrSendBuffEntry *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrDsrSendBuffEntry_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrDsrSendBuffEntry_wrapper_registry.end()) {
        PyNs3DsrDsrSendBuffEntry_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::DsrSendBuffEntry *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrSendBuffEntry__tp_richcompare (PyNs3DsrDsrSendBuffEntry *PYBINDGEN_UNUSED(self), PyNs3DsrDsrSendBuffEntry *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrSendBuffEntry_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrSendBuffEntry_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrSendBuffEntry",            /* tp_name */
    sizeof(PyNs3DsrDsrSendBuffEntry),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrSendBuffEntry__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsrSendBuffEntry(pa, d, exp, p)\nDsrSendBuffEntry(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrSendBuffEntry__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrSendBuffEntry_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrSendBuffEntry__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrDsrSendBuffer_wrapper_registry;


static int
_wrap_PyNs3DsrDsrSendBuffer__tp_init__0(PyNs3DsrDsrSendBuffer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrSendBuffer *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrSendBuffer_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrSendBuffer(*((PyNs3DsrDsrSendBuffer *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrSendBuffer__tp_init__1(PyNs3DsrDsrSendBuffer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrSendBuffer();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrSendBuffer__tp_init(PyNs3DsrDsrSendBuffer *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrSendBuffer__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrSendBuffer__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffer_GetMaxQueueLen(PyNs3DsrDsrSendBuffer *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMaxQueueLen();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffer_Dequeue(PyNs3DsrDsrSendBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *dst;
    PyNs3DsrDsrSendBuffEntry *entry;
    const char *keywords[] = {"dst", "entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &dst, &PyNs3DsrDsrSendBuffEntry_Type, &entry)) {
        return NULL;
    }
    retval = self->obj->Dequeue(*((PyNs3Ipv4Address *) dst)->obj, *((PyNs3DsrDsrSendBuffEntry *) entry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffer_SetSendBufferTimeout(PyNs3DsrDsrSendBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *t;
    const char *keywords[] = {"t", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &t)) {
        return NULL;
    }
    self->obj->SetSendBufferTimeout(*((PyNs3Time *) t)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffer_SetMaxQueueLen(PyNs3DsrDsrSendBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int len;
    const char *keywords[] = {"len", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &len)) {
        return NULL;
    }
    self->obj->SetMaxQueueLen(len);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffer_DropPacketWithDst(PyNs3DsrDsrSendBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *dst;
    const char *keywords[] = {"dst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &dst)) {
        return NULL;
    }
    self->obj->DropPacketWithDst(*((PyNs3Ipv4Address *) dst)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffer_GetSize(PyNs3DsrDsrSendBuffer *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffer_Enqueue(PyNs3DsrDsrSendBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3DsrDsrSendBuffEntry *entry;
    const char *keywords[] = {"entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrSendBuffEntry_Type, &entry)) {
        return NULL;
    }
    retval = self->obj->Enqueue(*((PyNs3DsrDsrSendBuffEntry *) entry)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffer_GetSendBufferTimeout(PyNs3DsrDsrSendBuffer *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetSendBufferTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffer_GetBuffer(PyNs3DsrDsrSendBuffer *self)
{
    PyObject *py_retval;
    std::vector< ns3::dsr::DsrSendBuffEntry > retval;
    Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__ *py_std__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__;
    
    retval = self->obj->GetBuffer();
    py_std__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__ = PyObject_New(Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__, &Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt___Type);
    py_std__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__->obj = new std::vector< ns3::dsr::DsrSendBuffEntry >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrSendBuffer_Find(PyNs3DsrDsrSendBuffer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ipv4Address *dst;
    const char *keywords[] = {"dst", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &dst)) {
        return NULL;
    }
    retval = self->obj->Find(*((PyNs3Ipv4Address *) dst)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrSendBuffer__copy__(PyNs3DsrDsrSendBuffer *self)
{

    PyNs3DsrDsrSendBuffer *py_copy;
    py_copy = PyObject_New(PyNs3DsrDsrSendBuffer, &PyNs3DsrDsrSendBuffer_Type);
    py_copy->obj = new ns3::dsr::DsrSendBuffer(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrDsrSendBuffer_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrSendBuffer_methods[] = {
    {(char *) "GetMaxQueueLen", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffer_GetMaxQueueLen, METH_NOARGS, "GetMaxQueueLen()\n\n" },
    {(char *) "Dequeue", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffer_Dequeue, METH_KEYWORDS|METH_VARARGS, "Dequeue(dst, entry)\n\ntype: dst: ns3::Ipv4Address\ntype: entry: ns3::dsr::DsrSendBuffEntry &" },
    {(char *) "SetSendBufferTimeout", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffer_SetSendBufferTimeout, METH_KEYWORDS|METH_VARARGS, "SetSendBufferTimeout(t)\n\ntype: t: ns3::Time" },
    {(char *) "SetMaxQueueLen", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffer_SetMaxQueueLen, METH_KEYWORDS|METH_VARARGS, "SetMaxQueueLen(len)\n\ntype: len: uint32_t" },
    {(char *) "DropPacketWithDst", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffer_DropPacketWithDst, METH_KEYWORDS|METH_VARARGS, "DropPacketWithDst(dst)\n\ntype: dst: ns3::Ipv4Address" },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffer_GetSize, METH_NOARGS, "GetSize()\n\n" },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffer_Enqueue, METH_KEYWORDS|METH_VARARGS, "Enqueue(entry)\n\ntype: entry: ns3::dsr::DsrSendBuffEntry &" },
    {(char *) "GetSendBufferTimeout", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffer_GetSendBufferTimeout, METH_NOARGS, "GetSendBufferTimeout()\n\n" },
    {(char *) "GetBuffer", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffer_GetBuffer, METH_NOARGS, "GetBuffer()\n\n" },
    {(char *) "Find", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffer_Find, METH_KEYWORDS|METH_VARARGS, "Find(dst)\n\ntype: dst: ns3::Ipv4Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrSendBuffer__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrDsrSendBuffer__tp_dealloc(PyNs3DsrDsrSendBuffer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrDsrSendBuffer_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrDsrSendBuffer_wrapper_registry.end()) {
        PyNs3DsrDsrSendBuffer_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::DsrSendBuffer *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrSendBuffer__tp_richcompare (PyNs3DsrDsrSendBuffer *PYBINDGEN_UNUSED(self), PyNs3DsrDsrSendBuffer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrSendBuffer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrSendBuffer_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrSendBuffer",            /* tp_name */
    sizeof(PyNs3DsrDsrSendBuffer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrSendBuffer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsrSendBuffer(arg0)\nDsrSendBuffer()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrSendBuffer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrSendBuffer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrSendBuffer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrGraReplyEntry_wrapper_registry;
static PyObject* _wrap_PyNs3DsrGraReplyEntry__get_m_gratReplyHoldoff(PyNs3DsrGraReplyEntry *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(self->obj->m_gratReplyHoldoff);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}
static int _wrap_PyNs3DsrGraReplyEntry__set_m_gratReplyHoldoff(PyNs3DsrGraReplyEntry *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_gratReplyHoldoff = *tmp_Time->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrGraReplyEntry__get_m_hearFrom(PyNs3DsrGraReplyEntry *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->m_hearFrom);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3DsrGraReplyEntry__set_m_hearFrom(PyNs3DsrGraReplyEntry *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_hearFrom = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrGraReplyEntry__get_m_replyTo(PyNs3DsrGraReplyEntry *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->m_replyTo);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3DsrGraReplyEntry__set_m_replyTo(PyNs3DsrGraReplyEntry *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_replyTo = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3DsrGraReplyEntry__getsets[] = {
    {
        (char*) "m_gratReplyHoldoff", /* attribute name */
        (getter) _wrap_PyNs3DsrGraReplyEntry__get_m_gratReplyHoldoff, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrGraReplyEntry__set_m_gratReplyHoldoff, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_hearFrom", /* attribute name */
        (getter) _wrap_PyNs3DsrGraReplyEntry__get_m_hearFrom, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrGraReplyEntry__set_m_hearFrom, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_replyTo", /* attribute name */
        (getter) _wrap_PyNs3DsrGraReplyEntry__get_m_replyTo, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrGraReplyEntry__set_m_replyTo, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3DsrGraReplyEntry__tp_init__0(PyNs3DsrGraReplyEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrGraReplyEntry *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrGraReplyEntry_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::GraReplyEntry(*((PyNs3DsrGraReplyEntry *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrGraReplyEntry__tp_init__1(PyNs3DsrGraReplyEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Ipv4Address *t;
    PyNs3Ipv4Address *f;
    PyNs3Time *h;
    const char *keywords[] = {"t", "f", "h", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &t, &PyNs3Ipv4Address_Type, &f, &PyNs3Time_Type, &h)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::GraReplyEntry(*((PyNs3Ipv4Address *) t)->obj, *((PyNs3Ipv4Address *) f)->obj, *((PyNs3Time *) h)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrGraReplyEntry__tp_init(PyNs3DsrGraReplyEntry *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrGraReplyEntry__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrGraReplyEntry__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3DsrGraReplyEntry__copy__(PyNs3DsrGraReplyEntry *self)
{

    PyNs3DsrGraReplyEntry *py_copy;
    py_copy = PyObject_New(PyNs3DsrGraReplyEntry, &PyNs3DsrGraReplyEntry_Type);
    py_copy->obj = new ns3::dsr::GraReplyEntry(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrGraReplyEntry_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrGraReplyEntry_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrGraReplyEntry__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrGraReplyEntry__tp_dealloc(PyNs3DsrGraReplyEntry *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrGraReplyEntry_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrGraReplyEntry_wrapper_registry.end()) {
        PyNs3DsrGraReplyEntry_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::GraReplyEntry *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrGraReplyEntry__tp_richcompare (PyNs3DsrGraReplyEntry *PYBINDGEN_UNUSED(self), PyNs3DsrGraReplyEntry *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrGraReplyEntry_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrGraReplyEntry_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.GraReplyEntry",            /* tp_name */
    sizeof(PyNs3DsrGraReplyEntry),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrGraReplyEntry__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "GraReplyEntry(t, f, h)\nGraReplyEntry(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrGraReplyEntry__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrGraReplyEntry_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3DsrGraReplyEntry__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrGraReplyEntry__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrLink_wrapper_registry;
static PyObject* _wrap_PyNs3DsrLink__get_m_high(PyNs3DsrLink *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->m_high);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3DsrLink__set_m_high(PyNs3DsrLink *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_high = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrLink__get_m_low(PyNs3DsrLink *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->m_low);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3DsrLink__set_m_low(PyNs3DsrLink *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_low = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3DsrLink__getsets[] = {
    {
        (char*) "m_high", /* attribute name */
        (getter) _wrap_PyNs3DsrLink__get_m_high, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrLink__set_m_high, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_low", /* attribute name */
        (getter) _wrap_PyNs3DsrLink__get_m_low, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrLink__set_m_low, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3DsrLink__tp_init__0(PyNs3DsrLink *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrLink *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrLink_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::Link(*((PyNs3DsrLink *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrLink__tp_init__1(PyNs3DsrLink *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Ipv4Address *ip1;
    PyNs3Ipv4Address *ip2;
    const char *keywords[] = {"ip1", "ip2", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Ipv4Address_Type, &ip1, &PyNs3Ipv4Address_Type, &ip2)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::Link(*((PyNs3Ipv4Address *) ip1)->obj, *((PyNs3Ipv4Address *) ip2)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrLink__tp_init(PyNs3DsrLink *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrLink__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrLink__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrLink_Print(PyNs3DsrLink *self)
{
    PyObject *py_retval;
    
    self->obj->Print();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrLink__copy__(PyNs3DsrLink *self)
{

    PyNs3DsrLink *py_copy;
    py_copy = PyObject_New(PyNs3DsrLink, &PyNs3DsrLink_Type);
    py_copy->obj = new ns3::dsr::Link(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrLink_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrLink_methods[] = {
    {(char *) "Print", (PyCFunction) _wrap_PyNs3DsrLink_Print, METH_NOARGS, "Print()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrLink__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrLink__tp_dealloc(PyNs3DsrLink *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrLink_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrLink_wrapper_registry.end()) {
        PyNs3DsrLink_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::Link *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrLink__tp_richcompare (PyNs3DsrLink *PYBINDGEN_UNUSED(self), PyNs3DsrLink *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrLink_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        if (*self->obj < *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrLink_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Link",            /* tp_name */
    sizeof(PyNs3DsrLink),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrLink__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "Link(ip1, ip2)\nLink(arg0)",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrLink__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrLink_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3DsrLink__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrLink__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrLinkKey_wrapper_registry;
static PyObject* _wrap_PyNs3DsrLinkKey__get_m_destination(PyNs3DsrLinkKey *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->m_destination);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3DsrLinkKey__set_m_destination(PyNs3DsrLinkKey *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_destination = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrLinkKey__get_m_nextHop(PyNs3DsrLinkKey *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->m_nextHop);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3DsrLinkKey__set_m_nextHop(PyNs3DsrLinkKey *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_nextHop = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrLinkKey__get_m_ourAdd(PyNs3DsrLinkKey *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->m_ourAdd);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3DsrLinkKey__set_m_ourAdd(PyNs3DsrLinkKey *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_ourAdd = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrLinkKey__get_m_source(PyNs3DsrLinkKey *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->m_source);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3DsrLinkKey__set_m_source(PyNs3DsrLinkKey *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_source = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3DsrLinkKey__getsets[] = {
    {
        (char*) "m_source", /* attribute name */
        (getter) _wrap_PyNs3DsrLinkKey__get_m_source, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrLinkKey__set_m_source, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_ourAdd", /* attribute name */
        (getter) _wrap_PyNs3DsrLinkKey__get_m_ourAdd, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrLinkKey__set_m_ourAdd, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_destination", /* attribute name */
        (getter) _wrap_PyNs3DsrLinkKey__get_m_destination, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrLinkKey__set_m_destination, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_nextHop", /* attribute name */
        (getter) _wrap_PyNs3DsrLinkKey__get_m_nextHop, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrLinkKey__set_m_nextHop, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3DsrLinkKey__tp_init__0(PyNs3DsrLinkKey *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::LinkKey();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrLinkKey__tp_init__1(PyNs3DsrLinkKey *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrLinkKey *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrLinkKey_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::LinkKey(*((PyNs3DsrLinkKey *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrLinkKey__tp_init(PyNs3DsrLinkKey *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrLinkKey__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrLinkKey__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3DsrLinkKey__copy__(PyNs3DsrLinkKey *self)
{

    PyNs3DsrLinkKey *py_copy;
    py_copy = PyObject_New(PyNs3DsrLinkKey, &PyNs3DsrLinkKey_Type);
    py_copy->obj = new ns3::dsr::LinkKey(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrLinkKey_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrLinkKey_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrLinkKey__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrLinkKey__tp_dealloc(PyNs3DsrLinkKey *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrLinkKey_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrLinkKey_wrapper_registry.end()) {
        PyNs3DsrLinkKey_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::LinkKey *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrLinkKey__tp_richcompare (PyNs3DsrLinkKey *PYBINDGEN_UNUSED(self), PyNs3DsrLinkKey *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrLinkKey_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        if (*self->obj < *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrLinkKey_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.LinkKey",            /* tp_name */
    sizeof(PyNs3DsrLinkKey),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrLinkKey__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "LinkKey(arg0)\nLinkKey()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrLinkKey__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrLinkKey_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3DsrLinkKey__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrLinkKey__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrNetworkKey_wrapper_registry;
static PyObject* _wrap_PyNs3DsrNetworkKey__get_m_ackId(PyNs3DsrNetworkKey *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->m_ackId);
    return py_retval;
}
static int _wrap_PyNs3DsrNetworkKey__set_m_ackId(PyNs3DsrNetworkKey *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_ackId = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrNetworkKey__get_m_destination(PyNs3DsrNetworkKey *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->m_destination);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3DsrNetworkKey__set_m_destination(PyNs3DsrNetworkKey *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_destination = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrNetworkKey__get_m_nextHop(PyNs3DsrNetworkKey *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->m_nextHop);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3DsrNetworkKey__set_m_nextHop(PyNs3DsrNetworkKey *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_nextHop = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrNetworkKey__get_m_ourAdd(PyNs3DsrNetworkKey *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->m_ourAdd);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3DsrNetworkKey__set_m_ourAdd(PyNs3DsrNetworkKey *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_ourAdd = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrNetworkKey__get_m_source(PyNs3DsrNetworkKey *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->m_source);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3DsrNetworkKey__set_m_source(PyNs3DsrNetworkKey *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_source = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3DsrNetworkKey__getsets[] = {
    {
        (char*) "m_ourAdd", /* attribute name */
        (getter) _wrap_PyNs3DsrNetworkKey__get_m_ourAdd, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrNetworkKey__set_m_ourAdd, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_ackId", /* attribute name */
        (getter) _wrap_PyNs3DsrNetworkKey__get_m_ackId, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrNetworkKey__set_m_ackId, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_destination", /* attribute name */
        (getter) _wrap_PyNs3DsrNetworkKey__get_m_destination, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrNetworkKey__set_m_destination, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_source", /* attribute name */
        (getter) _wrap_PyNs3DsrNetworkKey__get_m_source, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrNetworkKey__set_m_source, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_nextHop", /* attribute name */
        (getter) _wrap_PyNs3DsrNetworkKey__get_m_nextHop, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrNetworkKey__set_m_nextHop, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3DsrNetworkKey__tp_init__0(PyNs3DsrNetworkKey *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::NetworkKey();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrNetworkKey__tp_init__1(PyNs3DsrNetworkKey *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrNetworkKey *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrNetworkKey_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::NetworkKey(*((PyNs3DsrNetworkKey *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrNetworkKey__tp_init(PyNs3DsrNetworkKey *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrNetworkKey__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrNetworkKey__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3DsrNetworkKey__copy__(PyNs3DsrNetworkKey *self)
{

    PyNs3DsrNetworkKey *py_copy;
    py_copy = PyObject_New(PyNs3DsrNetworkKey, &PyNs3DsrNetworkKey_Type);
    py_copy->obj = new ns3::dsr::NetworkKey(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrNetworkKey_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrNetworkKey_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrNetworkKey__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrNetworkKey__tp_dealloc(PyNs3DsrNetworkKey *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrNetworkKey_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrNetworkKey_wrapper_registry.end()) {
        PyNs3DsrNetworkKey_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::NetworkKey *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrNetworkKey__tp_richcompare (PyNs3DsrNetworkKey *PYBINDGEN_UNUSED(self), PyNs3DsrNetworkKey *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrNetworkKey_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        if (*self->obj < *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrNetworkKey_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.NetworkKey",            /* tp_name */
    sizeof(PyNs3DsrNetworkKey),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrNetworkKey__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "NetworkKey(arg0)\nNetworkKey()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrNetworkKey__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrNetworkKey_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3DsrNetworkKey__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrNetworkKey__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrPassiveKey_wrapper_registry;
static PyObject* _wrap_PyNs3DsrPassiveKey__get_m_ackId(PyNs3DsrPassiveKey *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->m_ackId);
    return py_retval;
}
static int _wrap_PyNs3DsrPassiveKey__set_m_ackId(PyNs3DsrPassiveKey *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_ackId = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrPassiveKey__get_m_destination(PyNs3DsrPassiveKey *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->m_destination);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3DsrPassiveKey__set_m_destination(PyNs3DsrPassiveKey *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_destination = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrPassiveKey__get_m_segsLeft(PyNs3DsrPassiveKey *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->m_segsLeft);
    return py_retval;
}
static int _wrap_PyNs3DsrPassiveKey__set_m_segsLeft(PyNs3DsrPassiveKey *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_segsLeft = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrPassiveKey__get_m_source(PyNs3DsrPassiveKey *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(self->obj->m_source);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}
static int _wrap_PyNs3DsrPassiveKey__set_m_source(PyNs3DsrPassiveKey *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_source = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3DsrPassiveKey__getsets[] = {
    {
        (char*) "m_segsLeft", /* attribute name */
        (getter) _wrap_PyNs3DsrPassiveKey__get_m_segsLeft, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrPassiveKey__set_m_segsLeft, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_ackId", /* attribute name */
        (getter) _wrap_PyNs3DsrPassiveKey__get_m_ackId, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrPassiveKey__set_m_ackId, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_destination", /* attribute name */
        (getter) _wrap_PyNs3DsrPassiveKey__get_m_destination, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrPassiveKey__set_m_destination, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_source", /* attribute name */
        (getter) _wrap_PyNs3DsrPassiveKey__get_m_source, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrPassiveKey__set_m_source, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3DsrPassiveKey__tp_init__0(PyNs3DsrPassiveKey *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::PassiveKey();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrPassiveKey__tp_init__1(PyNs3DsrPassiveKey *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrPassiveKey *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrPassiveKey_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::PassiveKey(*((PyNs3DsrPassiveKey *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrPassiveKey__tp_init(PyNs3DsrPassiveKey *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrPassiveKey__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrPassiveKey__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3DsrPassiveKey__copy__(PyNs3DsrPassiveKey *self)
{

    PyNs3DsrPassiveKey *py_copy;
    py_copy = PyObject_New(PyNs3DsrPassiveKey, &PyNs3DsrPassiveKey_Type);
    py_copy->obj = new ns3::dsr::PassiveKey(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrPassiveKey_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrPassiveKey_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrPassiveKey__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrPassiveKey__tp_dealloc(PyNs3DsrPassiveKey *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrPassiveKey_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrPassiveKey_wrapper_registry.end()) {
        PyNs3DsrPassiveKey_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::PassiveKey *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrPassiveKey__tp_richcompare (PyNs3DsrPassiveKey *PYBINDGEN_UNUSED(self), PyNs3DsrPassiveKey *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrPassiveKey_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        if (*self->obj < *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrPassiveKey_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.PassiveKey",            /* tp_name */
    sizeof(PyNs3DsrPassiveKey),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrPassiveKey__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "PassiveKey(arg0)\nPassiveKey()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrPassiveKey__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrPassiveKey_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3DsrPassiveKey__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrPassiveKey__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrRreqTableEntry_wrapper_registry;
static PyObject* _wrap_PyNs3DsrRreqTableEntry__get_m_expire(PyNs3DsrRreqTableEntry *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(self->obj->m_expire);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}
static int _wrap_PyNs3DsrRreqTableEntry__set_m_expire(PyNs3DsrRreqTableEntry *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_expire = *tmp_Time->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3DsrRreqTableEntry__get_m_reqNo(PyNs3DsrRreqTableEntry *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->m_reqNo));
    return py_retval;
}
static int _wrap_PyNs3DsrRreqTableEntry__set_m_reqNo(PyNs3DsrRreqTableEntry *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->m_reqNo)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3DsrRreqTableEntry__getsets[] = {
    {
        (char*) "m_reqNo", /* attribute name */
        (getter) _wrap_PyNs3DsrRreqTableEntry__get_m_reqNo, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrRreqTableEntry__set_m_reqNo, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_expire", /* attribute name */
        (getter) _wrap_PyNs3DsrRreqTableEntry__get_m_expire, /* C function to get the attribute */
        (setter) _wrap_PyNs3DsrRreqTableEntry__set_m_expire, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3DsrRreqTableEntry__tp_init__0(PyNs3DsrRreqTableEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::RreqTableEntry();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrRreqTableEntry__tp_init__1(PyNs3DsrRreqTableEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrRreqTableEntry *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrRreqTableEntry_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::RreqTableEntry(*((PyNs3DsrRreqTableEntry *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrRreqTableEntry__tp_init(PyNs3DsrRreqTableEntry *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrRreqTableEntry__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrRreqTableEntry__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3DsrRreqTableEntry__copy__(PyNs3DsrRreqTableEntry *self)
{

    PyNs3DsrRreqTableEntry *py_copy;
    py_copy = PyObject_New(PyNs3DsrRreqTableEntry, &PyNs3DsrRreqTableEntry_Type);
    py_copy->obj = new ns3::dsr::RreqTableEntry(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrRreqTableEntry_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrRreqTableEntry_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrRreqTableEntry__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrRreqTableEntry__tp_dealloc(PyNs3DsrRreqTableEntry *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrRreqTableEntry_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrRreqTableEntry_wrapper_registry.end()) {
        PyNs3DsrRreqTableEntry_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::dsr::RreqTableEntry *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrRreqTableEntry__tp_richcompare (PyNs3DsrRreqTableEntry *PYBINDGEN_UNUSED(self), PyNs3DsrRreqTableEntry *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrRreqTableEntry_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrRreqTableEntry_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.RreqTableEntry",            /* tp_name */
    sizeof(PyNs3DsrRreqTableEntry),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrRreqTableEntry__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "RreqTableEntry(arg0)\nRreqTableEntry()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrRreqTableEntry__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrRreqTableEntry_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3DsrRreqTableEntry__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrRreqTableEntry__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3DsrDsrOptionAck__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3DsrDsrOptionAck *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionAck__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionAck__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionAck__PythonHelper::_wrap_DoInitialize(PyNs3DsrDsrOptionAck *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionAck__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionAck__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionAck__PythonHelper::_wrap_NotifyNewAggregate(PyNs3DsrDsrOptionAck *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionAck__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionAck__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionAck__PythonHelper::_wrap_DoDispose(PyNs3DsrDsrOptionAck *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionAck__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionAck__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

ns3::TypeId
PyNs3DsrDsrOptionAck__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionAck *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAck::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj = const_cast< ns3::dsr::DsrOptionAck* >((const ns3::dsr::DsrOptionAck*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAck::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAck::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint8_t
PyNs3DsrDsrOptionAck__PythonHelper::GetOptionNumber() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionAck *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetOptionNumber"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAck::GetOptionNumber();
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj = const_cast< ns3::dsr::DsrOptionAck* >((const ns3::dsr::DsrOptionAck*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetOptionNumber", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAck::GetOptionNumber();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAck::GetOptionNumber();
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAck::GetOptionNumber();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint8_t
PyNs3DsrDsrOptionAck__PythonHelper::Process(ns3::Ptr< ns3::Packet > packet, ns3::Ptr< ns3::Packet > dsrP, ns3::Ipv4Address ipv4Address, ns3::Ipv4Address source, ns3::Ipv4Header const & ipv4Header, uint8_t protocol, bool & isPromisc, ns3::Ipv4Address promiscSource)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionAck *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Packet *py_Packet2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Header *py_Ipv4Header;
    PyNs3Ipv4Address *py_Ipv4Address3;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Process"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAck::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj = (ns3::dsr::DsrOptionAck*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Packet2 = NULL;
    } else {
        py_Packet2 = (PyNs3Packet *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Packet2);
    }
    
    if (py_Packet2 == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))), &PyNs3Packet_Type);
        py_Packet2 = PyObject_New(PyNs3Packet, wrapper_type2);
    
        py_Packet2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))->Ref();
        py_Packet2->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP));
        PyNs3Empty_wrapper_registry[(void *) py_Packet2->obj] = (PyObject *) py_Packet2;
    }
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(ipv4Address);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(source);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_Ipv4Header = PyObject_GC_New(PyNs3Ipv4Header, &PyNs3Ipv4Header_Type);
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Header->obj = new ns3::Ipv4Header(ipv4Header);
    PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4Header->obj] = (PyObject *) py_Ipv4Header;
    py_Ipv4Address3 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address3->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address3->obj = new ns3::Ipv4Address(promiscSource);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address3->obj] = (PyObject *) py_Ipv4Address3;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Process", (char *) "NNNNNiNN", py_Packet, py_Packet2, py_Ipv4Address, py_Ipv4Address2, py_Ipv4Header, (int) protocol, PyBool_FromLong(isPromisc), py_Ipv4Address3);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAck::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAck::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAck::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionAck* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Ipv4Route >
PyNs3DsrDsrOptionAck__PythonHelper::SetRoute(ns3::Ipv4Address nextHop, ns3::Ipv4Address srcAddress)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptions *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Ipv4Route > retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Route *tmp_Ipv4Route;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetRoute"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = (ns3::dsr::DsrOptions*) this;
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(nextHop);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(srcAddress);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetRoute", (char *) "NN", py_Ipv4Address, py_Ipv4Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Route_Type, &tmp_Ipv4Route)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Ipv4Route  > (tmp_Ipv4Route->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3DsrDsrOptionAck__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionAck__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionAck__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionAck__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}
static PyObject* _wrap_PyNs3DsrDsrOptionAck__get_OPT_NUMBER(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)ns3::dsr::DsrOptionAck::OPT_NUMBER);
    return py_retval;
}
static PyGetSetDef Ns3DsrDsrOptionAckMeta__getsets[] = {
    {
        (char*) "OPT_NUMBER", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrOptionAck__get_OPT_NUMBER, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyNs3DsrDsrOptionAckMeta_Type = {
        PyVarObject_HEAD_INIT(NULL, 0)
	(char *) "Ns3DsrDsrOptionAckMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	Ns3DsrDsrOptionAckMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};



static int
_wrap_PyNs3DsrDsrOptionAck__tp_init__0(PyNs3DsrDsrOptionAck *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionAck *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionAck_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptionAck_Type)
    {
        self->obj = new PyNs3DsrDsrOptionAck__PythonHelper(*((PyNs3DsrDsrOptionAck *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptionAck__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dsr::DsrOptionAck(*((PyNs3DsrDsrOptionAck *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionAck__tp_init__1(PyNs3DsrDsrOptionAck *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptionAck_Type)
    {
        self->obj = new PyNs3DsrDsrOptionAck__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptionAck__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dsr::DsrOptionAck();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3DsrDsrOptionAck__tp_init(PyNs3DsrDsrOptionAck *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionAck__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionAck__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAck_Process(PyNs3DsrDsrOptionAck *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Packet *dsrP;
    ns3::Packet *dsrP_ptr;
    PyNs3Ipv4Address *ipv4Address;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Header *ipv4Header;
    int protocol;
    bool isPromisc;
    PyObject *py_isPromisc;
    PyNs3Ipv4Address *promiscSource;
    PyNs3DsrDsrOptionAck__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionAck__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "dsrP", "ipv4Address", "source", "ipv4Header", "protocol", "isPromisc", "promiscSource", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!O!iOO!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Packet_Type, &dsrP, &PyNs3Ipv4Address_Type, &ipv4Address, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Header_Type, &ipv4Header, &protocol, &py_isPromisc, &PyNs3Ipv4Address_Type, &promiscSource)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    dsrP_ptr = (dsrP ? dsrP->obj : NULL);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    isPromisc = PyObject_IsTrue(py_isPromisc);
    retval = (helper_class == NULL)? (self->obj->Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj)) : (self->obj->ns3::dsr::DsrOptionAck::Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj));
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAck_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionAck::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAck_GetOptionNumber(PyNs3DsrDsrOptionAck *self)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3DsrDsrOptionAck__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionAck__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetOptionNumber()) : (self->obj->ns3::dsr::DsrOptionAck::GetOptionNumber());
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAck_GetInstanceTypeId(PyNs3DsrDsrOptionAck *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionAck__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionAck__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::dsr::DsrOptionAck::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionAck__copy__(PyNs3DsrDsrOptionAck *self)
{

    PyNs3DsrDsrOptionAck *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionAck, &PyNs3DsrDsrOptionAck_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::dsr::DsrOptionAck(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionAck_methods[] = {
    {(char *) "Process", (PyCFunction) _wrap_PyNs3DsrDsrOptionAck_Process, METH_KEYWORDS|METH_VARARGS, "Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: dsrP: ns3::Ptr< ns3::Packet >\ntype: ipv4Address: ns3::Ipv4Address\ntype: source: ns3::Ipv4Address\ntype: ipv4Header: ns3::Ipv4Header const &\ntype: protocol: uint8_t\ntype: isPromisc: bool &\ntype: promiscSource: ns3::Ipv4Address" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionAck_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetOptionNumber", (PyCFunction) _wrap_PyNs3DsrDsrOptionAck_GetOptionNumber, METH_NOARGS, "GetOptionNumber()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionAck_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3DsrDsrOptionAck__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3DsrDsrOptionAck__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3DsrDsrOptionAck__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3DsrDsrOptionAck__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionAck__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionAck__tp_clear(PyNs3DsrDsrOptionAck *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dsr::DsrOptionAck *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DsrDsrOptionAck__tp_traverse(PyNs3DsrDsrOptionAck *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3DsrDsrOptionAck__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionAck__tp_dealloc(PyNs3DsrDsrOptionAck *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionAck__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionAck__tp_richcompare (PyNs3DsrDsrOptionAck *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionAck *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionAck_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionAck_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionAck",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionAck),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionAck__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionAck(arg0)\nDsrOptionAck()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionAck__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionAck__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionAck__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionAck_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionAck, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionAck__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrOptionAckHeader__tp_init__0(PyNs3DsrDsrOptionAckHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionAckHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionAckHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionAckHeader(*((PyNs3DsrDsrOptionAckHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionAckHeader__tp_init__1(PyNs3DsrDsrOptionAckHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionAckHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrOptionAckHeader__tp_init(PyNs3DsrDsrOptionAckHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionAckHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionAckHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckHeader_GetRealSrc(PyNs3DsrDsrOptionAckHeader *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetRealSrc();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckHeader_Serialize(PyNs3DsrDsrOptionAckHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckHeader_SetRealSrc(PyNs3DsrDsrOptionAckHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *realSrcAddress;
    const char *keywords[] = {"realSrcAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &realSrcAddress)) {
        return NULL;
    }
    self->obj->SetRealSrc(*((PyNs3Ipv4Address *) realSrcAddress)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckHeader_Deserialize(PyNs3DsrDsrOptionAckHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionAckHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckHeader_GetAlignment(PyNs3DsrDsrOptionAckHeader *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionHeaderAlignment *py_Alignment;
    
    ns3::dsr::DsrOptionHeader::Alignment retval = self->obj->GetAlignment();
    py_Alignment = PyObject_New(PyNs3DsrDsrOptionHeaderAlignment, &PyNs3DsrDsrOptionHeaderAlignment_Type);
    py_Alignment->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Alignment->obj = new ns3::dsr::DsrOptionHeader::Alignment(retval);
    PyNs3DsrDsrOptionHeaderAlignment_wrapper_registry[(void *) py_Alignment->obj] = (PyObject *) py_Alignment;
    py_retval = Py_BuildValue((char *) "N", py_Alignment);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckHeader_GetSerializedSize(PyNs3DsrDsrOptionAckHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckHeader_SetAckId(PyNs3DsrDsrOptionAckHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int identification;
    const char *keywords[] = {"identification", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &identification)) {
        return NULL;
    }
    if (identification > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetAckId(identification);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckHeader_GetInstanceTypeId(PyNs3DsrDsrOptionAckHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckHeader_GetAckId(PyNs3DsrDsrOptionAckHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetAckId();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckHeader_GetRealDst(PyNs3DsrDsrOptionAckHeader *self)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    ns3::Ipv4Address retval = self->obj->GetRealDst();
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(retval);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckHeader_SetRealDst(PyNs3DsrDsrOptionAckHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *realDstAddress;
    const char *keywords[] = {"realDstAddress", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &realDstAddress)) {
        return NULL;
    }
    self->obj->SetRealDst(*((PyNs3Ipv4Address *) realDstAddress)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionAckHeader__copy__(PyNs3DsrDsrOptionAckHeader *self)
{

    PyNs3DsrDsrOptionAckHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionAckHeader, &PyNs3DsrDsrOptionAckHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::dsr::DsrOptionAckHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionAckHeader_methods[] = {
    {(char *) "GetRealSrc", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckHeader_GetRealSrc, METH_NOARGS, "GetRealSrc()\n\n" },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "SetRealSrc", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckHeader_SetRealSrc, METH_KEYWORDS|METH_VARARGS, "SetRealSrc(realSrcAddress)\n\ntype: realSrcAddress: ns3::Ipv4Address" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetAlignment", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckHeader_GetAlignment, METH_NOARGS, "GetAlignment()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetAckId", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckHeader_SetAckId, METH_KEYWORDS|METH_VARARGS, "SetAckId(identification)\n\ntype: identification: uint16_t" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetAckId", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckHeader_GetAckId, METH_NOARGS, "GetAckId()\n\n" },
    {(char *) "GetRealDst", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckHeader_GetRealDst, METH_NOARGS, "GetRealDst()\n\n" },
    {(char *) "SetRealDst", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckHeader_SetRealDst, METH_KEYWORDS|METH_VARARGS, "SetRealDst(realDstAddress)\n\ntype: realDstAddress: ns3::Ipv4Address" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionAckHeader__tp_clear(PyNs3DsrDsrOptionAckHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dsr::DsrOptionAckHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DsrDsrOptionAckHeader__tp_traverse(PyNs3DsrDsrOptionAckHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionAckHeader__tp_dealloc(PyNs3DsrDsrOptionAckHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionAckHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionAckHeader__tp_richcompare (PyNs3DsrDsrOptionAckHeader *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionAckHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionAckHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionAckHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionAckHeader",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionAckHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionAckHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionAckHeader(arg0)\nDsrOptionAckHeader()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionAckHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionAckHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionAckHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionAckHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionAckHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionAckHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3DsrDsrOptionAckReq__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3DsrDsrOptionAckReq *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionAckReq__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionAckReq__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionAckReq__PythonHelper::_wrap_DoInitialize(PyNs3DsrDsrOptionAckReq *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionAckReq__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionAckReq__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionAckReq__PythonHelper::_wrap_NotifyNewAggregate(PyNs3DsrDsrOptionAckReq *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionAckReq__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionAckReq__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionAckReq__PythonHelper::_wrap_DoDispose(PyNs3DsrDsrOptionAckReq *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionAckReq__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionAckReq__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

ns3::TypeId
PyNs3DsrDsrOptionAckReq__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionAckReq *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAckReq::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj = const_cast< ns3::dsr::DsrOptionAckReq* >((const ns3::dsr::DsrOptionAckReq*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAckReq::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAckReq::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint8_t
PyNs3DsrDsrOptionAckReq__PythonHelper::GetOptionNumber() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionAckReq *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetOptionNumber"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAckReq::GetOptionNumber();
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj = const_cast< ns3::dsr::DsrOptionAckReq* >((const ns3::dsr::DsrOptionAckReq*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetOptionNumber", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAckReq::GetOptionNumber();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAckReq::GetOptionNumber();
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAckReq::GetOptionNumber();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint8_t
PyNs3DsrDsrOptionAckReq__PythonHelper::Process(ns3::Ptr< ns3::Packet > packet, ns3::Ptr< ns3::Packet > dsrP, ns3::Ipv4Address ipv4Address, ns3::Ipv4Address source, ns3::Ipv4Header const & ipv4Header, uint8_t protocol, bool & isPromisc, ns3::Ipv4Address promiscSource)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionAckReq *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Packet *py_Packet2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Header *py_Ipv4Header;
    PyNs3Ipv4Address *py_Ipv4Address3;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Process"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAckReq::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj = (ns3::dsr::DsrOptionAckReq*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Packet2 = NULL;
    } else {
        py_Packet2 = (PyNs3Packet *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Packet2);
    }
    
    if (py_Packet2 == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))), &PyNs3Packet_Type);
        py_Packet2 = PyObject_New(PyNs3Packet, wrapper_type2);
    
        py_Packet2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))->Ref();
        py_Packet2->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP));
        PyNs3Empty_wrapper_registry[(void *) py_Packet2->obj] = (PyObject *) py_Packet2;
    }
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(ipv4Address);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(source);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_Ipv4Header = PyObject_GC_New(PyNs3Ipv4Header, &PyNs3Ipv4Header_Type);
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Header->obj = new ns3::Ipv4Header(ipv4Header);
    PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4Header->obj] = (PyObject *) py_Ipv4Header;
    py_Ipv4Address3 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address3->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address3->obj = new ns3::Ipv4Address(promiscSource);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address3->obj] = (PyObject *) py_Ipv4Address3;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Process", (char *) "NNNNNiNN", py_Packet, py_Packet2, py_Ipv4Address, py_Ipv4Address2, py_Ipv4Header, (int) protocol, PyBool_FromLong(isPromisc), py_Ipv4Address3);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAckReq::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAckReq::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionAckReq::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionAckReq* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Ipv4Route >
PyNs3DsrDsrOptionAckReq__PythonHelper::SetRoute(ns3::Ipv4Address nextHop, ns3::Ipv4Address srcAddress)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptions *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Ipv4Route > retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Route *tmp_Ipv4Route;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetRoute"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = (ns3::dsr::DsrOptions*) this;
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(nextHop);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(srcAddress);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetRoute", (char *) "NN", py_Ipv4Address, py_Ipv4Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Route_Type, &tmp_Ipv4Route)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Ipv4Route  > (tmp_Ipv4Route->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3DsrDsrOptionAckReq__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionAckReq__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionAckReq__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionAckReq__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}
static PyObject* _wrap_PyNs3DsrDsrOptionAckReq__get_OPT_NUMBER(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)ns3::dsr::DsrOptionAckReq::OPT_NUMBER);
    return py_retval;
}
static PyGetSetDef Ns3DsrDsrOptionAckReqMeta__getsets[] = {
    {
        (char*) "OPT_NUMBER", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrOptionAckReq__get_OPT_NUMBER, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyNs3DsrDsrOptionAckReqMeta_Type = {
        PyVarObject_HEAD_INIT(NULL, 0)
	(char *) "Ns3DsrDsrOptionAckReqMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	Ns3DsrDsrOptionAckReqMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};



static int
_wrap_PyNs3DsrDsrOptionAckReq__tp_init__0(PyNs3DsrDsrOptionAckReq *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionAckReq *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionAckReq_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptionAckReq_Type)
    {
        self->obj = new PyNs3DsrDsrOptionAckReq__PythonHelper(*((PyNs3DsrDsrOptionAckReq *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptionAckReq__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dsr::DsrOptionAckReq(*((PyNs3DsrDsrOptionAckReq *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionAckReq__tp_init__1(PyNs3DsrDsrOptionAckReq *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptionAckReq_Type)
    {
        self->obj = new PyNs3DsrDsrOptionAckReq__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptionAckReq__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dsr::DsrOptionAckReq();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3DsrDsrOptionAckReq__tp_init(PyNs3DsrDsrOptionAckReq *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionAckReq__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionAckReq__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckReq_Process(PyNs3DsrDsrOptionAckReq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Packet *dsrP;
    ns3::Packet *dsrP_ptr;
    PyNs3Ipv4Address *ipv4Address;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Header *ipv4Header;
    int protocol;
    bool isPromisc;
    PyObject *py_isPromisc;
    PyNs3Ipv4Address *promiscSource;
    PyNs3DsrDsrOptionAckReq__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionAckReq__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "dsrP", "ipv4Address", "source", "ipv4Header", "protocol", "isPromisc", "promiscSource", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!O!iOO!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Packet_Type, &dsrP, &PyNs3Ipv4Address_Type, &ipv4Address, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Header_Type, &ipv4Header, &protocol, &py_isPromisc, &PyNs3Ipv4Address_Type, &promiscSource)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    dsrP_ptr = (dsrP ? dsrP->obj : NULL);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    isPromisc = PyObject_IsTrue(py_isPromisc);
    retval = (helper_class == NULL)? (self->obj->Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj)) : (self->obj->ns3::dsr::DsrOptionAckReq::Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj));
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckReq_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionAckReq::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckReq_GetOptionNumber(PyNs3DsrDsrOptionAckReq *self)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3DsrDsrOptionAckReq__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionAckReq__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetOptionNumber()) : (self->obj->ns3::dsr::DsrOptionAckReq::GetOptionNumber());
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckReq_GetInstanceTypeId(PyNs3DsrDsrOptionAckReq *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionAckReq__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionAckReq__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::dsr::DsrOptionAckReq::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionAckReq__copy__(PyNs3DsrDsrOptionAckReq *self)
{

    PyNs3DsrDsrOptionAckReq *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionAckReq, &PyNs3DsrDsrOptionAckReq_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::dsr::DsrOptionAckReq(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionAckReq_methods[] = {
    {(char *) "Process", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckReq_Process, METH_KEYWORDS|METH_VARARGS, "Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: dsrP: ns3::Ptr< ns3::Packet >\ntype: ipv4Address: ns3::Ipv4Address\ntype: source: ns3::Ipv4Address\ntype: ipv4Header: ns3::Ipv4Header const &\ntype: protocol: uint8_t\ntype: isPromisc: bool &\ntype: promiscSource: ns3::Ipv4Address" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckReq_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetOptionNumber", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckReq_GetOptionNumber, METH_NOARGS, "GetOptionNumber()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckReq_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3DsrDsrOptionAckReq__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3DsrDsrOptionAckReq__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3DsrDsrOptionAckReq__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3DsrDsrOptionAckReq__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckReq__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionAckReq__tp_clear(PyNs3DsrDsrOptionAckReq *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dsr::DsrOptionAckReq *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DsrDsrOptionAckReq__tp_traverse(PyNs3DsrDsrOptionAckReq *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3DsrDsrOptionAckReq__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionAckReq__tp_dealloc(PyNs3DsrDsrOptionAckReq *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionAckReq__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionAckReq__tp_richcompare (PyNs3DsrDsrOptionAckReq *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionAckReq *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionAckReq_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionAckReq_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionAckReq",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionAckReq),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionAckReq__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionAckReq(arg0)\nDsrOptionAckReq()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionAckReq__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionAckReq__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionAckReq__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionAckReq_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionAckReq, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionAckReq__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3DsrDsrOptionAckReqHeader__tp_init__0(PyNs3DsrDsrOptionAckReqHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionAckReqHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionAckReqHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionAckReqHeader(*((PyNs3DsrDsrOptionAckReqHeader *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionAckReqHeader__tp_init__1(PyNs3DsrDsrOptionAckReqHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::dsr::DsrOptionAckReqHeader();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrDsrOptionAckReqHeader__tp_init(PyNs3DsrDsrOptionAckReqHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionAckReqHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionAckReqHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckReqHeader_Serialize(PyNs3DsrDsrOptionAckReqHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckReqHeader_Deserialize(PyNs3DsrDsrOptionAckReqHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckReqHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionAckReqHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckReqHeader_GetAlignment(PyNs3DsrDsrOptionAckReqHeader *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionHeaderAlignment *py_Alignment;
    
    ns3::dsr::DsrOptionHeader::Alignment retval = self->obj->GetAlignment();
    py_Alignment = PyObject_New(PyNs3DsrDsrOptionHeaderAlignment, &PyNs3DsrDsrOptionHeaderAlignment_Type);
    py_Alignment->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Alignment->obj = new ns3::dsr::DsrOptionHeader::Alignment(retval);
    PyNs3DsrDsrOptionHeaderAlignment_wrapper_registry[(void *) py_Alignment->obj] = (PyObject *) py_Alignment;
    py_retval = Py_BuildValue((char *) "N", py_Alignment);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckReqHeader_GetSerializedSize(PyNs3DsrDsrOptionAckReqHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckReqHeader_SetAckId(PyNs3DsrDsrOptionAckReqHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int identification;
    const char *keywords[] = {"identification", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &identification)) {
        return NULL;
    }
    if (identification > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetAckId(identification);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckReqHeader_GetInstanceTypeId(PyNs3DsrDsrOptionAckReqHeader *self)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = self->obj->GetInstanceTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionAckReqHeader_GetAckId(PyNs3DsrDsrOptionAckReqHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetAckId();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionAckReqHeader__copy__(PyNs3DsrDsrOptionAckReqHeader *self)
{

    PyNs3DsrDsrOptionAckReqHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionAckReqHeader, &PyNs3DsrDsrOptionAckReqHeader_Type);
    py_copy->inst_dict = NULL;
    py_copy->obj = new ns3::dsr::DsrOptionAckReqHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionAckReqHeader_methods[] = {
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckReqHeader_Serialize, METH_KEYWORDS|METH_VARARGS, "Serialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckReqHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, "Deserialize(start)\n\ntype: start: ns3::Buffer::Iterator" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckReqHeader_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetAlignment", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckReqHeader_GetAlignment, METH_NOARGS, "GetAlignment()\n\n" },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckReqHeader_GetSerializedSize, METH_NOARGS, "GetSerializedSize()\n\n" },
    {(char *) "SetAckId", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckReqHeader_SetAckId, METH_KEYWORDS|METH_VARARGS, "SetAckId(identification)\n\ntype: identification: uint16_t" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckReqHeader_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "GetAckId", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckReqHeader_GetAckId, METH_NOARGS, "GetAckId()\n\n" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionAckReqHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionAckReqHeader__tp_clear(PyNs3DsrDsrOptionAckReqHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::dsr::DsrOptionAckReqHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DsrDsrOptionAckReqHeader__tp_traverse(PyNs3DsrDsrOptionAckReqHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionAckReqHeader__tp_dealloc(PyNs3DsrDsrOptionAckReqHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionAckReqHeader__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionAckReqHeader__tp_richcompare (PyNs3DsrDsrOptionAckReqHeader *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionAckReqHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionAckReqHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionAckReqHeader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionAckReqHeader",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionAckReqHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionAckReqHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionAckReqHeader(arg0)\nDsrOptionAckReqHeader()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionAckReqHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionAckReqHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionAckReqHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionAckReqHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionAckReqHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionAckReqHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3DsrDsrOptionPad1__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3DsrDsrOptionPad1 *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionPad1__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionPad1__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionPad1__PythonHelper::_wrap_DoInitialize(PyNs3DsrDsrOptionPad1 *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionPad1__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionPad1__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionPad1__PythonHelper::_wrap_NotifyNewAggregate(PyNs3DsrDsrOptionPad1 *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionPad1__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionPad1__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionPad1__PythonHelper::_wrap_DoDispose(PyNs3DsrDsrOptionPad1 *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionPad1__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionPad1__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint8_t
PyNs3DsrDsrOptionPad1__PythonHelper::GetOptionNumber() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionPad1 *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetOptionNumber"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionPad1::GetOptionNumber();
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionPad1* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionPad1* >(m_pyself)->obj = const_cast< ns3::dsr::DsrOptionPad1* >((const ns3::dsr::DsrOptionPad1*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetOptionNumber", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionPad1* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionPad1::GetOptionNumber();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionPad1* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionPad1::GetOptionNumber();
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionPad1* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionPad1::GetOptionNumber();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionPad1* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint8_t
PyNs3DsrDsrOptionPad1__PythonHelper::Process(ns3::Ptr< ns3::Packet > packet, ns3::Ptr< ns3::Packet > dsrP, ns3::Ipv4Address ipv4Address, ns3::Ipv4Address source, ns3::Ipv4Header const & ipv4Header, uint8_t protocol, bool & isPromisc, ns3::Ipv4Address promiscSource)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionPad1 *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Packet *py_Packet2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Header *py_Ipv4Header;
    PyNs3Ipv4Address *py_Ipv4Address3;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Process"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionPad1::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionPad1* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionPad1* >(m_pyself)->obj = (ns3::dsr::DsrOptionPad1*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Packet2 = NULL;
    } else {
        py_Packet2 = (PyNs3Packet *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Packet2);
    }
    
    if (py_Packet2 == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))), &PyNs3Packet_Type);
        py_Packet2 = PyObject_New(PyNs3Packet, wrapper_type2);
    
        py_Packet2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))->Ref();
        py_Packet2->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP));
        PyNs3Empty_wrapper_registry[(void *) py_Packet2->obj] = (PyObject *) py_Packet2;
    }
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(ipv4Address);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(source);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_Ipv4Header = PyObject_GC_New(PyNs3Ipv4Header, &PyNs3Ipv4Header_Type);
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Header->obj = new ns3::Ipv4Header(ipv4Header);
    PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4Header->obj] = (PyObject *) py_Ipv4Header;
    py_Ipv4Address3 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address3->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address3->obj = new ns3::Ipv4Address(promiscSource);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address3->obj] = (PyObject *) py_Ipv4Address3;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Process", (char *) "NNNNNiNN", py_Packet, py_Packet2, py_Ipv4Address, py_Ipv4Address2, py_Ipv4Header, (int) protocol, PyBool_FromLong(isPromisc), py_Ipv4Address3);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionPad1* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionPad1::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionPad1* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionPad1::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionPad1* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionPad1::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionPad1* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Ipv4Route >
PyNs3DsrDsrOptionPad1__PythonHelper::SetRoute(ns3::Ipv4Address nextHop, ns3::Ipv4Address srcAddress)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptions *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Ipv4Route > retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Route *tmp_Ipv4Route;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetRoute"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = (ns3::dsr::DsrOptions*) this;
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(nextHop);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(srcAddress);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetRoute", (char *) "NN", py_Ipv4Address, py_Ipv4Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Route_Type, &tmp_Ipv4Route)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Ipv4Route  > (tmp_Ipv4Route->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3DsrDsrOptionPad1__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3DsrDsrOptionPad1__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionPad1__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionPad1__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionPad1__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}
static PyObject* _wrap_PyNs3DsrDsrOptionPad1__get_OPT_NUMBER(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)ns3::dsr::DsrOptionPad1::OPT_NUMBER);
    return py_retval;
}
static PyGetSetDef Ns3DsrDsrOptionPad1Meta__getsets[] = {
    {
        (char*) "OPT_NUMBER", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrOptionPad1__get_OPT_NUMBER, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyNs3DsrDsrOptionPad1Meta_Type = {
        PyVarObject_HEAD_INIT(NULL, 0)
	(char *) "Ns3DsrDsrOptionPad1Meta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	Ns3DsrDsrOptionPad1Meta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};



static int
_wrap_PyNs3DsrDsrOptionPad1__tp_init__0(PyNs3DsrDsrOptionPad1 *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionPad1 *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionPad1_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptionPad1_Type)
    {
        self->obj = new PyNs3DsrDsrOptionPad1__PythonHelper(*((PyNs3DsrDsrOptionPad1 *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptionPad1__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dsr::DsrOptionPad1(*((PyNs3DsrDsrOptionPad1 *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionPad1__tp_init__1(PyNs3DsrDsrOptionPad1 *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptionPad1_Type)
    {
        self->obj = new PyNs3DsrDsrOptionPad1__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptionPad1__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dsr::DsrOptionPad1();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3DsrDsrOptionPad1__tp_init(PyNs3DsrDsrOptionPad1 *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionPad1__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionPad1__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionPad1_Process(PyNs3DsrDsrOptionPad1 *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Packet *dsrP;
    ns3::Packet *dsrP_ptr;
    PyNs3Ipv4Address *ipv4Address;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Header *ipv4Header;
    int protocol;
    bool isPromisc;
    PyObject *py_isPromisc;
    PyNs3Ipv4Address *promiscSource;
    PyNs3DsrDsrOptionPad1__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionPad1__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "dsrP", "ipv4Address", "source", "ipv4Header", "protocol", "isPromisc", "promiscSource", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!O!iOO!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Packet_Type, &dsrP, &PyNs3Ipv4Address_Type, &ipv4Address, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Header_Type, &ipv4Header, &protocol, &py_isPromisc, &PyNs3Ipv4Address_Type, &promiscSource)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    dsrP_ptr = (dsrP ? dsrP->obj : NULL);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    isPromisc = PyObject_IsTrue(py_isPromisc);
    retval = (helper_class == NULL)? (self->obj->Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj)) : (self->obj->ns3::dsr::DsrOptionPad1::Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj));
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionPad1_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionPad1::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionPad1_GetOptionNumber(PyNs3DsrDsrOptionPad1 *self)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3DsrDsrOptionPad1__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionPad1__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetOptionNumber()) : (self->obj->ns3::dsr::DsrOptionPad1::GetOptionNumber());
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionPad1__copy__(PyNs3DsrDsrOptionPad1 *self)
{

    PyNs3DsrDsrOptionPad1 *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionPad1, &PyNs3DsrDsrOptionPad1_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::dsr::DsrOptionPad1(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionPad1_methods[] = {
    {(char *) "Process", (PyCFunction) _wrap_PyNs3DsrDsrOptionPad1_Process, METH_KEYWORDS|METH_VARARGS, "Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: dsrP: ns3::Ptr< ns3::Packet >\ntype: ipv4Address: ns3::Ipv4Address\ntype: source: ns3::Ipv4Address\ntype: ipv4Header: ns3::Ipv4Header const &\ntype: protocol: uint8_t\ntype: isPromisc: bool &\ntype: promiscSource: ns3::Ipv4Address" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionPad1_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetOptionNumber", (PyCFunction) _wrap_PyNs3DsrDsrOptionPad1_GetOptionNumber, METH_NOARGS, "GetOptionNumber()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3DsrDsrOptionPad1__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3DsrDsrOptionPad1__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3DsrDsrOptionPad1__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3DsrDsrOptionPad1__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionPad1__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionPad1__tp_clear(PyNs3DsrDsrOptionPad1 *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dsr::DsrOptionPad1 *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DsrDsrOptionPad1__tp_traverse(PyNs3DsrDsrOptionPad1 *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3DsrDsrOptionPad1__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionPad1__tp_dealloc(PyNs3DsrDsrOptionPad1 *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionPad1__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionPad1__tp_richcompare (PyNs3DsrDsrOptionPad1 *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionPad1 *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionPad1_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionPad1_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionPad1",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionPad1),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionPad1__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionPad1(arg0)\nDsrOptionPad1()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionPad1__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionPad1__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionPad1__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionPad1_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionPad1, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionPad1__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3DsrDsrOptionPadn__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3DsrDsrOptionPadn *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionPadn__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionPadn__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionPadn__PythonHelper::_wrap_DoInitialize(PyNs3DsrDsrOptionPadn *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionPadn__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionPadn__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionPadn__PythonHelper::_wrap_NotifyNewAggregate(PyNs3DsrDsrOptionPadn *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionPadn__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionPadn__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionPadn__PythonHelper::_wrap_DoDispose(PyNs3DsrDsrOptionPadn *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionPadn__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionPadn__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint8_t
PyNs3DsrDsrOptionPadn__PythonHelper::GetOptionNumber() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionPadn *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetOptionNumber"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionPadn::GetOptionNumber();
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionPadn* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionPadn* >(m_pyself)->obj = const_cast< ns3::dsr::DsrOptionPadn* >((const ns3::dsr::DsrOptionPadn*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetOptionNumber", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionPadn* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionPadn::GetOptionNumber();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionPadn* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionPadn::GetOptionNumber();
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionPadn* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionPadn::GetOptionNumber();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionPadn* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint8_t
PyNs3DsrDsrOptionPadn__PythonHelper::Process(ns3::Ptr< ns3::Packet > packet, ns3::Ptr< ns3::Packet > dsrP, ns3::Ipv4Address ipv4Address, ns3::Ipv4Address source, ns3::Ipv4Header const & ipv4Header, uint8_t protocol, bool & isPromisc, ns3::Ipv4Address promiscSource)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionPadn *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Packet *py_Packet2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Header *py_Ipv4Header;
    PyNs3Ipv4Address *py_Ipv4Address3;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Process"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionPadn::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionPadn* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionPadn* >(m_pyself)->obj = (ns3::dsr::DsrOptionPadn*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Packet2 = NULL;
    } else {
        py_Packet2 = (PyNs3Packet *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Packet2);
    }
    
    if (py_Packet2 == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))), &PyNs3Packet_Type);
        py_Packet2 = PyObject_New(PyNs3Packet, wrapper_type2);
    
        py_Packet2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))->Ref();
        py_Packet2->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP));
        PyNs3Empty_wrapper_registry[(void *) py_Packet2->obj] = (PyObject *) py_Packet2;
    }
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(ipv4Address);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(source);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_Ipv4Header = PyObject_GC_New(PyNs3Ipv4Header, &PyNs3Ipv4Header_Type);
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Header->obj = new ns3::Ipv4Header(ipv4Header);
    PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4Header->obj] = (PyObject *) py_Ipv4Header;
    py_Ipv4Address3 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address3->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address3->obj = new ns3::Ipv4Address(promiscSource);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address3->obj] = (PyObject *) py_Ipv4Address3;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Process", (char *) "NNNNNiNN", py_Packet, py_Packet2, py_Ipv4Address, py_Ipv4Address2, py_Ipv4Header, (int) protocol, PyBool_FromLong(isPromisc), py_Ipv4Address3);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionPadn* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionPadn::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionPadn* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionPadn::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionPadn* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionPadn::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionPadn* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Ipv4Route >
PyNs3DsrDsrOptionPadn__PythonHelper::SetRoute(ns3::Ipv4Address nextHop, ns3::Ipv4Address srcAddress)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptions *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Ipv4Route > retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Route *tmp_Ipv4Route;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetRoute"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = (ns3::dsr::DsrOptions*) this;
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(nextHop);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(srcAddress);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetRoute", (char *) "NN", py_Ipv4Address, py_Ipv4Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Route_Type, &tmp_Ipv4Route)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Ipv4Route  > (tmp_Ipv4Route->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3DsrDsrOptionPadn__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3DsrDsrOptionPadn__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionPadn__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionPadn__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionPadn__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}
static PyObject* _wrap_PyNs3DsrDsrOptionPadn__get_OPT_NUMBER(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)ns3::dsr::DsrOptionPadn::OPT_NUMBER);
    return py_retval;
}
static PyGetSetDef Ns3DsrDsrOptionPadnMeta__getsets[] = {
    {
        (char*) "OPT_NUMBER", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrOptionPadn__get_OPT_NUMBER, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyNs3DsrDsrOptionPadnMeta_Type = {
        PyVarObject_HEAD_INIT(NULL, 0)
	(char *) "Ns3DsrDsrOptionPadnMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	Ns3DsrDsrOptionPadnMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};



static int
_wrap_PyNs3DsrDsrOptionPadn__tp_init__0(PyNs3DsrDsrOptionPadn *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionPadn *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionPadn_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptionPadn_Type)
    {
        self->obj = new PyNs3DsrDsrOptionPadn__PythonHelper(*((PyNs3DsrDsrOptionPadn *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptionPadn__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dsr::DsrOptionPadn(*((PyNs3DsrDsrOptionPadn *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionPadn__tp_init__1(PyNs3DsrDsrOptionPadn *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptionPadn_Type)
    {
        self->obj = new PyNs3DsrDsrOptionPadn__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptionPadn__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dsr::DsrOptionPadn();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3DsrDsrOptionPadn__tp_init(PyNs3DsrDsrOptionPadn *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionPadn__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionPadn__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionPadn_Process(PyNs3DsrDsrOptionPadn *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Packet *dsrP;
    ns3::Packet *dsrP_ptr;
    PyNs3Ipv4Address *ipv4Address;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Header *ipv4Header;
    int protocol;
    bool isPromisc;
    PyObject *py_isPromisc;
    PyNs3Ipv4Address *promiscSource;
    PyNs3DsrDsrOptionPadn__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionPadn__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "dsrP", "ipv4Address", "source", "ipv4Header", "protocol", "isPromisc", "promiscSource", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!O!iOO!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Packet_Type, &dsrP, &PyNs3Ipv4Address_Type, &ipv4Address, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Header_Type, &ipv4Header, &protocol, &py_isPromisc, &PyNs3Ipv4Address_Type, &promiscSource)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    dsrP_ptr = (dsrP ? dsrP->obj : NULL);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    isPromisc = PyObject_IsTrue(py_isPromisc);
    retval = (helper_class == NULL)? (self->obj->Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj)) : (self->obj->ns3::dsr::DsrOptionPadn::Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj));
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionPadn_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionPadn::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionPadn_GetOptionNumber(PyNs3DsrDsrOptionPadn *self)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3DsrDsrOptionPadn__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionPadn__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetOptionNumber()) : (self->obj->ns3::dsr::DsrOptionPadn::GetOptionNumber());
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionPadn__copy__(PyNs3DsrDsrOptionPadn *self)
{

    PyNs3DsrDsrOptionPadn *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionPadn, &PyNs3DsrDsrOptionPadn_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::dsr::DsrOptionPadn(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionPadn_methods[] = {
    {(char *) "Process", (PyCFunction) _wrap_PyNs3DsrDsrOptionPadn_Process, METH_KEYWORDS|METH_VARARGS, "Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: dsrP: ns3::Ptr< ns3::Packet >\ntype: ipv4Address: ns3::Ipv4Address\ntype: source: ns3::Ipv4Address\ntype: ipv4Header: ns3::Ipv4Header const &\ntype: protocol: uint8_t\ntype: isPromisc: bool &\ntype: promiscSource: ns3::Ipv4Address" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionPadn_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetOptionNumber", (PyCFunction) _wrap_PyNs3DsrDsrOptionPadn_GetOptionNumber, METH_NOARGS, "GetOptionNumber()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3DsrDsrOptionPadn__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3DsrDsrOptionPadn__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3DsrDsrOptionPadn__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3DsrDsrOptionPadn__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionPadn__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionPadn__tp_clear(PyNs3DsrDsrOptionPadn *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dsr::DsrOptionPadn *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DsrDsrOptionPadn__tp_traverse(PyNs3DsrDsrOptionPadn *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3DsrDsrOptionPadn__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionPadn__tp_dealloc(PyNs3DsrDsrOptionPadn *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionPadn__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionPadn__tp_richcompare (PyNs3DsrDsrOptionPadn *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionPadn *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionPadn_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionPadn_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionPadn",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionPadn),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionPadn__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionPadn(arg0)\nDsrOptionPadn()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionPadn__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionPadn__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionPadn__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionPadn_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionPadn, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionPadn__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3DsrDsrOptionRerr__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3DsrDsrOptionRerr *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRerr__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionRerr__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionRerr__PythonHelper::_wrap_DoInitialize(PyNs3DsrDsrOptionRerr *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRerr__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionRerr__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionRerr__PythonHelper::_wrap_NotifyNewAggregate(PyNs3DsrDsrOptionRerr *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRerr__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionRerr__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionRerr__PythonHelper::_wrap_DoDispose(PyNs3DsrDsrOptionRerr *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRerr__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionRerr__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

ns3::TypeId
PyNs3DsrDsrOptionRerr__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionRerr *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRerr::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj = const_cast< ns3::dsr::DsrOptionRerr* >((const ns3::dsr::DsrOptionRerr*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRerr::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRerr::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint8_t
PyNs3DsrDsrOptionRerr__PythonHelper::GetOptionNumber() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionRerr *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetOptionNumber"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRerr::GetOptionNumber();
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj = const_cast< ns3::dsr::DsrOptionRerr* >((const ns3::dsr::DsrOptionRerr*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetOptionNumber", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRerr::GetOptionNumber();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRerr::GetOptionNumber();
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRerr::GetOptionNumber();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint8_t
PyNs3DsrDsrOptionRerr__PythonHelper::Process(ns3::Ptr< ns3::Packet > packet, ns3::Ptr< ns3::Packet > dsrP, ns3::Ipv4Address ipv4Address, ns3::Ipv4Address source, ns3::Ipv4Header const & ipv4Header, uint8_t protocol, bool & isPromisc, ns3::Ipv4Address promiscSource)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionRerr *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Packet *py_Packet2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Header *py_Ipv4Header;
    PyNs3Ipv4Address *py_Ipv4Address3;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Process"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRerr::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj = (ns3::dsr::DsrOptionRerr*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Packet2 = NULL;
    } else {
        py_Packet2 = (PyNs3Packet *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Packet2);
    }
    
    if (py_Packet2 == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))), &PyNs3Packet_Type);
        py_Packet2 = PyObject_New(PyNs3Packet, wrapper_type2);
    
        py_Packet2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))->Ref();
        py_Packet2->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP));
        PyNs3Empty_wrapper_registry[(void *) py_Packet2->obj] = (PyObject *) py_Packet2;
    }
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(ipv4Address);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(source);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_Ipv4Header = PyObject_GC_New(PyNs3Ipv4Header, &PyNs3Ipv4Header_Type);
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Header->obj = new ns3::Ipv4Header(ipv4Header);
    PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4Header->obj] = (PyObject *) py_Ipv4Header;
    py_Ipv4Address3 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address3->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address3->obj = new ns3::Ipv4Address(promiscSource);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address3->obj] = (PyObject *) py_Ipv4Address3;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Process", (char *) "NNNNNiNN", py_Packet, py_Packet2, py_Ipv4Address, py_Ipv4Address2, py_Ipv4Header, (int) protocol, PyBool_FromLong(isPromisc), py_Ipv4Address3);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRerr::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRerr::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRerr::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionRerr* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Ipv4Route >
PyNs3DsrDsrOptionRerr__PythonHelper::SetRoute(ns3::Ipv4Address nextHop, ns3::Ipv4Address srcAddress)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptions *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Ipv4Route > retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Route *tmp_Ipv4Route;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetRoute"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = (ns3::dsr::DsrOptions*) this;
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(nextHop);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(srcAddress);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetRoute", (char *) "NN", py_Ipv4Address, py_Ipv4Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Route_Type, &tmp_Ipv4Route)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Ipv4Route  > (tmp_Ipv4Route->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3DsrDsrOptionRerr__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionRerr__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionRerr__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionRerr__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}
static PyObject* _wrap_PyNs3DsrDsrOptionRerr__get_OPT_NUMBER(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)ns3::dsr::DsrOptionRerr::OPT_NUMBER);
    return py_retval;
}
static PyGetSetDef Ns3DsrDsrOptionRerrMeta__getsets[] = {
    {
        (char*) "OPT_NUMBER", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrOptionRerr__get_OPT_NUMBER, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyNs3DsrDsrOptionRerrMeta_Type = {
        PyVarObject_HEAD_INIT(NULL, 0)
	(char *) "Ns3DsrDsrOptionRerrMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	Ns3DsrDsrOptionRerrMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};



static int
_wrap_PyNs3DsrDsrOptionRerr__tp_init__0(PyNs3DsrDsrOptionRerr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionRerr *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionRerr_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptionRerr_Type)
    {
        self->obj = new PyNs3DsrDsrOptionRerr__PythonHelper(*((PyNs3DsrDsrOptionRerr *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptionRerr__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dsr::DsrOptionRerr(*((PyNs3DsrDsrOptionRerr *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionRerr__tp_init__1(PyNs3DsrDsrOptionRerr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptionRerr_Type)
    {
        self->obj = new PyNs3DsrDsrOptionRerr__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptionRerr__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dsr::DsrOptionRerr();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3DsrDsrOptionRerr__tp_init(PyNs3DsrDsrOptionRerr *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionRerr__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionRerr__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerr_Process(PyNs3DsrDsrOptionRerr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Packet *dsrP;
    ns3::Packet *dsrP_ptr;
    PyNs3Ipv4Address *ipv4Address;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Header *ipv4Header;
    int protocol;
    bool isPromisc;
    PyObject *py_isPromisc;
    PyNs3Ipv4Address *promiscSource;
    PyNs3DsrDsrOptionRerr__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionRerr__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "dsrP", "ipv4Address", "source", "ipv4Header", "protocol", "isPromisc", "promiscSource", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!O!iOO!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Packet_Type, &dsrP, &PyNs3Ipv4Address_Type, &ipv4Address, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Header_Type, &ipv4Header, &protocol, &py_isPromisc, &PyNs3Ipv4Address_Type, &promiscSource)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    dsrP_ptr = (dsrP ? dsrP->obj : NULL);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    isPromisc = PyObject_IsTrue(py_isPromisc);
    retval = (helper_class == NULL)? (self->obj->Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj)) : (self->obj->ns3::dsr::DsrOptionRerr::Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj));
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerr_DoSendError(PyNs3DsrDsrOptionRerr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *p;
    ns3::Packet *p_ptr;
    PyNs3DsrDsrOptionRerrUnreachHeader *rerr;
    unsigned int rerrSize;
    PyNs3Ipv4Address *ipv4Address;
    int protocol;
    const char *keywords[] = {"p", "rerr", "rerrSize", "ipv4Address", "protocol", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!IO!i", (char **) keywords, &PyNs3Packet_Type, &p, &PyNs3DsrDsrOptionRerrUnreachHeader_Type, &rerr, &rerrSize, &PyNs3Ipv4Address_Type, &ipv4Address, &protocol)) {
        return NULL;
    }
    p_ptr = (p ? p->obj : NULL);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DoSendError(ns3::Ptr< ns3::Packet  > (p_ptr), *((PyNs3DsrDsrOptionRerrUnreachHeader *) rerr)->obj, rerrSize, *((PyNs3Ipv4Address *) ipv4Address)->obj, protocol);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerr_GetOptionNumber(PyNs3DsrDsrOptionRerr *self)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3DsrDsrOptionRerr__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionRerr__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetOptionNumber()) : (self->obj->ns3::dsr::DsrOptionRerr::GetOptionNumber());
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerr_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionRerr::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRerr_GetInstanceTypeId(PyNs3DsrDsrOptionRerr *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRerr__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionRerr__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::dsr::DsrOptionRerr::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionRerr__copy__(PyNs3DsrDsrOptionRerr *self)
{

    PyNs3DsrDsrOptionRerr *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionRerr, &PyNs3DsrDsrOptionRerr_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::dsr::DsrOptionRerr(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionRerr_methods[] = {
    {(char *) "Process", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerr_Process, METH_KEYWORDS|METH_VARARGS, "Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: dsrP: ns3::Ptr< ns3::Packet >\ntype: ipv4Address: ns3::Ipv4Address\ntype: source: ns3::Ipv4Address\ntype: ipv4Header: ns3::Ipv4Header const &\ntype: protocol: uint8_t\ntype: isPromisc: bool &\ntype: promiscSource: ns3::Ipv4Address" },
    {(char *) "DoSendError", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerr_DoSendError, METH_KEYWORDS|METH_VARARGS, "DoSendError(p, rerr, rerrSize, ipv4Address, protocol)\n\ntype: p: ns3::Ptr< ns3::Packet >\ntype: rerr: ns3::dsr::DsrOptionRerrUnreachHeader &\ntype: rerrSize: uint32_t\ntype: ipv4Address: ns3::Ipv4Address\ntype: protocol: uint8_t" },
    {(char *) "GetOptionNumber", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerr_GetOptionNumber, METH_NOARGS, "GetOptionNumber()\n\n" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerr_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerr_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3DsrDsrOptionRerr__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3DsrDsrOptionRerr__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3DsrDsrOptionRerr__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3DsrDsrOptionRerr__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionRerr__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionRerr__tp_clear(PyNs3DsrDsrOptionRerr *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dsr::DsrOptionRerr *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DsrDsrOptionRerr__tp_traverse(PyNs3DsrDsrOptionRerr *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3DsrDsrOptionRerr__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionRerr__tp_dealloc(PyNs3DsrDsrOptionRerr *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionRerr__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionRerr__tp_richcompare (PyNs3DsrDsrOptionRerr *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionRerr *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionRerr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionRerr_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionRerr",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionRerr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionRerr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionRerr(arg0)\nDsrOptionRerr()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionRerr__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionRerr__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionRerr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionRerr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionRerr, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionRerr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3DsrDsrOptionRrep__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3DsrDsrOptionRrep *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRrep__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionRrep__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionRrep__PythonHelper::_wrap_DoInitialize(PyNs3DsrDsrOptionRrep *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRrep__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionRrep__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionRrep__PythonHelper::_wrap_NotifyNewAggregate(PyNs3DsrDsrOptionRrep *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRrep__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionRrep__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionRrep__PythonHelper::_wrap_DoDispose(PyNs3DsrDsrOptionRrep *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRrep__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionRrep__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

ns3::TypeId
PyNs3DsrDsrOptionRrep__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionRrep *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRrep::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj = const_cast< ns3::dsr::DsrOptionRrep* >((const ns3::dsr::DsrOptionRrep*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRrep::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRrep::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint8_t
PyNs3DsrDsrOptionRrep__PythonHelper::GetOptionNumber() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionRrep *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetOptionNumber"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRrep::GetOptionNumber();
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj = const_cast< ns3::dsr::DsrOptionRrep* >((const ns3::dsr::DsrOptionRrep*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetOptionNumber", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRrep::GetOptionNumber();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRrep::GetOptionNumber();
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRrep::GetOptionNumber();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint8_t
PyNs3DsrDsrOptionRrep__PythonHelper::Process(ns3::Ptr< ns3::Packet > packet, ns3::Ptr< ns3::Packet > dsrP, ns3::Ipv4Address ipv4Address, ns3::Ipv4Address source, ns3::Ipv4Header const & ipv4Header, uint8_t protocol, bool & isPromisc, ns3::Ipv4Address promiscSource)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionRrep *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Packet *py_Packet2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Header *py_Ipv4Header;
    PyNs3Ipv4Address *py_Ipv4Address3;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Process"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRrep::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj = (ns3::dsr::DsrOptionRrep*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Packet2 = NULL;
    } else {
        py_Packet2 = (PyNs3Packet *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Packet2);
    }
    
    if (py_Packet2 == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))), &PyNs3Packet_Type);
        py_Packet2 = PyObject_New(PyNs3Packet, wrapper_type2);
    
        py_Packet2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))->Ref();
        py_Packet2->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP));
        PyNs3Empty_wrapper_registry[(void *) py_Packet2->obj] = (PyObject *) py_Packet2;
    }
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(ipv4Address);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(source);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_Ipv4Header = PyObject_GC_New(PyNs3Ipv4Header, &PyNs3Ipv4Header_Type);
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Header->obj = new ns3::Ipv4Header(ipv4Header);
    PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4Header->obj] = (PyObject *) py_Ipv4Header;
    py_Ipv4Address3 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address3->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address3->obj = new ns3::Ipv4Address(promiscSource);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address3->obj] = (PyObject *) py_Ipv4Address3;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Process", (char *) "NNNNNiNN", py_Packet, py_Packet2, py_Ipv4Address, py_Ipv4Address2, py_Ipv4Header, (int) protocol, PyBool_FromLong(isPromisc), py_Ipv4Address3);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRrep::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRrep::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRrep::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionRrep* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Ipv4Route >
PyNs3DsrDsrOptionRrep__PythonHelper::SetRoute(ns3::Ipv4Address nextHop, ns3::Ipv4Address srcAddress)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptions *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Ipv4Route > retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Route *tmp_Ipv4Route;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetRoute"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = (ns3::dsr::DsrOptions*) this;
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(nextHop);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(srcAddress);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetRoute", (char *) "NN", py_Ipv4Address, py_Ipv4Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Route_Type, &tmp_Ipv4Route)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Ipv4Route  > (tmp_Ipv4Route->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3DsrDsrOptionRrep__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionRrep__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionRrep__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionRrep__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}
static PyObject* _wrap_PyNs3DsrDsrOptionRrep__get_OPT_NUMBER(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)ns3::dsr::DsrOptionRrep::OPT_NUMBER);
    return py_retval;
}
static PyGetSetDef Ns3DsrDsrOptionRrepMeta__getsets[] = {
    {
        (char*) "OPT_NUMBER", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrOptionRrep__get_OPT_NUMBER, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyNs3DsrDsrOptionRrepMeta_Type = {
        PyVarObject_HEAD_INIT(NULL, 0)
	(char *) "Ns3DsrDsrOptionRrepMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	Ns3DsrDsrOptionRrepMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};



static int
_wrap_PyNs3DsrDsrOptionRrep__tp_init__0(PyNs3DsrDsrOptionRrep *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionRrep *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionRrep_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptionRrep_Type)
    {
        self->obj = new PyNs3DsrDsrOptionRrep__PythonHelper(*((PyNs3DsrDsrOptionRrep *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptionRrep__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dsr::DsrOptionRrep(*((PyNs3DsrDsrOptionRrep *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionRrep__tp_init__1(PyNs3DsrDsrOptionRrep *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptionRrep_Type)
    {
        self->obj = new PyNs3DsrDsrOptionRrep__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptionRrep__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dsr::DsrOptionRrep();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3DsrDsrOptionRrep__tp_init(PyNs3DsrDsrOptionRrep *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionRrep__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionRrep__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRrep_Process(PyNs3DsrDsrOptionRrep *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Packet *dsrP;
    ns3::Packet *dsrP_ptr;
    PyNs3Ipv4Address *ipv4Address;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Header *ipv4Header;
    int protocol;
    bool isPromisc;
    PyObject *py_isPromisc;
    PyNs3Ipv4Address *promiscSource;
    PyNs3DsrDsrOptionRrep__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionRrep__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "dsrP", "ipv4Address", "source", "ipv4Header", "protocol", "isPromisc", "promiscSource", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!O!iOO!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Packet_Type, &dsrP, &PyNs3Ipv4Address_Type, &ipv4Address, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Header_Type, &ipv4Header, &protocol, &py_isPromisc, &PyNs3Ipv4Address_Type, &promiscSource)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    dsrP_ptr = (dsrP ? dsrP->obj : NULL);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    isPromisc = PyObject_IsTrue(py_isPromisc);
    retval = (helper_class == NULL)? (self->obj->Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj)) : (self->obj->ns3::dsr::DsrOptionRrep::Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj));
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRrep_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionRrep::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRrep_GetOptionNumber(PyNs3DsrDsrOptionRrep *self)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3DsrDsrOptionRrep__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionRrep__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetOptionNumber()) : (self->obj->ns3::dsr::DsrOptionRrep::GetOptionNumber());
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRrep_GetInstanceTypeId(PyNs3DsrDsrOptionRrep *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRrep__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionRrep__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::dsr::DsrOptionRrep::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionRrep__copy__(PyNs3DsrDsrOptionRrep *self)
{

    PyNs3DsrDsrOptionRrep *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionRrep, &PyNs3DsrDsrOptionRrep_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::dsr::DsrOptionRrep(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionRrep_methods[] = {
    {(char *) "Process", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrep_Process, METH_KEYWORDS|METH_VARARGS, "Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: dsrP: ns3::Ptr< ns3::Packet >\ntype: ipv4Address: ns3::Ipv4Address\ntype: source: ns3::Ipv4Address\ntype: ipv4Header: ns3::Ipv4Header const &\ntype: protocol: uint8_t\ntype: isPromisc: bool &\ntype: promiscSource: ns3::Ipv4Address" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrep_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetOptionNumber", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrep_GetOptionNumber, METH_NOARGS, "GetOptionNumber()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrep_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3DsrDsrOptionRrep__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3DsrDsrOptionRrep__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3DsrDsrOptionRrep__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3DsrDsrOptionRrep__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionRrep__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionRrep__tp_clear(PyNs3DsrDsrOptionRrep *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dsr::DsrOptionRrep *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DsrDsrOptionRrep__tp_traverse(PyNs3DsrDsrOptionRrep *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3DsrDsrOptionRrep__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionRrep__tp_dealloc(PyNs3DsrDsrOptionRrep *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionRrep__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionRrep__tp_richcompare (PyNs3DsrDsrOptionRrep *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionRrep *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionRrep_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionRrep_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionRrep",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionRrep),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionRrep__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionRrep(arg0)\nDsrOptionRrep()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionRrep__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionRrep__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionRrep__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionRrep_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionRrep, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionRrep__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3DsrDsrOptionRreq__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3DsrDsrOptionRreq *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRreq__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionRreq__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionRreq__PythonHelper::_wrap_DoInitialize(PyNs3DsrDsrOptionRreq *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRreq__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionRreq__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionRreq__PythonHelper::_wrap_NotifyNewAggregate(PyNs3DsrDsrOptionRreq *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRreq__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionRreq__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionRreq__PythonHelper::_wrap_DoDispose(PyNs3DsrDsrOptionRreq *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRreq__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionRreq__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

ns3::TypeId
PyNs3DsrDsrOptionRreq__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionRreq *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRreq::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj = const_cast< ns3::dsr::DsrOptionRreq* >((const ns3::dsr::DsrOptionRreq*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRreq::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRreq::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint8_t
PyNs3DsrDsrOptionRreq__PythonHelper::GetOptionNumber() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionRreq *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetOptionNumber"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRreq::GetOptionNumber();
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj = const_cast< ns3::dsr::DsrOptionRreq* >((const ns3::dsr::DsrOptionRreq*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetOptionNumber", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRreq::GetOptionNumber();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRreq::GetOptionNumber();
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRreq::GetOptionNumber();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint8_t
PyNs3DsrDsrOptionRreq__PythonHelper::Process(ns3::Ptr< ns3::Packet > packet, ns3::Ptr< ns3::Packet > dsrP, ns3::Ipv4Address ipv4Address, ns3::Ipv4Address source, ns3::Ipv4Header const & ipv4Header, uint8_t protocol, bool & isPromisc, ns3::Ipv4Address promiscSource)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionRreq *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Packet *py_Packet2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Header *py_Ipv4Header;
    PyNs3Ipv4Address *py_Ipv4Address3;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Process"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRreq::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj = (ns3::dsr::DsrOptionRreq*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Packet2 = NULL;
    } else {
        py_Packet2 = (PyNs3Packet *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Packet2);
    }
    
    if (py_Packet2 == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))), &PyNs3Packet_Type);
        py_Packet2 = PyObject_New(PyNs3Packet, wrapper_type2);
    
        py_Packet2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))->Ref();
        py_Packet2->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP));
        PyNs3Empty_wrapper_registry[(void *) py_Packet2->obj] = (PyObject *) py_Packet2;
    }
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(ipv4Address);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(source);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_Ipv4Header = PyObject_GC_New(PyNs3Ipv4Header, &PyNs3Ipv4Header_Type);
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Header->obj = new ns3::Ipv4Header(ipv4Header);
    PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4Header->obj] = (PyObject *) py_Ipv4Header;
    py_Ipv4Address3 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address3->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address3->obj = new ns3::Ipv4Address(promiscSource);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address3->obj] = (PyObject *) py_Ipv4Address3;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Process", (char *) "NNNNNiNN", py_Packet, py_Packet2, py_Ipv4Address, py_Ipv4Address2, py_Ipv4Header, (int) protocol, PyBool_FromLong(isPromisc), py_Ipv4Address3);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRreq::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRreq::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionRreq::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionRreq* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Ipv4Route >
PyNs3DsrDsrOptionRreq__PythonHelper::SetRoute(ns3::Ipv4Address nextHop, ns3::Ipv4Address srcAddress)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptions *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Ipv4Route > retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Route *tmp_Ipv4Route;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetRoute"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = (ns3::dsr::DsrOptions*) this;
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(nextHop);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(srcAddress);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetRoute", (char *) "NN", py_Ipv4Address, py_Ipv4Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Route_Type, &tmp_Ipv4Route)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Ipv4Route  > (tmp_Ipv4Route->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3DsrDsrOptionRreq__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionRreq__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionRreq__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionRreq__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}
static PyObject* _wrap_PyNs3DsrDsrOptionRreq__get_OPT_NUMBER(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)ns3::dsr::DsrOptionRreq::OPT_NUMBER);
    return py_retval;
}
static PyGetSetDef Ns3DsrDsrOptionRreqMeta__getsets[] = {
    {
        (char*) "OPT_NUMBER", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrOptionRreq__get_OPT_NUMBER, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyNs3DsrDsrOptionRreqMeta_Type = {
        PyVarObject_HEAD_INIT(NULL, 0)
	(char *) "Ns3DsrDsrOptionRreqMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	Ns3DsrDsrOptionRreqMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};



static int
_wrap_PyNs3DsrDsrOptionRreq__tp_init__0(PyNs3DsrDsrOptionRreq *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionRreq *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionRreq_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptionRreq_Type)
    {
        self->obj = new PyNs3DsrDsrOptionRreq__PythonHelper(*((PyNs3DsrDsrOptionRreq *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptionRreq__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dsr::DsrOptionRreq(*((PyNs3DsrDsrOptionRreq *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionRreq__tp_init__1(PyNs3DsrDsrOptionRreq *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptionRreq_Type)
    {
        self->obj = new PyNs3DsrDsrOptionRreq__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptionRreq__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dsr::DsrOptionRreq();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3DsrDsrOptionRreq__tp_init(PyNs3DsrDsrOptionRreq *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionRreq__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionRreq__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreq_Process(PyNs3DsrDsrOptionRreq *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Packet *dsrP;
    ns3::Packet *dsrP_ptr;
    PyNs3Ipv4Address *ipv4Address;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Header *ipv4Header;
    int protocol;
    bool isPromisc;
    PyObject *py_isPromisc;
    PyNs3Ipv4Address *promiscSource;
    PyNs3DsrDsrOptionRreq__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionRreq__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "dsrP", "ipv4Address", "source", "ipv4Header", "protocol", "isPromisc", "promiscSource", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!O!iOO!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Packet_Type, &dsrP, &PyNs3Ipv4Address_Type, &ipv4Address, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Header_Type, &ipv4Header, &protocol, &py_isPromisc, &PyNs3Ipv4Address_Type, &promiscSource)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    dsrP_ptr = (dsrP ? dsrP->obj : NULL);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    isPromisc = PyObject_IsTrue(py_isPromisc);
    retval = (helper_class == NULL)? (self->obj->Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj)) : (self->obj->ns3::dsr::DsrOptionRreq::Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj));
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreq_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionRreq::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreq_GetOptionNumber(PyNs3DsrDsrOptionRreq *self)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3DsrDsrOptionRreq__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionRreq__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetOptionNumber()) : (self->obj->ns3::dsr::DsrOptionRreq::GetOptionNumber());
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionRreq_GetInstanceTypeId(PyNs3DsrDsrOptionRreq *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionRreq__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionRreq__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::dsr::DsrOptionRreq::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionRreq__copy__(PyNs3DsrDsrOptionRreq *self)
{

    PyNs3DsrDsrOptionRreq *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionRreq, &PyNs3DsrDsrOptionRreq_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::dsr::DsrOptionRreq(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionRreq_methods[] = {
    {(char *) "Process", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreq_Process, METH_KEYWORDS|METH_VARARGS, "Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: dsrP: ns3::Ptr< ns3::Packet >\ntype: ipv4Address: ns3::Ipv4Address\ntype: source: ns3::Ipv4Address\ntype: ipv4Header: ns3::Ipv4Header const &\ntype: protocol: uint8_t\ntype: isPromisc: bool &\ntype: promiscSource: ns3::Ipv4Address" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreq_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetOptionNumber", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreq_GetOptionNumber, METH_NOARGS, "GetOptionNumber()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreq_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3DsrDsrOptionRreq__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3DsrDsrOptionRreq__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3DsrDsrOptionRreq__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3DsrDsrOptionRreq__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionRreq__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionRreq__tp_clear(PyNs3DsrDsrOptionRreq *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dsr::DsrOptionRreq *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DsrDsrOptionRreq__tp_traverse(PyNs3DsrDsrOptionRreq *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3DsrDsrOptionRreq__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionRreq__tp_dealloc(PyNs3DsrDsrOptionRreq *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionRreq__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionRreq__tp_richcompare (PyNs3DsrDsrOptionRreq *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionRreq *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionRreq_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionRreq_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionRreq",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionRreq),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionRreq__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionRreq(arg0)\nDsrOptionRreq()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionRreq__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionRreq__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionRreq__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionRreq_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionRreq, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionRreq__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3DsrDsrOptionSR__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3DsrDsrOptionSR *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionSR__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionSR__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionSR__PythonHelper::_wrap_DoInitialize(PyNs3DsrDsrOptionSR *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionSR__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionSR__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionSR__PythonHelper::_wrap_NotifyNewAggregate(PyNs3DsrDsrOptionSR *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionSR__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionSR__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DsrDsrOptionSR__PythonHelper::_wrap_DoDispose(PyNs3DsrDsrOptionSR *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionSR__PythonHelper *helper = dynamic_cast< PyNs3DsrDsrOptionSR__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

ns3::TypeId
PyNs3DsrDsrOptionSR__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionSR *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionSR::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj = const_cast< ns3::dsr::DsrOptionSR* >((const ns3::dsr::DsrOptionSR*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionSR::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionSR::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint8_t
PyNs3DsrDsrOptionSR__PythonHelper::GetOptionNumber() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionSR *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetOptionNumber"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionSR::GetOptionNumber();
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj = const_cast< ns3::dsr::DsrOptionSR* >((const ns3::dsr::DsrOptionSR*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetOptionNumber", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionSR::GetOptionNumber();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionSR::GetOptionNumber();
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionSR::GetOptionNumber();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint8_t
PyNs3DsrDsrOptionSR__PythonHelper::Process(ns3::Ptr< ns3::Packet > packet, ns3::Ptr< ns3::Packet > dsrP, ns3::Ipv4Address ipv4Address, ns3::Ipv4Address source, ns3::Ipv4Header const & ipv4Header, uint8_t protocol, bool & isPromisc, ns3::Ipv4Address promiscSource)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptionSR *self_obj_before;
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Packet *py_Packet2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Header *py_Ipv4Header;
    PyNs3Ipv4Address *py_Ipv4Address3;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Process"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionSR::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj = (ns3::dsr::DsrOptionSR*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Packet2 = NULL;
    } else {
        py_Packet2 = (PyNs3Packet *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Packet2);
    }
    
    if (py_Packet2 == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))), &PyNs3Packet_Type);
        py_Packet2 = PyObject_New(PyNs3Packet, wrapper_type2);
    
        py_Packet2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP))->Ref();
        py_Packet2->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (dsrP));
        PyNs3Empty_wrapper_registry[(void *) py_Packet2->obj] = (PyObject *) py_Packet2;
    }
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(ipv4Address);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(source);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_Ipv4Header = PyObject_GC_New(PyNs3Ipv4Header, &PyNs3Ipv4Header_Type);
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->inst_dict = NULL;
    py_Ipv4Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Header->obj = new ns3::Ipv4Header(ipv4Header);
    PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4Header->obj] = (PyObject *) py_Ipv4Header;
    py_Ipv4Address3 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address3->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address3->obj = new ns3::Ipv4Address(promiscSource);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address3->obj] = (PyObject *) py_Ipv4Address3;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Process", (char *) "NNNNNiNN", py_Packet, py_Packet2, py_Ipv4Address, py_Ipv4Address2, py_Ipv4Header, (int) protocol, PyBool_FromLong(isPromisc), py_Ipv4Address3);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionSR::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionSR::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptionSR::Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource);
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptionSR* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Ipv4Route >
PyNs3DsrDsrOptionSR__PythonHelper::SetRoute(ns3::Ipv4Address nextHop, ns3::Ipv4Address srcAddress)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::dsr::DsrOptions *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Ipv4Route > retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Ipv4Address *py_Ipv4Address2;
    PyNs3Ipv4Route *tmp_Ipv4Route;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetRoute"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    self_obj_before = reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = (ns3::dsr::DsrOptions*) this;
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(nextHop);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_Ipv4Address2 = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address2->obj = new ns3::Ipv4Address(srcAddress);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address2->obj] = (PyObject *) py_Ipv4Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetRoute", (char *) "NN", py_Ipv4Address, py_Ipv4Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Route_Type, &tmp_Ipv4Route)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::dsr::DsrOptions::SetRoute(nextHop, srcAddress);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Ipv4Route  > (tmp_Ipv4Route->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DsrDsrOptions* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3DsrDsrOptionSR__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionSR__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionSR__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DsrDsrOptionSR__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}
static PyObject* _wrap_PyNs3DsrDsrOptionSR__get_OPT_NUMBER(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)ns3::dsr::DsrOptionSR::OPT_NUMBER);
    return py_retval;
}
static PyGetSetDef Ns3DsrDsrOptionSRMeta__getsets[] = {
    {
        (char*) "OPT_NUMBER", /* attribute name */
        (getter) _wrap_PyNs3DsrDsrOptionSR__get_OPT_NUMBER, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyNs3DsrDsrOptionSRMeta_Type = {
        PyVarObject_HEAD_INIT(NULL, 0)
	(char *) "Ns3DsrDsrOptionSRMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	Ns3DsrDsrOptionSRMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};



static int
_wrap_PyNs3DsrDsrOptionSR__tp_init__0(PyNs3DsrDsrOptionSR *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrDsrOptionSR *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrDsrOptionSR_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptionSR_Type)
    {
        self->obj = new PyNs3DsrDsrOptionSR__PythonHelper(*((PyNs3DsrDsrOptionSR *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptionSR__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dsr::DsrOptionSR(*((PyNs3DsrDsrOptionSR *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3DsrDsrOptionSR__tp_init__1(PyNs3DsrDsrOptionSR *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3DsrDsrOptionSR_Type)
    {
        self->obj = new PyNs3DsrDsrOptionSR__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3DsrDsrOptionSR__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::dsr::DsrOptionSR();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3DsrDsrOptionSR__tp_init(PyNs3DsrDsrOptionSR *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrDsrOptionSR__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrDsrOptionSR__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSR_Process(PyNs3DsrDsrOptionSR *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Packet *dsrP;
    ns3::Packet *dsrP_ptr;
    PyNs3Ipv4Address *ipv4Address;
    PyNs3Ipv4Address *source;
    PyNs3Ipv4Header *ipv4Header;
    int protocol;
    bool isPromisc;
    PyObject *py_isPromisc;
    PyNs3Ipv4Address *promiscSource;
    PyNs3DsrDsrOptionSR__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionSR__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "dsrP", "ipv4Address", "source", "ipv4Header", "protocol", "isPromisc", "promiscSource", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!O!iOO!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Packet_Type, &dsrP, &PyNs3Ipv4Address_Type, &ipv4Address, &PyNs3Ipv4Address_Type, &source, &PyNs3Ipv4Header_Type, &ipv4Header, &protocol, &py_isPromisc, &PyNs3Ipv4Address_Type, &promiscSource)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    dsrP_ptr = (dsrP ? dsrP->obj : NULL);
    if (protocol > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    isPromisc = PyObject_IsTrue(py_isPromisc);
    retval = (helper_class == NULL)? (self->obj->Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj)) : (self->obj->ns3::dsr::DsrOptionSR::Process(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (dsrP_ptr), *((PyNs3Ipv4Address *) ipv4Address)->obj, *((PyNs3Ipv4Address *) source)->obj, *((PyNs3Ipv4Header *) ipv4Header)->obj, protocol, isPromisc, *((PyNs3Ipv4Address *) promiscSource)->obj));
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSR_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::dsr::DsrOptionSR::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSR_GetOptionNumber(PyNs3DsrDsrOptionSR *self)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3DsrDsrOptionSR__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionSR__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetOptionNumber()) : (self->obj->ns3::dsr::DsrOptionSR::GetOptionNumber());
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrDsrOptionSR_GetInstanceTypeId(PyNs3DsrDsrOptionSR *self)
{
    PyObject *py_retval;
    PyNs3DsrDsrOptionSR__PythonHelper *helper_class = dynamic_cast<PyNs3DsrDsrOptionSR__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::dsr::DsrOptionSR::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrDsrOptionSR__copy__(PyNs3DsrDsrOptionSR *self)
{

    PyNs3DsrDsrOptionSR *py_copy;
    py_copy = PyObject_GC_New(PyNs3DsrDsrOptionSR, &PyNs3DsrDsrOptionSR_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::dsr::DsrOptionSR(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrDsrOptionSR_methods[] = {
    {(char *) "Process", (PyCFunction) _wrap_PyNs3DsrDsrOptionSR_Process, METH_KEYWORDS|METH_VARARGS, "Process(packet, dsrP, ipv4Address, source, ipv4Header, protocol, isPromisc, promiscSource)\n\ntype: packet: ns3::Ptr< ns3::Packet >\ntype: dsrP: ns3::Ptr< ns3::Packet >\ntype: ipv4Address: ns3::Ipv4Address\ntype: source: ns3::Ipv4Address\ntype: ipv4Header: ns3::Ipv4Header const &\ntype: protocol: uint8_t\ntype: isPromisc: bool &\ntype: promiscSource: ns3::Ipv4Address" },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionSR_GetTypeId, METH_NOARGS|METH_STATIC, "GetTypeId()\n\n" },
    {(char *) "GetOptionNumber", (PyCFunction) _wrap_PyNs3DsrDsrOptionSR_GetOptionNumber, METH_NOARGS, "GetOptionNumber()\n\n" },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3DsrDsrOptionSR_GetInstanceTypeId, METH_NOARGS, "GetInstanceTypeId()\n\n" },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3DsrDsrOptionSR__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3DsrDsrOptionSR__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3DsrDsrOptionSR__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3DsrDsrOptionSR__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrDsrOptionSR__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DsrDsrOptionSR__tp_clear(PyNs3DsrDsrOptionSR *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::dsr::DsrOptionSR *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DsrDsrOptionSR__tp_traverse(PyNs3DsrDsrOptionSR *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3DsrDsrOptionSR__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3DsrDsrOptionSR__tp_dealloc(PyNs3DsrDsrOptionSR *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DsrDsrOptionSR__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrDsrOptionSR__tp_richcompare (PyNs3DsrDsrOptionSR *PYBINDGEN_UNUSED(self), PyNs3DsrDsrOptionSR *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrDsrOptionSR_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrDsrOptionSR_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.DsrOptionSR",            /* tp_name */
    sizeof(PyNs3DsrDsrOptionSR),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrDsrOptionSR__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    "DsrOptionSR(arg0)\nDsrOptionSR()",                        /* Documentation string */
    (traverseproc)PyNs3DsrDsrOptionSR__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DsrDsrOptionSR__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrDsrOptionSR__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrDsrOptionSR_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DsrDsrOptionSR, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrDsrOptionSR__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- containers --- */



static void
Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter__tp_clear(Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter__tp_traverse(Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt____tp_dealloc(Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt____tp_iter(Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__ *self)
{
    Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter, &Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::dsr::DsrErrorBuffEntry >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter__tp_iter(Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter__tp_iternext(Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::dsr::DsrErrorBuffEntry >::iterator iter;
    PyNs3DsrDsrErrorBuffEntry *py_DsrErrorBuffEntry;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_DsrErrorBuffEntry = PyObject_New(PyNs3DsrDsrErrorBuffEntry, &PyNs3DsrDsrErrorBuffEntry_Type);
    py_DsrErrorBuffEntry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_DsrErrorBuffEntry->obj = new ns3::dsr::DsrErrorBuffEntry((*iter));
    PyNs3DsrDsrErrorBuffEntry_wrapper_registry[(void *) py_DsrErrorBuffEntry->obj] = (PyObject *) py_DsrErrorBuffEntry;
    py_retval = Py_BuildValue((char *) "N", py_DsrErrorBuffEntry);
    return py_retval;
}

int _wrap_convert_py2c__ns3__dsr__DsrErrorBuffEntry(PyObject *value, ns3::dsr::DsrErrorBuffEntry *address)
{
    PyObject *py_retval;
    PyNs3DsrDsrErrorBuffEntry *tmp_DsrErrorBuffEntry;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3DsrDsrErrorBuffEntry_Type, &tmp_DsrErrorBuffEntry)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_DsrErrorBuffEntry->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__(PyObject *arg, std::vector< ns3::dsr::DsrErrorBuffEntry > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::dsr::DsrErrorBuffEntry item;
            if (!_wrap_convert_py2c__ns3__dsr__DsrErrorBuffEntry(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__ instance, or a list of ns3::dsr::DsrErrorBuffEntry");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt____tp_init(Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::dsr::DsrErrorBuffEntry >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter__tp_clear(Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter__tp_traverse(Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt____tp_dealloc(Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt____tp_iter(Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__ *self)
{
    Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter, &Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::dsr::DsrNetworkQueueEntry >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter__tp_iter(Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter__tp_iternext(Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::dsr::DsrNetworkQueueEntry >::iterator iter;
    PyNs3DsrDsrNetworkQueueEntry *py_DsrNetworkQueueEntry;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_DsrNetworkQueueEntry = PyObject_New(PyNs3DsrDsrNetworkQueueEntry, &PyNs3DsrDsrNetworkQueueEntry_Type);
    py_DsrNetworkQueueEntry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_DsrNetworkQueueEntry->obj = new ns3::dsr::DsrNetworkQueueEntry((*iter));
    PyNs3DsrDsrNetworkQueueEntry_wrapper_registry[(void *) py_DsrNetworkQueueEntry->obj] = (PyObject *) py_DsrNetworkQueueEntry;
    py_retval = Py_BuildValue((char *) "N", py_DsrNetworkQueueEntry);
    return py_retval;
}

int _wrap_convert_py2c__ns3__dsr__DsrNetworkQueueEntry(PyObject *value, ns3::dsr::DsrNetworkQueueEntry *address)
{
    PyObject *py_retval;
    PyNs3DsrDsrNetworkQueueEntry *tmp_DsrNetworkQueueEntry;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3DsrDsrNetworkQueueEntry_Type, &tmp_DsrNetworkQueueEntry)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_DsrNetworkQueueEntry->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__(PyObject *arg, std::vector< ns3::dsr::DsrNetworkQueueEntry > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::dsr::DsrNetworkQueueEntry item;
            if (!_wrap_convert_py2c__ns3__dsr__DsrNetworkQueueEntry(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__ instance, or a list of ns3::dsr::DsrNetworkQueueEntry");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt____tp_init(Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::dsr::DsrNetworkQueueEntry >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__Ipv4Address___gt__Iter__tp_clear(Pystd__vector__lt___ns3__Ipv4Address___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__Ipv4Address___gt__Iter__tp_traverse(Pystd__vector__lt___ns3__Ipv4Address___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__Ipv4Address___gt____tp_dealloc(Pystd__vector__lt___ns3__Ipv4Address___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__Ipv4Address___gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__Ipv4Address___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ipv4Address___gt____tp_iter(Pystd__vector__lt___ns3__Ipv4Address___gt__ *self)
{
    Pystd__vector__lt___ns3__Ipv4Address___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__Ipv4Address___gt__Iter, &Pystd__vector__lt___ns3__Ipv4Address___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::Ipv4Address >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ipv4Address___gt__Iter__tp_iter(Pystd__vector__lt___ns3__Ipv4Address___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__Ipv4Address___gt__Iter__tp_iternext(Pystd__vector__lt___ns3__Ipv4Address___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv4Address >::iterator iter;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address((*iter));
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv4Address);
    return py_retval;
}

int _wrap_convert_py2c__ns3__Ipv4Address(PyObject *value, ns3::Ipv4Address *address)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__(PyObject *arg, std::vector< ns3::Ipv4Address > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__Ipv4Address___gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__Ipv4Address___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::Ipv4Address item;
            if (!_wrap_convert_py2c__ns3__Ipv4Address(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__Ipv4Address___gt__ instance, or a list of ns3::Ipv4Address");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__Ipv4Address___gt____tp_init(Pystd__vector__lt___ns3__Ipv4Address___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::Ipv4Address >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__Ipv4Address___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__vector__lt___ns3__Ipv4Address___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ipv4Address___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ipv4Address___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ipv4Address___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__Ipv4Address___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__Ipv4Address___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__vector__lt___ns3__Ipv4Address___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ipv4Address___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ipv4Address___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__Ipv4Address___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__Ipv4Address___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ipv4Address___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__Ipv4Address___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter__tp_clear(Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter__tp_traverse(Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt____tp_dealloc(Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt____tp_iter(Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__ *self)
{
    Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter, &Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::dsr::DsrRouteCache::Neighbor >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter__tp_iter(Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter__tp_iternext(Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::dsr::DsrRouteCache::Neighbor >::iterator iter;
    PyNs3DsrDsrRouteCacheNeighbor *py_Neighbor;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_Neighbor = PyObject_New(PyNs3DsrDsrRouteCacheNeighbor, &PyNs3DsrDsrRouteCacheNeighbor_Type);
    py_Neighbor->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Neighbor->obj = new ns3::dsr::DsrRouteCache::Neighbor((*iter));
    PyNs3DsrDsrRouteCacheNeighbor_wrapper_registry[(void *) py_Neighbor->obj] = (PyObject *) py_Neighbor;
    py_retval = Py_BuildValue((char *) "N", py_Neighbor);
    return py_retval;
}

int _wrap_convert_py2c__ns3__dsr__DsrRouteCache__Neighbor(PyObject *value, ns3::dsr::DsrRouteCache::Neighbor *address)
{
    PyObject *py_retval;
    PyNs3DsrDsrRouteCacheNeighbor *tmp_Neighbor;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3DsrDsrRouteCacheNeighbor_Type, &tmp_Neighbor)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_Neighbor->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__(PyObject *arg, std::vector< ns3::dsr::DsrRouteCache::Neighbor > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::dsr::DsrRouteCache::Neighbor item;
            if (!_wrap_convert_py2c__ns3__dsr__DsrRouteCache__Neighbor(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__ instance, or a list of ns3::dsr::DsrRouteCache::Neighbor");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt____tp_init(Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::dsr::DsrRouteCache::Neighbor >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter__tp_clear(Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter__tp_traverse(Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt____tp_dealloc(Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt____tp_iter(Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__ *self)
{
    Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter, &Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::Ptr< ns3::ArpCache > >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter__tp_iter(Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter__tp_iternext(Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ptr< ns3::ArpCache > >::iterator iter;
    PyNs3ArpCache *py_ArpCache;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    if (!(const_cast<ns3::ArpCache *> (ns3::PeekPointer ((*iter))))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::ArpCache *> (ns3::PeekPointer ((*iter))))).name() == typeid(PyNs3ArpCache__PythonHelper).name())
    {
        py_ArpCache = reinterpret_cast< PyNs3ArpCache* >(reinterpret_cast< PyNs3ArpCache__PythonHelper* >(const_cast<ns3::ArpCache *> (ns3::PeekPointer ((*iter))))->m_pyself);
        py_ArpCache->obj = const_cast<ns3::ArpCache *> (ns3::PeekPointer ((*iter)));
        Py_INCREF(py_ArpCache);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ArpCache *> (ns3::PeekPointer ((*iter))));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_ArpCache = NULL;
        } else {
            py_ArpCache = (PyNs3ArpCache *) wrapper_lookup_iter->second;
            Py_INCREF(py_ArpCache);
        }
    
        if (py_ArpCache == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ArpCache *> (ns3::PeekPointer ((*iter))))), &PyNs3ArpCache_Type);
            py_ArpCache = PyObject_GC_New(PyNs3ArpCache, wrapper_type);
            py_ArpCache->inst_dict = NULL;
    
            py_ArpCache->inst_dict = NULL;
            py_ArpCache->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ArpCache *> (ns3::PeekPointer ((*iter)))->Ref();
            py_ArpCache->obj = const_cast<ns3::ArpCache *> (ns3::PeekPointer ((*iter)));
            PyNs3ObjectBase_wrapper_registry[(void *) py_ArpCache->obj] = (PyObject *) py_ArpCache;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_ArpCache);
    return py_retval;
}

int _wrap_convert_py2c__ns3__Ptr__lt___ns3__ArpCache___gt__(PyObject *value, ns3::Ptr< ns3::ArpCache > *address)
{
    PyObject *py_retval;
    PyNs3ArpCache *tmp_ArpCache;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3ArpCache_Type, &tmp_ArpCache)) {
        Py_DECREF(py_retval);
        return 0;
    }
    // dangerous!
    *address = ns3::Ptr< ns3::ArpCache  > (tmp_ArpCache->obj);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::ArpCache > > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::Ptr< ns3::ArpCache > item;
            if (!_wrap_convert_py2c__ns3__Ptr__lt___ns3__ArpCache___gt__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__ instance, or a list of ns3::Ptr< ns3::ArpCache >");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt____tp_init(Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::Ptr< ns3::ArpCache > >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter__tp_clear(Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter__tp_traverse(Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt____tp_dealloc(Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter__tp_dealloc(Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt____tp_iter(Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__ *self)
{
    Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter *iter = PyObject_GC_New(Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter, &Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::list< std::vector< ns3::Ipv4Address > >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter__tp_iter(Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter__tp_iternext(Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter *self)
{
    PyObject *py_retval;
    std::list< std::vector< ns3::Ipv4Address > >::iterator iter;
    std::vector< ns3::Ipv4Address > retval;
    Pystd__vector__lt___ns3__Ipv4Address___gt__ *py_std__vector__lt___ns3__Ipv4Address___gt__;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_std__vector__lt___ns3__Ipv4Address___gt__ = PyObject_New(Pystd__vector__lt___ns3__Ipv4Address___gt__, &Pystd__vector__lt___ns3__Ipv4Address___gt___Type);
    py_std__vector__lt___ns3__Ipv4Address___gt__->obj = new std::vector< ns3::Ipv4Address >((*iter));
    py_retval = Py_BuildValue((char *) "N", py_std__vector__lt___ns3__Ipv4Address___gt__);
    return py_retval;
}

int _wrap_convert_py2c__std__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__(PyObject *arg, std::list< std::vector< ns3::Ipv4Address > > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt___Type)) {
        *container = *((Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            std::vector< ns3::Ipv4Address > item;
            if (!_wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__ instance, or a list of std::vector< ns3::Ipv4Address >");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt____tp_init(Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::list< std::vector< ns3::Ipv4Address > >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__",            /* tp_name */
    sizeof(Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter",            /* tp_name */
    sizeof(Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter__tp_clear(Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter__tp_traverse(Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt____tp_dealloc(Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter__tp_dealloc(Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt____tp_iter(Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__ *self)
{
    Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter *iter = PyObject_GC_New(Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter, &Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::list< ns3::dsr::DsrRouteCacheEntry >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter__tp_iter(Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter__tp_iternext(Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter *self)
{
    PyObject *py_retval;
    std::list< ns3::dsr::DsrRouteCacheEntry >::iterator iter;
    PyNs3DsrDsrRouteCacheEntry *py_DsrRouteCacheEntry;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_DsrRouteCacheEntry = PyObject_New(PyNs3DsrDsrRouteCacheEntry, &PyNs3DsrDsrRouteCacheEntry_Type);
    py_DsrRouteCacheEntry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_DsrRouteCacheEntry->obj = new ns3::dsr::DsrRouteCacheEntry((*iter));
    PyNs3DsrDsrRouteCacheEntry_wrapper_registry[(void *) py_DsrRouteCacheEntry->obj] = (PyObject *) py_DsrRouteCacheEntry;
    py_retval = Py_BuildValue((char *) "N", py_DsrRouteCacheEntry);
    return py_retval;
}

int _wrap_convert_py2c__ns3__dsr__DsrRouteCacheEntry(PyObject *value, ns3::dsr::DsrRouteCacheEntry *address)
{
    PyObject *py_retval;
    PyNs3DsrDsrRouteCacheEntry *tmp_DsrRouteCacheEntry;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3DsrDsrRouteCacheEntry_Type, &tmp_DsrRouteCacheEntry)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_DsrRouteCacheEntry->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__(PyObject *arg, std::list< ns3::dsr::DsrRouteCacheEntry > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt___Type)) {
        *container = *((Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::dsr::DsrRouteCacheEntry item;
            if (!_wrap_convert_py2c__ns3__dsr__DsrRouteCacheEntry(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__ instance, or a list of ns3::dsr::DsrRouteCacheEntry");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt____tp_init(Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::list< ns3::dsr::DsrRouteCacheEntry >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__",            /* tp_name */
    sizeof(Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter",            /* tp_name */
    sizeof(Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___std__string___gt__Iter__tp_clear(Pystd__vector__lt___std__string___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___std__string___gt__Iter__tp_traverse(Pystd__vector__lt___std__string___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___std__string___gt____tp_dealloc(Pystd__vector__lt___std__string___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___std__string___gt__Iter__tp_dealloc(Pystd__vector__lt___std__string___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___std__string___gt____tp_iter(Pystd__vector__lt___std__string___gt__ *self)
{
    Pystd__vector__lt___std__string___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___std__string___gt__Iter, &Pystd__vector__lt___std__string___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< std::string >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___std__string___gt__Iter__tp_iter(Pystd__vector__lt___std__string___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___std__string___gt__Iter__tp_iternext(Pystd__vector__lt___std__string___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< std::string >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "s#", ((*iter)).c_str(), ((*iter)).size());
    return py_retval;
}

int _wrap_convert_py2c__std__string(PyObject *value, std::string *address)
{
    PyObject *py_retval;
    const char *retval_ptr;
    Py_ssize_t retval_len;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &retval_ptr, &retval_len)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = std::string(retval_ptr, retval_len);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___std__string___gt__(PyObject *arg, std::vector< std::string > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___std__string___gt___Type)) {
        *container = *((Pystd__vector__lt___std__string___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            std::string item;
            if (!_wrap_convert_py2c__std__string(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___std__string___gt__ instance, or a list of std::string");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___std__string___gt____tp_init(Pystd__vector__lt___std__string___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< std::string >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___std__string___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___std__string___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__vector__lt___std__string___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___std__string___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___std__string___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___std__string___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___std__string___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___std__string___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__vector__lt___std__string___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___std__string___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___std__string___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___std__string___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___std__string___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___std__string___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___std__string___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter__tp_clear(Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter__tp_traverse(Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt____tp_dealloc(Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter__tp_dealloc(Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt____tp_iter(Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__ *self)
{
    Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter *iter = PyObject_GC_New(Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter, &Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::map< ns3::Ipv4Address, ns3::dsr::RreqTableEntry >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter__tp_iter(Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter__tp_iternext(Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter *self)
{
    PyObject *py_retval;
    std::map< ns3::Ipv4Address, ns3::dsr::RreqTableEntry >::iterator iter;
    PyNs3DsrRreqTableEntry *py_RreqTableEntry;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_RreqTableEntry = PyObject_New(PyNs3DsrRreqTableEntry, &PyNs3DsrRreqTableEntry_Type);
    py_RreqTableEntry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_RreqTableEntry->obj = new ns3::dsr::RreqTableEntry(iter->second);
    PyNs3DsrRreqTableEntry_wrapper_registry[(void *) py_RreqTableEntry->obj] = (PyObject *) py_RreqTableEntry;
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(iter->first);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "NN", py_Ipv4Address, py_RreqTableEntry);
    return py_retval;
}

int _wrap_convert_py2c__ns3__dsr__RreqTableEntry(PyObject *value, ns3::dsr::RreqTableEntry *address)
{
    PyObject *py_retval;
    PyNs3DsrRreqTableEntry *tmp_RreqTableEntry;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3DsrRreqTableEntry_Type, &tmp_RreqTableEntry)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_RreqTableEntry->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__(PyObject *arg, std::map< ns3::Ipv4Address, ns3::dsr::RreqTableEntry > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt___Type)) {
        *container = *((Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            PyObject *tup = PyList_GET_ITEM(arg, i);
            if (!PyTuple_Check(tup) || PyTuple_Size(tup) != 2) {
                PyErr_SetString(PyExc_TypeError, "items must be tuples with two elements");
                return 0;
            }
            std::pair< ns3::Ipv4Address, ns3::dsr::RreqTableEntry > item;
            if (!_wrap_convert_py2c__ns3__Ipv4Address(PyTuple_GET_ITEM(tup, 0), &item.first)) {
                return 0;
            }
            if (!_wrap_convert_py2c__ns3__dsr__RreqTableEntry(PyTuple_GET_ITEM(tup, 1), &item.second)) {
                return 0;
            }
            container->insert(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__ instance, or a list of ns3::dsr::RreqTableEntry");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt____tp_init(Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::map< ns3::Ipv4Address, ns3::dsr::RreqTableEntry >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__",            /* tp_name */
    sizeof(Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter",            /* tp_name */
    sizeof(Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter__tp_clear(Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter__tp_traverse(Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt____tp_dealloc(Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt____tp_iter(Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__ *self)
{
    Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter, &Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::dsr::DsrSendBuffEntry >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter__tp_iter(Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter__tp_iternext(Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::dsr::DsrSendBuffEntry >::iterator iter;
    PyNs3DsrDsrSendBuffEntry *py_DsrSendBuffEntry;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_DsrSendBuffEntry = PyObject_New(PyNs3DsrDsrSendBuffEntry, &PyNs3DsrDsrSendBuffEntry_Type);
    py_DsrSendBuffEntry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_DsrSendBuffEntry->obj = new ns3::dsr::DsrSendBuffEntry((*iter));
    PyNs3DsrDsrSendBuffEntry_wrapper_registry[(void *) py_DsrSendBuffEntry->obj] = (PyObject *) py_DsrSendBuffEntry;
    py_retval = Py_BuildValue((char *) "N", py_DsrSendBuffEntry);
    return py_retval;
}

int _wrap_convert_py2c__ns3__dsr__DsrSendBuffEntry(PyObject *value, ns3::dsr::DsrSendBuffEntry *address)
{
    PyObject *py_retval;
    PyNs3DsrDsrSendBuffEntry *tmp_DsrSendBuffEntry;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3DsrDsrSendBuffEntry_Type, &tmp_DsrSendBuffEntry)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_DsrSendBuffEntry->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__(PyObject *arg, std::vector< ns3::dsr::DsrSendBuffEntry > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::dsr::DsrSendBuffEntry item;
            if (!_wrap_convert_py2c__ns3__dsr__DsrSendBuffEntry(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__ instance, or a list of ns3::dsr::DsrSendBuffEntry");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt____tp_init(Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::dsr::DsrSendBuffEntry >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.dsr.Std__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- enumerations --- */







#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef dsr_dsr_moduledef = {
    PyModuleDef_HEAD_INIT,
    "dsr.dsr",
    NULL,
    -1,
    dsr_dsr_functions,
};
#endif

static PyObject *
initdsr_dsr(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&dsr_dsr_moduledef);
    #else
    m = Py_InitModule3((char *) "dsr.dsr", dsr_dsr_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "_PyNs3DsrBlackList_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrBlackList_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::BlackList' class */
    if (PyType_Ready(&PyNs3DsrBlackList_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "BlackList", (PyObject *) &PyNs3DsrBlackList_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrDsrErrorBuffEntry_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrDsrErrorBuffEntry_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::DsrErrorBuffEntry' class */
    if (PyType_Ready(&PyNs3DsrDsrErrorBuffEntry_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrErrorBuffEntry", (PyObject *) &PyNs3DsrDsrErrorBuffEntry_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrDsrErrorBuffer_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrDsrErrorBuffer_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::DsrErrorBuffer' class */
    if (PyType_Ready(&PyNs3DsrDsrErrorBuffer_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrErrorBuffer", (PyObject *) &PyNs3DsrDsrErrorBuffer_Type);
    /* Register the 'ns3::dsr::DsrFsHeader' class */
    PyNs3DsrDsrFsHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3DsrDsrFsHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrFsHeader", (PyObject *) &PyNs3DsrDsrFsHeader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dsr::DsrGraReply), &PyNs3DsrDsrGraReply_Type);
    /* Register the 'ns3::dsr::DsrGraReply' class */
    PyNs3DsrDsrGraReply_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3DsrDsrGraReply_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrGraReply", (PyObject *) &PyNs3DsrDsrGraReply_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrDsrLinkStab_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrDsrLinkStab_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::DsrLinkStab' class */
    if (PyType_Ready(&PyNs3DsrDsrLinkStab_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrLinkStab", (PyObject *) &PyNs3DsrDsrLinkStab_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrDsrMaintainBuffEntry_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrDsrMaintainBuffEntry_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::DsrMaintainBuffEntry' class */
    if (PyType_Ready(&PyNs3DsrDsrMaintainBuffEntry_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrMaintainBuffEntry", (PyObject *) &PyNs3DsrDsrMaintainBuffEntry_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrDsrMaintainBuffer_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrDsrMaintainBuffer_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::DsrMaintainBuffer' class */
    if (PyType_Ready(&PyNs3DsrDsrMaintainBuffer_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrMaintainBuffer", (PyObject *) &PyNs3DsrDsrMaintainBuffer_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dsr::DsrNetworkQueue), &PyNs3DsrDsrNetworkQueue_Type);
    /* Register the 'ns3::dsr::DsrNetworkQueue' class */
    PyNs3DsrDsrNetworkQueue_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3DsrDsrNetworkQueue_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrNetworkQueue", (PyObject *) &PyNs3DsrDsrNetworkQueue_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrDsrNetworkQueueEntry_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrDsrNetworkQueueEntry_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::DsrNetworkQueueEntry' class */
    if (PyType_Ready(&PyNs3DsrDsrNetworkQueueEntry_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrNetworkQueueEntry", (PyObject *) &PyNs3DsrDsrNetworkQueueEntry_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrDsrNodeStab_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrDsrNodeStab_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::DsrNodeStab' class */
    if (PyType_Ready(&PyNs3DsrDsrNodeStab_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrNodeStab", (PyObject *) &PyNs3DsrDsrNodeStab_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrDsrOptionField_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrDsrOptionField_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::DsrOptionField' class */
    if (PyType_Ready(&PyNs3DsrDsrOptionField_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionField", (PyObject *) &PyNs3DsrDsrOptionField_Type);
    /* Register the 'ns3::dsr::DsrOptionHeader' class */
    PyNs3DsrDsrOptionHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionHeader", (PyObject *) &PyNs3DsrDsrOptionHeader_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrDsrOptionHeaderAlignment_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrDsrOptionHeaderAlignment_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::DsrOptionHeader::Alignment' class */
    if (PyType_Ready(&PyNs3DsrDsrOptionHeaderAlignment_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3DsrDsrOptionHeader_Type.tp_dict, (char *) "Alignment", (PyObject *) &PyNs3DsrDsrOptionHeaderAlignment_Type);
    /* Register the 'ns3::dsr::DsrOptionPad1Header' class */
    PyNs3DsrDsrOptionPad1Header_Type.tp_base = &PyNs3DsrDsrOptionHeader_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionPad1Header_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionPad1Header", (PyObject *) &PyNs3DsrDsrOptionPad1Header_Type);
    /* Register the 'ns3::dsr::DsrOptionPadnHeader' class */
    PyNs3DsrDsrOptionPadnHeader_Type.tp_base = &PyNs3DsrDsrOptionHeader_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionPadnHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionPadnHeader", (PyObject *) &PyNs3DsrDsrOptionPadnHeader_Type);
    /* Register the 'ns3::dsr::DsrOptionRerrHeader' class */
    PyNs3DsrDsrOptionRerrHeader_Type.tp_base = &PyNs3DsrDsrOptionHeader_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionRerrHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionRerrHeader", (PyObject *) &PyNs3DsrDsrOptionRerrHeader_Type);
    /* Register the 'ns3::dsr::DsrOptionRerrUnreachHeader' class */
    PyNs3DsrDsrOptionRerrUnreachHeader_Type.tp_base = &PyNs3DsrDsrOptionRerrHeader_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionRerrUnreachHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionRerrUnreachHeader", (PyObject *) &PyNs3DsrDsrOptionRerrUnreachHeader_Type);
    /* Register the 'ns3::dsr::DsrOptionRerrUnsupportHeader' class */
    PyNs3DsrDsrOptionRerrUnsupportHeader_Type.tp_base = &PyNs3DsrDsrOptionRerrHeader_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionRerrUnsupportHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionRerrUnsupportHeader", (PyObject *) &PyNs3DsrDsrOptionRerrUnsupportHeader_Type);
    /* Register the 'ns3::dsr::DsrOptionRrepHeader' class */
    PyNs3DsrDsrOptionRrepHeader_Type.tp_base = &PyNs3DsrDsrOptionHeader_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionRrepHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionRrepHeader", (PyObject *) &PyNs3DsrDsrOptionRrepHeader_Type);
    /* Register the 'ns3::dsr::DsrOptionRreqHeader' class */
    PyNs3DsrDsrOptionRreqHeader_Type.tp_base = &PyNs3DsrDsrOptionHeader_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionRreqHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionRreqHeader", (PyObject *) &PyNs3DsrDsrOptionRreqHeader_Type);
    /* Register the 'ns3::dsr::DsrOptionSRHeader' class */
    PyNs3DsrDsrOptionSRHeader_Type.tp_base = &PyNs3DsrDsrOptionHeader_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionSRHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionSRHeader", (PyObject *) &PyNs3DsrDsrOptionSRHeader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dsr::DsrOptions), &PyNs3DsrDsrOptions_Type);
    /* Register the 'ns3::dsr::DsrOptions' class */
    PyNs3DsrDsrOptions_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptions_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptions", (PyObject *) &PyNs3DsrDsrOptions_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrDsrPassiveBuffEntry_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrDsrPassiveBuffEntry_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::DsrPassiveBuffEntry' class */
    if (PyType_Ready(&PyNs3DsrDsrPassiveBuffEntry_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrPassiveBuffEntry", (PyObject *) &PyNs3DsrDsrPassiveBuffEntry_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dsr::DsrPassiveBuffer), &PyNs3DsrDsrPassiveBuffer_Type);
    /* Register the 'ns3::dsr::DsrPassiveBuffer' class */
    PyNs3DsrDsrPassiveBuffer_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3DsrDsrPassiveBuffer_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrPassiveBuffer", (PyObject *) &PyNs3DsrDsrPassiveBuffer_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrDsrReceivedRreqEntry_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrDsrReceivedRreqEntry_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::DsrReceivedRreqEntry' class */
    if (PyType_Ready(&PyNs3DsrDsrReceivedRreqEntry_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrReceivedRreqEntry", (PyObject *) &PyNs3DsrDsrReceivedRreqEntry_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dsr::DsrRouteCache), &PyNs3DsrDsrRouteCache_Type);
    /* Register the 'ns3::dsr::DsrRouteCache' class */
    PyNs3DsrDsrRouteCache_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3DsrDsrRouteCache_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrRouteCache", (PyObject *) &PyNs3DsrDsrRouteCache_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrDsrRouteCacheNeighbor_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrDsrRouteCacheNeighbor_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::DsrRouteCache::Neighbor' class */
    if (PyType_Ready(&PyNs3DsrDsrRouteCacheNeighbor_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3DsrDsrRouteCache_Type.tp_dict, (char *) "Neighbor", (PyObject *) &PyNs3DsrDsrRouteCacheNeighbor_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrDsrRouteCacheEntry_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrDsrRouteCacheEntry_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::DsrRouteCacheEntry' class */
    if (PyType_Ready(&PyNs3DsrDsrRouteCacheEntry_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrRouteCacheEntry", (PyObject *) &PyNs3DsrDsrRouteCacheEntry_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dsr::DsrRouting), &PyNs3DsrDsrRouting_Type);
    /* Register the 'ns3::dsr::DsrRouting' class */
    
    PyNs3DsrDsrRoutingMeta_Type.tp_base = Py_TYPE(&PyNs3IpL4Protocol_Type);
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3DsrDsrRoutingMeta_Type.tp_traverse = Py_TYPE(&PyNs3IpL4Protocol_Type)->tp_traverse;
    PyNs3DsrDsrRoutingMeta_Type.tp_clear = Py_TYPE(&PyNs3IpL4Protocol_Type)->tp_clear;
    PyNs3DsrDsrRoutingMeta_Type.tp_is_gc = Py_TYPE(&PyNs3IpL4Protocol_Type)->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3DsrDsrRoutingMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3DsrDsrRoutingMeta_Type);
    
    PyNs3DsrDsrRouting_Type.tp_base = &PyNs3IpL4Protocol_Type;
    Py_TYPE(&PyNs3DsrDsrRouting_Type) = &PyNs3DsrDsrRoutingMeta_Type;
    if (PyType_Ready(&PyNs3DsrDsrRouting_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrRouting", (PyObject *) &PyNs3DsrDsrRouting_Type);
    /* Register the 'ns3::dsr::DsrRoutingHeader' class */
    PyNs3DsrDsrRoutingHeader_Type.tp_base = &PyNs3DsrDsrFsHeader_Type;
    PyNs3DsrDsrRoutingHeader_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyNs3DsrDsrFsHeader_Type);
        PyTuple_SET_ITEM(PyNs3DsrDsrRoutingHeader_Type.tp_bases, 0, (PyObject *) &PyNs3DsrDsrFsHeader_Type);
        Py_INCREF((PyObject *) &PyNs3DsrDsrOptionField_Type);
        PyTuple_SET_ITEM(PyNs3DsrDsrRoutingHeader_Type.tp_bases, 1, (PyObject *) &PyNs3DsrDsrOptionField_Type);
    if (PyType_Ready(&PyNs3DsrDsrRoutingHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrRoutingHeader", (PyObject *) &PyNs3DsrDsrRoutingHeader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dsr::DsrRreqTable), &PyNs3DsrDsrRreqTable_Type);
    /* Register the 'ns3::dsr::DsrRreqTable' class */
    PyNs3DsrDsrRreqTable_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3DsrDsrRreqTable_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrRreqTable", (PyObject *) &PyNs3DsrDsrRreqTable_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrDsrSendBuffEntry_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrDsrSendBuffEntry_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::DsrSendBuffEntry' class */
    if (PyType_Ready(&PyNs3DsrDsrSendBuffEntry_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrSendBuffEntry", (PyObject *) &PyNs3DsrDsrSendBuffEntry_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrDsrSendBuffer_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrDsrSendBuffer_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::DsrSendBuffer' class */
    if (PyType_Ready(&PyNs3DsrDsrSendBuffer_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrSendBuffer", (PyObject *) &PyNs3DsrDsrSendBuffer_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrGraReplyEntry_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrGraReplyEntry_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::GraReplyEntry' class */
    if (PyType_Ready(&PyNs3DsrGraReplyEntry_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "GraReplyEntry", (PyObject *) &PyNs3DsrGraReplyEntry_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrLink_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrLink_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::Link' class */
    if (PyType_Ready(&PyNs3DsrLink_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Link", (PyObject *) &PyNs3DsrLink_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrLinkKey_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrLinkKey_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::LinkKey' class */
    if (PyType_Ready(&PyNs3DsrLinkKey_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "LinkKey", (PyObject *) &PyNs3DsrLinkKey_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrNetworkKey_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrNetworkKey_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::NetworkKey' class */
    if (PyType_Ready(&PyNs3DsrNetworkKey_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "NetworkKey", (PyObject *) &PyNs3DsrNetworkKey_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrPassiveKey_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrPassiveKey_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::PassiveKey' class */
    if (PyType_Ready(&PyNs3DsrPassiveKey_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "PassiveKey", (PyObject *) &PyNs3DsrPassiveKey_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrRreqTableEntry_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrRreqTableEntry_wrapper_registry, NULL));
    /* Register the 'ns3::dsr::RreqTableEntry' class */
    if (PyType_Ready(&PyNs3DsrRreqTableEntry_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "RreqTableEntry", (PyObject *) &PyNs3DsrRreqTableEntry_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dsr::DsrOptionAck), &PyNs3DsrDsrOptionAck_Type);
    /* Register the 'ns3::dsr::DsrOptionAck' class */
    
    PyNs3DsrDsrOptionAckMeta_Type.tp_base = Py_TYPE(&PyNs3DsrDsrOptions_Type);
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3DsrDsrOptionAckMeta_Type.tp_traverse = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_traverse;
    PyNs3DsrDsrOptionAckMeta_Type.tp_clear = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_clear;
    PyNs3DsrDsrOptionAckMeta_Type.tp_is_gc = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3DsrDsrOptionAckMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3DsrDsrOptionAckMeta_Type);
    
    PyNs3DsrDsrOptionAck_Type.tp_base = &PyNs3DsrDsrOptions_Type;
    Py_TYPE(&PyNs3DsrDsrOptionAck_Type) = &PyNs3DsrDsrOptionAckMeta_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionAck_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionAck", (PyObject *) &PyNs3DsrDsrOptionAck_Type);
    /* Register the 'ns3::dsr::DsrOptionAckHeader' class */
    PyNs3DsrDsrOptionAckHeader_Type.tp_base = &PyNs3DsrDsrOptionHeader_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionAckHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionAckHeader", (PyObject *) &PyNs3DsrDsrOptionAckHeader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dsr::DsrOptionAckReq), &PyNs3DsrDsrOptionAckReq_Type);
    /* Register the 'ns3::dsr::DsrOptionAckReq' class */
    
    PyNs3DsrDsrOptionAckReqMeta_Type.tp_base = Py_TYPE(&PyNs3DsrDsrOptions_Type);
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3DsrDsrOptionAckReqMeta_Type.tp_traverse = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_traverse;
    PyNs3DsrDsrOptionAckReqMeta_Type.tp_clear = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_clear;
    PyNs3DsrDsrOptionAckReqMeta_Type.tp_is_gc = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3DsrDsrOptionAckReqMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3DsrDsrOptionAckReqMeta_Type);
    
    PyNs3DsrDsrOptionAckReq_Type.tp_base = &PyNs3DsrDsrOptions_Type;
    Py_TYPE(&PyNs3DsrDsrOptionAckReq_Type) = &PyNs3DsrDsrOptionAckReqMeta_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionAckReq_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionAckReq", (PyObject *) &PyNs3DsrDsrOptionAckReq_Type);
    /* Register the 'ns3::dsr::DsrOptionAckReqHeader' class */
    PyNs3DsrDsrOptionAckReqHeader_Type.tp_base = &PyNs3DsrDsrOptionHeader_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionAckReqHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionAckReqHeader", (PyObject *) &PyNs3DsrDsrOptionAckReqHeader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dsr::DsrOptionPad1), &PyNs3DsrDsrOptionPad1_Type);
    /* Register the 'ns3::dsr::DsrOptionPad1' class */
    
    PyNs3DsrDsrOptionPad1Meta_Type.tp_base = Py_TYPE(&PyNs3DsrDsrOptions_Type);
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3DsrDsrOptionPad1Meta_Type.tp_traverse = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_traverse;
    PyNs3DsrDsrOptionPad1Meta_Type.tp_clear = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_clear;
    PyNs3DsrDsrOptionPad1Meta_Type.tp_is_gc = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3DsrDsrOptionPad1Meta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3DsrDsrOptionPad1Meta_Type);
    
    PyNs3DsrDsrOptionPad1_Type.tp_base = &PyNs3DsrDsrOptions_Type;
    Py_TYPE(&PyNs3DsrDsrOptionPad1_Type) = &PyNs3DsrDsrOptionPad1Meta_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionPad1_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionPad1", (PyObject *) &PyNs3DsrDsrOptionPad1_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dsr::DsrOptionPadn), &PyNs3DsrDsrOptionPadn_Type);
    /* Register the 'ns3::dsr::DsrOptionPadn' class */
    
    PyNs3DsrDsrOptionPadnMeta_Type.tp_base = Py_TYPE(&PyNs3DsrDsrOptions_Type);
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3DsrDsrOptionPadnMeta_Type.tp_traverse = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_traverse;
    PyNs3DsrDsrOptionPadnMeta_Type.tp_clear = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_clear;
    PyNs3DsrDsrOptionPadnMeta_Type.tp_is_gc = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3DsrDsrOptionPadnMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3DsrDsrOptionPadnMeta_Type);
    
    PyNs3DsrDsrOptionPadn_Type.tp_base = &PyNs3DsrDsrOptions_Type;
    Py_TYPE(&PyNs3DsrDsrOptionPadn_Type) = &PyNs3DsrDsrOptionPadnMeta_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionPadn_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionPadn", (PyObject *) &PyNs3DsrDsrOptionPadn_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dsr::DsrOptionRerr), &PyNs3DsrDsrOptionRerr_Type);
    /* Register the 'ns3::dsr::DsrOptionRerr' class */
    
    PyNs3DsrDsrOptionRerrMeta_Type.tp_base = Py_TYPE(&PyNs3DsrDsrOptions_Type);
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3DsrDsrOptionRerrMeta_Type.tp_traverse = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_traverse;
    PyNs3DsrDsrOptionRerrMeta_Type.tp_clear = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_clear;
    PyNs3DsrDsrOptionRerrMeta_Type.tp_is_gc = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3DsrDsrOptionRerrMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3DsrDsrOptionRerrMeta_Type);
    
    PyNs3DsrDsrOptionRerr_Type.tp_base = &PyNs3DsrDsrOptions_Type;
    Py_TYPE(&PyNs3DsrDsrOptionRerr_Type) = &PyNs3DsrDsrOptionRerrMeta_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionRerr_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionRerr", (PyObject *) &PyNs3DsrDsrOptionRerr_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dsr::DsrOptionRrep), &PyNs3DsrDsrOptionRrep_Type);
    /* Register the 'ns3::dsr::DsrOptionRrep' class */
    
    PyNs3DsrDsrOptionRrepMeta_Type.tp_base = Py_TYPE(&PyNs3DsrDsrOptions_Type);
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3DsrDsrOptionRrepMeta_Type.tp_traverse = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_traverse;
    PyNs3DsrDsrOptionRrepMeta_Type.tp_clear = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_clear;
    PyNs3DsrDsrOptionRrepMeta_Type.tp_is_gc = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3DsrDsrOptionRrepMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3DsrDsrOptionRrepMeta_Type);
    
    PyNs3DsrDsrOptionRrep_Type.tp_base = &PyNs3DsrDsrOptions_Type;
    Py_TYPE(&PyNs3DsrDsrOptionRrep_Type) = &PyNs3DsrDsrOptionRrepMeta_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionRrep_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionRrep", (PyObject *) &PyNs3DsrDsrOptionRrep_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dsr::DsrOptionRreq), &PyNs3DsrDsrOptionRreq_Type);
    /* Register the 'ns3::dsr::DsrOptionRreq' class */
    
    PyNs3DsrDsrOptionRreqMeta_Type.tp_base = Py_TYPE(&PyNs3DsrDsrOptions_Type);
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3DsrDsrOptionRreqMeta_Type.tp_traverse = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_traverse;
    PyNs3DsrDsrOptionRreqMeta_Type.tp_clear = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_clear;
    PyNs3DsrDsrOptionRreqMeta_Type.tp_is_gc = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3DsrDsrOptionRreqMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3DsrDsrOptionRreqMeta_Type);
    
    PyNs3DsrDsrOptionRreq_Type.tp_base = &PyNs3DsrDsrOptions_Type;
    Py_TYPE(&PyNs3DsrDsrOptionRreq_Type) = &PyNs3DsrDsrOptionRreqMeta_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionRreq_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionRreq", (PyObject *) &PyNs3DsrDsrOptionRreq_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dsr::DsrOptionSR), &PyNs3DsrDsrOptionSR_Type);
    /* Register the 'ns3::dsr::DsrOptionSR' class */
    
    PyNs3DsrDsrOptionSRMeta_Type.tp_base = Py_TYPE(&PyNs3DsrDsrOptions_Type);
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3DsrDsrOptionSRMeta_Type.tp_traverse = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_traverse;
    PyNs3DsrDsrOptionSRMeta_Type.tp_clear = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_clear;
    PyNs3DsrDsrOptionSRMeta_Type.tp_is_gc = Py_TYPE(&PyNs3DsrDsrOptions_Type)->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3DsrDsrOptionSRMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3DsrDsrOptionSRMeta_Type);
    
    PyNs3DsrDsrOptionSR_Type.tp_base = &PyNs3DsrDsrOptions_Type;
    Py_TYPE(&PyNs3DsrDsrOptionSR_Type) = &PyNs3DsrDsrOptionSRMeta_Type;
    if (PyType_Ready(&PyNs3DsrDsrOptionSR_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DsrOptionSR", (PyObject *) &PyNs3DsrDsrOptionSR_Type);
    /* Register the 'std::vector< ns3::dsr::DsrErrorBuffEntry >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__", (PyObject *) &Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__dsr__DsrErrorBuffEntry___gt__Iter_Type);
    /* Register the 'std::vector< ns3::dsr::DsrNetworkQueueEntry >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__", (PyObject *) &Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__dsr__DsrNetworkQueueEntry___gt__Iter_Type);
    /* Register the 'std::vector< ns3::Ipv4Address >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ipv4Address___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ipv4Address___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ipv4Address___gt__", (PyObject *) &Pystd__vector__lt___ns3__Ipv4Address___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ipv4Address___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__Ipv4Address___gt__Iter_Type);
    /* Register the 'std::vector< ns3::dsr::DsrRouteCache::Neighbor >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__", (PyObject *) &Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__dsr__DsrRouteCache__Neighbor___gt__Iter_Type);
    /* Register the 'std::vector< ns3::Ptr< ns3::ArpCache > >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__ArpCache___gt_____gt__Iter_Type);
    /* Register the 'std::list< std::vector< ns3::Ipv4Address > >' class */
    if (PyType_Ready(&Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__", (PyObject *) &Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt___Type);
    PyModule_AddObject(m, (char *) "Std__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter", (PyObject *) &Pystd__list__lt___std__vector__lt___ns3__Ipv4Address___gt_____gt__Iter_Type);
    /* Register the 'std::list< ns3::dsr::DsrRouteCacheEntry >' class */
    if (PyType_Ready(&Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__", (PyObject *) &Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt___Type);
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter", (PyObject *) &Pystd__list__lt___ns3__dsr__DsrRouteCacheEntry___gt__Iter_Type);
    /* Register the 'std::vector< std::string >' class */
    if (PyType_Ready(&Pystd__vector__lt___std__string___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___std__string___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___std__string___gt__", (PyObject *) &Pystd__vector__lt___std__string___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___std__string___gt__Iter", (PyObject *) &Pystd__vector__lt___std__string___gt__Iter_Type);
    /* Register the 'std::map< ns3::Ipv4Address, ns3::dsr::RreqTableEntry >' class */
    if (PyType_Ready(&Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__", (PyObject *) &Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt___Type);
    PyModule_AddObject(m, (char *) "Std__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter", (PyObject *) &Pystd__map__lt___ns3__Ipv4Address__ns3__dsr__RreqTableEntry___gt__Iter_Type);
    /* Register the 'std::vector< ns3::dsr::DsrSendBuffEntry >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__", (PyObject *) &Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__dsr__DsrSendBuffEntry___gt__Iter_Type);
    PyModule_AddIntConstant(m, (char *) "NODE_UNREACHABLE", ns3::dsr::NODE_UNREACHABLE);
    PyModule_AddIntConstant(m, (char *) "FLOW_STATE_NOT_SUPPORTED", ns3::dsr::FLOW_STATE_NOT_SUPPORTED);
    PyModule_AddIntConstant(m, (char *) "OPTION_NOT_SUPPORTED", ns3::dsr::OPTION_NOT_SUPPORTED);
    PyModule_AddIntConstant(m, (char *) "DSR_CONTROL_PACKET", ns3::dsr::DSR_CONTROL_PACKET);
    PyModule_AddIntConstant(m, (char *) "DSR_DATA_PACKET", ns3::dsr::DSR_DATA_PACKET);
    PyModule_AddIntConstant(m, (char *) "PROBABLE", ns3::dsr::PROBABLE);
    PyModule_AddIntConstant(m, (char *) "QUESTIONABLE", ns3::dsr::QUESTIONABLE);
    return m;
}
static PyMethodDef dsr_internal_functions[] = {
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef dsr_internal_moduledef = {
    PyModuleDef_HEAD_INIT,
    "dsr.internal",
    NULL,
    -1,
    dsr_internal_functions,
};
#endif

static PyObject *
initdsr_internal(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&dsr_internal_moduledef);
    #else
    m = Py_InitModule3((char *) "dsr.internal", dsr_internal_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    return m;
}
static PyMethodDef dsr_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyNs3Address_Type;
std::map<void*, PyObject*> *_PyNs3Address_wrapper_registry;


PyTypeObject *_PyNs3AttributeConstructionList_Type;
std::map<void*, PyObject*> *_PyNs3AttributeConstructionList_wrapper_registry;


PyTypeObject *_PyNs3AttributeConstructionListItem_Type;
std::map<void*, PyObject*> *_PyNs3AttributeConstructionListItem_wrapper_registry;


PyTypeObject *_PyNs3Buffer_Type;
std::map<void*, PyObject*> *_PyNs3Buffer_wrapper_registry;


PyTypeObject *_PyNs3BufferIterator_Type;
std::map<void*, PyObject*> *_PyNs3BufferIterator_wrapper_registry;


PyTypeObject *_PyNs3ByteTagIterator_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagIterator_wrapper_registry;


PyTypeObject *_PyNs3ByteTagIteratorItem_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagIteratorItem_wrapper_registry;


PyTypeObject *_PyNs3ByteTagList_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagList_wrapper_registry;


PyTypeObject *_PyNs3ByteTagListIterator_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagListIterator_wrapper_registry;


PyTypeObject *_PyNs3ByteTagListIteratorItem_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagListIteratorItem_wrapper_registry;


PyTypeObject *_PyNs3CallbackBase_Type;
std::map<void*, PyObject*> *_PyNs3CallbackBase_wrapper_registry;


PyTypeObject *_PyNs3EventGarbageCollector_Type;
std::map<void*, PyObject*> *_PyNs3EventGarbageCollector_wrapper_registry;


PyTypeObject *_PyNs3EventId_Type;
std::map<void*, PyObject*> *_PyNs3EventId_wrapper_registry;


PyTypeObject *_PyNs3Hasher_Type;
std::map<void*, PyObject*> *_PyNs3Hasher_wrapper_registry;


PyTypeObject *_PyNs3Inet6SocketAddress_Type;
std::map<void*, PyObject*> *_PyNs3Inet6SocketAddress_wrapper_registry;


PyTypeObject *_PyNs3InetSocketAddress_Type;
std::map<void*, PyObject*> *_PyNs3InetSocketAddress_wrapper_registry;


PyTypeObject *_PyNs3IntToType__0_Type;
std::map<void*, PyObject*> *_PyNs3IntToType__0_wrapper_registry;


PyTypeObject *_PyNs3IntToType__1_Type;
std::map<void*, PyObject*> *_PyNs3IntToType__1_wrapper_registry;


PyTypeObject *_PyNs3IntToType__2_Type;
std::map<void*, PyObject*> *_PyNs3IntToType__2_wrapper_registry;


PyTypeObject *_PyNs3IntToType__3_Type;
std::map<void*, PyObject*> *_PyNs3IntToType__3_wrapper_registry;


PyTypeObject *_PyNs3IntToType__4_Type;
std::map<void*, PyObject*> *_PyNs3IntToType__4_wrapper_registry;


PyTypeObject *_PyNs3IntToType__5_Type;
std::map<void*, PyObject*> *_PyNs3IntToType__5_wrapper_registry;


PyTypeObject *_PyNs3IntToType__6_Type;
std::map<void*, PyObject*> *_PyNs3IntToType__6_wrapper_registry;


PyTypeObject *_PyNs3InterferenceHelper_Type;
std::map<void*, PyObject*> *_PyNs3InterferenceHelper_wrapper_registry;


PyTypeObject *_PyNs3InterferenceHelperSnrPer_Type;
std::map<void*, PyObject*> *_PyNs3InterferenceHelperSnrPer_wrapper_registry;


PyTypeObject *_PyNs3Ipv4Address_Type;
std::map<void*, PyObject*> *_PyNs3Ipv4Address_wrapper_registry;


PyTypeObject *_PyNs3Ipv4InterfaceAddress_Type;
std::map<void*, PyObject*> *_PyNs3Ipv4InterfaceAddress_wrapper_registry;


PyTypeObject *_PyNs3Ipv4Mask_Type;
std::map<void*, PyObject*> *_PyNs3Ipv4Mask_wrapper_registry;


PyTypeObject *_PyNs3Ipv6Address_Type;
std::map<void*, PyObject*> *_PyNs3Ipv6Address_wrapper_registry;


PyTypeObject *_PyNs3Ipv6Prefix_Type;
std::map<void*, PyObject*> *_PyNs3Ipv6Prefix_wrapper_registry;


PyTypeObject *_PyNs3Mac48Address_Type;
std::map<void*, PyObject*> *_PyNs3Mac48Address_wrapper_registry;


PyTypeObject *_PyNs3NodeContainer_Type;
std::map<void*, PyObject*> *_PyNs3NodeContainer_wrapper_registry;


PyTypeObject *_PyNs3NonCopyable_Type;
std::map<void*, PyObject*> *_PyNs3NonCopyable_wrapper_registry;


PyTypeObject *_PyNs3ObjectBase_Type;
std::map<void*, PyObject*> *_PyNs3ObjectBase_wrapper_registry;


PyTypeObject *_PyNs3ObjectDeleter_Type;
std::map<void*, PyObject*> *_PyNs3ObjectDeleter_wrapper_registry;


PyTypeObject *_PyNs3ObjectFactory_Type;
std::map<void*, PyObject*> *_PyNs3ObjectFactory_wrapper_registry;


PyTypeObject *_PyNs3PacketMetadata_Type;
std::map<void*, PyObject*> *_PyNs3PacketMetadata_wrapper_registry;


PyTypeObject *_PyNs3PacketMetadataItem_Type;
std::map<void*, PyObject*> *_PyNs3PacketMetadataItem_wrapper_registry;


PyTypeObject *_PyNs3PacketMetadataItemIterator_Type;
std::map<void*, PyObject*> *_PyNs3PacketMetadataItemIterator_wrapper_registry;


PyTypeObject *_PyNs3PacketTagIterator_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagIterator_wrapper_registry;


PyTypeObject *_PyNs3PacketTagIteratorItem_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagIteratorItem_wrapper_registry;


PyTypeObject *_PyNs3PacketTagList_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagList_wrapper_registry;


PyTypeObject *_PyNs3PacketTagListTagData_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagListTagData_wrapper_registry;


PyTypeObject *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;


PyTypeObject *_PyNs3Simulator_Type;
std::map<void*, PyObject*> *_PyNs3Simulator_wrapper_registry;


PyTypeObject *_PyNs3SystemWallClockMs_Type;
std::map<void*, PyObject*> *_PyNs3SystemWallClockMs_wrapper_registry;


PyTypeObject *_PyNs3Tag_Type;


PyTypeObject *_PyNs3TagBuffer_Type;
std::map<void*, PyObject*> *_PyNs3TagBuffer_wrapper_registry;


PyTypeObject *_PyNs3TimeWithUnit_Type;
std::map<void*, PyObject*> *_PyNs3TimeWithUnit_wrapper_registry;


PyTypeObject *_PyNs3Timer_Type;
std::map<void*, PyObject*> *_PyNs3Timer_wrapper_registry;


PyTypeObject *_PyNs3TimerImpl_Type;
std::map<void*, PyObject*> *_PyNs3TimerImpl_wrapper_registry;


PyTypeObject *_PyNs3TracedValue__Unsigned_int_Type;
std::map<void*, PyObject*> *_PyNs3TracedValue__Unsigned_int_wrapper_registry;


PyTypeObject *_PyNs3TypeId_Type;
std::map<void*, PyObject*> *_PyNs3TypeId_wrapper_registry;


PyTypeObject *_PyNs3TypeIdAttributeInformation_Type;
std::map<void*, PyObject*> *_PyNs3TypeIdAttributeInformation_wrapper_registry;


PyTypeObject *_PyNs3TypeIdTraceSourceInformation_Type;
std::map<void*, PyObject*> *_PyNs3TypeIdTraceSourceInformation_wrapper_registry;


PyTypeObject *_PyNs3Vector2D_Type;
std::map<void*, PyObject*> *_PyNs3Vector2D_wrapper_registry;


PyTypeObject *_PyNs3Vector3D_Type;
std::map<void*, PyObject*> *_PyNs3Vector3D_wrapper_registry;


PyTypeObject *_PyNs3WifiMode_Type;
std::map<void*, PyObject*> *_PyNs3WifiMode_wrapper_registry;


PyTypeObject *_PyNs3WifiModeFactory_Type;
std::map<void*, PyObject*> *_PyNs3WifiModeFactory_wrapper_registry;


PyTypeObject *_PyNs3WifiPhyListener_Type;
std::map<void*, PyObject*> *_PyNs3WifiPhyListener_wrapper_registry;


PyTypeObject *_PyNs3WifiRemoteStation_Type;
std::map<void*, PyObject*> *_PyNs3WifiRemoteStation_wrapper_registry;


PyTypeObject *_PyNs3WifiRemoteStationInfo_Type;
std::map<void*, PyObject*> *_PyNs3WifiRemoteStationInfo_wrapper_registry;


PyTypeObject *_PyNs3WifiRemoteStationState_Type;
std::map<void*, PyObject*> *_PyNs3WifiRemoteStationState_wrapper_registry;


PyTypeObject *_PyNs3WifiTxVector_Type;
std::map<void*, PyObject*> *_PyNs3WifiTxVector_wrapper_registry;


PyTypeObject *_PyNs3Empty_Type;
std::map<void*, PyObject*> *_PyNs3Empty_wrapper_registry;


PyTypeObject *_PyNs3Int64x64_t_Type;
std::map<void*, PyObject*> *_PyNs3Int64x64_t_wrapper_registry;


PyTypeObject *_PyNs3MpduInfo_Type;
std::map<void*, PyObject*> *_PyNs3MpduInfo_wrapper_registry;


PyTypeObject *_PyNs3SignalNoiseDbm_Type;
std::map<void*, PyObject*> *_PyNs3SignalNoiseDbm_wrapper_registry;


PyTypeObject *_PyNs3Chunk_Type;


PyTypeObject *_PyNs3Header_Type;


PyTypeObject *_PyNs3Icmpv4DestinationUnreachable_Type;


PyTypeObject *_PyNs3Icmpv4Echo_Type;


PyTypeObject *_PyNs3Icmpv4Header_Type;


PyTypeObject *_PyNs3Icmpv4TimeExceeded_Type;


PyTypeObject *_PyNs3Ipv4Header_Type;


PyTypeObject *_PyNs3Ipv6Header_Type;


PyTypeObject *_PyNs3Object_Type;


PyTypeObject *_PyNs3ObjectAggregateIterator_Type;
std::map<void*, PyObject*> *_PyNs3ObjectAggregateIterator_wrapper_registry;


PyTypeObject *_PyNs3PacketFilter_Type;


PyTypeObject *_PyNs3Queue_Type;


PyTypeObject *_PyNs3QueueDisc_Type;


PyTypeObject *_PyNs3QueueDiscClass_Type;


PyTypeObject *_PyNs3RandomVariableStream_Type;


PyTypeObject *_PyNs3SequentialRandomVariable_Type;


PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map;


PyTypeObject *_PyNs3Socket_Type;


PyTypeObject *_PyNs3SocketIpTosTag_Type;


PyTypeObject *_PyNs3SocketIpTtlTag_Type;


PyTypeObject *_PyNs3SocketIpv6HopLimitTag_Type;


PyTypeObject *_PyNs3SocketIpv6TclassTag_Type;


PyTypeObject *_PyNs3SocketPriorityTag_Type;


PyTypeObject *_PyNs3SocketSetDontFragmentTag_Type;


PyTypeObject *_PyNs3Time_Type;
std::map<void*, PyObject*> *_PyNs3Time_wrapper_registry;


PyTypeObject *_PyNs3TraceSourceAccessor_Type;


PyTypeObject *_PyNs3TrafficControlLayer_Type;


PyTypeObject *_PyNs3Trailer_Type;


PyTypeObject *_PyNs3TriangularRandomVariable_Type;


PyTypeObject *_PyNs3UniformRandomVariable_Type;


PyTypeObject *_PyNs3WeibullRandomVariable_Type;


PyTypeObject *_PyNs3WifiInformationElement_Type;


PyTypeObject *_PyNs3WifiMac_Type;


PyTypeObject *_PyNs3WifiMacHeader_Type;


PyTypeObject *_PyNs3WifiPhy_Type;


PyTypeObject *_PyNs3WifiRemoteStationManager_Type;


PyTypeObject *_PyNs3ZetaRandomVariable_Type;


PyTypeObject *_PyNs3ZipfRandomVariable_Type;


PyTypeObject *_PyNs3ArpCache_Type;


PyTypeObject *_PyNs3ArpCacheEntry_Type;
std::map<void*, PyObject*> *_PyNs3ArpCacheEntry_wrapper_registry;


PyTypeObject *_PyNs3AttributeAccessor_Type;


PyTypeObject *_PyNs3AttributeChecker_Type;


PyTypeObject *_PyNs3AttributeValue_Type;


PyTypeObject *_PyNs3BooleanChecker_Type;


PyTypeObject *_PyNs3BooleanValue_Type;


PyTypeObject *_PyNs3CallbackChecker_Type;


PyTypeObject *_PyNs3CallbackImplBase_Type;


PyTypeObject *_PyNs3CallbackValue_Type;


PyTypeObject *_PyNs3Channel_Type;


PyTypeObject *_PyNs3ConstantRandomVariable_Type;


PyTypeObject *_PyNs3DeterministicRandomVariable_Type;


PyTypeObject *_PyNs3DoubleValue_Type;


PyTypeObject *_PyNs3EmpiricalRandomVariable_Type;


PyTypeObject *_PyNs3EmptyAttributeAccessor_Type;


PyTypeObject *_PyNs3EmptyAttributeChecker_Type;


PyTypeObject *_PyNs3EmptyAttributeValue_Type;


PyTypeObject *_PyNs3EnumChecker_Type;


PyTypeObject *_PyNs3EnumValue_Type;


PyTypeObject *_PyNs3ErlangRandomVariable_Type;


PyTypeObject *_PyNs3ErrorRateModel_Type;


PyTypeObject *_PyNs3EventImpl_Type;


PyTypeObject *_PyNs3ExponentialRandomVariable_Type;


PyTypeObject *_PyNs3GammaRandomVariable_Type;


PyTypeObject *_PyNs3HtCapabilities_Type;


PyTypeObject *_PyNs3HtCapabilitiesChecker_Type;


PyTypeObject *_PyNs3HtCapabilitiesValue_Type;


PyTypeObject *_PyNs3IntegerValue_Type;


PyTypeObject *_PyNs3IpL4Protocol_Type;


PyTypeObject *_PyNs3Ipv4_Type;


PyTypeObject *_PyNs3Ipv4AddressChecker_Type;


PyTypeObject *_PyNs3Ipv4AddressValue_Type;


PyTypeObject *_PyNs3Ipv4Interface_Type;


PyTypeObject *_PyNs3Ipv4L3Protocol_Type;


PyTypeObject *_PyNs3Ipv4MaskChecker_Type;


PyTypeObject *_PyNs3Ipv4MaskValue_Type;


PyTypeObject *_PyNs3Ipv4MulticastRoute_Type;


PyTypeObject *_PyNs3Ipv4Route_Type;


PyTypeObject *_PyNs3Ipv4RoutingProtocol_Type;


PyTypeObject *_PyNs3Ipv6AddressChecker_Type;


PyTypeObject *_PyNs3Ipv6AddressValue_Type;


PyTypeObject *_PyNs3Ipv6PrefixChecker_Type;


PyTypeObject *_PyNs3Ipv6PrefixValue_Type;


PyTypeObject *_PyNs3LogNormalRandomVariable_Type;


PyTypeObject *_PyNs3Mac48AddressChecker_Type;


PyTypeObject *_PyNs3Mac48AddressValue_Type;


PyTypeObject *_PyNs3MobilityModel_Type;


PyTypeObject *_PyNs3NetDevice_Type;


PyTypeObject *_PyNs3NetDeviceQueue_Type;


PyTypeObject *_PyNs3NetDeviceQueueInterface_Type;


PyTypeObject *_PyNs3NixVector_Type;


PyTypeObject *_PyNs3Node_Type;


PyTypeObject *_PyNs3NormalRandomVariable_Type;


PyTypeObject *_PyNs3ObjectFactoryChecker_Type;


PyTypeObject *_PyNs3ObjectFactoryValue_Type;


PyTypeObject *_PyNs3OutputStreamWrapper_Type;


PyTypeObject *_PyNs3Packet_Type;


PyTypeObject *_PyNs3ParetoRandomVariable_Type;


PyTypeObject *_PyNs3QueueItem_Type;


PyTypeObject *_PyNs3Ssid_Type;


PyTypeObject *_PyNs3SsidChecker_Type;


PyTypeObject *_PyNs3SsidValue_Type;


PyTypeObject *_PyNs3TcpL4Protocol_Type;


PyTypeObject *_PyNs3TimeValue_Type;


PyTypeObject *_PyNs3TypeIdChecker_Type;


PyTypeObject *_PyNs3TypeIdValue_Type;


PyTypeObject *_PyNs3UdpL4Protocol_Type;


PyTypeObject *_PyNs3UintegerValue_Type;


PyTypeObject *_PyNs3Vector2DChecker_Type;


PyTypeObject *_PyNs3Vector2DValue_Type;


PyTypeObject *_PyNs3Vector3DChecker_Type;


PyTypeObject *_PyNs3Vector3DValue_Type;


PyTypeObject *_PyNs3VhtCapabilities_Type;


PyTypeObject *_PyNs3VhtCapabilitiesChecker_Type;


PyTypeObject *_PyNs3VhtCapabilitiesValue_Type;


PyTypeObject *_PyNs3WifiChannel_Type;


PyTypeObject *_PyNs3WifiModeChecker_Type;


PyTypeObject *_PyNs3WifiModeValue_Type;


PyTypeObject *_PyNs3AddressChecker_Type;


PyTypeObject *_PyNs3AddressValue_Type;


PyTypeObject *_PyNs3Icmpv4L4Protocol_Type;


PyTypeObject *_PyNs3QueueDiscItem_Type;


std::map<void*, PyObject*> PyNs3DsrHelper_wrapper_registry;


static int
_wrap_PyNs3DsrHelper__tp_init__0(PyNs3DsrHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsrHelper();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrHelper__tp_init__1(PyNs3DsrHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsrHelper(*((PyNs3DsrHelper *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrHelper__tp_init(PyNs3DsrHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrHelper_Create(PyNs3DsrHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::dsr::DsrRouting > retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *keywords[] = {"node", NULL};
    PyNs3DsrDsrRouting *py_DsrRouting;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    retval = self->obj->Create(ns3::Ptr< ns3::Node  > (node_ptr));
    if (!(const_cast<ns3::dsr::DsrRouting *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::dsr::DsrRouting *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_DsrRouting = NULL;
    } else {
        py_DsrRouting = (PyNs3DsrDsrRouting *) wrapper_lookup_iter->second;
        Py_INCREF(py_DsrRouting);
    }
    
    if (py_DsrRouting == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::dsr::DsrRouting *> (ns3::PeekPointer (retval)))), &PyNs3DsrDsrRouting_Type);
        py_DsrRouting = PyObject_GC_New(PyNs3DsrDsrRouting, wrapper_type);
        py_DsrRouting->inst_dict = NULL;
    
        py_DsrRouting->inst_dict = NULL;
        py_DsrRouting->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::dsr::DsrRouting *> (ns3::PeekPointer (retval))->Ref();
        py_DsrRouting->obj = const_cast<ns3::dsr::DsrRouting *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_DsrRouting->obj] = (PyObject *) py_DsrRouting;
    }
    py_retval = Py_BuildValue((char *) "N", py_DsrRouting);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrHelper_Set(PyNs3DsrHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3AttributeValue *value;
    const char *keywords[] = {"name", "value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3AttributeValue_Type, &value)) {
        return NULL;
    }
    self->obj->Set(std::string(name, name_len), *((PyNs3AttributeValue *) value)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrHelper__copy__(PyNs3DsrHelper *self)
{

    PyNs3DsrHelper *py_copy;
    py_copy = PyObject_New(PyNs3DsrHelper, &PyNs3DsrHelper_Type);
    py_copy->obj = new ns3::DsrHelper(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrHelper_methods[] = {
    {(char *) "Create", (PyCFunction) _wrap_PyNs3DsrHelper_Create, METH_KEYWORDS|METH_VARARGS, "Create(node)\n\ntype: node: ns3::Ptr< ns3::Node >" },
    {(char *) "Set", (PyCFunction) _wrap_PyNs3DsrHelper_Set, METH_KEYWORDS|METH_VARARGS, "Set(name, value)\n\ntype: name: std::string\ntype: value: ns3::AttributeValue const &" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrHelper__tp_dealloc(PyNs3DsrHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrHelper_wrapper_registry.end()) {
        PyNs3DsrHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::DsrHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrHelper__tp_richcompare (PyNs3DsrHelper *PYBINDGEN_UNUSED(self), PyNs3DsrHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.DsrHelper",            /* tp_name */
    sizeof(PyNs3DsrHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsrHelper(arg0)\nDsrHelper()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsrMainHelper_wrapper_registry;


static int
_wrap_PyNs3DsrMainHelper__tp_init__0(PyNs3DsrMainHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsrMainHelper();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3DsrMainHelper__tp_init__1(PyNs3DsrMainHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsrMainHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrMainHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsrMainHelper(*((PyNs3DsrMainHelper *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3DsrMainHelper__tp_init(PyNs3DsrMainHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsrMainHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsrMainHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsrMainHelper_SetDsrHelper(PyNs3DsrMainHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrHelper *dsrHelper;
    const char *keywords[] = {"dsrHelper", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsrHelper_Type, &dsrHelper)) {
        return NULL;
    }
    self->obj->SetDsrHelper(*((PyNs3DsrHelper *) dsrHelper)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DsrMainHelper_Install(PyNs3DsrMainHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DsrHelper *dsrHelper;
    PyNs3NodeContainer *nodes;
    const char *keywords[] = {"dsrHelper", "nodes", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3DsrHelper_Type, &dsrHelper, &PyNs3NodeContainer_Type, &nodes)) {
        return NULL;
    }
    self->obj->Install(*((PyNs3DsrHelper *) dsrHelper)->obj, *((PyNs3NodeContainer *) nodes)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsrMainHelper__copy__(PyNs3DsrMainHelper *self)
{

    PyNs3DsrMainHelper *py_copy;
    py_copy = PyObject_New(PyNs3DsrMainHelper, &PyNs3DsrMainHelper_Type);
    py_copy->obj = new ns3::DsrMainHelper(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsrMainHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsrMainHelper_methods[] = {
    {(char *) "SetDsrHelper", (PyCFunction) _wrap_PyNs3DsrMainHelper_SetDsrHelper, METH_KEYWORDS|METH_VARARGS, "SetDsrHelper(dsrHelper)\n\ntype: dsrHelper: ns3::DsrHelper &" },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3DsrMainHelper_Install, METH_KEYWORDS|METH_VARARGS, "Install(dsrHelper, nodes)\n\ntype: dsrHelper: ns3::DsrHelper &\ntype: nodes: ns3::NodeContainer" },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsrMainHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsrMainHelper__tp_dealloc(PyNs3DsrMainHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsrMainHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsrMainHelper_wrapper_registry.end()) {
        PyNs3DsrMainHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::DsrMainHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsrMainHelper__tp_richcompare (PyNs3DsrMainHelper *PYBINDGEN_UNUSED(self), PyNs3DsrMainHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsrMainHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsrMainHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.DsrMainHelper",            /* tp_name */
    sizeof(PyNs3DsrMainHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsrMainHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    "DsrMainHelper(arg0)\nDsrMainHelper()",                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsrMainHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsrMainHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsrMainHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- containers --- */



static void
Pyns3__WifiModeListIter__tp_clear(Pyns3__WifiModeListIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pyns3__WifiModeListIter__tp_traverse(Pyns3__WifiModeListIter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pyns3__WifiModeList__tp_dealloc(Pyns3__WifiModeList *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pyns3__WifiModeListIter__tp_dealloc(Pyns3__WifiModeListIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pyns3__WifiModeList__tp_iter(Pyns3__WifiModeList *self)
{
    Pyns3__WifiModeListIter *iter = PyObject_GC_New(Pyns3__WifiModeListIter, &Pyns3__WifiModeListIter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new ns3::WifiModeList::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pyns3__WifiModeListIter__tp_iter(Pyns3__WifiModeListIter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pyns3__WifiModeListIter__tp_iternext(Pyns3__WifiModeListIter *self)
{
    PyObject *py_retval;
    ns3::WifiModeList::iterator iter;
    PyNs3WifiMode *py_WifiMode;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode((*iter));
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}

int _wrap_convert_py2c__ns3__WifiMode(PyObject *value, ns3::WifiMode *address)
{
    PyObject *py_retval;
    PyNs3WifiMode *tmp_WifiMode;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiMode_Type, &tmp_WifiMode)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_WifiMode->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__ns3__WifiModeList(PyObject *arg, ns3::WifiModeList *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pyns3__WifiModeList_Type)) {
        *container = *((Pyns3__WifiModeList*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::WifiMode item;
            if (!_wrap_convert_py2c__ns3__WifiMode(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Ns3__WifiModeList instance, or a list of ns3::WifiMode");
        return 0;
    }
    return 1;
}


static int
_wrap_Pyns3__WifiModeList__tp_init(Pyns3__WifiModeList *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new ns3::WifiModeList;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__ns3__WifiModeList(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pyns3__WifiModeList_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.Ns3__WifiModeList",            /* tp_name */
    sizeof(Pyns3__WifiModeList),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__WifiModeList__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__WifiModeList__tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pyns3__WifiModeList__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pyns3__WifiModeListIter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.Ns3__WifiModeListIter",            /* tp_name */
    sizeof(Pyns3__WifiModeListIter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__WifiModeListIter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pyns3__WifiModeListIter__tp_traverse,     /* tp_traverse */
    (inquiry)Pyns3__WifiModeListIter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__WifiModeListIter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pyns3__WifiModeListIter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__Ipv6Address___gt__Iter__tp_clear(Pystd__vector__lt___ns3__Ipv6Address___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__Ipv6Address___gt__Iter__tp_traverse(Pystd__vector__lt___ns3__Ipv6Address___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__Ipv6Address___gt____tp_dealloc(Pystd__vector__lt___ns3__Ipv6Address___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__Ipv6Address___gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__Ipv6Address___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ipv6Address___gt____tp_iter(Pystd__vector__lt___ns3__Ipv6Address___gt__ *self)
{
    Pystd__vector__lt___ns3__Ipv6Address___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__Ipv6Address___gt__Iter, &Pystd__vector__lt___ns3__Ipv6Address___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::Ipv6Address >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ipv6Address___gt__Iter__tp_iter(Pystd__vector__lt___ns3__Ipv6Address___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__Ipv6Address___gt__Iter__tp_iternext(Pystd__vector__lt___ns3__Ipv6Address___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ipv6Address >::iterator iter;
    PyNs3Ipv6Address *py_Ipv6Address;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_Ipv6Address = PyObject_New(PyNs3Ipv6Address, &PyNs3Ipv6Address_Type);
    py_Ipv6Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv6Address->obj = new ns3::Ipv6Address((*iter));
    PyNs3Ipv6Address_wrapper_registry[(void *) py_Ipv6Address->obj] = (PyObject *) py_Ipv6Address;
    py_retval = Py_BuildValue((char *) "N", py_Ipv6Address);
    return py_retval;
}

int _wrap_convert_py2c__ns3__Ipv6Address(PyObject *value, ns3::Ipv6Address *address)
{
    PyObject *py_retval;
    PyNs3Ipv6Address *tmp_Ipv6Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv6Address_Type, &tmp_Ipv6Address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_Ipv6Address->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__Ipv6Address___gt__(PyObject *arg, std::vector< ns3::Ipv6Address > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__Ipv6Address___gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__Ipv6Address___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::Ipv6Address item;
            if (!_wrap_convert_py2c__ns3__Ipv6Address(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__Ipv6Address___gt__ instance, or a list of ns3::Ipv6Address");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__Ipv6Address___gt____tp_init(Pystd__vector__lt___ns3__Ipv6Address___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::Ipv6Address >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__Ipv6Address___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__Ipv6Address___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.Std__vector__lt___ns3__Ipv6Address___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ipv6Address___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ipv6Address___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ipv6Address___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__Ipv6Address___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__Ipv6Address___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.Std__vector__lt___ns3__Ipv6Address___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ipv6Address___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ipv6Address___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__Ipv6Address___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__Ipv6Address___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ipv6Address___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__Ipv6Address___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter__tp_clear(Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter__tp_traverse(Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt____tp_dealloc(Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt____tp_iter(Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__ *self)
{
    Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter, &Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::Ptr< ns3::QueueDisc > >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter__tp_iter(Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter__tp_iternext(Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ptr< ns3::QueueDisc > >::iterator iter;
    PyNs3QueueDisc *py_QueueDisc;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    if (!(const_cast<ns3::QueueDisc *> (ns3::PeekPointer ((*iter))))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::QueueDisc *> (ns3::PeekPointer ((*iter))))).name() == typeid(PyNs3QueueDisc__PythonHelper).name())
    {
        py_QueueDisc = reinterpret_cast< PyNs3QueueDisc* >(reinterpret_cast< PyNs3QueueDisc__PythonHelper* >(const_cast<ns3::QueueDisc *> (ns3::PeekPointer ((*iter))))->m_pyself);
        py_QueueDisc->obj = const_cast<ns3::QueueDisc *> (ns3::PeekPointer ((*iter)));
        Py_INCREF(py_QueueDisc);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::QueueDisc *> (ns3::PeekPointer ((*iter))));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_QueueDisc = NULL;
        } else {
            py_QueueDisc = (PyNs3QueueDisc *) wrapper_lookup_iter->second;
            Py_INCREF(py_QueueDisc);
        }
    
        if (py_QueueDisc == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::QueueDisc *> (ns3::PeekPointer ((*iter))))), &PyNs3QueueDisc_Type);
            py_QueueDisc = PyObject_GC_New(PyNs3QueueDisc, wrapper_type);
            py_QueueDisc->inst_dict = NULL;
    
            py_QueueDisc->inst_dict = NULL;
            py_QueueDisc->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::QueueDisc *> (ns3::PeekPointer ((*iter)))->Ref();
            py_QueueDisc->obj = const_cast<ns3::QueueDisc *> (ns3::PeekPointer ((*iter)));
            PyNs3ObjectBase_wrapper_registry[(void *) py_QueueDisc->obj] = (PyObject *) py_QueueDisc;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_QueueDisc);
    return py_retval;
}

int _wrap_convert_py2c__ns3__Ptr__lt___ns3__QueueDisc___gt__(PyObject *value, ns3::Ptr< ns3::QueueDisc > *address)
{
    PyObject *py_retval;
    PyNs3QueueDisc *tmp_QueueDisc;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3QueueDisc_Type, &tmp_QueueDisc)) {
        Py_DECREF(py_retval);
        return 0;
    }
    // dangerous!
    *address = ns3::Ptr< ns3::QueueDisc  > (tmp_QueueDisc->obj);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::QueueDisc > > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::Ptr< ns3::QueueDisc > item;
            if (!_wrap_convert_py2c__ns3__Ptr__lt___ns3__QueueDisc___gt__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__ instance, or a list of ns3::Ptr< ns3::QueueDisc >");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt____tp_init(Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::Ptr< ns3::QueueDisc > >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.Std__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.Std__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___unsigned_int___gt__Iter__tp_clear(Pystd__vector__lt___unsigned_int___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___unsigned_int___gt__Iter__tp_traverse(Pystd__vector__lt___unsigned_int___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___unsigned_int___gt____tp_dealloc(Pystd__vector__lt___unsigned_int___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_dealloc(Pystd__vector__lt___unsigned_int___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___unsigned_int___gt____tp_iter(Pystd__vector__lt___unsigned_int___gt__ *self)
{
    Pystd__vector__lt___unsigned_int___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___unsigned_int___gt__Iter, &Pystd__vector__lt___unsigned_int___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< unsigned int >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_iter(Pystd__vector__lt___unsigned_int___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_iternext(Pystd__vector__lt___unsigned_int___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< unsigned int >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong((*iter)));
    return py_retval;
}

int _wrap_convert_py2c__unsigned_int(PyObject *value, unsigned int *address)
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &*address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___unsigned_int___gt__(PyObject *arg, std::vector< unsigned int > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___unsigned_int___gt___Type)) {
        *container = *((Pystd__vector__lt___unsigned_int___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            unsigned int item;
            if (!_wrap_convert_py2c__unsigned_int(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___unsigned_int___gt__ instance, or a list of unsigned int");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___unsigned_int___gt____tp_init(Pystd__vector__lt___unsigned_int___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< unsigned int >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___unsigned_int___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___unsigned_int___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.Std__vector__lt___unsigned_int___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___unsigned_int___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___unsigned_int___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___unsigned_int___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___unsigned_int___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___unsigned_int___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.Std__vector__lt___unsigned_int___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___unsigned_int___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___unsigned_int___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___unsigned_int___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter__tp_clear(Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter__tp_traverse(Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__map__lt___unsigned_int__unsigned_int___gt____tp_dealloc(Pystd__map__lt___unsigned_int__unsigned_int___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter__tp_dealloc(Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__map__lt___unsigned_int__unsigned_int___gt____tp_iter(Pystd__map__lt___unsigned_int__unsigned_int___gt__ *self)
{
    Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter *iter = PyObject_GC_New(Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter, &Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::map< unsigned int, unsigned int >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter__tp_iter(Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter__tp_iternext(Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter *self)
{
    PyObject *py_retval;
    std::map< unsigned int, unsigned int >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "NN", PyLong_FromUnsignedLong(iter->first), PyLong_FromUnsignedLong(iter->second));
    return py_retval;
}

int _wrap_convert_py2c__std__map__lt___unsigned_int__unsigned_int___gt__(PyObject *arg, std::map< unsigned int, unsigned int > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__map__lt___unsigned_int__unsigned_int___gt___Type)) {
        *container = *((Pystd__map__lt___unsigned_int__unsigned_int___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            PyObject *tup = PyList_GET_ITEM(arg, i);
            if (!PyTuple_Check(tup) || PyTuple_Size(tup) != 2) {
                PyErr_SetString(PyExc_TypeError, "items must be tuples with two elements");
                return 0;
            }
            std::pair< unsigned int, unsigned int > item;
            if (!_wrap_convert_py2c__unsigned_int(PyTuple_GET_ITEM(tup, 0), &item.first)) {
                return 0;
            }
            if (!_wrap_convert_py2c__unsigned_int(PyTuple_GET_ITEM(tup, 1), &item.second)) {
                return 0;
            }
            container->insert(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__map__lt___unsigned_int__unsigned_int___gt__ instance, or a list of unsigned int");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__map__lt___unsigned_int__unsigned_int___gt____tp_init(Pystd__map__lt___unsigned_int__unsigned_int___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::map< unsigned int, unsigned int >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__map__lt___unsigned_int__unsigned_int___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__map__lt___unsigned_int__unsigned_int___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.Std__map__lt___unsigned_int__unsigned_int___gt__",            /* tp_name */
    sizeof(Pystd__map__lt___unsigned_int__unsigned_int___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__map__lt___unsigned_int__unsigned_int___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__map__lt___unsigned_int__unsigned_int___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__map__lt___unsigned_int__unsigned_int___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "dsr.Std__map__lt___unsigned_int__unsigned_int___gt__Iter",            /* tp_name */
    sizeof(Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
#if PY_MAJOR_VERSION >= 3
    NULL, 
#else
    (cmpfunc)NULL,           /* tp_compare */
#endif
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- enumerations --- */































































































#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef dsr_moduledef = {
    PyModuleDef_HEAD_INIT,
    "dsr",
    NULL,
    -1,
    dsr_functions,
};
#endif


#if PY_VERSION_HEX >= 0x03000000
    #define MOD_ERROR NULL
    #define MOD_INIT(name) PyObject* PyInit_##name(void)
    #define MOD_RETURN(val) val
#else
    #define MOD_ERROR
    #define MOD_INIT(name) void init##name(void)
    #define MOD_RETURN(val)
#endif
#if defined(__cplusplus)
extern "C"
#endif
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif


MOD_INIT(dsr)
{
    PyObject *m;
    PyObject *submodule;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&dsr_moduledef);
    #else
    m = Py_InitModule3((char *) "dsr", dsr_functions, NULL);
    #endif
    if (m == NULL) {
        return MOD_ERROR;
    }
    PyModule_AddIntConstant(m, (char *) "STD_IOS_IN", std::ios::in);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_OUT", std::ios::out);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_ATE", std::ios::ate);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_APP", std::ios::app);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_TRUNC", std::ios::trunc);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_BINARY", std::ios::binary);
    /* Import the 'ns3::Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AttributeConstructionList' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeConstructionList_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeConstructionList");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3AttributeConstructionList_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3AttributeConstructionList_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3AttributeConstructionList_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AttributeConstructionList::Item' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeConstructionListItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3AttributeConstructionListItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3AttributeConstructionListItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3AttributeConstructionListItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Buffer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Buffer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Buffer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Buffer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Buffer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Buffer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Buffer::Iterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BufferIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Iterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3BufferIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3BufferIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3BufferIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagIterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ByteTagIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagIterator::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagIteratorItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagIteratorItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagIteratorItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagIteratorItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagList' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagList_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ByteTagList");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagList_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagList_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagList_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagList::Iterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagListIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Iterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagListIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagListIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagListIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagList::Iterator::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagListIteratorItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagListIteratorItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagListIteratorItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagListIteratorItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::CallbackBase' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3CallbackBase_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3CallbackBase_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3CallbackBase_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::EventGarbageCollector' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EventGarbageCollector_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EventGarbageCollector");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3EventGarbageCollector_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3EventGarbageCollector_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3EventGarbageCollector_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::EventId' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EventId_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EventId");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3EventId_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3EventId_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3EventId_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Hasher' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Hasher_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Hasher");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Hasher_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Hasher_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Hasher_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Inet6SocketAddress' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Inet6SocketAddress_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Inet6SocketAddress");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Inet6SocketAddress_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Inet6SocketAddress_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Inet6SocketAddress_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::InetSocketAddress' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3InetSocketAddress_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "InetSocketAddress");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3InetSocketAddress_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3InetSocketAddress_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3InetSocketAddress_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::IntToType< 0 >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3IntToType__0_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "IntToType__0");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3IntToType__0_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3IntToType__0_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3IntToType__0_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::IntToType< 1 >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3IntToType__1_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "IntToType__1");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3IntToType__1_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3IntToType__1_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3IntToType__1_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::IntToType< 2 >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3IntToType__2_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "IntToType__2");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3IntToType__2_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3IntToType__2_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3IntToType__2_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::IntToType< 3 >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3IntToType__3_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "IntToType__3");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3IntToType__3_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3IntToType__3_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3IntToType__3_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::IntToType< 4 >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3IntToType__4_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "IntToType__4");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3IntToType__4_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3IntToType__4_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3IntToType__4_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::IntToType< 5 >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3IntToType__5_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "IntToType__5");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3IntToType__5_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3IntToType__5_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3IntToType__5_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::IntToType< 6 >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3IntToType__6_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "IntToType__6");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3IntToType__6_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3IntToType__6_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3IntToType__6_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::InterferenceHelper' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3InterferenceHelper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "InterferenceHelper");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3InterferenceHelper_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3InterferenceHelper_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3InterferenceHelper_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::InterferenceHelper::SnrPer' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3InterferenceHelperSnrPer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SnrPer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3InterferenceHelperSnrPer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3InterferenceHelperSnrPer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3InterferenceHelperSnrPer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv4Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv4Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv4Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv4Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv4InterfaceAddress' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4InterfaceAddress_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4InterfaceAddress");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv4InterfaceAddress_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv4InterfaceAddress_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv4InterfaceAddress_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv4Mask' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4Mask_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4Mask");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv4Mask_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv4Mask_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv4Mask_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv6Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv6Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv6Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv6Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv6Prefix' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6Prefix_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6Prefix");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv6Prefix_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv6Prefix_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv6Prefix_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Mac48Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Mac48Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Mac48Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Mac48Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Mac48Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Mac48Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::NodeContainer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NodeContainer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NodeContainer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3NodeContainer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3NodeContainer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3NodeContainer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::NonCopyable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NonCopyable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NonCopyable");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3NonCopyable_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3NonCopyable_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3NonCopyable_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ObjectBase' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectBase_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectBase_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectBase_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ObjectDeleter' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectDeleter_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectDeleter");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectDeleter_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectDeleter_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectDeleter_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ObjectFactory' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectFactory_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectFactory");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectFactory_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectFactory_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectFactory_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketMetadata' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketMetadata_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketMetadata");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketMetadata_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketMetadata_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketMetadata_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketMetadata::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketMetadataItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketMetadataItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketMetadataItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketMetadataItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketMetadata::ItemIterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketMetadataItemIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ItemIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketMetadataItemIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketMetadataItemIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketMetadataItemIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagIterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketTagIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagIterator::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagIteratorItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagIteratorItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagIteratorItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagIteratorItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagList' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagList_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketTagList");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagList_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagList_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagList_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagList::TagData' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagListTagData_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TagData");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagListTagData_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagListTagData_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagListTagData_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Simulator' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Simulator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Simulator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Simulator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Simulator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Simulator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SystemWallClockMs' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SystemWallClockMs_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SystemWallClockMs");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SystemWallClockMs_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3SystemWallClockMs_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3SystemWallClockMs_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Tag' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Tag_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Tag");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TagBuffer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TagBuffer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TagBuffer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TagBuffer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TagBuffer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TagBuffer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TimeWithUnit' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TimeWithUnit_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TimeWithUnit");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TimeWithUnit_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TimeWithUnit_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TimeWithUnit_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Timer' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Timer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Timer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Timer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Timer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Timer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TimerImpl' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TimerImpl_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TimerImpl");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TimerImpl_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TimerImpl_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TimerImpl_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TracedValue< unsigned int >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TracedValue__Unsigned_int_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TracedValue__Unsigned_int");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TracedValue__Unsigned_int_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TracedValue__Unsigned_int_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TracedValue__Unsigned_int_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TypeId' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeId_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TypeId");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TypeId_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TypeId_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TypeId_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TypeId::AttributeInformation' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdAttributeInformation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeInformation");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TypeIdAttributeInformation_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TypeIdAttributeInformation_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TypeIdAttributeInformation_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TypeId::TraceSourceInformation' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdTraceSourceInformation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TraceSourceInformation");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TypeIdTraceSourceInformation_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TypeIdTraceSourceInformation_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TypeIdTraceSourceInformation_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Vector2D' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector2D_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector2D");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Vector2D_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Vector2D_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Vector2D_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Vector3D' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector3D_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector3D");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Vector3D_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Vector3D_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Vector3D_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiMode' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiMode_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiMode");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiMode_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiMode_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiMode_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiModeFactory' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiModeFactory_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiModeFactory");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiModeFactory_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiModeFactory_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiModeFactory_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiPhyListener' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiPhyListener_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiPhyListener");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiPhyListener_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiPhyListener_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiPhyListener_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiRemoteStation' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiRemoteStation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiRemoteStation");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiRemoteStation_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiRemoteStation_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiRemoteStation_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiRemoteStationInfo' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiRemoteStationInfo_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiRemoteStationInfo");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiRemoteStationInfo_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiRemoteStationInfo_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiRemoteStationInfo_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiRemoteStationState' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiRemoteStationState_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiRemoteStationState");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiRemoteStationState_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiRemoteStationState_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiRemoteStationState_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::WifiTxVector' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiTxVector_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiTxVector");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3WifiTxVector_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3WifiTxVector_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3WifiTxVector_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::empty' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Empty_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Empty_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Empty_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::int64x64_t' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Int64x64_t_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "int64x64_t");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Int64x64_t_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Int64x64_t_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Int64x64_t_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::mpduInfo' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3MpduInfo_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "mpduInfo");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3MpduInfo_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3MpduInfo_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3MpduInfo_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::signalNoiseDbm' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SignalNoiseDbm_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "signalNoiseDbm");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SignalNoiseDbm_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3SignalNoiseDbm_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3SignalNoiseDbm_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Chunk' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Chunk_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Chunk");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Header' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Header_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Header");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Icmpv4DestinationUnreachable' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Icmpv4DestinationUnreachable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Icmpv4DestinationUnreachable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Icmpv4Echo' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Icmpv4Echo_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Icmpv4Echo");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Icmpv4Header' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Icmpv4Header_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Icmpv4Header");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Icmpv4TimeExceeded' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Icmpv4TimeExceeded_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Icmpv4TimeExceeded");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4Header' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4Header_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4Header");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6Header' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6Header_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6Header");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Object' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Object_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Object");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Object::AggregateIterator' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectAggregateIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AggregateIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectAggregateIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectAggregateIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectAggregateIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketFilter' class from module 'ns.traffic_control' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.traffic_control");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketFilter_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketFilter");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Queue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Queue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Queue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::QueueDisc' class from module 'ns.traffic_control' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.traffic_control");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3QueueDisc_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "QueueDisc");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::QueueDiscClass' class from module 'ns.traffic_control' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.traffic_control");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3QueueDiscClass_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "QueueDiscClass");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::RandomVariableStream' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3RandomVariableStream_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "RandomVariableStream");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SequentialRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SequentialRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SequentialRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::InterferenceHelper::Event, ns3::empty, ns3::DefaultDeleter<ns3::InterferenceHelper::Event> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::InterferenceHelper::Event, ns3::empty, ns3::DefaultDeleter<ns3::InterferenceHelper::Event> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::NetDeviceQueue, ns3::empty, ns3::DefaultDeleter<ns3::NetDeviceQueue> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3NetDeviceQueue_Ns3Empty_Ns3DefaultDeleter__lt__ns3NetDeviceQueue__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::QueueItem, ns3::empty, ns3::DefaultDeleter<ns3::QueueItem> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3QueueItem_Ns3Empty_Ns3DefaultDeleter__lt__ns3QueueItem__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Socket' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Socket_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Socket");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SocketIpTosTag' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SocketIpTosTag_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SocketIpTosTag");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SocketIpTtlTag' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SocketIpTtlTag_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SocketIpTtlTag");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SocketIpv6HopLimitTag' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SocketIpv6HopLimitTag_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SocketIpv6HopLimitTag");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SocketIpv6TclassTag' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SocketIpv6TclassTag_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SocketIpv6TclassTag");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SocketPriorityTag' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SocketPriorityTag_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SocketPriorityTag");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SocketSetDontFragmentTag' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SocketSetDontFragmentTag_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SocketSetDontFragmentTag");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Time' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Time_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Time");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Time_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Time_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Time_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TraceSourceAccessor' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TraceSourceAccessor_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TraceSourceAccessor");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TrafficControlLayer' class from module 'ns.traffic_control' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.traffic_control");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TrafficControlLayer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TrafficControlLayer");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Trailer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Trailer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Trailer");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TriangularRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TriangularRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TriangularRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::UniformRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3UniformRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "UniformRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WeibullRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WeibullRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WeibullRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiInformationElement' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiInformationElement_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiInformationElement");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiMac' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiMac_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiMac");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiMacHeader' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiMacHeader_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiMacHeader");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiPhy' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiPhy_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiPhy");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiRemoteStationManager' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiRemoteStationManager_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiRemoteStationManager");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ZetaRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ZetaRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ZetaRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ZipfRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ZipfRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ZipfRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ArpCache' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ArpCache_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ArpCache");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ArpCache::Entry' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ArpCacheEntry_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Entry");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ArpCacheEntry_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ArpCacheEntry_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ArpCacheEntry_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AttributeAccessor' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeAccessor_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeAccessor");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AttributeChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AttributeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::BooleanChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BooleanChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "BooleanChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::BooleanValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BooleanValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "BooleanValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImplBase' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImplBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImplBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Channel' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Channel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Channel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ConstantRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ConstantRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ConstantRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::DeterministicRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DeterministicRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DeterministicRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::DoubleValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DoubleValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DoubleValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmpiricalRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmpiricalRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmpiricalRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmptyAttributeAccessor' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmptyAttributeAccessor_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmptyAttributeAccessor");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmptyAttributeChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmptyAttributeChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmptyAttributeChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmptyAttributeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmptyAttributeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmptyAttributeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EnumChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EnumChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EnumChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EnumValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EnumValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EnumValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ErlangRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ErlangRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ErlangRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ErrorRateModel' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ErrorRateModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ErrorRateModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EventImpl' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EventImpl_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EventImpl");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ExponentialRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ExponentialRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ExponentialRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::GammaRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3GammaRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "GammaRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::HtCapabilities' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3HtCapabilities_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "HtCapabilities");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::HtCapabilitiesChecker' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3HtCapabilitiesChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "HtCapabilitiesChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::HtCapabilitiesValue' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3HtCapabilitiesValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "HtCapabilitiesValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::IntegerValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3IntegerValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "IntegerValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::IpL4Protocol' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3IpL4Protocol_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "IpL4Protocol");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4Interface' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4Interface_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4Interface");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4L3Protocol' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4L3Protocol_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4L3Protocol");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4MaskChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4MaskChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4MaskChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4MaskValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4MaskValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4MaskValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4MulticastRoute' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4MulticastRoute_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4MulticastRoute");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4Route' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4Route_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4Route");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4RoutingProtocol' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4RoutingProtocol_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4RoutingProtocol");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6PrefixChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6PrefixChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6PrefixChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6PrefixValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6PrefixValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6PrefixValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::LogNormalRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3LogNormalRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "LogNormalRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Mac48AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Mac48AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Mac48AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Mac48AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Mac48AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Mac48AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::MobilityModel' class from module 'ns.mobility' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.mobility");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3MobilityModel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "MobilityModel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NetDevice' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NetDevice_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NetDevice");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NetDeviceQueue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NetDeviceQueue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NetDeviceQueue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NetDeviceQueueInterface' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NetDeviceQueueInterface_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NetDeviceQueueInterface");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NixVector' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NixVector_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NixVector");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Node' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Node_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Node");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NormalRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NormalRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NormalRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ObjectFactoryChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectFactoryChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectFactoryChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ObjectFactoryValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectFactoryValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectFactoryValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::OutputStreamWrapper' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3OutputStreamWrapper_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "OutputStreamWrapper");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Packet' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Packet_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Packet");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ParetoRandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ParetoRandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ParetoRandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::QueueItem' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3QueueItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "QueueItem");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ssid' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ssid_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ssid");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SsidChecker' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SsidChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SsidChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SsidValue' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SsidValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SsidValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TcpL4Protocol' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TcpL4Protocol_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TcpL4Protocol");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TimeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TimeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TimeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TypeIdChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TypeIdChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TypeIdValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TypeIdValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::UdpL4Protocol' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3UdpL4Protocol_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "UdpL4Protocol");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::UintegerValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3UintegerValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "UintegerValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Vector2DChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector2DChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector2DChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Vector2DValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector2DValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector2DValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Vector3DChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector3DChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector3DChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Vector3DValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Vector3DValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Vector3DValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::VhtCapabilities' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3VhtCapabilities_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "VhtCapabilities");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::VhtCapabilitiesChecker' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3VhtCapabilitiesChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "VhtCapabilitiesChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::VhtCapabilitiesValue' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3VhtCapabilitiesValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "VhtCapabilitiesValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiChannel' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiChannel_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiChannel");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiModeChecker' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiModeChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiModeChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WifiModeValue' class from module 'ns.wifi' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.wifi");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WifiModeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WifiModeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Icmpv4L4Protocol' class from module 'ns.internet' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.internet");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Icmpv4L4Protocol_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Icmpv4L4Protocol");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::QueueDiscItem' class from module 'ns.traffic_control' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.traffic_control");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3QueueDiscItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "QueueDiscItem");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    PyModule_AddObject(m, (char *) "_PyNs3DsrHelper_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrHelper_wrapper_registry, NULL));
    /* Register the 'ns3::DsrHelper' class */
    if (PyType_Ready(&PyNs3DsrHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DsrHelper", (PyObject *) &PyNs3DsrHelper_Type);
    PyModule_AddObject(m, (char *) "_PyNs3DsrMainHelper_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3DsrMainHelper_wrapper_registry, NULL));
    /* Register the 'ns3::DsrMainHelper' class */
    if (PyType_Ready(&PyNs3DsrMainHelper_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "DsrMainHelper", (PyObject *) &PyNs3DsrMainHelper_Type);
    /* Register the 'ns3::WifiModeList' class */
    if (PyType_Ready(&Pyns3__WifiModeList_Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pyns3__WifiModeListIter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Ns3__WifiModeList", (PyObject *) &Pyns3__WifiModeList_Type);
    PyModule_AddObject(m, (char *) "Ns3__WifiModeListIter", (PyObject *) &Pyns3__WifiModeListIter_Type);
    /* Register the 'std::vector< ns3::Ipv6Address >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ipv6Address___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ipv6Address___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ipv6Address___gt__", (PyObject *) &Pystd__vector__lt___ns3__Ipv6Address___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ipv6Address___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__Ipv6Address___gt__Iter_Type);
    /* Register the 'std::vector< ns3::Ptr< ns3::QueueDisc > >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__QueueDisc___gt_____gt__Iter_Type);
    /* Register the 'std::vector< unsigned int >' class */
    if (PyType_Ready(&Pystd__vector__lt___unsigned_int___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__vector__lt___unsigned_int___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___unsigned_int___gt__", (PyObject *) &Pystd__vector__lt___unsigned_int___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___unsigned_int___gt__Iter", (PyObject *) &Pystd__vector__lt___unsigned_int___gt__Iter_Type);
    /* Register the 'std::map< unsigned int, unsigned int >' class */
    if (PyType_Ready(&Pystd__map__lt___unsigned_int__unsigned_int___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__map__lt___unsigned_int__unsigned_int___gt__", (PyObject *) &Pystd__map__lt___unsigned_int__unsigned_int___gt___Type);
    PyModule_AddObject(m, (char *) "Std__map__lt___unsigned_int__unsigned_int___gt__Iter", (PyObject *) &Pystd__map__lt___unsigned_int__unsigned_int___gt__Iter_Type);
    PyModule_AddObject(m, (char *) "Vector", (PyObject *) &PyNs3Vector3D_Type);
    PyModule_AddObject(m, (char *) "VectorValue", (PyObject *) &PyNs3Vector3DValue_Type);
    PyModule_AddObject(m, (char *) "VectorChecker", (PyObject *) &PyNs3Vector3DChecker_Type);
    submodule = initdsr_FatalImpl();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "FatalImpl", submodule);
    submodule = initdsr_Hash();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "Hash", submodule);
    submodule = initdsr_TracedValueCallback();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "TracedValueCallback", submodule);
    submodule = initdsr_dsr();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "dsr", submodule);
    submodule = initdsr_internal();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "internal", submodule);
    return MOD_RETURN(m);
}
